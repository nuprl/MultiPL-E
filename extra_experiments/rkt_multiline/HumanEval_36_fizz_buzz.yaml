name: HumanEval_36_fizz_buzz
language: rkt
prompt: "#lang racket\n\n#| Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n>>> (fizz_buzz 50)\n0\n>>> (fizz_buzz\
  \ 78)\n2\n>>> (fizz_buzz 79)\n3|#\n(define (fizz_buzz n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n\
  \    (check-equal? (candidate 50) 0)\n    (check-equal? (candidate 78) 2)\n    (check-equal?\
  \ (candidate 79) 3)\n    (check-equal? (candidate 100) 3)\n    (check-equal? (candidate\
  \ 200) 6)\n    (check-equal? (candidate 4000) 192)\n    (check-equal? (candidate\
  \ 10000) 639)\n    (check-equal? (candidate 100000) 8026)\n))\n\n(test-humaneval)"
completions: ["  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (cond\n    [(= n 0) 0]\n    [(or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (+ (count-7s n) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10)\
    \ 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n      [(or (=\
    \ (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (cond [(= n 0) 0]\n        [(or (zero? (modulo n 11)) (zero? (modulo\
    \ n 13)))\n         (+ (if (zero? (modulo n 10)) 1 0)\n            (fizz_buzz\
    \ (- n 1)))]\n        [else (fizz_buzz (- n 1))]))\n", "  (define (count-7s n)\n\
    \    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (let loop ((i 1) (count 0))\n \
    \   (cond ((&gt; i n) count)\n          ((or (zero? (modulo i 11)) (zero? (modulo\
    \ i 13)))\n           (loop (+ i 1) (if (zero? (modulo i 10)) (+ count 1) count)))\n\
    \          (else (loop (+ i 1) count)))))\n</code>\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n    \
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (quotient n 10) (+ count (if (= (modulo n 10) 7) 1 0)))]\n      [else (fizz_buzz_helper\
    \ (quotient n 10) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n    \
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1)\
    \ (+ acc (count_7 n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n \
    \ (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(= 7 (remainder n 10)) (+ 1 (count-7s (quotient n 10)))]\n   \
    \   [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper n count)\n\
    \    (cond\n      [(> n 0) (cond\n                 [(or (= 0 (remainder n 11))\
    \ (= 0 (remainder n 13)))\n                  (fizz-buzz-helper (- n 1) (+ count\
    \ (count-7s n)))]\n                 [else (fizz-buzz-helper (- n 1) count)])]\n\
    \      [else count]))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ count (count-7s n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (count-7s n)\n    (cond [(= n 0) 0]\n          [(= (remainder n 10) 7)\
    \ (+ 1 (count-7s (quotient n 10)))]\n          [else (count-7s (quotient n 10))]))\n\
    \  (define (count-7s-in-range n)\n    (cond [(= n 0) 0]\n          [(or (= (remainder\
    \ n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n\
    \          [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range n))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n \
    \ (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\
    \ [(= n 0) count]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n \
    \          (fizz_buzz_helper (- n 1) (+ count (count-7s n)))]\n          [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(and (or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13))) (zero? (modulo n 7)))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc 1))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond [(= n 0) count]\n\
    \          [(and (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n          \
    \      (zero? (modulo n 7)))\n           (fizz_buzz_helper (- n 1) (+ count 1))]\n\
    \          [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n \
    \   [(= n 1) 0]\n    [(= n 2) 0]\n    [(= n 3) 0]\n    [(= n 4) 0]\n    [(= n\
    \ 5) 0]\n    [(= n 6) 0]\n    [(= n 7) 0]\n    [(= n 8) 0]\n    [(= n 9) 0]\n\
    \    [(= n 10) 0]\n    [(= n 11) 0]\n    [(= n 12) 0]\n    [(= n 13) 0]\n    [(=\
    \ n 14) 0]\n    [(= n 15) 0]\n    [(= n 16) 0]\n    [(= n 17) 0]\n    [(= n 18)\
    \ 0]\n    [(= n 19) 0]\n    [(= n 20) 0]\n    [(= n 21) 0]\n    [(= n 22) 0]\n\
    \    [(= n 23) 0]\n    [(= n 24) 0]\n    [(= n 25) 0]\n    [(= n 26) 0]\n    [(=\
    \ n 27) 0]\n    [(= n 28) 0]\n    [(= n 29) 0]\n    [(= n 30) 0]\n    [(= n 31)\
    \ 0]\n    [(= n 32) 0]\n    [(= n 33) 0]\n    [(= n 34) 0]\n    [(= n 35) 0]\n\
    \    [(= n 36) 0]\n    [(= n 37) 0]\n    [(= n 38) 0]\n    [(= n 39) 0]\n    [(=\
    \ n 40) 0]\n    [(= n 41) 0]\n    [(= n 42) 0]\n    [(= n 43) 0]\n    [(= n 44)\
    \ 0]\n    [(= n 45) 0]\n    [(= n 46) 0]\n    [(= n 47) 0]\n    [(= n 48) 0]\n\
    \    [(= n 49) 0]\n    [(= n 50) 0]\n    [(= n 51) 0]\n    [(= n 52) 0]\n    [(=\
    \ n 53) 0]\n    [(= n 54) 0]\n    [(= n 55) 0]\n    [(=", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (let loop ((i 1) (count 0))\n    (cond ((= i n) count)\n        \
    \  ((or (= (modulo i 11) 0) (= (modulo i 13) 0))\n           (loop (+ i 1) (+\
    \ count (count-7 (number->string i)))))\n          (else (loop (+ i 1) count)))))\n",
  "  (define (count-sevens n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n      [else (count-sevens (quotient\
    \ n 10))]))\n  (define (fizz-buzz-helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (fizz-buzz-helper (-\
    \ n 1) (+ acc (count-sevens n)))]\n      [else (fizz-buzz-helper (- n 1) acc)]))\n\
    \  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_iter i count)\n    (cond\n\
    \      [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n\
    \       (fizz_buzz_iter (+ i 1) (+ count (count-7 (number->string i))))]\n   \
    \   [else (fizz_buzz_iter (+ i 1) count)]))\n  (fizz_buzz_iter 1 0))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (count-7s\
    \ (quotient n 10)) (count-7s (modulo n 10)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or\
    \ (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper (sub1\
    \ n) (if (zero? (modulo n 7)) (add1 count) count))]\n      [else (fizz_buzz_helper\
    \ (sub1 n) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n    \
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ count (count_sevens n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (let loop ((i 1) (count 0))\n    (cond\n   \
    \   [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n   \
    \    (loop (+ i 1)\n             (if (string-contains? (number->string i) \"7\"\
    )\n                 (+ count 1)\n                 count))]\n      [else (loop\
    \ (+ i 1) count)])))\n```\n\n## Problem 3\n\n```racket\n#lang racket\n", "  (let\
    \ loop ((i 0) (count 0))\n    (cond ((>= i n) count)\n          ((or (zero? (modulo\
    \ i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1) (if (zero? (modulo i\
    \ 10)) (+ count 1) count)))\n          (else (loop (+ i 1) count)))))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n     \
    \     [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz-buzz-helper n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\
    \ (fizz-buzz-helper (- n 1) (+ count (count-7s n)))]\n      [else (fizz-buzz-helper\
    \ (- n 1) count)]))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n   \
    \       [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (count-7s n)\n    (if (zero? n)\n        0\n        (+ (if (equal? (modulo\
    \ n 10) 7) 1 0)\n           (count-7s (quotient n 10)))))\n  (define (count-7s-in-range\
    \ n)\n    (if (zero? n)\n        0\n        (+ (if (or (zero? (modulo n 11))\n\
    \                  (zero? (modulo n 13)))\n               (count-7s n)\n     \
    \          0)\n           (count-7s-in-range (- n 1)))))\n  (count-7s-in-range\
    \ n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(equal? (modulo n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n \
    \     [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper n)\n  \
    \  (cond\n      [(zero? n) 0]\n      [(or (zero? (modulo n 11)) (zero? (modulo\
    \ n 13))) (+ (count-7s n) (fizz-buzz-helper (- n 1)))]\n      [else (fizz-buzz-helper\
    \ (- n 1))]))\n  (fizz-buzz-helper n))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (if (&lt; n 1)\n        acc\n        (if (or (zero? (modulo n 11)) (zero?\
    \ (modulo n 13)))\n            (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))\n\
    \            (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (quotient n 10) (+ acc (count-digits n 7)))]\n      [else (fizz_buzz_helper\
    \ (quotient n 10) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (if (zero? n)\n  \
    \    0\n      (if (or (zero? (modulo n 11))\n              (zero? (modulo n 13)))\n\
    \          (+ (if (zero? (modulo n 7)) 1 0)\n             (fizz_buzz (- n 1)))\n\
    \          (fizz_buzz (- n 1)))))\n", "  (define (fizz_buzz_helper n acc)\n  \
    \  (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n\
    \           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (count-7s n)\n    (cond [(zero? n) 0]\n          [(= 7 (remainder n 10)) (+\
    \ 1 (count-7s (quotient n 10)))]\n          [else (count-7s (quotient n 10))]))\n\
    \  (define (count-7s-in-range n)\n    (cond [(zero? n) 0]\n          [(or (= 0\
    \ (remainder n 11)) (= 0 (remainder n 13))) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n          [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop ((i 1) (count 0))\n\
    \    (cond ((= i n) count)\n          ((or (= (modulo i 11) 0) (= (modulo i 13)\
    \ 0))\n           (loop (+ i 1) (+ count (count-7 i))))\n          (else (loop\
    \ (+ i 1) count)))))\n", "  (define (count-7s n)\n    (cond\n      [(zero? n)\
    \ 0]\n      [(= (remainder n 10) 7) 1]\n      [else 0]))\n  (define (fizz-buzz-helper\
    \ n count)\n    (cond\n      [(zero? n) count]\n      [(or (= (remainder n 11)\
    \ 0) (= (remainder n 13) 0)) (fizz-buzz-helper (- n 1) (+ count (count-7s n)))]\n\
    \      [else (fizz-buzz-helper (- n 1) count)]))\n  (fizz-buzz-helper n 0))\n",
  "  (define (count-7s n)\n    (cond [(= n 0) 0]\n          [(= (remainder n 10) 7)\
    \ (+ 1 (count-7s (quotient n 10)))]\n          [else (count-7s (quotient n 10))]))\n\
    \  (define (count-7s-in-range n)\n    (cond [(= n 0) 0]\n          [(or (= (remainder\
    \ n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n\
    \          [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range n))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ count (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond [(= n 0) 0]\n          [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n          [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond [(= n 0) 0]\n        \
    \  [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n          [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(< n 1) count]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13))) (fizz_buzz_helper (-\
    \ n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \       (fizz_buzz_helper (- n 1) (+ count (count_7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop ((i 1) (count\
    \ 0))\n    (cond\n      [(> i n) count]\n      [(or (= (modulo i 11) 7) (= (modulo\
    \ i 13) 7)) (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ (count-digits\
    \ 7 n) acc))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n\
    \ 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n   \
    \   [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [(or (zero? (remainder n 11)) (zero? (remainder\
    \ n 13))) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (count-7s n)\n    (if (zero?\
    \ n)\n        0\n        (+ (if (equal? (modulo n 10) 7) 1 0)\n           (count-7s\
    \ (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n    (if (zero? n)\n\
    \        acc\n        (fizz-buzz-helper (- n 1)\n                          (+\
    \ acc\n                             (if (or (zero? (modulo n 11))\n          \
    \                           (zero? (modulo n 13)))\n                         \
    \        (count-7s n)\n                                 0)))))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond [(= n 0) 0]\n\
    \          [(= (remainder n 10) 7) 1]\n          [else 0]))\n  (define (count-7s-in-numbers\
    \ n)\n    (cond [(= n 0) 0]\n          [(or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (+ (count-7s n) (count-7s-in-numbers (- n 1)))]\n          [else (count-7s-in-numbers\
    \ (- n 1))]))\n  (count-7s-in-numbers n))\n", "  (let loop ((i 0) (count 0))\n\
    \    (cond ((= i n) count)\n          ((or (zero? (modulo i 11)) (zero? (modulo\
    \ i 13)))\n           (loop (+ i 1) (+ count (count-7 (number->string i)))))\n\
    \          (else (loop (+ i 1) count)))))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(= (modulo n 11) 0) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [(= (modulo n 13) 0) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\
    \ [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n   \
    \        (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ count\
    \ (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n   \
    \       [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ (count-7s n) acc))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (if (zero? n)\n  \
    \      0\n        (+ (if (equal? (modulo n 10) 7) 1 0)\n           (count-7s (quotient\
    \ n 10)))))\n  (define (count-7s-in-range n)\n    (if (zero? n)\n        0\n \
    \       (+ (if (or (equal? (modulo n 11) 0)\n                  (equal? (modulo\
    \ n 13) 0))\n               (count-7s n)\n               0)\n           (count-7s-in-range\
    \ (- n 1)))))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (zero? (remainder n 11)) (zero?\
    \ (remainder n 13))) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else\
    \ (count-7s-in-range (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (count-7s\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s\
    \ (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (remainder n 11) 0)\
    \ (= (remainder n 13) 0)) (helper (- n 1) (+ count (count-7s n)))]\n      [else\
    \ (helper (- n 1) count)]))\n  (helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n    \
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (count-7s n)\n    (cond [(= n 0) 0]\n          [(= (remainder n 10) 7)\
    \ 1]\n          [else 0]))\n  (define (count-7s-in-multiples-of-11-or-13 n)\n\
    \    (cond [(< n 11) 0]\n          [(< n 13) (count-7s n)]\n          [(< n 14)\
    \ (count-7s n)]\n          [else (+ (count-7s-in-multiples-of-11-or-13 (- n 11))\n\
    \                   (count-7s-in-multiples-of-11-or-13 (- n 13))\n           \
    \        (count-7s-in-multiples-of-11-or-13 (- n 14)))]))\n  (count-7s-in-multiples-of-11-or-13\
    \ n))\n", "  (let loop ((i 0) (count 0))\n    (cond\n      [(= i n) count]\n \
    \     [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n       (loop (+ i 1)\
    \ (if (zero? (modulo i 10)) (+ count 1) count))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (fizz_buzz_iter n count)\n    (cond ((= n 0) count)\n          ((= (remainder\
    \ n 11) 0) (fizz_buzz_iter (- n 1) (+ count (count_7 n))))\n          ((= (remainder\
    \ n 13) 0) (fizz_buzz_iter (- n 1) (+ count (count_7 n))))\n          (else (fizz_buzz_iter\
    \ (- n 1) count))))\n  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz-buzz-helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz-buzz-helper\
    \ (- n 1) (+ (if (zero? (modulo n 7)) 1 0) acc))]\n      [else (fizz-buzz-helper\
    \ (- n 1) acc)]))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+\
    \ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n      [(or (=\
    \ (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (divisible? x y)\n    (= (modulo x y) 0))\n  (define (count-7s\
    \ x)\n    (cond\n      [(= x 0) 0]\n      [(= (modulo x 10) 7) (+ 1 (count-7s\
    \ (quotient x 10)))]\n      [else (count-7s (quotient x 10))]))\n  (define (loop\
    \ x)\n    (cond\n      [(= x n) 0]\n      [(or (divisible? x 11) (divisible? x\
    \ 13)) (+ (count-7s x) (loop (+ x 1)))]\n      [else (loop (+ x 1))]))\n  (loop\
    \ 0))\n", "  (let loop ((i 0) (count 0))\n    (cond ((>= i n) count)\n       \
    \   ((or (zero? (modulo i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1)\
    \ (+ count (count-7 i))))\n          (else (loop (+ i 1) count)))))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count_7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count_7s (quotient n 10)))]\n      [else (count_7s (quotient\
    \ n 10))]))\n  (define (count_7s_in_range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count_7s n) (count_7s_in_range\
    \ (- n 1)))]\n      [else (count_7s_in_range (- n 1))]))\n  (count_7s_in_range\
    \ n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n     \
    \     [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count_sevens n)))]\n          [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n          [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n          ((and (or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13)))\n                (zero? (modulo n 7)))\n\
    \           (fizz_buzz_helper (- n 1) (+ acc 1)))\n          (else (fizz_buzz_helper\
    \ (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond [(= n 0) count]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (quotient n 10) (+ count (if (= (modulo\
    \ n 10) 7) 1 0)))]\n          [else (fizz_buzz_helper (quotient n 10) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(= (modulo n 11) 0) (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7s n)))]\n      [(= (modulo n 13) 0) (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n     \
    \     ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count_7 n))))\n          (else (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\
    \ [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n   \
    \        (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (+ (count-7s n) (fizz-buzz-helper (- n 1)))]\n      [else (fizz-buzz-helper\
    \ (- n 1))]))\n  (fizz-buzz-helper n))\n", "  (define (count-7s n)\n    (if (zero?\
    \ n)\n        0\n        (+ (if (equal? (modulo n 10) 7) 1 0)\n           (count-7s\
    \ (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n    (if (zero? n)\n\
    \        acc\n        (fizz-buzz-helper (- n 1)\n                          (+\
    \ acc\n                             (if (or (zero? (modulo n 11))\n          \
    \                           (zero? (modulo n 13)))\n                         \
    \        (count-7s n)\n                                 0)))))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n\n```\n\n## Problem 2\n\n```racket\n#lang racket\n", "  (let loop ((i 0)\
    \ (count 0))\n    (cond\n      [(= i n) count]\n      [(or (= (modulo i 11) 0)\
    \ (= (modulo i 13) 0))\n       (loop (+ i 1)\n             (if (string-contains?\
    \ (number->string i) \"7\")\n                 (+ count 1)\n                 count))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ (count-digits n 7) acc))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop ((i 1) (count 0))\n\
    \    (cond ((> i n) count)\n          ((or (zero? (modulo i 11)) (zero? (modulo\
    \ i 13)))\n           (loop (+ i 1) (+ count (count-7 (number->string i)))))\n\
    \          (else (loop (+ i 1) count)))))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count-7 (number->string n))))]\n\
    \      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n",
  "  (let loop ((i 1) (count 0))\n    (cond ((&gt; i n) count)\n          ((or (zero?\
    \ (modulo i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1) (+ count (count-7s\
    \ i))))\n          (else (loop (+ i 1) count)))))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ (count-7s n) acc))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter count)\n\
    \    (cond\n      [(= count n) 0]\n      [(or (zero? (modulo count 11)) (zero?\
    \ (modulo count 13)))\n       (+ (fizz_buzz_iter (+ count 1))\n          (if (zero?\
    \ (modulo count 10)) 1 0))]\n      [else (fizz_buzz_iter (+ count 1))]))\n  (fizz_buzz_iter\
    \ 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ count (count_7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\
    \ [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n   \
    \        (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (sub1 n) (+ acc (count-7s n)))]\n  \
    \        [else (fizz_buzz_helper (sub1 n) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_iter (- n 1) (+ acc\
    \ (count-7 n)))]\n      [else (fizz_buzz_iter (- n 1) acc)]))\n  (fizz_buzz_iter\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (let loop ((i 0) (count 0))\n    (cond ((= i n) count)\n      \
    \    ((or (zero? (modulo i 11)) (zero? (modulo i 13)))\n           (let ((s (number->string\
    \ i)))\n             (cond ((string-contains s #\\7)\n                    (loop\
    \ (+ i 1) (+ count 1)))\n                   (else (loop (+ i 1) count)))))\n \
    \         (else (loop (+ i 1) count)))))\n", "  (define (count-7s n)\n    (if\
    \ (zero? n)\n        0\n        (+ (if (equal? (modulo n 10) 7) 1 0)\n       \
    \    (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n    (if\
    \ (zero? n)\n        acc\n        (fizz-buzz-helper (- n 1)\n                \
    \          (+ acc\n                             (if (or (zero? (modulo n 11))\n\
    \                                     (zero? (modulo n 13)))\n               \
    \                  (count-7s n)\n                                 0)))))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter i count)\n    (cond\n\
    \      [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n\
    \       (fizz_buzz_iter (+ i 1) (+ count (count-7 (number->string i))))]\n   \
    \   [else (fizz_buzz_iter (+ i 1) count)]))\n  (fizz_buzz_iter 1 0))\n", "  (define\
    \ (count-7s n)\n    (if (zero? n)\n        0\n        (+ (if (equal? 7 (remainder\
    \ n 10)) 1 0)\n           (count-7s (quotient n 10)))))\n  (define (count-7s-in-range\
    \ n)\n    (if (zero? n)\n        0\n        (+ (count-7s n)\n           (count-7s-in-range\
    \ (- n 1)))))\n  (define (is-divisible-by? n divisor)\n    (equal? 0 (remainder\
    \ n divisor)))\n  (define (is-divisible-by-11-or-13? n)\n    (or (is-divisible-by?\
    \ n 11)\n        (is-divisible-by? n 13)))\n  (define (count-7s-in-range-divisible-by-11-or-13\
    \ n)\n    (if (zero? n)\n        0\n        (+ (if (is-divisible-by-11-or-13?\
    \ n)\n               (count-7s n)\n               0)\n           (count-7s-in-range-divisible-by-11-or-13\
    \ (- n 1)))))\n  (count-7s-in-range-divisible-by-11-or-13 n))\n", "  (define (fizz_buzz_iter\
    \ i acc)\n    (cond\n      [(= i n) acc]\n      [(or (= (modulo i 11) 0) (= (modulo\
    \ i 13) 0))\n       (fizz_buzz_iter (+ i 1) (+ acc (count-7 i)))]\n      [else\
    \ (fizz_buzz_iter (+ i 1) acc)]))\n  (fizz_buzz_iter 0 0))\n", "  (define (count-7s\
    \ n)\n    (if (zero? n)\n        0\n        (+ (if (equal? 7 (remainder n 10))\
    \ 1 0)\n           (count-7s (quotient n 10)))))\n  (define (count-7s-in-range\
    \ n)\n    (if (zero? n)\n        0\n        (+ (count-7s n)\n           (count-7s-in-range\
    \ (- n 1)))))\n  (define (count-7s-in-range-divisible-by-11-or-13 n)\n    (if\
    \ (zero? n)\n        0\n        (+ (if (or (zero? (remainder n 11))\n        \
    \           (zero? (remainder n 13)))\n               (count-7s n)\n         \
    \      0)\n           (count-7s-in-range-divisible-by-11-or-13 (- n 1)))))\n \
    \ (count-7s-in-range-divisible-by-11-or-13 n))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop\
    \ ((i 0) (count 0))\n    (cond ((>= i n) count)\n          ((or (zero? (modulo\
    \ i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1) (if (zero? (modulo i\
    \ 10)) (+ count 1) count)))\n          (else (loop (+ i 1) count)))))\n", "  (let\
    \ loop ((i 1) (count 0))\n    (cond ((= i n) count)\n          ((or (zero? (modulo\
    \ i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1) (+ count (count-7 (number->string\
    \ i)))))\n          (else (loop (+ i 1) count)))))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (zero? (modulo n 11))\
    \ (zero? (modulo n 13))) (fizz_buzz_helper (- n 1) (+ count (count-occurrences\
    \ 7 n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (cond [(= n 0) 0]\n        [(= n 7) 1]\n        [(= n 77) 2]\n\
    \        [(= n 777) 3]\n        [(= n 7777) 4]\n        [(= n 77777) 5]\n    \
    \    [(= n 777777) 6]\n        [(= n 7777777) 7]\n        [(= n 77777777) 8]\n\
    \        [(= n 777777777) 9]\n        [(= n 7777777777) 10]\n        [(= n 77777777777)\
    \ 11]\n        [(= n 777777777777) 12]\n        [(= n 7777777777777) 13]\n   \
    \     [(= n 77777777777777) 14]\n        [(= n 777777777777777) 15]\n        [(=\
    \ n 7777777777777777) 16]\n        [(= n 77777777777777777) 17]\n        [(= n\
    \ 777777777777777777) 18]\n        [(= n 7777777777777777777) 19]\n        [(=\
    \ n 77777777777777777777) 20]\n        [(= n 777777777777777777777) 21]\n    \
    \    [(= n 7777777777777777777777) 22]\n        [(= n 77777777777777777777777)\
    \ 23]\n        [(= n 777777777777777777777777) 24]\n        [(= n 7777777777777777777777777)\
    \ 25]\n        [(= n 77777777777777777777777777) 26]\n        [(= n 777777777777777777777777777)\
    \ 27]\n        [(= n 7777777777777777777777777777) 28]\n        [(= n 77777777777777777777777777777)\
    \ 29]\n        [(= n 777777777777777777777777777777) 30]\n        [(= n 7777777777777777777777777777777)\
    \ 31]\n        [(= n 77777777777777777777777777777777) 32]\n       ", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-digits\
    \ n 7)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (if (= n 0)\n        acc\n\
    \        (if (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n            (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-digits n 7)))\n            (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\
    \ [(= n 0) count]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n \
    \          (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n          [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-digits\
    \ n 7)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-sevens n)\n    (cond\n      [(= n 0) 0]\n      [(=\
    \ (remainder n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n      [else (count-sevens\
    \ (quotient n 10))]))\n  (define (count-sevens-in-range n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-sevens\
    \ n) (count-sevens-in-range (- n 1)))]\n      [else (count-sevens-in-range (-\
    \ n 1))]))\n  (count-sevens-in-range n))", "  (define (count-sevens n)\n    (if\
    \ (zero? n)\n        0\n        (+ (if (= (remainder n 10) 7) 1 0)\n         \
    \  (count-sevens (quotient n 10)))))\n  (define (count-divisible-by-11-or-13 n)\n\
    \    (if (zero? n)\n        0\n        (+ (if (or (zero? (remainder n 11))\n \
    \                 (zero? (remainder n 13)))\n               1\n              \
    \ 0)\n           (count-divisible-by-11-or-13 (- n 1)))))\n  (define (count-divisible-by-11-or-13-with-sevens\
    \ n)\n    (if (zero? n)\n        0\n        (+ (if (and (or (zero? (remainder\
    \ n 11))\n                       (zero? (remainder n 13)))\n                 \
    \   (not (zero? (count-sevens n))))\n               1\n               0)\n   \
    \        (count-divisible-by-11-or-13-with-sevens (- n 1)))))\n  (count-divisible-by-11-or-13-with-sevens\
    \ n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n     \
    \     [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-digit 7 n)))]\n          [else (fizz_buzz_helper (- n\
    \ 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n    \
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (zero? (remainder n 11)) (zero? (remainder n 13))) (+ (count-7s n)\
    \ (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n\
    \  (count-7s-in-range n))\n", "  (define (count-7s n)\n    (if (zero? n)\n   \
    \     0\n        (+ (if (equal? (modulo n 10) 7) 1 0)\n           (count-7s (quotient\
    \ n 10)))))\n  (define (fizz-buzz-helper n acc)\n    (if (zero? n)\n        acc\n\
    \        (fizz-buzz-helper (- n 1)\n                          (+ acc\n       \
    \                      (if (or (zero? (modulo n 11))\n                       \
    \              (zero? (modulo n 13)))\n                                 (count-7s\
    \ n)\n                                 0)))))\n  (fizz-buzz-helper n 0))\n", " \
    \ (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder n 10)\
    \ 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n      [(or (=\
    \ (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n     \
    \     [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count_sevens n)))]\n          [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (if (zero?\
    \ n)\n        0\n        (+ (if (equal? (modulo n 10) 7) 1 0)\n           (count-7s\
    \ (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n    (if (zero? n)\n\
    \        acc\n        (fizz-buzz-helper (- n 1)\n                          (+\
    \ acc\n                             (if (or (zero? (modulo n 11))\n          \
    \                           (zero? (modulo n 13)))\n                         \
    \        (count-7s n)\n                                 0)))))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_iter i acc)\n    (cond\n      [(= i n) acc]\n\
    \      [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n       (fizz_buzz_iter\
    \ (+ i 1) (+ acc (count-7 i)))]\n      [else (fizz_buzz_iter (+ i 1) acc)]))\n\
    \  (fizz_buzz_iter 1 0))\n", "  (let loop ((i 1) (count 0))\n    (cond ((&gt;\
    \ i n) count)\n          ((or (zero? (modulo i 11)) (zero? (modulo i 13)))\n \
    \          (loop (+ i 1) (+ count (count-7 i))))\n          (else (loop (+ i 1)\
    \ count)))))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0)\
    \ acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n\
    \ 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n   \
    \   [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n\
    \ 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond [(= n 0) count]\n          [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0))\n           (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n        \
    \  [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", " \
    \ (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ (count-7s\
    \ n) acc))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (zero? (remainder n 11)) (zero? (remainder n 13))) (+ (count-7s n)\
    \ (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n\
    \  (count-7s-in-range n))\n", "  (let loop ((i 0) (count 0))\n    (cond ((>= i\
    \ n) count)\n          ((or (zero? (modulo i 11)) (zero? (modulo i 13)))\n   \
    \        (loop (+ i 1) (+ count (count-7 (number->string i)))))\n          (else\
    \ (loop (+ i 1) count)))))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (zero? (remainder n 11)) (zero?\
    \ (remainder n 13))) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else\
    \ (count-7s-in-range (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n    \
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or\
    \ (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper (- n\
    \ 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n\
    \ 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n   \
    \   [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n\
    \ 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n          [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (let loop ((i 1) (count 0))\n    (cond ((= i n) count)\n          ((or (= (modulo\
    \ i 11) 0) (= (modulo i 13) 0))\n           (if (string-contains (number->string\
    \ i) \"7\")\n               (loop (+ i 1) (+ count 1))\n               (loop (+\
    \ i 1) count)))\n          (else (loop (+ i 1) count)))))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n    \
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n \
    \ (fizz_buzz_helper n 0))\n", "  (define (helper i count)\n    (cond\n      [(=\
    \ i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (helper\
    \ (+ i 1) (+ count (count-7 i)))]\n      [else (helper (+ i 1) count)]))\n  (helper\
    \ 1 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter n count)\n    (cond\
    \ ((= n 0) count)\n          ((and (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \           (fizz_buzz_iter (- n 1) (+ count (count-7s n))))\n          ((or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13)))\n           (fizz_buzz_iter (- n 1) count))\n\
    \          (else (fizz_buzz_iter (- n 1) count))))\n  (fizz_buzz_iter n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (if (= n 0)\n    \
    \    0\n        (+ (if (= (modulo n 10) 7) 1 0)\n           (count-7s (quotient\
    \ n 10)))))\n  (define (count-7s-in-range n)\n    (if (= n 0)\n        0\n   \
    \     (+ (if (or (zero? (modulo n 11))\n                  (zero? (modulo n 13)))\n\
    \               (count-7s n)\n               0)\n           (count-7s-in-range\
    \ (- n 1)))))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (zero? (modulo n 11))\
    \ (zero? (modulo n 13))) (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n \
    \     [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count_7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond [(= n 0) count]\n\
    \          [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (-\
    \ n 1) (+ count (count-7s n)))]\n          [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter n\
    \ acc)\n    (cond [(= n 0) acc]\n          [(or (divisible-by? n 11) (divisible-by?\
    \ n 13))\n           (fizz_buzz_iter (- n 1) (+ acc (count-sevens n)))]\n    \
    \      [else (fizz_buzz_iter (- n 1) acc)]))\n  (fizz_buzz_iter n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n     \
    \     [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count_7 n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\
    \ ((= n 0) count)\n          ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n \
    \          (fizz_buzz_helper (- n 1) (+ count (count-7 n))))\n          (else\
    \ (fizz_buzz_helper (- n 1) count))))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n      [(or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper (- n 1) (+ count\
    \ (count_7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(= n 0) 0]\n \
    \     [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (count-7s-in-range\
    \ (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n  (count-7s-in-range\
    \ n))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-sevens n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n\
    \      [else (count-sevens (quotient n 10))]))\n  (define (count-sevens-in-range\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (+ (count-sevens n) (count-sevens-in-range (- n 1)))]\n      [else\
    \ (count-sevens-in-range (- n 1))]))\n  (count-sevens-in-range n))", "  (define\
    \ (fizz_buzz-helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz-helper (- n 1) (+ acc\
    \ (count-7s n)))]\n      [else (fizz_buzz-helper (- n 1) acc)]))\n  (fizz_buzz-helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-digits n 7)))]\n      [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop ((i 0) (count 0))\n    (cond\
    \ ((>= i n) count)\n          ((or (zero? (modulo i 11)) (zero? (modulo i 13)))\n\
    \           (loop (+ i 1) (if (zero? (modulo i 10))\n                        \
    \     (+ count 1)\n                             count)))\n          (else (loop\
    \ (+ i 1) count)))))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n\
    \ 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n         \
    \  (fizz_buzz_helper (- n 1) (+ acc (count_7 n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7s\
    \ n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n\
    \ 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n   \
    \   [else (count-7s (quotient n 10))]))\n  (define (count-7s-in-range n)\n   \
    \ (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n\
    \ 13) 0)) (+ (count-7s n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range\
    \ (- n 1))]))\n  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ (count-7s n) acc))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (let loop\
    \ ((i 1) (count 0))\n    (cond ((> i n) count)\n          ((or (zero? (modulo\
    \ i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1) (if (zero? (modulo i\
    \ 10)) (+ count 1) count)))\n          (else (loop (+ i 1) count)))))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (count-7s\
    \ (quotient n 10)) (count-7s (modulo n 10)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (define (count-7s n)\n    (if (zero? n)\n        0\n        (+ (if (equal? (remainder\
    \ n 10) 7) 1 0)\n           (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper\
    \ n acc)\n    (if (zero? n)\n        acc\n        (if (or (zero? (remainder n\
    \ 11))\n                (zero? (remainder n 13)))\n            (fizz-buzz-helper\
    \ (- n 1) (+ acc (count-7s n)))\n            (fizz-buzz-helper (- n 1) acc))))\n\
    \  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \       (fizz_buzz_helper (- n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
