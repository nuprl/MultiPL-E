name: HumanEval_131_digits
language: rkt
prompt: "#lang racket\n\n#| Given a positive integer n, return the product of the\
  \ odd digits.\nReturn 0 if all digits are even.\nFor example:\n>>> (digits 1)\n\
  1\n>>> (digits 4)\n0\n>>> (digits 235)\n15|#\n(define (digits n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n\
  \    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
  \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal? (candidate\
  \ 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal? (candidate\
  \ 2468) 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits\
    \ (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let* ([d\
    \ (remainder n 10)]\n             [r (digits (quotient n 10))])\n        (if (odd?\
    \ d)\n            (* d r)\n            r))))\n", "  (cond\n    [(zero? n) 0]\n\
    \    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits\
    \ (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\
    \ [(zero? n) 0]\n        [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n        [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))",
  "  (if (= n 0)\n      0\n      (let ([d (modulo n 10)])\n        (if (odd? d)\n\
    \            (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n      (let ([d\
    \ (remainder n 10)])\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero? n)\n   \
    \   0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (*\
    \ d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n", " \
    \ (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ([d\
    \ (remainder n 10)])\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n\
    \ 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d\
    \ (remainder n 10)))\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero? n)\n   \
    \   0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d\
    \ (remainder n 10)))\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n\
    \ 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (if\
    \ (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n\
    \            (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond [(zero? n) 0]\n        [(odd? (remainder n 10)) (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n        [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (zero? (remainder\
    \ d 2))\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (*\
    \ (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (cond [(zero? n) 0]\n        [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n        [else (digits\
    \ (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n\
    \ 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits\
    \ (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ([d\
    \ (remainder n 10)])\n        (if (even? d)\n            (digits (quotient n 10))\n\
    \            (* d (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (if\
    \ (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n\
    \            (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10))\
    \ (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (if\
    \ (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n\
    \            (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond [(zero? n) 0]\n        [(odd?\
    \ (remainder n 10))\n         (* (remainder n 10) (digits (quotient n 10)))]\n\
    \        [else (digits (quotient n 10))]))\n", "  (cond [(zero? n) 0]\n      \
    \  [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n \
    \       [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n    \
    \  (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond [(zero?\
    \ n) 0]\n        [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n        [else (digits (quotient n 10))]))\n", "  (if (even? n)\n \
    \     0\n      (* (remainder n 10) (digits (quotient n 10)))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n \
    \   [(zero? n) 0]\n    [(odd? (remainder n 10))\n     (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let\
    \ ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero? n)\n   \
    \   0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n            (*\
    \ d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n", " \
    \ (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient\
    \ n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if\
    \ (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n\
    \            (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n      (if (odd?\
    \ n)\n          (* n (digits (quotient n 10)))\n          (digits (quotient n\
    \ 10)))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits\
    \ (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (if (odd? n)\n          (*\
    \ n (digits (quotient n 10)))\n          (digits (quotient n 10)))))\n", "  (if\
    \ (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n\
    \            (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (cond [(zero? n) 0]\n        [(odd? (remainder n 10)) (*\
    \ (remainder n 10) (digits (quotient n 10)))]\n        [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ([d\
    \ (remainder n 10)])\n        (if (even? d)\n            (digits (quotient n 10))\n\
    \            (* d (digits (quotient n 10)))))))\n", "  (cond [(zero? n) 0]\n \
    \       [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \        [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n \
    \   [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let\
    \ ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n\
    \ 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n\
    \    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ([d\
    \ (remainder n 10)])\n        (if (even? d)\n            (digits (quotient n 10))\n\
    \            (* d (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d\
    \ (remainder n 10)))\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero? n)\n   \
    \   0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n            (*\
    \ d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n", " \
    \ (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d\
    \ (remainder n 10)))\n        (if (even? d)\n            (digits (quotient n 10))\n\
    \            (* d (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n\
    \    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (cond\n    [(= n 0) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits\
    \ (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits\
    \ (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (cond [(zero? n) 0]\n        [(odd? (remainder n 10)) (*\
    \ (remainder n 10) (digits (quotient n 10)))]\n        [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(even? (remainder n 10)) (digits\
    \ (quotient n 10))]\n    [else (* (remainder n 10) (digits (quotient n 10)))]))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d\
    \ (remainder n 10)))\n        (if (even? d)\n            (digits (quotient n 10))\n\
    \            (* d (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n \
    \   [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n    [(even?\
    \ (remainder n 10)) (digits (quotient n 10))]\n    [else (* (remainder n 10) (digits\
    \ (quotient n 10)))]))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder\
    \ n 10)])\n        (if (odd? d)\n            (* d (digits (quotient n 10)))\n\
    \            (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n    \
    \  (let ([d (remainder n 10)])\n        (if (even? d)\n            (digits (quotient\
    \ n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [(odd? (remainder n 10))\n     (* (remainder n 10) (digits (quotient\
    \ n 10)))]\n    [else (digits (quotient n 10))]))", "  (if (zero? n)\n      0\n\
    \      (let ((d (remainder n 10)))\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (if\
    \ (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (odd? d)\n\
    \            (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n \
    \   [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (*\
    \ (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd?\
    \ d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d\
    \ (remainder n 10)))\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero? n)\n   \
    \   0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10))\n     (* (remainder n 10) (digits\
    \ (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (cond\n    [(= n 0) 0]\n    [(odd?\
    \ (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder\
    \ n 10)))\n        (if (odd? d)\n            (* d (digits (quotient n 10)))\n\
    \            (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n    \
    \  (let ((d (remainder n 10)))\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n     \
    \       (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n\
    \ 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (odd? d)\n            (* d (digits\
    \ (quotient n 10)))\n            (digits (quotient n 10))))))\n", "  (if (zero?\
    \ n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even? d)\n    \
    \        (digits (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n",
  "  (cond\n    [(zero? n) 0]\n    [(even? (remainder n 10)) (digits (quotient n 10))]\n\
    \    [else (* (remainder n 10) (digits (quotient n 10)))]))\n", "  (cond\n   \
    \ [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n\
    \      (let ([d (remainder n 10)])\n        (if (even? d)\n            (digits\
    \ (quotient n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (cond\n\
    \    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder\
    \ n 10))]\n    [else (digits (quotient n 10))]))\n```\n\n## Problem 2\n\n```racket\n\
    #lang racket\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (cond [(zero? n) 0]\n        [(odd? (remainder\
    \ n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n        [else (digits\
    \ (quotient n 10))]))\n", "  (if (zero? n) 0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d) (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n    [(even? (remainder\
    \ n 10)) (digits (quotient n 10))]\n    [else (* (remainder n 10) (digits (quotient\
    \ n 10)))]))\n", "  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (cond\n    [(zero? n) 0]\n    [(odd? (remainder\
    \ n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else (digits (quotient\
    \ n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (odd? d)\n            (* d (digits (quotient n 10)))\n          \
    \  (digits (quotient n 10))))))\n", "  (if (zero? n)\n      0\n      (let ([d\
    \ (remainder n 10)])\n        (if (odd? d)\n            (* d (digits (quotient\
    \ n 10)))\n            (digits (quotient n 10))))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n\
    \ 10))]\n    [else (digits (quotient n 10))]))\n", "  (cond [(zero? n) 0]\n  \
    \      [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \        [else (digits (quotient n 10))]))\n", "  (cond\n    [(zero? n) 0]\n \
    \   [(even? (remainder n 10)) (digits (quotient n 10))]\n    [else (* (remainder\
    \ n 10) (digits (quotient n 10)))]))\n", "  (cond\n    [(zero? n) 0]\n    [(odd?\
    \ (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n    [else\
    \ (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder\
    \ n 10)))\n        (if (even? d)\n            (digits (quotient n 10))\n     \
    \       (* d (digits (quotient n 10)))))))\n", "  (cond\n    [(zero? n) 0]\n \
    \   [(odd? (remainder n 10)) (* (digits (quotient n 10)) (remainder n 10))]\n\
    \    [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n      (let\
    \ ((d (remainder n 10)))\n        (if (even? d)\n            (digits (quotient\
    \ n 10))\n            (* d (digits (quotient n 10)))))))\n", "  (if (zero? n)\n\
    \      0\n      (let ((d (remainder n 10)))\n        (if (odd? d)\n          \
    \  (* d (digits (quotient n 10)))\n            (digits (quotient n 10))))))\n",
  "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n        (if (even?\
    \ d)\n            (digits (quotient n 10))\n            (* d (digits (quotient\
    \ n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d (remainder n 10)))\n\
    \        (if (even? d)\n            (digits (quotient n 10))\n            (* d\
    \ (digits (quotient n 10)))))))\n", "  (if (zero? n)\n      0\n      (let ((d\
    \ (remainder n 10)))\n        (if (even? d)\n            (digits (quotient n 10))\n\
    \            (* d (digits (quotient n 10)))))))\n", "  (cond [(zero? n) 0]\n \
    \       [(odd? (remainder n 10)) (* (remainder n 10) (digits (quotient n 10)))]\n\
    \        [else (digits (quotient n 10))]))\n", "  (if (zero? n)\n      0\n   \
    \   (let ((d (remainder n 10)))\n        (if (even? d)\n            (digits (quotient\
    \ n 10))\n            (* d (digits (quotient n 10)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
