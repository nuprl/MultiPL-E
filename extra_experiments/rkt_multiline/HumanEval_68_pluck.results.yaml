language: rkt
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n           \
    \       [min-even-index-found? #f])\n                 ([i (in-naturals)])\n  \
    \       (cond\n           [(and (even? (list-ref arr i))\n                 (<\
    \ min-even (list-ref arr i)))\n            (values (list-ref arr i) i)]\n    \
    \       [(and (even? (list-ref arr i))\n                 (= min-even (list-ref\
    \ arr i))\n                 (not min-even-index-found?))\n            (values\
    \ min-even i #t)]\n           [else (values min-even min-even-index min-even-index-found?)])))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps2mam6ru.rkt:52:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 3\n  in: local-binding form\n  arguments...:\n   4\n   0\n  \
    \ #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps2mam6ru.rkt:53:4\n\nresult arity mismatch;\n expected number\
    \ of values not received\n  expected: 2\n  received: 3\n  in: local-binding form\n\
    \  arguments...:\n   2\n   0\n   #t\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps2mam6ru.rkt:55:4\n\nresult\
    \ arity mismatch;\n expected number of values not received\n  expected: 2\n  received:\
    \ 3\n  in: local-binding form\n  arguments...:\n   0\n   0\n   #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps2mam6ru.rkt:56:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 3\n  in: local-binding form\n  arguments...:\n   2\n   0\n  \
    \ #t\n-----"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1tn6iw2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc1tn6iw2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnyv500ox.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpnyv500ox.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(zero? (remainder (first arr)\
    \ 2)) (list (first arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfbe7fpb.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfbe7fpb.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfbe7fpb.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfbe7fpb.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfbe7fpb.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplfbe7fpb.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1tn6iw2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc1tn6iw2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (let ([res (pluck (rest arr))])\n                (if\
    \ (empty? res) '()\n                    (list (first res) (+ 1 (second res)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5iycnuv1.rkt:40:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5iycnuv1.rkt:44:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let loop\
    \ ([arr (rest arr)] [min (first arr)] [idx 1])\n       (cond\n         [(empty?\
    \ arr) (list min idx)]\n         [(even? (first arr))\n          (if (< (first\
    \ arr) min)\n              (loop (rest arr) (first arr) (+ idx 1))\n         \
    \     (loop (rest arr) min idx))]\n         [else (loop (rest arr) min (+ idx\
    \ 1))]))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0nbasp6m.rkt:47:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0nbasp6m.rkt:48:4

    actual:     ''(2 2)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0nbasp6m.rkt:50:4

    actual:     ''(0 2)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0nbasp6m.rkt:51:4

    actual:     ''(0 5)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0nbasp6m.rkt:53:4

    actual:     ''(6 3)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp907nkv7b.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp907nkv7b.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min (first arr)])\n       (for/fold ([min-index 0] [min-value min]) ([i (in-naturals)])\n\
    \         (let ([val (list-ref arr i)])\n           (cond\n             [(even?\
    \ val)\n              (cond\n                [(< val min-value) (values val i)]\n\
    \                [(= val min-value) (values min-value min-index)]\n          \
    \      [else (values min-value min-index)])]\n             [else (values min-value\
    \ min-index)])))]\n     (pluck (rest arr)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpwtak60ot.rkt:41:51: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660219124
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:49:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-index (first (min-indexes (first arr) arr))])\n       (list (first arr)\
    \ min-index))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp32yro7bd.rkt:32:30: min-indexes: unbound identifier\n  in: min-indexes\n\
    \  location...:\n   /tmp/tmp32yro7bd.rkt:32:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first\
    \ arr) 1)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpai6etzkc.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpai6etzkc.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr)\
    \ 0)]\n    [else (pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (min evens)])\n        (if (empty? evens)\n          \
    \  '()\n            (list min-even (index arr min-even))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpob73v7_r.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpob73v7_r.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let loop ((arr arr) (min-even 0) (min-even-index 0) (index 0))\n  \
    \  (cond\n      [(empty? arr) (list min-even min-even-index)]\n      [(and (even?\
    \ (first arr)) (or (zero? min-even) (< (first arr) min-even)))\n       (loop (rest\
    \ arr) (first arr) index (+ index 1))]\n      [else (loop (rest arr) min-even\
    \ min-even-index (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5vz397jj.rkt:43:4

    actual:     ''(0 0)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5vz397jj.rkt:44:4

    actual:     ''(2 5)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5vz397jj.rkt:48:4

    actual:     ''(0 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1tn6iw2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc1tn6iw2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([index (index-of min-even arr)])\n       \
    \         (list min-even index)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:48:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnol8c0jm.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpnol8c0jm.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 1)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppt2i_9j3.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppt2i_9j3.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let loop ((arr arr) (min-even 0) (min-even-index 0) (index 0))\n  \
    \  (cond\n      [(empty? arr) (if (zero? min-even) (list) (list min-even min-even-index))]\n\
    \      [(zero? (modulo (first arr) 2))\n       (let ((min-even (if (zero? min-even)\
    \ (first arr) (min min-even (first arr)))))\n         (loop (rest arr) min-even\
    \ index (+ index 1)))]\n      [else (loop (rest arr) min-even min-even-index (+\
    \ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp98e5k_lg.rkt:45:4

    actual:     ''(2 5)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp98e5k_lg.rkt:46:4

    actual:     ''()

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp98e5k_lg.rkt:47:4

    actual:     ''(4 4)

    expected:   ''(4 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index\
    \ arr min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc9wv2utd.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc9wv2utd.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 1)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-index 0]\n           [min-value (first arr)])\n       (for ([i (in-range\
    \ (length arr))])\n         (when (and (even? (list-ref arr i))\n            \
    \        (< (list-ref arr i) min-value))\n           (set! min-index i)\n    \
    \       (set! min-value (list-ref arr i))))\n       (list min-value min-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4xnrnaq.rkt:48:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4xnrnaq.rkt:50:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4xnrnaq.rkt:51:4

    actual:     ''(0 2)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4xnrnaq.rkt:52:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr4xnrnaq.rkt:53:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first\
    \ arr) (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp09k3hk8p.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp09k3hk8p.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index\
    \ arr min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoeexc400.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpoeexc400.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min (first arr)])\n       (for/fold ([min-index 0] [min-value min]) ([i (in-list\
    \ (rest arr))])\n         (cond\n           [(even? i)\n            (if (< i min-value)\n\
    \                (values i i)\n                (values min-value min-index))]\n\
    \           [else (values min-value min-index)])))]\n    [else (pluck (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1wgoygm2.rkt:47:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp1wgoygm2.rkt:48:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1wgoygm2.rkt:50:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp1wgoygm2.rkt:51:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1wgoygm2.rkt:52:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp1wgoygm2.rkt:53:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (let ([result (pluck (rest arr))])\n               \
    \ (if (empty? result)\n                    '()\n                    (list (first\
    \ result) (+ 1 (second result)))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95pl2obz.rkt:41:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp95pl2obz.rkt:45:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n           \
    \       [min-even-index-found #f])\n                 ([i (in-naturals)])\n   \
    \              (cond\n                   [(even? (list-ref arr i))\n         \
    \           (cond\n                      [(not min-even-index-found)\n       \
    \                (values (list min-even i)\n                               #t)]\n\
    \                      [(< min-even (list-ref arr i))\n                      \
    \ (values (list min-even min-even-index)\n                               #t)]\n\
    \                      [else\n                       (values (list (list-ref arr\
    \ i) i)\n                               #t)])]\n                   [else\n   \
    \                 (values (list min-even min-even-index)\n                   \
    \         min-even-index-found)])))\n     (pluck (rest arr))]\n    [else\n   \
    \  (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlu3c7xk.rkt:60:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(4 2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlu3c7xk.rkt:61:4\n\
    \nlist-ref: index too large for list\n  index: 2\n  in: '(2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlu3c7xk.rkt:63:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(0 3 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlu3c7xk.rkt:64:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(2 3 0 5 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlu3c7xk.rkt:65:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlu3c7xk.rkt:66:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(6 7 1)"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([indices (for/list ([(i e) (in-indexed arr)])\n\
    \                               (if (= e min-even)\n                         \
    \          i))])\n                (list min-even (apply min indices))))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyzfu_bbc.rkt:36:31: if: missing an \"else\" expression\n  in: (if\
    \ (= e min-even) i)\n  location...:\n   /tmp/tmpyzfu_bbc.rkt:36:31\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n\
    \    [else (list (apply min (filter even? arr)) (index-of (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:44:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppt2i_9j3.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppt2i_9j3.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1pe4zuy8.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp1pe4zuy8.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([min-even-index (find-index (lambda (x) (=\
    \ x min-even)) arr)])\n                (list min-even min-even-index)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk8r_jwjm.rkt:35:37: find-index: unbound identifier\n  in: find-index\n\
    \  location...:\n   /tmp/tmpk8r_jwjm.rkt:35:37\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8shwik8r.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8shwik8r.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8shwik8r.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8shwik8r.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8shwik8r.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8shwik8r.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:49:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n           \
    \       [min-even-value min-even])\n         ([i (in-naturals)])\n         (cond\n\
    \           [(even? (list-ref arr i))\n            (cond\n              [(< (list-ref\
    \ arr i) min-even-value)\n               (values (list-ref arr i) i)]\n      \
    \        [else\n               (values min-even-value min-even-index)])]\n   \
    \        [else\n            (values min-even-value min-even-index)])))]\n    [else\n\
    \     (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnreyvg5e.rkt:53:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(4 2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnreyvg5e.rkt:54:4\n\
    \nlist-ref: index too large for list\n  index: 2\n  in: '(2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnreyvg5e.rkt:56:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(0 3 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnreyvg5e.rkt:57:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(2 3 0 5 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnreyvg5e.rkt:58:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnreyvg5e.rkt:59:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(6 7 1)"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ((evens (filter even? arr)))\n    (if (empty? evens)\n        '()\n\
    \        (let ((smallest (apply min evens)))\n          (list smallest (index\
    \ arr smallest))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpactv74wm.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpactv74wm.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ((evens (filter even? arr)))\n    (if (empty? evens)\n        '()\n\
    \        (let ((min-even (apply min evens)))\n          (list min-even (index\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp29n8faxm.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp29n8faxm.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([index (index-of min-even arr)])\n       \
    \         (list min-even index)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2tn92qck.rkt:48:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index\
    \ arr min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc9wv2utd.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc9wv2utd.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr)) (list (first (pluck (rest arr))) (+ 1 (second\
    \ (pluck (rest arr)))))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:40:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:44:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:47:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let loop ((arr arr) (min-even -1) (min-even-index -1))\n    (cond\n\
    \      [(empty? arr) (list min-even min-even-index)]\n      [(and (even? (first\
    \ arr)) (< (first arr) min-even))\n       (loop (rest arr) (first arr) (add1 (length\
    \ arr)))]\n      [else (loop (rest arr) min-even min-even-index)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppffq28_n.rkt:41:4

    actual:     ''(-1 -1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppffq28_n.rkt:42:4

    actual:     ''(-1 -1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppffq28_n.rkt:43:4

    actual:     ''(-1 -1)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppffq28_n.rkt:44:4

    actual:     ''(-1 -1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppffq28_n.rkt:45:4

    actual:     ''(-1 -1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppffq28_n.rkt:46:4

    actual:     ''(-1 -1)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppffq28_n.rkt:47:4

    actual:     ''(-1 '
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ((evens (filter even? arr)))\n\
    \        (if (empty? evens)\n            '()\n            (let ((min-even (apply\
    \ min evens)))\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb3j5bwjt.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpb3j5bwjt.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([smallest (min\
    \ evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpon4wdmr9.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpon4wdmr9.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let* ([evens (filter even? arr)]\n         [smallest (apply min evens)])\n\
    \    (if (empty? evens)\n        '()\n        (list smallest (index arr smallest)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_glqk2yn.rkt:33:24: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp_glqk2yn.rkt:33:24\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1tn6iw2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc1tn6iw2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let*\
    \ ([evens (filter even? arr)]\n            [min-even (apply min evens)]\n    \
    \        [min-even-index (index-of min-even arr)])\n       (list min-even min-even-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:48:4\n\nindex-of:\
    \ c"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (list min-even (index arr\
    \ min-even)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph5_8ag92.rkt:33:24: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmph5_8ag92.rkt:33:24\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let loop ([arr arr] [min-even -1] [min-even-index -1])\n    (cond [(empty?\
    \ arr) (list min-even min-even-index)]\n          [(and (even? (first arr)) (<\
    \ (first arr) min-even))\n           (loop (rest arr) (first arr) (add1 (length\
    \ arr)))\n           ]\n          [else (loop (rest arr) min-even min-even-index)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatoyqela.rkt:41:4

    actual:     ''(-1 -1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatoyqela.rkt:42:4

    actual:     ''(-1 -1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatoyqela.rkt:43:4

    actual:     ''(-1 -1)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatoyqela.rkt:44:4

    actual:     ''(-1 -1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatoyqela.rkt:45:4

    actual:     ''(-1 -1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatoyqela.rkt:46:4

    actual:     ''(-1 -1)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatoyqela.rkt:47:4

    actual:     ''(-1 '
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let* ([evens (filter even? arr)]\n         [min-even (apply min evens)])\n\
    \    (if (empty? evens)\n        '()\n        (list min-even (index arr min-even)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvyvwcmz4.rkt:33:24: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpvyvwcmz4.rkt:33:24\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 1)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:49:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7fyn4l9g.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2eraivig.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2eraivig.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2eraivig.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2eraivig.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2eraivig.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2eraivig.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (pluck-helper\
    \ arr min-index min-value)\n    (cond [(empty? arr) (list min-value min-index)]\n\
    \          [(is-even? (first arr))\n           (if (< (first arr) min-value)\n\
    \               (pluck-helper (rest arr) 0 (first arr))\n               (pluck-helper\
    \ (rest arr) (+ 1 min-index) min-value))]\n          [else (pluck-helper (rest\
    \ arr) (+ 1 min-index) min-value)]))\n  (pluck-helper arr 10000 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpujmiekax.rkt:45:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpujmiekax.rkt:46:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpujmiekax.rkt:47:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpujmiekax.rkt:48:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpujmiekax.rkt:49:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpujmiekax.rkt:50:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpujmiekax.rkt:51:4

    actua'
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even\
    \ arr (first arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpabi92umh.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmpabi92umh.rkt:31:26\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnyv500ox.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpnyv500ox.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcf_c3v7p.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpcf_c3v7p.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([min-even (apply min (filter even? arr))])\n    (if (null? min-even)\n\
    \        (list)\n        (list min-even (index arr min-even)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc677gayw.rkt:32:24: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc677gayw.rkt:32:24\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (list (first arr) 1)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oa7p0a.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oa7p0a.rkt:39:4

    actual:     ''(1 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oa7p0a.rkt:41:4

    actual:     ''(5 1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oa7p0a.rkt:42:4

    actual:     ''(1 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oa7p0a.rkt:43:4

    actual:     ''(5 1)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oa7p0a.rkt:44:4

    actual:     ''(7 1)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oa7p0a.rkt:45:4

    actual:     ''(7 1)

    expecte'
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwoqgu181.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr)) (list (first (pluck (rest arr))) (+ 1 (second\
    \ (pluck (rest arr)))))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:40:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:44:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:47:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcf_c3v7p.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpcf_c3v7p.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aqa8ieh.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min (first arr)])\n       (for/fold ([min-index 0] [min-value min]) ([(i v)\
    \ (in-indexed arr)])\n         (cond\n           [(even? v)\n            (cond\n\
    \              [(< v min-value) (values v i)]\n              [(= v min-value)\
    \ (values min-value (min i min-index))])]\n           [else (values min-value\
    \ min-index)])))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_bh1tcg.rkt:47:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   #<void>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_bh1tcg.rkt:48:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp2_bh1tcg.rkt:50:4\n\napplication: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2_bh1tcg.rkt:51:4\n\nresult arity mismatch;\n expected number\
    \ of values not received\n  expected: 2\n  received: 1\n  in: local-binding form\n\
    \  arguments...:\n   #<void>\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2_bh1tcg.rkt:52:4\n\nresult arity"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 1)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphforyuuh.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (index-of min-even arr)])\n            (list min-even min-even-index))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (null? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (null? evens)\n     \
    \       '()\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpznj2s0k9.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpznj2s0k9.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n\
    \    [else (list (apply min (filter even? arr)) (index-of (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpve3vm4kk.rkt:44:4\n\nindex"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppt2i_9j3.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppt2i_9j3.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let*\
    \ ([evens (filter even? arr)]\n            [min-even (apply min evens)]\n    \
    \        [min-even-index (index-of min-even arr)])\n       (list min-even min-even-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpncany5ql.rkt:48:4\n\nindex-of:\
    \ c"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (list min-even (index arr\
    \ min-even)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph5_8ag92.rkt:33:24: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmph5_8ag92.rkt:33:24\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1tn6iw2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc1tn6iw2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (null? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (null? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwiqtm5ce.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwiqtm5ce.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwiqtm5ce.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwiqtm5ce.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwiqtm5ce.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (find-index (lambda (x) (= x min-even)) arr)])\n            (list min-even min-even-index))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1c7r7y1z.rkt:33:33: find-index: unbound identifier\n  in: find-index\n\
    \  location...:\n   /tmp/tmp1c7r7y1z.rkt:33:33\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp907nkv7b.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp907nkv7b.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      empty\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        empty\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetxft5nw.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetxft5nw.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetxft5nw.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetxft5nw.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetxft5nw.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetxft5nw.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetxft5nw.rkt:49:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (index-of min-even arr)])\n            (list min-even min-even-index))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfdct2b9.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnyv500ox.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpnyv500ox.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([min-even-index (index-of min-even arr)])\n\
    \                (list min-even min-even-index)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp88x9nnxp.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp88x9nnxp.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp88x9nnxp.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp88x9nnxp.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp88x9nnxp.rkt:48:4\n\nindex"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp907nkv7b.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp907nkv7b.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (find-index (lambda (x) (= x min-even)) arr)])\n            (list min-even min-even-index))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1c7r7y1z.rkt:33:33: find-index: unbound identifier\n  in: find-index\n\
    \  location...:\n   /tmp/tmp1c7r7y1z.rkt:33:33\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min (apply min evens)])\n          (list min (index min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnh7aj1lx.rkt:33:21: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpnh7aj1lx.rkt:33:21\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(empty? (filter even? arr)) empty]\n\
    \    [else (list (apply min (filter even? arr)) (index (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphaqtcrrv.rkt:32:48: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmphaqtcrrv.rkt:32:48\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n           \
    \       [min-even-index-found? #f])\n                 ([i (in-naturals)]\n   \
    \               [x (in-list arr)])\n         (cond\n           [(even? x)\n  \
    \          (cond\n              [(< x min-even)\n               (values x 0 #t)]\n\
    \              [(= x min-even)\n               (cond\n                 [min-even-index-found?\n\
    \                  (values min-even min-even-index min-even-index-found?)]\n \
    \                [else\n                  (values min-even i #t)])]\n        \
    \      [else\n               (values min-even min-even-index min-even-index-found?)])]\n\
    \           [else\n            (values min-even min-even-index min-even-index-found?)])))]\n\
    \    [else\n     (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuvri8gmo.rkt:60:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 3\n  in: local-binding form\n  arguments...:\n   4\n   0\n  \
    \ #t\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuvri8gmo.rkt:61:4\n\nresult arity mismatch;\n expected number\
    \ of values not received\n  expected: 2\n  received: 3\n  in: local-binding form\n\
    \  arguments...:\n   2\n   0\n   #t\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuvri8gmo.rkt:63:4\n\nresult\
    \ arity mismatch;\n expected number of values not received\n  expected: 2\n  received:\
    \ 3\n  in: local-binding form\n  arguments...:\n   0\n   0\n   #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuvri8gmo.rkt:64:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 3\n  in: local-binding form\n  arguments...:\n   2\n   0\n  \
    \ #t\n-----"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min (apply min evens)])\n        (list min (index-of min arr)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_i2o7s48.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_i2o7s48.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_i2o7s48.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_i2o7s48.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_i2o7s48.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1tn6iw2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc1tn6iw2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeg4kxmy9.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [smallest-even (apply min evens)])\n        (if (empty? evens)\n\
    \            '()\n            (list smallest-even (index arr smallest-even))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3yg_eic7.rkt:35:33: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp3yg_eic7.rkt:35:33\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index\
    \ arr min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc9wv2utd.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc9wv2utd.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([arr (filter even? arr)])\n    (if (empty? arr)\n        '()\n\
    \        (let ([min (apply min arr)])\n          (list min (index min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpajwtgrbh.rkt:33:21: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpajwtgrbh.rkt:33:21\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(and (even? (first arr)) (empty?\
    \ (rest arr))) (list (first arr) 0)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9e2gkaz5.rkt:40:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9e2gkaz5.rkt:41:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9e2gkaz5.rkt:43:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9e2gkaz5.rkt:44:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9e2gkaz5.rkt:45:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9e2gkaz5.rkt:46:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7fnjzld2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp7fnjzld2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (define (pluck-helper arr smallest-index smallest-value)\n    (cond\
    \ [(empty? arr) (list smallest-value smallest-index)]\n          [(and (even?\
    \ (first arr))\n                (or (zero? smallest-value)\n                 \
    \   (< (first arr) smallest-value)))\n           (pluck-helper (rest arr) 0 (first\
    \ arr))]\n          [else (pluck-helper (rest arr) (+ 1 smallest-index) smallest-value)]))\n\
    \  (pluck-helper arr 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgys7lkco.rkt:45:4

    actual:     ''(0 0)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgys7lkco.rkt:46:4

    actual:     ''(2 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgys7lkco.rkt:47:4

    actual:     ''(0 2)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgys7lkco.rkt:48:4

    actual:     ''(4 3)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgys7lkco.rkt:49:4

    actual:     ''(6 2)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgys7lkco.rkt:50:4

    actual:     ''(0 4)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660219129
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr)) (list (first (pluck (rest arr))) (+ 1 (second\
    \ (pluck (rest arr)))))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:40:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:44:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:47:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kcbzywh.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpauzp3gw1.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpauzp3gw1.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n           \
    \       [min-even-value min-even])\n         ([i (in-list (rest arr))])\n    \
    \     (cond\n           [(even? i)\n            (cond\n              [(< i min-even-value)\n\
    \               (values i 0)]\n              [(= i min-even-value)\n         \
    \      (values min-even-value (add1 min-even-index))])]\n           [else (values\
    \ min-even-value (add1 min-even-index))])))]\n    [else (pluck (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9fq69ejr.rkt:51:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp9fq69ejr.rkt:52:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9fq69ejr.rkt:54:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   #<void>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9fq69ejr.rkt:55:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp9fq69ejr.rkt:56:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expe"
  stdout: ''
  timestamp: 1660219129
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min (apply min\
    \ evens)])\n              (list min (index min arr)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4ys4qnrp.rkt:35:25: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp4ys4qnrp.rkt:35:25\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7fnjzld2.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp7fnjzld2.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr)) (list (first (pluck (rest arr))) (+ 1 (second\
    \ (pluck (rest arr)))))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:40:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:44:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpauw5xy2x.rkt:47:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660219127
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1pe4zuy8.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp1pe4zuy8.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (let ([min-even-index\
    \ (find min-even arr)])\n            (list min-even min-even-index))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdyqpvvd_.rkt:33:33: find: unbound identifier\n  in: find\n  location...:\n\
    \   /tmp/tmpdyqpvvd_.rkt:33:33\n"
  stdout: ''
  timestamp: 1660219129
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            '()\n            (let ([min (apply min\
    \ evens)])\n              (list min (index min arr)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4ys4qnrp.rkt:35:25: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp4ys4qnrp.rkt:35:25\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc0_kfabz.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc0_kfabz.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219129
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpetjxuzp5.rkt:45:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min (apply min evens)])\n          (list min (index arr min))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgwugvyrh.rkt:33:21: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpgwugvyrh.rkt:33:21\n"
  stdout: ''
  timestamp: 1660219129
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (define (helper arr min-index min-value)\n    (cond\n      [(empty?\
    \ arr) (list min-value min-index)]\n      [(and (even? (first arr)) (<= (first\
    \ arr) min-value))\n       (helper (rest arr) 0 (first arr))]\n      [(and (even?\
    \ (first arr)) (> (first arr) min-value))\n       (helper (rest arr) (+ 1 min-index)\
    \ min-value)]\n      [else (helper (rest arr) (+ 1 min-index) min-value)]))\n\
    \  (helper arr 0 10000))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0qcbkfi2.rkt:46:4

    actual:     ''(10000 0)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0qcbkfi2.rkt:47:4

    actual:     ''(0 2)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0qcbkfi2.rkt:48:4

    actual:     ''(0 2)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0qcbkfi2.rkt:50:4

    actual:     ''(6 2)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0qcbkfi2.rkt:51:4

    actual:     ''(10000 4)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660219129
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first\
    \ arr) 1)]\n        [else (list (first arr) 0)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3xr9lku.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3xr9lku.rkt:39:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3xr9lku.rkt:41:4

    actual:     ''(5 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3xr9lku.rkt:42:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3xr9lku.rkt:43:4

    actual:     ''(5 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3xr9lku.rkt:44:4

    actual:     ''(7 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3xr9lku.rkt:45:4

    actual:     ''(7 0)

    expecte'
  stdout: ''
  timestamp: 1660219129
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp907nkv7b.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp907nkv7b.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr)\
    \ 0)]\n    [else (pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb5hy872s.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (list (apply min evens)\n              (apply min (map (\u03BB (x) (index\
    \ arr x)) evens))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps92lwr5o.rkt:33:38: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmps92lwr5o.rkt:33:38\n"
  stdout: ''
  timestamp: 1660219129
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [else (let ([r (pluck (rest arr))])\n            (if (empty? r)\n\
    \                (list (first arr) 0)\n                (list (first r) (+ 1 (second\
    \ r)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzvhwnxqp.rkt:42:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzvhwnxqp.rkt:46:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzvhwnxqp.rkt:49:4

    actual:     ''(1 3)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660219129
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcf_c3v7p.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpcf_c3v7p.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219128
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnyv500ox.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpnyv500ox.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxmlzwtv.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxmlzwtv.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxmlzwtv.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxmlzwtv.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxmlzwtv.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxmlzwtv.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219129
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        (list)\n            (list min-even (index-of min-even arr))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyi3q5x6f.rkt:49:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n\
    \             [min-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list min-even (index arr min-even))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp907nkv7b.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp907nkv7b.rkt:35:28\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpndvt1qb9.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnol8c0jm.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpnol8c0jm.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n\
    \        (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo55lpanr.rkt:47:4\n\nindex"
  stdout: ''
  timestamp: 1660219125
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let\
    \ ([min-even (first arr)])\n       (for/fold ([min-even-index 0]\n           \
    \       [min-even-value min-even])\n         ([i (in-list (rest arr))])\n    \
    \     (cond\n           [(even? i)\n            (cond\n              [(< i min-even-value)\n\
    \               (values i (add1 min-even-index))]\n              [else\n     \
    \          (values min-even-value (add1 min-even-index))])]\n           [else\n\
    \            (values min-even-value (add1 min-even-index))])))]\n    [else\n \
    \    (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgu7vm659.rkt:53:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpgu7vm659.rkt:54:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgu7vm659.rkt:56:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpgu7vm659.rkt:57:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgu7vm659.rkt:58:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n---------"
  stdout: ''
  timestamp: 1660219129
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index\
    \ arr min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc9wv2utd.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpc9wv2utd.rkt:33:26\n"
  stdout: ''
  timestamp: 1660219126
- exit_code: 0
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first\
    \ arr) 0)]\n    [(pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3vh5pvf.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660219125
- exit_code: 1
  program: "#lang racket\n\n#| \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest even value.\nIf multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\nThe plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\nIf there are no even values or the given list is empty, return [].\n\
    Example 1:\n>>> (pluck (list 4 2 3))\n(list 2 1)\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 2:\n>>> (pluck (list 1 2\
    \ 3))\n(list 2 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 3:\n>>> (pluck (list ))\n(list )\nExample 4:\n>>> (pluck (list\
    \ 5 0 3 0 4 2))\n(list 0 1)\nExplanation: 0 is the smallest value, but  there\
    \ are two zeros,\nso we will choose the first zero, which has the smallest index.\n\
    Constraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value|#\n(define (pluck\
    \ arr)\n  (if (null? arr)\n      '()\n      (let ([evens (filter even? arr)])\n\
    \        (if (null? evens)\n            '()\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3f2cmhl6.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp3f2cmhl6.rkt:35:30\n"
  stdout: ''
  timestamp: 1660219129
