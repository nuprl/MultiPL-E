name: HumanEval_156_int_to_mini_roman
language: ts
prompt: "//Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number:\
  \ any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = int_to_mini_roman;\n  assert.deepEqual(candidate(19),\"\
  xix\");\n  assert.deepEqual(candidate(152),\"clii\");\n  assert.deepEqual(candidate(251),\"\
  ccli\");\n  assert.deepEqual(candidate(426),\"cdxxvi\");\n  assert.deepEqual(candidate(500),\"\
  d\");\n  assert.deepEqual(candidate(1),\"i\");\n  assert.deepEqual(candidate(4),\"\
  iv\");\n  assert.deepEqual(candidate(43),\"xliii\");\n  assert.deepEqual(candidate(90),\"\
  xc\");\n  assert.deepEqual(candidate(94),\"xciv\");\n  assert.deepEqual(candidate(532),\"\
  dxxxii\");\n  assert.deepEqual(candidate(900),\"cm\");\n  assert.deepEqual(candidate(994),\"\
  cmxciv\");\n  assert.deepEqual(candidate(1000),\"m\");\n}\n\ntest();"
completions: ["    let result = \"\";\n    let roman = {\n        M: 1000,\n     \
    \   CM: 900,\n        D: 500,\n        CD: 400,\n        C: 100,\n        XC:\
    \ 90,\n        L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n     \
    \   V: 5,\n        IV: 4,\n        I: 1\n    };\n    for (let key in roman) {\n\
    \        if (number >= roman[key]) {\n            result += key.repeat(Math.trunc(number\
    \ / roman[key]));\n            number %= roman[key];\n        }\n    }\n    return\
    \ result;\n}\n", "    if (number < 1 || number > 1000) {\n        return \"\"\
    ;\n    }\n    let roman = \"\";\n    let num = number;\n    while (num >= 1000)\
    \ {\n        roman += \"m\";\n        num -= 1000;\n    }\n    while (num >= 900)\
    \ {\n        roman += \"cm\";\n        num -= 900;\n    }\n    while (num >= 500)\
    \ {\n        roman += \"d\";\n        num -= 500;\n    }\n    while (num >= 400)\
    \ {\n        roman += \"cd\";\n        num -= 400;\n    }\n    while (num >= 100)\
    \ {\n        roman += \"c\";\n        num -= 100;\n    }\n    while (num >= 90)\
    \ {\n        roman += \"xc\";\n        num -= 90;\n    }\n    while (num >= 50)\
    \ {\n        roman += \"l\";\n        num -= 50;\n    }\n    while (num >= 40)\
    \ {\n        roman += \"xl\";\n        num -= 40;\n    }\n    while (num >= 10)\
    \ {\n        roman += \"x\";\n        num -= 10;\n    }\n    while (num >= 9)\
    \ {\n        roman += \"ix\";\n        num -= 9;\n    }\n    while (num >= 5)\
    \ {\n        roman += \"v\";\n        num -= 5;\n    }\n    while (num >= 4) {\n\
    \        roman += \"iv\";\n        num -= 4;\n    }\n    while (num >= 1) {\n\
    \        roman += \"i\";\n        num -= 1;\n    }\n    return roman;\n}\n", " \
    \   let roman = \"\";\n    let num = number;\n    let romanNumeral = [\"m\", \"\
    cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\"\
    , \"i\"];\n    let numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1];\n    for (let i = 0; i < numbers.length; i++) {\n        while (num >=\
    \ numbers[i]) {\n            roman += romanNumeral[i];\n            num -= numbers[i];\n\
    \        }\n    }\n    return roman;\n}\n", "    if (number < 1 || number > 1000)\
    \ {\n        return \"\";\n    }\n    let result = \"\";\n    let roman = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"];\n    let decimal = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    for (let i = 0; i < roman.length; i++) {\n        while (number\
    \ >= decimal[i]) {\n            result += roman[i];\n            number -= decimal[i];\n\
    \        }\n    }\n    return result;\n}\n", "    if (number < 1 || number > 1000)\
    \ {\n        return \"\";\n    }\n    let roman = \"\";\n    let romanNumerals\
    \ = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"];\n    let numbers = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   while (number >= numbers[i]) {\n            roman += romanNumerals[i];\n \
    \           number -= numbers[i];\n        }\n    }\n    return roman;\n}\n",
  "    if (number < 1 || number > 1000) {\n        return \"\";\n    }\n    var roman\
    \ = \"\";\n    var romanNumeral = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    var numbers = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        while (number >= numbers[i]) {\n            roman += romanNumeral[i];\n\
    \            number -= numbers[i];\n        }\n    }\n    return roman;\n}\n",
  "    let result = \"\";\n    let roman = {\n        M: 1000,\n        CM: 900,\n\
    \        D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n       \
    \ L: 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n   \
    \     IV: 4,\n        I: 1\n    };\n    for (let key in roman) {\n        if (number\
    \ >= roman[key]) {\n            result += key.repeat(Math.trunc(number / roman[key]));\n\
    \            number -= roman[key] * Math.trunc(number / roman[key]);\n       \
    \ }\n    }\n    return result;\n}\n", "    if (number < 1 || number > 1000) {\n\
    \        return \"\";\n    }\n    let roman = \"\";\n    let num = number;\n \
    \   let romanNumeral = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let numbers = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        while (num >= numbers[i]) {\n            roman += romanNumeral[i];\n\
    \            num -= numbers[i];\n        }\n    }\n    return roman;\n}\n", " \
    \   if (number < 1 || number > 1000) {\n        return \"Invalid number\";\n \
    \   }\n    let roman: string = \"\";\n    let romanNumeral: string[] = [\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"];\n    let numbers: number[] = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   while (number >= numbers[i]) {\n            roman += romanNumeral[i];\n  \
    \          number -= numbers[i];\n        }\n    }\n    return roman;\n}\n", " \
    \   let roman = \"\";\n    let romanNumeral = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n    \
    \        roman += romanNumeral[i];\n            number -= numbers[i];\n      \
    \  }\n    }\n    return roman;\n}\n", "    if (number < 1 || number > 1000) {\n\
    \        return \"\";\n    }\n    let roman = \"\";\n    let roman_numerals =\
    \ [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\",\
    \ \"v\", \"iv\", \"i\"];\n    let numbers = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   while (number >= numbers[i]) {\n            roman += roman_numerals[i];\n\
    \            number -= numbers[i];\n        }\n    }\n    return roman;\n}\n",
  "    let roman = \"\";\n    let romanNumeral = [\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        while (number >= numbers[i]) {\n    \
    \        roman += romanNumeral[i];\n            number -= numbers[i];\n      \
    \  }\n    }\n    return roman;\n}\n", "    if (number < 1 || number > 1000) {\n\
    \        return \"\";\n    }\n    let roman = \"\";\n    let romanNumList = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"];\n    let numList = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    for (let i = 0; i < numList.length; i++) {\n        while\
    \ (number >= numList[i]) {\n            number -= numList[i];\n            roman\
    \ += romanNumList[i];\n        }\n    }\n    return roman;\n}\n", "    if (number\
    \ < 1 || number > 1000) {\n        return \"\";\n    }\n    let roman = \"\";\n\
    \    let romanNumeral = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let numbers = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        while (number >= numbers[i]) {\n            roman += romanNumeral[i];\n\
    \            number -= numbers[i];\n        }\n    }\n    return roman;\n}\n",
  "    if (number < 1 || number > 1000) {\n        return \"\";\n    }\n    let roman\
    \ = \"\";\n    let romanNumList = [\n        \"m\",\n        \"cm\",\n       \
    \ \"d\",\n        \"cd\",\n        \"c\",\n        \"xc\",\n        \"l\",\n \
    \       \"xl\",\n        \"x\",\n        \"ix\",\n        \"v\",\n        \"iv\"\
    ,\n        \"i\",\n    ];\n    let numList = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < numList.length; i++) {\n     \
    \   while (number >= numList[i]) {\n            number -= numList[i];\n      \
    \      roman += romanNumList[i];\n        }\n    }\n    return roman;\n}\n", " \
    \   if (number > 1000 || number < 1) {\n        return \"\";\n    }\n    let result\
    \ = \"\";\n    let roman = {\n        M: 1000,\n        CM: 900,\n        D: 500,\n\
    \        CD: 400,\n        C: 100,\n        XC: 90,\n        L: 50,\n        XL:\
    \ 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n        IV: 4,\n       \
    \ I: 1\n    };\n    for (let key in roman) {\n        if (number >= roman[key])\
    \ {\n            result += key.toLowerCase().repeat(Math.floor(number / roman[key]));\n\
    \            number %= roman[key];\n        }\n    }\n    return result;\n}\n",
  "    let result = '';\n    let roman = {\n        M: 1000,\n        CM: 900,\n \
    \       D: 500,\n        CD: 400,\n        C: 100,\n        XC: 90,\n        L:\
    \ 50,\n        XL: 40,\n        X: 10,\n        IX: 9,\n        V: 5,\n      \
    \  IV: 4,\n        I: 1\n    };\n    for (let key in roman) {\n        if (number\
    \ >= roman[key]) {\n            result += key.repeat(Math.trunc(number / roman[key]));\n\
    \            number %= roman[key];\n        }\n    }\n    return result;\n}\n",
  "    let result = \"\";\n    let roman = { M: 1000, CM: 900, D: 500, CD: 400, C:\
    \ 100, XC: 90, L: 50, XL: 40, X: 10, IX: 9, V: 5, IV: 4, I: 1 };\n    for (let\
    \ i of Object.keys(roman)) {\n        let q = Math.floor(number / roman[i]);\n\
    \        number -= q * roman[i];\n        result += i.repeat(q);\n    }\n    return\
    \ result;\n}\n", "    let roman: string = \"\";\n    let romanNumeral: any = [\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"];\n    let numbers: any = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    for (let i = 0; i < numbers.length; i++) {\n        while\
    \ (number >= numbers[i]) {\n            roman += romanNumeral[i];\n          \
    \  number -= numbers[i];\n        }\n    }\n    return roman;\n}\n", "    if (number\
    \ < 1 || number > 1000) {\n        return \"\";\n    }\n    let result = \"\"\
    ;\n    let roman = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    let decimal = [1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    for (let i = 0; i < decimal.length; i++)\
    \ {\n        while (number % decimal[i] < number) {\n            result += roman[i];\n\
    \            number -= decimal[i];\n        }\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
