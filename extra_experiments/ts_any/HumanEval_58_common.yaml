name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two arrays.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: any, l2: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["    let result: any = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    return\
    \ l1.filter(function (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function\
    \ (a: any, b: any) {\n        return a - b;\n    });\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return [...new Set(l1)].filter(x\
    \ => new Set(l2).has(x));\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n\
    }\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n}\n", " \
    \   return [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    let result:\
    \ any = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0;\
    \ j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    return [...new\
    \ Set(l1)].filter(x => l2.includes(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b).filter((x, i, a) => a.indexOf(x) === i);\n}\n", "    let result: any\
    \ = [];\n    for (let i: number = 0; i < l1.length; i++) {\n        for (let j:\
    \ number = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b).filter((x, i, a) => a.indexOf(x) === i);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
