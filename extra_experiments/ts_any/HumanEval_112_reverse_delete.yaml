name: HumanEval_112_reverse_delete
language: ts
prompt: "//Task\n// We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n// then check if the result\
  \ string is palindrome.\n// A string is called palindrome if it reads the same backward\
  \ as forward.\n// You should return an array containing the result string and true/false\
  \ for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\"\
  , false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>>\
  \ reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s:\
  \ any, c: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\"\
  , \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
  acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"\
  a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"\
  abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\"\
  , true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n \
  \ assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
completions: []
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
