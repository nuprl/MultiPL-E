name: HumanEval_5_intersperse
language: ts
prompt: "//Insert a number 'delimeter' between every two consecutive elements of input\
  \ array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3],\
  \ 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers: any, delimeter: any): any\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = intersperse;\n  assert.deepEqual(candidate([], 7),[]);\n\
  \  assert.deepEqual(candidate([5, 6, 3, 2], 8),[5, 8, 6, 8, 3, 8, 2]);\n  assert.deepEqual(candidate([2,\
  \ 2, 2], 2),[2, 2, 2, 2, 2]);\n}\n\ntest();"
completions: ["    return is_null(numbers)\n        ? null\n        : is_null(tail(numbers))\n\
    \            ? head(numbers)\n            : pair(head(numbers), pair(delimeter,\
    \ intersperse(tail(numbers), delimeter)));\n}\n", "    if (numbers.length ===\
    \ 0) {\n        return [];\n    } else {\n        return [numbers[0], delimeter,\
    \ ...intersperse(numbers.slice(1), delimeter)];\n    }\n}\n", "    if (numbers.length\
    \ === 0) {\n        return [];\n    }\n    else {\n        return [numbers[0]].concat(intersperse(numbers.slice(1),\
    \ delimeter)).concat([delimeter]);\n    }\n}\n", "    if (numbers.length === 0)\
    \ {\n        return [];\n    } else {\n        return [numbers[0], delimeter,\
    \ ...intersperse(numbers.slice(1), delimeter)];\n    }\n}\n", "  return is_null(numbers)\n\
    \    ? null\n    : is_null(tail(numbers))\n    ? head(numbers)\n    : pair(head(numbers),\
    \ pair(delimeter, intersperse(tail(numbers), delimeter)));\n}\n", "    return\
    \ is_null(numbers)\n        ? null\n        : is_null(tail(numbers))\n       \
    \     ? head(numbers)\n            : pair(head(numbers), pair(delimeter, intersperse(tail(numbers),\
    \ delimeter)));\n}\n", "    return is_null(numbers)\n        ? null\n        :\
    \ is_null(tail(numbers))\n            ? head(numbers)\n            : pair(head(numbers),\
    \ pair(delimeter, intersperse(tail(numbers), delimeter)));\n}\n", "    return\
    \ is_null(numbers)\n        ? null\n        : is_null(tail(numbers))\n       \
    \     ? head(numbers)\n            : pair(head(numbers), pair(delimeter, intersperse(tail(numbers),\
    \ delimeter)));\n}\n", "    if (numbers.length === 0) {\n        return [];\n\
    \    }\n    return numbers.slice(1).reduce((acc, curr) => {\n        return acc.concat([delimeter,\
    \ curr]);\n    }, [numbers[0]]);\n}\n", "    if (numbers.length === 0) {\n   \
    \     return [];\n    }\n    let result = [numbers[0]];\n    for (let i = 1; i\
    \ < numbers.length; i++) {\n        result.push(delimeter);\n        result.push(numbers[i]);\n\
    \    }\n    return result;\n}\n", "    if (numbers.length === 0) {\n        return\
    \ [];\n    }\n    return numbers.slice(1).reduce((acc, curr) => {\n        return\
    \ acc.concat([delimeter, curr]);\n    }, [numbers[0]]);\n}\n", "    if (numbers.length\
    \ === 0) {\n        return [];\n    } else {\n        return [numbers[0], delimeter,\
    \ ...intersperse(numbers.slice(1), delimeter)];\n    }\n}\n", "    if (numbers.length\
    \ === 0) {\n        return [];\n    } else {\n        return [numbers[0], delimeter,\
    \ ...intersperse(numbers.slice(1), delimeter)];\n    }\n}\n", "    return is_null(numbers)\n\
    \        ? null\n        : is_null(tail(numbers))\n            ? head(numbers)\n\
    \            : pair(head(numbers), pair(delimeter, intersperse(tail(numbers),\
    \ delimeter)));\n}\n", "  if (numbers.length === 0) {\n    return [];\n  }\n \
    \ return numbers.slice(1).reduce((acc: any, curr: any) => {\n    return acc.concat([delimeter,\
    \ curr]);\n  }, [numbers[0]]);\n}\n\nexport default intersperse;", "    return\
    \ is_null(numbers)\n        ? null\n        : is_null(tail(numbers))\n       \
    \     ? head(numbers)\n            : pair(head(numbers), pair(delimeter, intersperse(tail(numbers),\
    \ delimeter)));\n}\n", "    if (numbers.length === 0) {\n        return [];\n\
    \    }\n    return numbers.slice(1).reduce((acc: any, curr: any) => {\n      \
    \  return acc.concat([delimeter, curr]);\n    }, [numbers[0]]);\n}\n", "    return\
    \ is_null(numbers)\n        ? null\n        : is_null(tail(numbers))\n       \
    \     ? head(numbers)\n            : pair(head(numbers), pair(delimeter, intersperse(tail(numbers),\
    \ delimeter)));\n}\n", "    let result: any = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (i !== numbers.length - 1) {\n            result.push(numbers[i]);\n\
    \            result.push(delimeter);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    return is_null(numbers)\n  \
    \      ? null\n        : is_null(tail(numbers))\n            ? head(numbers)\n\
    \            : pair(head(numbers), pair(delimeter, intersperse(tail(numbers),\
    \ delimeter)));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
