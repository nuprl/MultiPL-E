name: HumanEval_19_sort_numbers
language: ts
prompt: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers(numbers: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\
  \");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
  three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five zero\
  \ four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
  six five four three two one zero\"),\"zero one two three four five six\");\n}\n\n\
  test();"
completions: ["  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9,\n  };\n  const numArr = numbers.split(\" \");\n  const numArrInt\
    \ = numArr.map((num) => numMap[num]);\n  const sortedArr = numArrInt.sort((a,\
    \ b) => a - b);\n  const sortedArrStr = sortedArr.map((num) => {\n    for (let\
    \ key in numMap) {\n      if (numMap[key] === num) {\n        return key;\n  \
    \    }\n    }\n  });\n  return sortedArrStr.join(\" \");\n}\n", "    let nums\
    \ = numbers.split(\" \");\n    let nums_sorted = nums.sort((a, b) => {\n     \
    \   return nums_to_numbers[a] - nums_to_numbers[b];\n    });\n    return nums_sorted.join(\"\
    \ \");\n}\n", "    let nums = numbers.split(\" \");\n    let nums_map = {\n  \
    \      \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n    let\
    \ nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(\" \");\n}\n", "    let nums = numbers.split(\"\
    \ \");\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n    \
    \    \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\"\
    : 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a]\
    \ - nums_map[b]);\n    return nums_sorted.join(\" \");\n}\n", "    let nums =\
    \ numbers.split(\" \");\n    let num_map = {\n        \"zero\": 0,\n        \"\
    one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n\
    \        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"\
    eight\": 8,\n        \"nine\": 9\n    };\n    let num_list = [];\n    for (let\
    \ num of nums) {\n        num_list.push(num_map[num]);\n    }\n    num_list.sort((a,\
    \ b) => a - b);\n    let result = \"\";\n    for (let num of num_list) {\n   \
    \     for (let key in num_map) {\n            if (num_map[key] === num) {\n  \
    \              result += key + \" \";\n            }\n        }\n    }\n    return\
    \ result.trim();\n}\n", "    const numMap = {\n        'zero': 0,\n        'one':\
    \ 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five':\
    \ 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine':\
    \ 9\n    };\n    return numbers.split(' ').sort((a, b) => numMap[a] - numMap[b]).join('\
    \ ');\n}\n", "    let nums = numbers.split(\" \");\n    let nums_map = {\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n    let\
    \ sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return sorted.join(\" \");\n}\n", "    let nums = numbers.split(\"\
    \ \");\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n\
    \        nums_int.push(convert_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(convert_to_str(nums_int[i]));\n    }\n    return\
    \ nums_str.join(\" \");\n}\n", "    let nums = numbers.split(\" \");\n    let\
    \ nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n\
    \        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"\
    six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n\
    \    };\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_map[a]\
    \ - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n", "    let\
    \ nums = numbers.split(\" \");\n    let nums_int = [];\n    for (let i = 0; i\
    \ < nums.length; i++) {\n        nums_int.push(numeral_to_int(nums[i]));\n   \
    \ }\n    nums_int.sort(function (a, b) { return a - b });\n    for (let i = 0;\
    \ i < nums_int.length; i++) {\n        nums[i] = int_to_numeral(nums_int[i]);\n\
    \    }\n    return nums.join(\" \");\n}\n", "    const nums = numbers.split('\
    \ ');\n    const numsObj = {\n        zero: 0,\n        one: 1,\n        two:\
    \ 2,\n        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n\
    \        seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const numsArr\
    \ = nums.map(num => numsObj[num]);\n    const sortedNums = numsArr.sort((a, b)\
    \ => a - b);\n    const sortedNumsStr = sortedNums.map(num => {\n        for (let\
    \ key in numsObj) {\n            if (numsObj[key] === num) {\n               \
    \ return key;\n            }\n        }\n    });\n    return sortedNumsStr.join('\
    \ ');\n}\n", "  const numMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n   \
    \ three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight:\
    \ 8,\n    nine: 9,\n  };\n  const nums = numbers.split(\" \");\n  const numsInt\
    \ = nums.map((num) => numMap[num]);\n  const sortedNums = numsInt.sort((a, b)\
    \ => a - b);\n  const sortedNumsStr = sortedNums.map((num) => {\n    for (const\
    \ key in numMap) {\n      if (numMap[key] === num) {\n        return key;\n  \
    \    }\n    }\n  });\n  return sortedNumsStr.join(\" \");\n}\n", "    let nums\
    \ = numbers.split(\" \");\n    let nums2 = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums2.push(0);\n                break;\n            case \"one\":\n    \
    \            nums2.push(1);\n                break;\n            case \"two\"\
    :\n                nums2.push(2);\n                break;\n            case \"\
    three\":\n                nums2.push(3);\n                break;\n           \
    \ case \"four\":\n                nums2.push(4);\n                break;\n   \
    \         case \"five\":\n                nums2.push(5);\n                break;\n\
    \            case \"six\":\n                nums2.push(6);\n                break;\n\
    \            case \"seven\":\n                nums2.push(7);\n               \
    \ break;\n            case \"eight\":\n                nums2.push(8);\n      \
    \          break;\n            case \"nine\":\n                nums2.push(9);\n\
    \                break;\n        }\n    }\n    nums2.sort(function (a, b) { return\
    \ a - b });\n    let nums3 = [];\n    for (let i = 0; i < nums2.length; i++) {\n\
    \        switch (nums2[i]) {\n            case 0:\n                nums3.push(\"\
    zero\");\n                break;\n            case 1:\n                nums3.push(\"\
    one\");\n                break;\n            case 2:\n                nums3.push(\"\
    two\");\n                break;\n            case 3:\n                nums3.push(\"\
    three\");\n                break;\n            case 4:\n                nums3.push(\"\
    four\");\n                break;\n            case 5:\n                nums3.push(\"\
    five\");\n                break;\n            case 6:\n                nums3.push(\"\
    six\");\n                break;\n            case 7:\n                nums3.push(\"\
    seven\");\n                break;\n            case 8:\n                nums3.push(\"\
    eight\");\n                break;\n            case 9:\n                nums3.push(\"\
    nine\");\n                break;\n        }\n    }\n   ", "    let nums = numbers.split(\"\
    \ \");\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n    \
    \    \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\"\
    : 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a]\
    \ - nums_map[b]);\n    return nums_sorted.join(\" \");\n}\n", "    let nums =\
    \ numbers.split(\" \");\n    let nums_map = {\n        \"zero\": 0,\n        \"\
    one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n\
    \        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"\
    eight\": 8,\n        \"nine\": 9\n    };\n    let sorted_nums = nums.sort((a,\
    \ b) => {\n        return nums_map[a] - nums_map[b];\n    });\n    return sorted_nums.join(\"\
    \ \");\n}\n", "    let num_array = numbers.split(\" \");\n    let num_map = {\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n    let\
    \ num_array_int = [];\n    for (let i = 0; i < num_array.length; i++) {\n    \
    \    num_array_int.push(num_map[num_array[i]]);\n    }\n    num_array_int.sort(function\
    \ (a, b) {\n        return a - b;\n    });\n    let num_array_str = [];\n    for\
    \ (let i = 0; i < num_array_int.length; i++) {\n        num_array_str.push(Object.keys(num_map).find(key\
    \ => num_map[key] === num_array_int[i]));\n    }\n    return num_array_str.join(\"\
    \ \");\n}\n", "    const nums: any = {\n        'zero': 0,\n        'one': 1,\n\
    \        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n\
    \        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine':\
    \ 9\n    };\n    const numArray: any = numbers.split(' ');\n    const numArraySorted:\
    \ any = numArray.sort((a: any, b: any) => nums[a] - nums[b]);\n    return numArraySorted.join('\
    \ ');\n}\n", "    let nums = numbers.split(\" \");\n    let nums_map = {\n   \
    \     \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n    let\
    \ nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(\" \");\n}\n", "    let nums = numbers.split(\"\
    \ \");\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n    \
    \    \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\"\
    : 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a]\
    \ - nums_map[b]);\n    return nums_sorted.join(\" \");\n}\n", "    let nums =\
    \ numbers.split(\" \");\n    let nums_map = {\n        \"zero\": 0,\n        \"\
    one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n\
    \        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"\
    eight\": 8,\n        \"nine\": 9\n    };\n    let nums_sorted = nums.sort((a,\
    \ b) => {\n        return nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\"\
    \ \");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
