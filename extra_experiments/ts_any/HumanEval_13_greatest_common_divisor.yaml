name: HumanEval_13_greatest_common_divisor
language: ts
prompt: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
  \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
  \ any, b: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
  \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
  \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
completions: ["    if (a == 0 || b == 0) {\n        return a + b;\n    }\n    return\
    \ greatest_common_divisor(b, a % b);\n}\n", "    if (b == 0) {\n        return\
    \ a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n", "    if (b ==\
    \ 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a % b);\n\
    }\n", "    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n      \
    \  return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\n", "    if (a < 0) {\n        a = -a;\n    }\n    if (b < 0) {\n  \
    \      b = -b;\n    }\n    if (a == 0) {\n        return b;\n    }\n    if (b\
    \ == 0) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\n", "    if (a < 0) {\n        a = -a;\n    }\n    if (b < 0) {\n  \
    \      b = -b;\n    }\n    if (a == 0) {\n        return b;\n    }\n    if (b\
    \ == 0) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\n", "    if (a === 0) {\n        return b;\n    }\n    if (b === 0)\
    \ {\n        return a;\n    }\n    if (a === b) {\n        return a;\n    }\n\
    \    if (a > b) {\n        return greatest_common_divisor(a - b, b);\n    }\n\
    \    return greatest_common_divisor(a, b - a);\n}\n", "    if (b == 0) {\n   \
    \     return a;\n    }\n    else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n", "    if (a === 0) {\n        return b;\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\n", "    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n\
    \        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\n", "    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (b == 0) {\n        return a;\n    } else {\n       \
    \ return greatest_common_divisor(b, a % b);\n    }\n}\n", "    if (a == 0) {\n\
    \        return b;\n    }\n    if (b == 0) {\n        return a;\n    }\n    if\
    \ (a == b) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ - b, b);\n    }\n    return greatest_common_divisor(a, b - a);\n}\n", "    if\
    \ (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return a;\n\
    \    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n",
  "    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n   \
    \ return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return\
    \ greatest_common_divisor(a - b, b);\n  }\n  return greatest_common_divisor(a,\
    \ b - a);\n}\n", "    if (a < b) {\n        return greatest_common_divisor(b,\
    \ a);\n    }\n    if (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n", "    if (a === 0) {\n        return b;\n    }\n    if (b ===\
    \ 0) {\n        return a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a\
    \ % b, b);\n    } else {\n        return greatest_common_divisor(a, b % a);\n\
    \    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
