name: HumanEval_149_sorted_list_sum
language: ts
prompt: "//Write a function that accepts an array of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted array\
  \ with a sorted order,\n// The array is always an array of strings and never an\
  \ array of numbers,\n// and it may contain duplicates.\n// The order of the array\
  \ should be ascending by length of each word, and you\n// should return the array\
  \ sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n\
  // The function should return an array of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
  aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
  AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
  d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\",\
  \ \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
  , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\n\
  test();"
completions: ["    let odd_lst: any = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i].length % 2 !== 0) {\n            odd_lst.push(lst[i]);\n\
    \        }\n    }\n    odd_lst.sort();\n    return odd_lst;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "    let new_lst: any = [];\n    for (let i: number = 0; i <\
    \ lst.length; i++) {\n        if (lst[i].length % 2 == 0) {\n            new_lst.push(lst[i]);\n\
    \        }\n    }\n    new_lst.sort();\n    return new_lst;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));", "    let result: any = [];\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i].length % 2 === 0) {\n            result.push(lst[i]);\n\
    \        }\n    }\n    result.sort(function (a: any, b: any): any {\n        if\
    \ (a.length < b.length) {\n            return -1;\n        }\n        if (a.length\
    \ > b.length) {\n            return 1;\n        }\n        return 0;\n    });\n\
    \    return result;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    console.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let lst_len\
    \ = lst.length;\n    let new_lst = [];\n    let new_lst_len = 0;\n    let i =\
    \ 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let\
    \ n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n   \
    \ let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n\
    \    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n\
    \    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n\
    \    let h = 0;\n    let ii = 0;\n    let jj = 0;\n    let kk = 0;\n    let ll\
    \ = 0;\n    let mm = 0;\n    let nn = 0;\n    let oo = 0;\n    let pp = 0;\n \
    \   let qq = 0;\n    let rr = 0;\n    let ss = 0;\n    let tt = 0;\n    let uu\
    \ = 0;\n    let vv = 0;\n    let ww = 0;\n    let xx = 0;\n    let yy = 0;\n \
    \   let zz = 0;\n    let aa = 0;\n    let bb = 0;\n    let cc = 0;\n    let dd\
    \ = 0;\n    let ee = 0;\n    let ff = 0;\n    let gg = 0;\n    let hh = 0;\n \
    \   let iii = 0;\n    let jjj = 0;\n    let kkk = 0;\n    let lll = 0;\n    let\
    \ mmm = 0;\n    let nnn = 0;\n    let ooo = 0;\n    let ppp = 0;\n    let qqq\
    \ = 0;\n    let rrr = 0;\n    let sss = 0;\n    let ttt = 0;\n   ", "    let new_lst:\
    \ any = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length\
    \ % 2 === 0) {\n            new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort();\n\
    \    return new_lst;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    console.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let new_lst:\
    \ any = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length\
    \ % 2 === 0) {\n            new_lst.push(lst[i]);\n        }\n    }\n    return\
    \ new_lst.sort();\n}\n", "    let result: any = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i].length % 2 === 0) {\n            result.push(lst[i]);\n\
    \        }\n    }\n    return result.sort();\n}\n\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "    let result: any = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i].length % 2 === 0) {\n            result.push(lst[i]);\n\
    \        }\n    }\n    return result.sort();\n}\n\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "    let new_list: any = [];\n    for (let i: number = 0; i <\
    \ lst.length; i++) {\n        if (lst[i].length % 2 === 0) {\n            new_list.push(lst[i]);\n\
    \        }\n    }\n    new_list.sort();\n    return new_list;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));", "    let lst_len = lst.length;\n    let new_lst = [];\n    for\
    \ (let i = 0; i < lst_len; i++) {\n        if (lst[i].length % 2 === 0) {\n  \
    \          new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort();\n    return\
    \ new_lst;\n}\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));", "    let lst_len = lst.length;\n    let lst_sorted\
    \ = [];\n    let lst_sorted_len = 0;\n    let lst_sorted_index = 0;\n    let lst_sorted_index_len\
    \ = 0;\n    let lst_sorted_index_len_next = 0;\n    let lst_sorted_index_len_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev = 0;\n    let lst_sorted_index_len_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev = 0;\n    let\
    \ lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    let lst_sorted_index_", "    let odd_lst: any = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 !== 0) {\n    \
    \        odd_lst.push(lst[i]);\n        }\n    }\n    odd_lst.sort();\n    return\
    \ odd_lst;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let lst_sort = lst.sort(function (a,\
    \ b) {\n        if (a.length < b.length) {\n            return -1;\n        }\n\
    \        if (a.length > b.length) {\n            return 1;\n        }\n      \
    \  return 0;\n    });\n    let lst_new = [];\n    for (let i = 0; i < lst_sort.length;\
    \ i++) {\n        if (lst_sort[i].length % 2 == 0) {\n            lst_new.push(lst_sort[i]);\n\
    \        }\n    }\n    return lst_new;\n}\n", "    let new_list: any = [];\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 == 0)\
    \ {\n            new_list.push(lst[i]);\n        }\n    }\n    return new_list.sort();\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let new_lst: any = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 == 0) {\n     \
    \       new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort();\n    return\
    \ new_lst;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let new_lst: any = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 === 0) {\n    \
    \        new_lst.push(lst[i]);\n        }\n    }\n    new_lst.sort();\n    return\
    \ new_lst;\n}\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "    let result: any = [];\n    let lst_len:\
    \ number = lst.length;\n    for (let i: number = 0; i < lst_len; i++) {\n    \
    \    if (lst[i].length % 2 == 0) {\n            result.push(lst[i]);\n       \
    \ }\n    }\n    result.sort();\n    return result;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "    var lst_len = lst.length;\n    var lst_sum = 0;\n    for\
    \ (var i = 0; i < lst_len; i++) {\n        lst_sum += lst[i];\n    }\n    return\
    \ lst_sum;\n}\n", "    let new_lst: any = [];\n    for (let i: number = 0; i <\
    \ lst.length; i++) {\n        if (lst[i].length % 2 === 0) {\n            new_lst.push(lst[i]);\n\
    \        }\n    }\n    new_lst.sort(function (a: any, b: any): any {\n       \
    \ if (a.length > b.length) {\n            return 1;\n        } else if (a.length\
    \ < b.length) {\n            return -1;\n        } else {\n            return\
    \ 0;\n        }\n    });\n    return new_lst;\n}\n\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "    let lst_len = lst.length;\n    let lst_sum = 0;\n    for\
    \ (let i = 0; i < lst_len; i++) {\n        lst_sum += lst[i];\n    }\n    return\
    \ lst_sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
