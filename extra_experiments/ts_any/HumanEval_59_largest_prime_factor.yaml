name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           n /= i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i ==\
    \ 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return i;\n}\n", "    let i: any;\n    let max: any;\n    for (i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0) {\n            max = i;\n      \
    \      n /= i;\n            i = 1;\n        }\n    }\n    return max;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let i: any;\n    let factors: any;\n    let max: any;\n\
    \    factors = prime_factors(n);\n    max = 0;\n    for (i = 0; i < factors.length;\
    \ i++) {\n        if (factors[i] > max) {\n            max = factors[i];\n   \
    \     }\n    }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n    let prime:\
    \ any;\n    let max: any;\n    let num: any;\n    num = n;\n    max = 0;\n   \
    \ i = 2;\n    while (i <= num) {\n        if (num % i === 0) {\n            prime\
    \ = true;\n            for (let j: any = 2; j < i; j++) {\n                if\
    \ (i % j === 0) {\n                    prime = false;\n                    break;\n\
    \                }\n            }\n            if (prime) {\n                max\
    \ = i;\n                num = num / i;\n            }\n        }\n        i++;\n\
    \    }\n    return max;\n}\n", "    let i: any;\n    let max: any;\n    for (i\
    \ = 2; i <= n; i++) {\n        while (n % i === 0) {\n            max = i;\n \
    \           n /= i;\n        }\n    }\n    return max;\n}\n", "    let i: any;\n\
    \    let factors: any = [];\n    for (i = 2; i <= n; i++) {\n        while (n\
    \ % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let i: any;\n    let\
    \ largest: any;\n    let factor: any;\n    let factors: any;\n    let prime: any;\n\
    \    factors = prime_factors(n);\n    largest = 0;\n    for (i = 0; i < factors.length;\
    \ i++) {\n        factor = factors[i];\n        if (factor > largest) {\n    \
    \        largest = factor;\n        }\n    }\n    return largest;\n}\n", "   \
    \ let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n}\n",
  "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let max: any;\n    for (i = 2; i <= n; i++) {\n  \
    \      if (n % i === 0) {\n            max = i;\n            n /= i;\n       \
    \     i = 1;\n        }\n    }\n    return max;\n}\n", "    let i: any;\n    let\
    \ factors: any;\n    let max: any;\n    factors = prime_factors(n);\n    max =\
    \ 0;\n    for (i = 0; i < factors.length; i++) {\n        if (factors[i] > max)\
    \ {\n            max = factors[i];\n        }\n    }\n    return max;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let factor: any;\n    let max: any;\n    max = 1;\n\
    \    i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            factor\
    \ = i;\n            n = n / factor;\n            while (n % factor === 0) {\n\
    \                n = n / factor;\n            }\n            max = factor;\n \
    \       }\n        i = i + 1;\n    }\n    return max;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
