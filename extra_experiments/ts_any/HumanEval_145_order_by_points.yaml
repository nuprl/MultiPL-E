name: HumanEval_145_order_by_points
language: ts
prompt: "//Write a function which sorts the given array of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1,\
  \ -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums:\
  \ any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
  \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
  \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
  \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9,\
  \ 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
  \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
completions: ["    let result: any = [];\n    let sum: any = [];\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum.push(nums[i].toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b)));\n    }\n    let sortedSum = sum.slice().sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < sortedSum.length; i++) {\n        result.push(nums[sum.indexOf(sortedSum[i])]);\n\
    \        sum[sum.indexOf(sortedSum[i])] = -1;\n    }\n    return result;\n}\n",
  "    return nums.sort((a, b) => {\n        let sumA = a.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n",
  "    let sum = 0;\n    let arr = [];\n    for (let i = 0; i < nums.length; i++)\
    \ {\n        let num = nums[i];\n        let numStr = num.toString();\n      \
    \  for (let j = 0; j < numStr.length; j++) {\n            sum += parseInt(numStr[j]);\n\
    \        }\n        arr.push(sum);\n        sum = 0;\n    }\n    let sortedArr\
    \ = arr.slice().sort();\n    let result = [];\n    for (let i = 0; i < sortedArr.length;\
    \ i++) {\n        let index = arr.indexOf(sortedArr[i]);\n        result.push(nums[index]);\n\
    \        arr[index] = -1;\n    }\n    return result;\n}\n", "  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, curr) => acc + parseInt(curr),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n", "    let sum = 0;\n    let result\
    \ = [];\n    let sumArr = [];\n    let indexArr = [];\n    let index = 0;\n  \
    \  for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums[i].toString().length;\
    \ j++) {\n            sum += parseInt(nums[i].toString()[j]);\n        }\n   \
    \     sumArr.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < sumArr.length;\
    \ i++) {\n        for (let j = 0; j < sumArr.length; j++) {\n            if (sumArr[i]\
    \ < sumArr[j]) {\n                index = sumArr[i];\n                sumArr[i]\
    \ = sumArr[j];\n                sumArr[j] = index;\n                index = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = index;\n      \
    \      }\n        }\n    }\n    return nums;\n}\n", "    let sum: number = 0;\n\
    \    let arr: number[] = [];\n    let arr2: number[] = [];\n    let arr3: number[]\
    \ = [];\n    let arr4: number[] = [];\n    let arr5: number[] = [];\n    let arr6:\
    \ number[] = [];\n    let arr7: number[] = [];\n    let arr8: number[] = [];\n\
    \    let arr9: number[] = [];\n    let arr10: number[] = [];\n    let arr11: number[]\
    \ = [];\n    let arr12: number[] = [];\n    let arr13: number[] = [];\n    let\
    \ arr14: number[] = [];\n    let arr15: number[] = [];\n    let arr16: number[]\
    \ = [];\n    let arr17: number[] = [];\n    let arr18: number[] = [];\n    let\
    \ arr19: number[] = [];\n    let arr20: number[] = [];\n    let arr21: number[]\
    \ = [];\n    let arr22: number[] = [];\n    let arr23: number[] = [];\n    let\
    \ arr24: number[] = [];\n    let arr25: number[] = [];\n    let arr26: number[]\
    \ = [];\n    let arr27: number[] = [];\n    let arr28: number[] = [];\n    let\
    \ arr29: number[] = [];\n    let arr30: number[] = [];\n    let arr31: number[]\
    \ = [];\n    let arr32: number[] = [];\n    let arr33: number[] = [];\n    let\
    \ arr34: number[] = [];\n    let arr35: number[] = [];\n    let arr36: number[]\
    \ = [];\n    let arr37: number[] = [];\n    let arr38: number[] = [];\n    let\
    \ arr39: number[] = [];\n    let arr40: number[] = [];\n    let arr41: number[]\
    \ = [];\n    let arr42: number[] = [];\n    let arr43: number[] = [];\n    let\
    \ arr44: number[] = [];\n    let arr45: number[] = [];\n    let arr46: number[]\
    \ = [];\n    let arr47: number[] = [];\n    let arr48: number[] = [];\n    let\
    \ arr49: number[] = [];\n    let arr50: number[] = [];\n    let arr", "    if\
    \ (nums.length === 0) {\n        return [];\n    }\n    let sum = 0;\n    let\
    \ sumArr = [];\n    for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n\
    \        for (let j = 0; j < nums[i].toString().length; j++) {\n            sum\
    \ += parseInt(nums[i].toString()[j]);\n        }\n        sumArr.push(sum);\n\
    \    }\n    let temp;\n    for (let i = 0; i < sumArr.length; i++) {\n       \
    \ for (let j = i + 1; j < sumArr.length; j++) {\n            if (sumArr[i] > sumArr[j])\
    \ {\n                temp = sumArr[i];\n                sumArr[i] = sumArr[j];\n\
    \                sumArr[j] = temp;\n                temp = nums[i];\n        \
    \        nums[i] = nums[j];\n                nums[j] = temp;\n            }\n\
    \        }\n    }\n    return nums;\n}\n", "    let sum = 0;\n    let sumArr =\
    \ [];\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n   \
    \     sum = 0;\n        for (let j = 0; j < nums[i].toString().length; j++) {\n\
    \            sum += parseInt(nums[i].toString()[j]);\n        }\n        sumArr.push(sum);\n\
    \    }\n    let sortedSumArr = sumArr.sort((a, b) => a - b);\n    for (let i =\
    \ 0; i < sortedSumArr.length; i++) {\n        for (let j = 0; j < sumArr.length;\
    \ j++) {\n            if (sortedSumArr[i] === sumArr[j]) {\n                result.push(nums[j]);\n\
    \                sumArr[j] = -1;\n                break;\n            }\n    \
    \    }\n    }\n    return result;\n}\n", "    let result: any = [];\n    let sum:\
    \ any = [];\n    for (let i: number = 0; i < nums.length; i++) {\n        sum.push(nums[i].toString().split('').reduce((a:\
    \ number, b: number) => a + +b, 0));\n    }\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        let min: number = Math.min(...sum);\n        let index: number\
    \ = sum.indexOf(min);\n        result.push(nums[index]);\n        sum.splice(index,\
    \ 1);\n        nums.splice(index, 1);\n    }\n    return result;\n}\n", "    let\
    \ result = [];\n    let sum = 0;\n    let sumArr = [];\n    let sumObj = {};\n\
    \    for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n        for (let\
    \ j = 0; j < nums[i].toString().length; j++) {\n            sum += parseInt(nums[i].toString()[j]);\n\
    \        }\n        sumObj[sum] = nums[i];\n        sumArr.push(sum);\n    }\n\
    \    sumArr.sort((a, b) => a - b);\n    for (let i = 0; i < sumArr.length; i++)\
    \ {\n        result.push(sumObj[sumArr[i]]);\n    }\n    return result;\n}\n",
  "    return nums.sort((a, b) => {\n        let aSum = a.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b));\n        let bSum = b.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b));\n        return aSum - bSum;\n    });\n}\n",
  "  let result = [];\n  let sum = 0;\n  let sumArr = [];\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum = 0;\n    for (let j = 0; j < nums[i].toString().length; j++)\
    \ {\n      sum += parseInt(nums[i].toString()[j]);\n    }\n    sumArr.push(sum);\n\
    \  }\n  for (let i = 0; i < sumArr.length; i++) {\n    let min = Math.min(...sumArr);\n\
    \    let index = sumArr.indexOf(min);\n    result.push(nums[index]);\n    sumArr.splice(index,\
    \ 1);\n    nums.splice(index, 1);\n  }\n  return result;\n}\n", "    let sum =\
    \ 0;\n    let arr = [];\n    for (let i = 0; i < nums.length; i++) {\n       \
    \ sum = 0;\n        for (let j = 0; j < nums[i].toString().length; j++) {\n  \
    \          sum += parseInt(nums[i].toString()[j]);\n        }\n        arr.push(sum);\n\
    \    }\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j\
    \ < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let\
    \ temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n\
    \                temp = nums[i];\n                nums[i] = nums[j];\n       \
    \         nums[j] = temp;\n            }\n        }\n    }\n    return nums;\n\
    }\n", "    let result = [];\n    let sum = 0;\n    let sum_arr = [];\n    let\
    \ index_arr = [];\n    for (let i = 0; i < nums.length; i++) {\n        sum =\
    \ 0;\n        for (let j = 0; j < nums[i].toString().length; j++) {\n        \
    \    sum += parseInt(nums[i].toString()[j]);\n        }\n        sum_arr.push(sum);\n\
    \        index_arr.push(i);\n    }\n    for (let i = 0; i < sum_arr.length; i++)\
    \ {\n        for (let j = 0; j < sum_arr.length - 1; j++) {\n            if (sum_arr[j]\
    \ > sum_arr[j + 1]) {\n                let temp = sum_arr[j];\n              \
    \  sum_arr[j] = sum_arr[j + 1];\n                sum_arr[j + 1] = temp;\n    \
    \            temp = index_arr[j];\n                index_arr[j] = index_arr[j\
    \ + 1];\n                index_arr[j + 1] = temp;\n            }\n        }\n\
    \    }\n    for (let i = 0; i < index_arr.length; i++) {\n        result.push(nums[index_arr[i]]);\n\
    \    }\n    return result;\n}\n", "    return nums.sort((a, b) => {\n        let\
    \ aSum = a.toString().split('').reduce((sum, curr) => sum + parseInt(curr), 0);\n\
    \        let bSum = b.toString().split('').reduce((sum, curr) => sum + parseInt(curr),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n", "    let sum = 0;\n    let\
    \ arr = [];\n    let arr2 = [];\n    for (let i = 0; i < nums.length; i++) {\n\
    \        let num = nums[i];\n        while (num > 0) {\n            sum += num\
    \ % 10;\n            num = Math.floor(num / 10);\n        }\n        arr.push(sum);\n\
    \        sum = 0;\n    }\n    for (let i = 0; i < arr.length; i++) {\n       \
    \ for (let j = 0; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n\
    \                let temp = arr[i];\n                arr[i] = arr[j];\n      \
    \          arr[j] = temp;\n                temp = nums[i];\n                nums[i]\
    \ = nums[j];\n                nums[j] = temp;\n            }\n        }\n    }\n\
    \    return nums;\n}\n", "    let result = [];\n    let sum = 0;\n    let sumArr\
    \ = [];\n    for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n     \
    \   for (let j = 0; j < nums[i].toString().length; j++) {\n            sum +=\
    \ parseInt(nums[i].toString()[j]);\n        }\n        sumArr.push(sum);\n   \
    \ }\n    for (let i = 0; i < sumArr.length; i++) {\n        for (let j = 0; j\
    \ < sumArr.length; j++) {\n            if (sumArr[i] < sumArr[j]) {\n        \
    \        let temp = sumArr[i];\n                sumArr[i] = sumArr[j];\n     \
    \           sumArr[j] = temp;\n                temp = nums[i];\n             \
    \   nums[i] = nums[j];\n                nums[j] = temp;\n            }\n     \
    \   }\n    }\n    return nums;\n}\n", "    let result: any = [];\n    let sum:\
    \ any = [];\n    for (let i: number = 0; i < nums.length; i++) {\n        sum.push(nums[i].toString().split('').reduce((a:\
    \ number, b: number) => parseInt(a) + parseInt(b)));\n    }\n    let sorted: any\
    \ = sum.slice().sort((a: number, b: number) => a - b);\n    for (let i: number\
    \ = 0; i < sorted.length; i++) {\n        result.push(nums[sum.indexOf(sorted[i])]);\n\
    \    }\n    return result;\n}\n", "    let nums_sum = nums.map(x => x.toString().split('').reduce((a,\
    \ b) => parseInt(a) + parseInt(b), 0));\n    let nums_index = nums.map((x, i)\
    \ => i);\n    let nums_sorted = nums_sum.map((x, i) => [x, nums_index[i]]).sort((a,\
    \ b) => a[0] - b[0]);\n    let nums_sorted_index = nums_sorted.map(x => x[1]);\n\
    \    return nums_sorted_index.map(x => nums[x]);\n}\n", "    let sum = 0;\n  \
    \  let result = [];\n    let result2 = [];\n    let result3 = [];\n    let result4\
    \ = [];\n    let result5 = [];\n    let result6 = [];\n    let result7 = [];\n\
    \    let result8 = [];\n    let result9 = [];\n    let result10 = [];\n    let\
    \ result11 = [];\n    let result12 = [];\n    let result13 = [];\n    let result14\
    \ = [];\n    let result15 = [];\n    let result16 = [];\n    let result17 = [];\n\
    \    let result18 = [];\n    let result19 = [];\n    let result20 = [];\n    let\
    \ result21 = [];\n    let result22 = [];\n    let result23 = [];\n    let result24\
    \ = [];\n    let result25 = [];\n    let result26 = [];\n    let result27 = [];\n\
    \    let result28 = [];\n    let result29 = [];\n    let result30 = [];\n    let\
    \ result31 = [];\n    let result32 = [];\n    let result33 = [];\n    let result34\
    \ = [];\n    let result35 = [];\n    let result36 = [];\n    let result37 = [];\n\
    \    let result38 = [];\n    let result39 = [];\n    let result40 = [];\n    let\
    \ result41 = [];\n    let result42 = [];\n    let result43 = [];\n    let result44\
    \ = [];\n    let result45 = [];\n    let result46 = [];\n    let result47 = [];\n\
    \    let result48 = [];\n    let result49 = [];\n    let result50 = [];\n    let\
    \ result51 = [];\n    let result52 = [];\n    let result53 = [];\n    let result54\
    \ = [];\n    let result55 = [];\n    let result56 = [];\n    let result57 = [];\n\
    \    let result58 = [];\n    let result59 = [];\n    let result60 = [];\n    let\
    \ result61 = [];\n    let result62 = [];\n    let result63 = [];\n    let result64\
    \ = [];\n    let result65 = [];\n    let result66 = [];\n    let result67 = [];\n\
    \    let result68 = [];\n    let result69 = [];\n    let result70 = [];\n    let\
    \ result71 = [];\n    let result72 = [];\n   "]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
