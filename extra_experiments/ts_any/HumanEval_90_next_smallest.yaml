name: HumanEval_90_next_smallest
language: ts
prompt: "//You are given an array of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n// Return undefined if there\
  \ is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5,\
  \ 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1,\
  \ 1])\n// undefined\nfunction next_smallest(lst: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = next_smallest;\n  assert.deepEqual(candidate([1, 2,\
  \ 3, 4, 5]),2);\n  assert.deepEqual(candidate([5, 1, 4, 3, 2]),2);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([1,\
  \ 1, 1, 1, 0]),1);\n  assert.deepEqual(candidate([1, 1]),undefined);\n  assert.deepEqual(candidate([-35,\
  \ 34, 12, -45]),-35);\n}\n\ntest();"
completions: ["    if (lst.length < 2) {\n        return undefined;\n    }\n    let\
    \ min = lst[0];\n    let min2 = lst[1];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    return min2;\n}\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let min = lst[0];\n    let secondMin = lst[1];\n    for (let i = 1;\
    \ i < lst.length; i++) {\n        if (lst[i] < min) {\n            secondMin =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] < secondMin) {\n\
    \            secondMin = lst[i];\n        }\n    }\n    return secondMin;\n}\n",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min = lst[0];\n\
    \    let min2 = lst[1];\n    for (let i = 1; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n     \
    \   } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n    }\n\
    \    return min2;\n}\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let min = lst[0];\n    let secondMin = lst[1];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] < min) {\n            secondMin =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] < secondMin) {\n\
    \            secondMin = lst[i];\n        }\n    }\n    return secondMin;\n}\n",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min = Math.min(...lst);\n\
    \    let min_index = lst.indexOf(min);\n    lst.splice(min_index, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let min = Math.min(...lst);\n    let minIndex = lst.indexOf(min);\n\
    \    lst.splice(minIndex, 1);\n    return Math.min(...lst);\n}\n", "    let min\
    \ = lst[0];\n    let second_min = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        }\n        else if (lst[i] < second_min && lst[i]\
    \ != min) {\n            second_min = lst[i];\n        }\n    }\n    return second_min;\n\
    }\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5,\
    \ 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1,\
    \ 1]));\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n   \
    \ let min = lst[0];\n    let next_min = lst[1];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            next_min = min;\n         \
    \   min = lst[i];\n        } else if (lst[i] < next_min) {\n            next_min\
    \ = lst[i];\n        }\n    }\n    return next_min;\n}\n", "    let smallest =\
    \ lst[0];\n    let secondSmallest = null;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            secondSmallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < secondSmallest) {\n\
    \            secondSmallest = lst[i];\n        }\n    }\n    return secondSmallest;\n\
    }\n", "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min\
    \ = lst[0];\n    let second_min = lst[1];\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    return second_min;\n}\n", "    if (lst.length\
    \ === 0) {\n        return undefined;\n    }\n    if (lst.length === 1) {\n  \
    \      return undefined;\n    }\n    let min = lst[0];\n    let secondMin = lst[1];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         secondMin = min;\n            min = lst[i];\n        }\n        else\
    \ if (lst[i] < secondMin && lst[i] !== min) {\n            secondMin = lst[i];\n\
    \        }\n    }\n    return secondMin;\n}\n", "    if (lst.length < 2) {\n \
    \       return undefined;\n    }\n    let min = lst[0];\n    let secondMin = lst[1];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         secondMin = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < secondMin) {\n            secondMin = lst[i];\n        }\n    }\n    return\
    \ secondMin;\n}\n", "    let smallest = lst[0];\n    let secondSmallest = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length < 2)\
    \ {\n        return undefined;\n    }\n    let min = lst[0];\n    let min2 = lst[1];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n   \
    \         min2 = min;\n            min = lst[i];\n        } else if (lst[i] <\
    \ min2) {\n            min2 = lst[i];\n        }\n    }\n    return min2;\n}\n",
  "    if (lst.length < 2) {\n        return undefined;\n    }\n    let min = Math.min(...lst);\n\
    \    let min_index = lst.indexOf(min);\n    lst.splice(min_index, 1);\n    return\
    \ Math.min(...lst);\n}\n", "    if (lst.length === 0) {\n        return undefined;\n\
    \    }\n    if (lst.length === 1) {\n        return undefined;\n    }\n    let\
    \ min = lst[0];\n    let min2 = lst[1];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        }\n        else if (lst[i] < min2) {\n            min2 = lst[i];\n  \
    \      }\n    }\n    return min2;\n}\n", "    if (lst.length < 2) {\n        return\
    \ undefined;\n    }\n    let smallest = lst[0];\n    let secondSmallest = lst[1];\n\
    \    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n\
    \            secondSmallest = smallest;\n            smallest = lst[i];\n    \
    \    } else if (lst[i] < secondSmallest) {\n            secondSmallest = lst[i];\n\
    \        }\n    }\n    return secondSmallest;\n}\n", "    if (lst.length == 0)\
    \ {\n        return undefined;\n    }\n    let min = lst[0];\n    let second =\
    \ undefined;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] <\
    \ min) {\n            second = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < second || second == undefined) {\n            second = lst[i];\n\
    \        }\n    }\n    return second;\n}\n", "    let min = Math.min(...lst);\n\
    \    let min2 = Math.max(...lst);\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > min && lst[i] < min2) {\n            min2 = lst[i];\n  \
    \      }\n    }\n    if (min2 == Math.max(...lst)) {\n        return undefined;\n\
    \    }\n    return min2;\n}\n", "    if (lst.length < 2) {\n        return undefined;\n\
    \    }\n    let smallest = lst[0];\n    let second_smallest = lst[1];\n    for\
    \ (let i = 1; i < lst.length; i++) {\n        if (lst[i] < smallest) {\n     \
    \       second_smallest = smallest;\n            smallest = lst[i];\n        }\
    \ else if (lst[i] < second_smallest) {\n            second_smallest = lst[i];\n\
    \        }\n    }\n    return second_smallest;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
