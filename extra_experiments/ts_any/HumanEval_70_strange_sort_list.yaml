name: HumanEval_70_strange_sort_list
language: ts
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strange_sort_list;\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 4, 2, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9,\
  \ 6, 8, 7]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1, 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5,\
  \ 5, 5, 5]),[5, 5, 5, 5]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0,\
  \ 2, 2, 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    if (lst.length == 0) {\n        return lst;\n    }\n    let min\
    \ = Math.min(...lst);\n    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n\
    \    let max_index = lst.indexOf(max);\n    let new_list = [];\n    new_list.push(min);\n\
    \    new_list.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    let new_min = Math.min(...lst);\n    let new_max = Math.max(...lst);\n\
    \    let new_min_index = lst.indexOf(new_min);\n    let new_max_index = lst.indexOf(new_max);\n\
    \    new_list.push(new_min);\n    new_list.push(new_max);\n    lst.splice(new_min_index,\
    \ 1);\n    lst.splice(new_max_index - 1, 1);\n    return new_list;\n}\n", "  \
    \  if (lst.length === 0) {\n        return [];\n    }\n    let result = [];\n\
    \    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let minIndex\
    \ = lst.indexOf(min);\n    let maxIndex = lst.indexOf(max);\n    result.push(min);\n\
    \    result.push(max);\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex\
    \ - 1, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n    let\
    \ max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let max_index\
    \ = lst.indexOf(max);\n    let new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ new_lst.concat(strange_sort_list(lst));\n}\n", "    if (lst.length === 0) {\n\
    \        return [];\n    }\n    let sorted_list = [];\n    let min_index = 0;\n\
    \    let max_index = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < lst[min_index]) {\n            min_index = i;\n        }\n       \
    \ if (lst[i] > lst[max_index]) {\n            max_index = i;\n        }\n    }\n\
    \    sorted_list.push(lst[min_index]);\n    sorted_list.push(lst[max_index]);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ sorted_list.concat(strange_sort_list(lst));\n}\n", "    let result: any = [];\n\
    \    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_count: number = 0;\n    let max_count: number = 0;\n    let min_flag:\
    \ boolean = true;\n    let max_flag: boolean = true;\n    for (let i: number =\
    \ 0; i < lst.length; i++) {\n        if (min_flag) {\n            result.push(min);\n\
    \            min_count++;\n            min_flag = false;\n        } else if (max_flag)\
    \ {\n            result.push(max);\n            max_count++;\n            max_flag\
    \ = false;\n        }\n        if (min_count === min_index) {\n            min_flag\
    \ = true;\n        }\n        if (max_count === max_index) {\n            max_flag\
    \ = true;\n        }\n    }\n    return result;\n}\n", "    if (lst.length ===\
    \ 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n    let max\
    \ = Math.max(...lst);\n    let result = [];\n    let i = 0;\n    while (i < lst.length)\
    \ {\n        result.push(min);\n        lst.splice(lst.indexOf(min), 1);\n   \
    \     if (lst.length === 0) {\n            break;\n        }\n        result.push(max);\n\
    \        lst.splice(lst.indexOf(max), 1);\n        min = Math.min(...lst);\n \
    \       max = Math.max(...lst);\n        i += 2;\n    }\n    return result;\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    let res: any\
    \ = [];\n    let min: any = Math.min(...lst);\n    let max: any = Math.max(...lst);\n\
    \    let min_index: any = lst.indexOf(min);\n    let max_index: any = lst.indexOf(max);\n\
    \    res.push(min);\n    res.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index,\
    \ 1);\n    while (lst.length > 0) {\n        let min: any = Math.min(...lst);\n\
    \        let max: any = Math.max(...lst);\n        let min_index: any = lst.indexOf(min);\n\
    \        let max_index: any = lst.indexOf(max);\n        res.push(min);\n    \
    \    res.push(max);\n        lst.splice(min_index, 1);\n        lst.splice(max_index,\
    \ 1);\n    }\n    return res;\n}\n", "    if (lst.length === 0) {\n        return\
    \ [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let new_lst = [];\n    let i = 0;\n    while (i < lst.length) {\n       \
    \ new_lst.push(min);\n        new_lst.push(max);\n        i += 2;\n    }\n   \
    \ return new_lst;\n}\n\nconsole.log(strange_sort_list([1, 2, 3, 4]));\nconsole.log(strange_sort_list([5,\
    \ 5, 5, 5]));\nconsole.log(strange_sort_list([]));", "    if (lst.length === 0)\
    \ {\n        return [];\n    }\n    let min = Math.min(...lst);\n    let max =\
    \ Math.max(...lst);\n    let new_lst = [];\n    let i = 0;\n    while (i < lst.length)\
    \ {\n        if (i % 2 === 0) {\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    while (sorted.length >\
    \ 0) {\n        result.push(sorted.shift());\n        if (sorted.length > 0) {\n\
    \            result.push(sorted.pop());\n        }\n    }\n    return result;\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    let sorted =\
    \ lst.sort((a, b) => a - b);\n    let result = [];\n    let i = 0;\n    let j\
    \ = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    let sorted_list = lst.sort((a, b) =>\
    \ a - b);\n    let result = [];\n    while (sorted_list.length > 0) {\n      \
    \  result.push(sorted_list.shift());\n        if (sorted_list.length > 0) {\n\
    \            result.push(sorted_list.pop());\n        }\n    }\n    return result;\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let new_lst = [];\n    let i = 0;\n    while\
    \ (new_lst.length < lst.length) {\n        if (i % 2 === 0) {\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_lst;\n}\n", "    if (lst.length === 0) {\n        return [];\n\
    \    }\n    let min = lst[0];\n    let max = lst[0];\n    let minIndex = 0;\n\
    \    let maxIndex = 0;\n    let newList = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ maxIndex = i;\n        }\n        if (lst[i] < min) {\n            min = lst[i];\n\
    \            minIndex = i;\n        }\n    }\n    newList.push(min);\n    newList.push(max);\n\
    \    lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n    return newList.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let new_lst = [];\n    let min_index = lst.indexOf(min);\n\
    \    let max_index = lst.indexOf(max);\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let result = [];\n    let i = 0;\n    while\
    \ (lst.length > 0) {\n        if (i % 2 === 0) {\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return result;\n}\n", "    if (lst.length === 0) {\n        return [];\n \
    \   }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let\
    \ result = [];\n    let i = 0;\n    while (i < lst.length) {\n        if (i %\
    \ 2 === 0) {\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    let result: any\
    \ = [];\n    let min: number = Math.min(...lst);\n    let max: number = Math.max(...lst);\n\
    \    let min_index: number = lst.indexOf(min);\n    let max_index: number = lst.indexOf(max);\n\
    \    let min_count: number = 0;\n    let max_count: number = 0;\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n         \
    \   result.push(min);\n            min_count++;\n        } else {\n          \
    \  result.push(max);\n            max_count++;\n        }\n    }\n    return result;\n\
    }\n", "    let new_lst = [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let min_index = lst.indexOf(min);\n    let max_index = lst.indexOf(max);\n\
    \    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index, 1);\n\
    \    lst.splice(max_index, 1);\n    if (lst.length > 0) {\n        let min = Math.min(...lst);\n\
    \        let max = Math.max(...lst);\n        let min_index = lst.indexOf(min);\n\
    \        let max_index = lst.indexOf(max);\n        new_lst.push(min);\n     \
    \   new_lst.push(max);\n        lst.splice(min_index, 1);\n        lst.splice(max_index,\
    \ 1);\n    }\n    return new_lst;\n}\n", "    let min = Math.min(...lst);\n  \
    \  let max = Math.max(...lst);\n    let new_lst = [];\n    let i = 0;\n    while\
    \ (i < lst.length) {\n        new_lst.push(min);\n        new_lst.push(max);\n\
    \        i += 2;\n    }\n    return new_lst;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
