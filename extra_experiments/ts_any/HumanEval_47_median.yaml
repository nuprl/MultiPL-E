name: HumanEval_47_median
language: ts
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: any):\
  \ any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4,\
  \ 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
  \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8, 1,\
  \ 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    if\
    \ (l.length == 0) {\n        return null;\n    }\n    l.sort();\n    if (l.length\
    \ % 2 == 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n \
    \   }\n    return l[Math.floor(l.length / 2)];\n}\n", "    if (l.length == 0)\
    \ {\n        return null;\n    }\n    l.sort();\n    if (l.length % 2 == 0) {\n\
    \        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    }\n    return\
    \ l[Math.floor(l.length / 2)];\n}\n", "    let sorted = l.sort();\n    let len\
    \ = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len / 2 -\
    \ 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len - 1) /\
    \ 2];\n    }\n}\n", "    let sorted = l.sort(function(a, b) {return a - b});\n\
    \    let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n", "    let sorted = l.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n", "    let n = l.length;\n \
    \   if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else\
    \ {\n        return l[(n - 1) / 2];\n    }\n}\n", "    let sorted = l.sort();\n\
    \    let length = sorted.length;\n    if (length % 2 == 0) {\n        return (sorted[length\
    \ / 2] + sorted[length / 2 - 1]) / 2;\n    } else {\n        return sorted[Math.floor(length\
    \ / 2)];\n    }\n}\n", "    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len /\
    \ 2]) / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n",
  "    let l_sorted = l.sort(function(a, b){return a-b});\n    let l_len = l_sorted.length;\n\
    \    if (l_len % 2 == 0) {\n        return (l_sorted[l_len/2] + l_sorted[l_len/2\
    \ - 1]) / 2;\n    } else {\n        return l_sorted[Math.floor(l_len/2)];\n  \
    \  }\n}\n", "    // YOUR CODE HERE\n    let len = l.length;\n    let mid = Math.floor(len\
    \ / 2);\n    if (len % 2 == 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n\
    \    } else {\n        return l[mid];\n    }\n}\n", "    // YOUR CODE HERE\n \
    \   return 0;\n}\n", "    if (l.length == 0) {\n        return null;\n    }\n\
    \    l.sort();\n    if (l.length % 2 == 0) {\n        return (l[l.length / 2 -\
    \ 1] + l[l.length / 2]) / 2;\n    }\n    return l[Math.floor(l.length / 2)];\n\
    }\n", "    let n = l.length;\n    let m = n / 2;\n    if (n % 2 == 0) {\n    \
    \    return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[Math.floor(m)];\n\
    \    }\n}\n", "    if (l.length === 0) {\n        return null;\n    }\n    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort(function(a, b) { return a - b; });\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", " \
    \   let len = l.length;\n    let mid = Math.floor(len / 2);\n    if (len % 2 ===\
    \ 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return\
    \ l[mid];\n    }\n}\n", "    //YOUR CODE HERE\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    //YOUR CODE HERE\n    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort(function(a, b) {\n        return a - b;\n    });\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ m = l.length / 2;\n    return l.length % 2 === 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n\
    }\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    return 0;\n}\n", "    return\
    \ 0;\n}\n", "    let n = l.length;\n    if (n === 0) {\n        return null;\n\
    \    }\n    if (n === 1) {\n        return l[0];\n    }\n    let sorted = l.sort((a,\
    \ b) => a - b);\n    if (n % 2 === 0) {\n        return (sorted[n / 2 - 1] + sorted[n\
    \ / 2]) / 2;\n    }\n    return sorted[Math.floor(n / 2)];\n}\n", "    //YOUR\
    \ CODE HERE\n    return 0;\n}\n", "    if (l.length % 2 == 0) {\n        return\
    \ (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n", "    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n    // >>> median([-10, 4, 6,\
    \ 1000, 10, 20, 100])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20,\
    \ 100, 1000])\n    // 15.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, 100, 1000,\
    \ -100])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, 100, 1000,\
    \ -100, -1000])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, 100,\
    \ 1000, -100, -1000, 0])\n    // 5.0\n    // >>> median([-10, 4, 6, 1000, 10,\
    \ 20, 100, 1000, -100, -1000, 0, 0])\n    // 5.0\n    // >>> median([-10, 4, 6,\
    \ 1000, 10, 20, 100, 1000, -100, -1000, 0, 0, 0])\n    // 5.0\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, 100, 1000, -100, -1000, 0, 0, 0, 0])\n    // 5.0\n    //\
    \ >>> median([-10, 4, 6, 1000, 10, 20, 100, 1000, -100, -1000, 0, 0, 0, 0, 0])\n\
    \    // 5.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, 100, 1000, -100, -1000,\
    \ 0, 0, 0, 0, 0, 0])\n    // 5.0\n    // >>> median([-10, 4, 6, 1000, 10, 20,\
    \ 100, 1000, -100, -1000, 0, 0, 0, 0, 0, 0, 0])\n    // 5.0\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, 100, 1000, -100, -1000, 0, 0, 0, 0, 0, 0, 0,", "    let\
    \ length = l.length;\n    if (length % 2 == 0) {\n        return (l[length / 2\
    \ - 1] + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let len = sorted.length;\n    if\
    \ (len % 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) /\
    \ 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n", "    //\
    \ your code here\n    let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    var\
    \ sorted = l.sort(function(a, b) { return a - b; });\n    var mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    if\
    \ (l.length === 0) {\n        return null;\n    }\n    l.sort();\n    if (l.length\
    \ % 2 === 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n\
    \    } else {\n        return l[Math.floor(l.length / 2)];\n    }\n}\n", "   \
    \ // your code here\n    let len = l.length;\n    let mid = Math.floor(len / 2);\n\
    \    let nums = [...l].sort((a, b) => a - b);\n    return len % 2 !== 0 ? nums[mid]\
    \ : (nums[mid - 1] + nums[mid]) / 2;\n}\n", "    let sorted = l.sort();\n    let\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n  \
    \      return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n", "    // your code here\n    return 0;\n}\n", "  \
    \  let n = l.length;\n    if (n === 0) {\n        return null;\n    } else if\
    \ (n % 2 === 1) {\n        return l[Math.floor(n / 2)];\n    } else {\n      \
    \  return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n}\n", "    let l2 = l.sort(function(a,\
    \ b) { return a - b; });\n    let mid = Math.floor(l2.length / 2);\n    if (l2.length\
    \ % 2 == 0) {\n        return (l2[mid - 1] + l2[mid]) / 2;\n    } else {\n   \
    \     return l2[mid];\n    }\n}\n", "    // YOUR CODE HERE\n    let length = l.length;\n\
    \    if (length % 2 == 0) {\n        return (l[length / 2 - 1] + l[length / 2])\
    \ / 2;\n    } else {\n        return l[(length - 1) / 2];\n    }\n}\n", "    if\
    \ (l.length === 0) {\n        return null;\n    }\n    l.sort(function (a, b)\
    \ { return a - b; });\n    var mid = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    }\n    return l[mid];\n\
    }\n", "    // YOUR CODE HERE\n    let sorted = l.sort((a, b) => a - b);\n    let\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n  \
    \      return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n", "    let n = l.length;\n    if (n == 0) {\n     \
    \   return null;\n    }\n    if (n == 1) {\n        return l[0];\n    }\n    let\
    \ sorted = l.sort();\n    if (n % 2 == 0) {\n        return (sorted[n / 2 - 1]\
    \ + sorted[n / 2]) / 2;\n    }\n    else {\n        return sorted[Math.floor(n\
    \ / 2)];\n    }\n}\n", "    if (l.length == 0) {\n        return null;\n    }\n\
    \    l.sort();\n    let mid = Math.floor(l.length / 2);\n    if (l.length % 2\
    \ == 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n    }\n    return l[mid];\n\
    }\n", "    if (l.length % 2 === 0) {\n        return (l[l.length / 2] + l[l.length\
    \ / 2 - 1]) / 2;\n    } else {\n        return l[Math.floor(l.length / 2)];\n\
    \    }\n}\n", "    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    // 15.0\n    if (l.length == 0) {\n        return\
    \ null;\n    }\n    l.sort();\n    let mid = Math.floor(l.length / 2);\n    if\
    \ (l.length % 2 == 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n    } else\
    \ {\n        return l[mid];\n    }\n}\n", "    // YOUR CODE HERE\n    let m =\
    \ l.length / 2;\n    if (l.length % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[Math.floor(m)];\n    }\n}\n", "    if (l.length\
    \ == 0) {\n        return null;\n    }\n    let sorted = l.sort((a, b) => a -\
    \ b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2\
    \ == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    }\n    return\
    \ sorted[mid];\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    // YOUR\
    \ CODE HERE\n    if (l.length % 2 == 0) {\n        return (l[l.length / 2] + l[l.length\
    \ / 2 - 1]) / 2;\n    } else {\n        return l[Math.floor(l.length / 2)];\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let length = sorted.length;\n \
    \   if (length % 2 == 0) {\n        return (sorted[length / 2] + sorted[length\
    \ / 2 - 1]) / 2;\n    } else {\n        return sorted[Math.floor(length / 2)];\n\
    \    }\n}\n", "    return 0;\n}\n", "    return 0;\n}\n", "    //YOUR CODE HERE\n\
    \    let sorted = l.sort(function(a, b){return a-b});\n    let mid = Math.floor(sorted.length/2);\n\
    \    if (sorted.length % 2 == 0){\n        return (sorted[mid] + sorted[mid-1])/2;\n\
    \    }\n    else {\n        return sorted[mid];\n    }\n}\n", "    let sorted\
    \ = l.sort();\n    let length = sorted.length;\n    if (length % 2 === 0) {\n\
    \        return (sorted[length / 2] + sorted[length / 2 - 1]) / 2;\n    } else\
    \ {\n        return sorted[Math.floor(length / 2)];\n    }\n}\n", "    let length\
    \ = l.length;\n    if (length % 2 === 0) {\n        return (l[length / 2 - 1]\
    \ + l[length / 2]) / 2;\n    } else {\n        return l[(length - 1) / 2];\n \
    \   }\n}\n", "    if (l.length == 0) {\n        return null;\n    }\n    l.sort();\n\
    \    var half = Math.floor(l.length / 2);\n    if (l.length % 2) {\n        return\
    \ l[half];\n    } else {\n        return (l[half - 1] + l[half]) / 2.0;\n    }\n\
    }\n", "    let sorted = l.sort();\n    let n = len(l);\n    if (n % 2 == 0) {\n\
    \        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2;\n    } else {\n     \
    \   return sorted[(n - 1) / 2];\n    }\n}\n", "    let sorted = l.sort();\n  \
    \  let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n\
    \        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return\
    \ sorted[mid];\n    }\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n\
    \ - 1) / 2];\n    }\n}\n", "    //YOUR CODE HERE\n    let sorted = l.sort((a,\
    \ b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    let sorted = l.sort();\n \
    \   let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0)\
    \ {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n", "    //YOUR CODE HERE\n    let sorted =\
    \ l.sort();\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    // your code here\n    let\
    \ n = l.length;\n    let m = Math.floor(n/2);\n    if (n % 2 == 0) {\n       \
    \ return (l[m-1] + l[m])/2;\n    } else {\n        return l[m];\n    }\n}\n",
  "    let sorted = l.sort();\n    let len = sorted.length;\n    if (len % 2 === 0)\
    \ {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n\
    \        return sorted[(len - 1) / 2];\n    }\n}\n", "    if (l.length == 0) {\n\
    \        return 0;\n    }\n    else {\n        l.sort();\n        let mid = Math.floor(l.length\
    \ / 2);\n        if (l.length % 2 == 0) {\n            return (l[mid] + l[mid\
    \ - 1]) / 2;\n        }\n        else {\n            return l[mid];\n        }\n\
    \    }\n}\n", "    let sorted = l.sort();\n    let len = sorted.length;\n    let\
    \ mid = Math.floor(len / 2);\n    if (len % 2 == 0) {\n        return (sorted[mid]\
    \ + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n\
    }\n", "    // TODO\n    return 0;\n}\n", "    // YOUR CODE HERE\n    return 0;\n\
    }\n", "    let l_sorted = l.sort();\n    let l_length = l_sorted.length;\n   \
    \ if (l_length % 2 == 0) {\n        return (l_sorted[l_length / 2] + l_sorted[l_length\
    \ / 2 - 1]) / 2;\n    } else {\n        return l_sorted[Math.floor(l_length /\
    \ 2)];\n    }\n}\n", "    if (l.length == 0) {\n        return null;\n    }\n\
    \    l.sort();\n    if (l.length % 2 == 0) {\n        return (l[l.length / 2 -\
    \ 1] + l[l.length / 2]) / 2;\n    }\n    return l[Math.floor(l.length / 2)];\n\
    }\n", "    let sorted = l.sort();\n    let len = sorted.length;\n    if (len %\
    \ 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n  \
    \  } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n", "    let m =\
    \ l.length / 2;\n    return m % 1 ? l[m - 0.5] : (l[m - 1] + l[m]) / 2;\n}\n",
  "    if (l.length == 0) {\n        return null;\n    }\n    else {\n        l.sort();\n\
    \        if (l.length % 2 == 0) {\n            return (l[l.length / 2] + l[l.length\
    \ / 2 - 1]) / 2;\n        }\n        else {\n            return l[(l.length -\
    \ 1) / 2];\n        }\n    }\n}\n", "    if (l.length === 0) {\n        return\
    \ 0;\n    }\n    l.sort();\n    if (l.length % 2 === 0) {\n        return (l[l.length\
    \ / 2] + l[l.length / 2 - 1]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n", "    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>>\
    \ median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n    if (l.length == 0) {\n \
    \       return null;\n    }\n    else if (l.length == 1) {\n        return l[0];\n\
    \    }\n    else {\n        l.sort();\n        if (l.length % 2 == 0) {\n    \
    \        return (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n        }\n    \
    \    else {\n            return l[Math.floor(l.length / 2)];\n        }\n    }\n\
    }\n", "    //YOUR CODE HERE\n    let sorted = l.sort(function(a, b){return a-b});\n\
    \    let mid = Math.floor(sorted.length/2);\n    if (sorted.length % 2 == 0){\n\
    \        return (sorted[mid] + sorted[mid-1])/2;\n    }\n    else{\n        return\
    \ sorted[mid];\n    }\n}\n", "    let l_sorted = l.sort();\n    let l_len = l_sorted.length;\n\
    \    if (l_len % 2 == 0) {\n        return (l_sorted[l_len / 2] + l_sorted[l_len\
    \ / 2 - 1]) / 2;\n    } else {\n        return l_sorted[Math.floor(l_len / 2)];\n\
    \    }\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    return 0;\n}\n",
  "    if (l.length === 0) {\n        return null;\n    }\n    const sorted = l.sort((a,\
    \ b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    }\n \
    \   return sorted[mid];\n}\n", "    let sorted = l.sort(function(a, b) {\n   \
    \     return a - b;\n    });\n    let mid = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid])\
    \ / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    // your code\
    \ here\n    let sorted = l.sort(function(a, b){return a-b});\n    let length =\
    \ sorted.length;\n    if (length % 2 == 0){\n        return (sorted[length/2]\
    \ + sorted[length/2 - 1])/2;\n    }\n    else{\n        return sorted[Math.floor(length/2)];\n\
    \    }\n}\n", "    // YOUR CODE HERE\n    if (l.length % 2 == 0) {\n        return\
    \ (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n", "    let sorted = l.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    return 0;\n}\n", "    let\
    \ n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n     \
    \   return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n\
    }\n", "    // your code here\n    return 0;\n}\n", "    let sorted = l.sort();\n\
    \    let length = sorted.length;\n    if (length % 2 === 0) {\n        return\
    \ (sorted[length / 2] + sorted[length / 2 - 1]) / 2;\n    } else {\n        return\
    \ sorted[Math.floor(length / 2)];\n    }\n}\n", "    //YOUR CODE HERE\n    return\
    \ 0;\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    //YOUR CODE HERE\n\
    \    let sorted = l.sort();\n    let mid = Math.floor(sorted.length / 2);\n  \
    \  if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1])\
    \ / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let n = l.length;\n\
    \    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m -\
    \ 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n", "    // >>>\
    \ median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    // 15.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10,\
    \ 20])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000,\
    \ 10, 20, -10, 4, 6, 1000, 10, 20])\n    // 10.0\n    // >>> median([-10, 4, 6,\
    \ 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000,\
    \ 10, 20])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -10, 4, 6,\
    \ 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000,\
    \ 10, 20])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -10, 4, 6,\
    \ 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000,\
    \ 10, 20, -10, 4, 6, 1000, 10, 20])\n    // 10.0\n    // >>> median([-10, 4, 6,\
    \ 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000,\
    \ 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10,\
    \ 20])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000,\
    \ 10, 20, -10, 4, 6, 1000, 10, 20", "    let sorted = l.sort();\n    let length\
    \ = sorted.length;\n    if (length % 2 === 0) {\n        return (sorted[length\
    \ / 2] + sorted[length / 2 - 1]) / 2;\n    } else {\n        return sorted[Math.floor(length\
    \ / 2)];\n    }\n}\n", "    if (l.length == 0) {\n        return null;\n    }\n\
    \    else {\n        var sorted = l.sort(function (a, b) { return a - b });\n\
    \        var mid = Math.floor(sorted.length / 2);\n        if (sorted.length %\
    \ 2) {\n            return sorted[mid];\n        }\n        else {\n         \
    \   return (sorted[mid - 1] + sorted[mid]) / 2.0;\n        }\n    }\n}\n", " \
    \   // YOUR CODE HERE\n    throw \"Not Implemented\";\n}\n", "    let sorted =\
    \ l.sort();\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    // YOUR CODE HERE\n    if\
    \ (l.length == 0) {\n        return 0;\n    }\n    else {\n        l.sort(function\
    \ (a, b) { return a - b });\n        if (l.length % 2 == 0) {\n            return\
    \ (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n        }\n        else {\n  \
    \          return l[Math.floor(l.length / 2)];\n        }\n    }\n}\n", "    //YOUR\
    \ CODE HERE\n    return 0;\n}\n", "    let sorted = l.sort();\n    let length\
    \ = sorted.length;\n    if (length % 2 == 0) {\n        return (sorted[length\
    \ / 2] + sorted[length / 2 - 1]) / 2;\n    } else {\n        return sorted[(length\
    \ - 1) / 2];\n    }\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    //YOUR\
    \ CODE HERE\n    return 0;\n}\n", "    let sorted = l.sort(function(a, b) { return\
    \ a - b; });\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    return 0;\n}\n", "    let\
    \ sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length /\
    \ 2);\n    if (sorted.length % 2) {\n        return sorted[mid];\n    } else {\n\
    \        return (sorted[mid - 1] + sorted[mid]) / 2.0;\n    }\n}\n", "    return\
    \ 0;\n}\n", "    // YOUR CODE HERE\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    else {\n        l.sort(function (a, b) { return a - b });\n      \
    \  if (l.length % 2 == 0) {\n            return (l[l.length / 2] + l[l.length\
    \ / 2 - 1]) / 2;\n        }\n        else {\n            return l[Math.floor(l.length\
    \ / 2)];\n        }\n    }\n}\n", "    let n = l.length;\n    if (n == 0) {\n\
    \        return null;\n    }\n    let m = Math.floor(n / 2);\n    if (n % 2 ==\
    \ 0) {\n        return (l[m - 1] + l[m]) / 2;\n    }\n    else {\n        return\
    \ l[m];\n    }\n}\n", "    let sorted = l.sort();\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n     \
    \   return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n\
    }\n", "    if (l.length === 0) {\n        return null;\n    }\n    l.sort();\n\
    \    if (l.length % 2 === 0) {\n        return (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2;\n    }\n    return l[Math.floor(l.length / 2)];\n}\n", "    let len\
    \ = l.length;\n    let mid = Math.floor(len / 2);\n    if (len % 2 == 0) {\n \
    \       return (l[mid - 1] + l[mid]) / 2;\n    } else {\n        return l[mid];\n\
    \    }\n}\n", "    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20])\n    // 15.0\n    // >>> median([-10, 4, 6, 1000, 10, 20,\
    \ -10, 4, 6, 1000, 10, 20])\n    // 10.0\n    // >>> median([-10, 4, 6, 1000,\
    \ 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20])\n    // 10.0\n  \
    \  // >>> median([-10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6,\
    \ 1000, 10, 20, -10, 4, 6, 1000, 10, 20])\n    // 10.0\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4,\
    \ 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20])\n    // 10.0\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4,\
    \ 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20])\n    //\
    \ 10.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10,\
    \ 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4,\
    \ 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20])\n    // 10.0\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20, -10, 4, 6, 1000, 10, 20", "   \
    \ // YOUR CODE HERE\n    let sorted = l.sort(function(a, b){return a-b});\n  \
    \  let len = sorted.length;\n    if (len % 2 == 0){\n        return (sorted[len/2]\
    \ + sorted[len/2 - 1])/2;\n    }\n    else{\n        return sorted[Math.floor(len/2)];\n\
    \    }\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    let mid = Math.floor(l.length\
    \ / 2);\n    let nums = [...l].sort((a, b) => a - b);\n    return l.length % 2\
    \ !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n}\n", "    let sorted\
    \ = l.sort();\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    // YOUR CODE HERE\n    let\
    \ len = l.length;\n    if (len % 2 == 0) {\n        return (l[len / 2 - 1] + l[len\
    \ / 2]) / 2;\n    } else {\n        return l[(len - 1) / 2];\n    }\n}\n", " \
    \   if (l.length === 0) {\n        return null;\n    }\n    l.sort(function (a,\
    \ b) { return a - b; });\n    var half = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2) {\n        return l[half];\n    } else {\n        return (l[half - 1] +\
    \ l[half]) / 2.0;\n    }\n}\n", "    let n = l.length;\n    let m = Math.floor(n\
    \ / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else\
    \ {\n        return l[m];\n    }\n}\n", "    let len = l.length;\n    let mid\
    \ = Math.floor(len / 2);\n    if (len % 2 == 0) {\n        return (l[mid - 1]\
    \ + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n}\n", "    // YOUR\
    \ CODE HERE\n    return 0;\n}\n", "    let sorted = l.sort((a, b) => a - b);\n\
    \    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0)\
    \ {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n", "    if (l.length === 0) {\n        return\
    \ null;\n    }\n    l.sort();\n    if (l.length % 2 === 0) {\n        return (l[l.length\
    \ / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n", "    // TODO\n    return 0;\n}\n", "    let sorted = l.sort((a,\
    \ b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    let sorted = l.sort(function(a,\
    \ b) {\n        return a - b;\n    });\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", " \
    \   return 0;\n}\n", "    let sorted = l.sort(function(a, b) {\n        return\
    \ a - b;\n    });\n    let length = sorted.length;\n    if (length % 2 == 0) {\n\
    \        return (sorted[length / 2 - 1] + sorted[length / 2]) / 2;\n    } else\
    \ {\n        return sorted[(length - 1) / 2];\n    }\n}\n", "    if (l.length\
    \ === 0) {\n        return null;\n    }\n    l.sort();\n    if (l.length % 2 ===\
    \ 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else\
    \ {\n        return l[Math.floor(l.length / 2)];\n    }\n}\n", "    //YOUR CODE\
    \ HERE\n    let sorted = l.sort((a, b) => a - b);\n    let len = sorted.length;\n\
    \    if (len % 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len /\
    \ 2]) / 2;\n    } else {\n        return sorted[Math.floor(len / 2)];\n    }\n\
    }\n", "    // your code here\n    let length = l.length;\n    let mid = Math.floor(length\
    \ / 2);\n    if (length % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n\
    \    } else {\n        return l[mid];\n    }\n}\n", "    // YOUR CODE HERE\n \
    \   let sorted = l.sort(function(a, b){return a-b});\n    let mid = Math.floor(sorted.length/2);\n\
    \    if (sorted.length % 2 == 0){\n        return (sorted[mid] + sorted[mid-1])/2;\n\
    \    }\n    else{\n        return sorted[mid];\n    }\n}\n", "    //YOUR CODE\
    \ HERE\n    let sorted = l.sort(function(a, b){return a-b});\n    let mid = Math.floor(sorted.length/2);\n\
    \    if (sorted.length % 2 == 0){\n        return (sorted[mid-1] + sorted[mid])/2;\n\
    \    }\n    else{\n        return sorted[mid];\n    }\n}\n", "    // YOUR CODE\
    \ HERE\n    let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n     \
    \   return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n\
    }\n", "    if (l.length == 0) {\n        return null;\n    }\n    l.sort();\n\
    \    if (l.length % 2 == 0) {\n        return (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2;\n    }\n    return l[Math.floor(l.length / 2)];\n}\n", "    //YOUR\
    \ CODE HERE\n    return 0;\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n",
  "    // >>> median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000,\
    \ 10, 20])\n    // 15.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -1])\n  \
    \  // 9.5\n    // >>> median([-10, 4, 6, 1000, 10, 20, -1, 0])\n    // 5.5\n \
    \   // >>> median([-10, 4, 6, 1000, 10, 20, -1, 0, -1])\n    // 4.5\n    // >>>\
    \ median([-10, 4, 6, 1000, 10, 20, -1, 0, -1, -1])\n    // 4.0\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, -1, 0, -1, -1, -1])\n    // 3.5\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, -1, 0, -1, -1, -1, -1])\n    // 3.0\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, -1, 0, -1, -1, -1, -1, -1])\n    // 2.5\n    // >>> median([-10,\
    \ 4, 6, 1000, 10, 20, -1, 0, -1, -1, -1, -1, -1, -1])\n    // 2.0\n    // >>>\
    \ median([-10, 4, 6, 1000, 10, 20, -1, 0, -1, -1, -1, -1, -1, -1, -1])\n    //\
    \ 1.5\n    // >>> median([-10, 4, 6, 1000, 10, 20, -1, 0, -1, -1, -1, -1, -1,\
    \ -1, -1, -1])\n    // 1.0\n    // >>> median([-10, 4, 6, 1000, 10, 20, -1, 0,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, -1])\n    // 0.5\n    // >>>", "    let sorted\
    \ = l.sort(function(a, b) {\n        return a - b;\n    });\n    let length =\
    \ sorted.length;\n    if (length % 2 === 0) {\n        return (sorted[length /\
    \ 2 - 1] + sorted[length / 2]) / 2;\n    } else {\n        return sorted[(length\
    \ - 1) / 2];\n    }\n}\n", "    //YOUR CODE HERE\n    let sorted = l.sort((a,\
    \ b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2) {\n        return sorted[mid];\n    } else {\n        return (sorted[mid\
    \ - 1] + sorted[mid]) / 2.0;\n    }\n}\n", "    // YOUR CODE HERE\n    if (l.length\
    \ == 0) {\n        return null;\n    }\n    else {\n        l.sort(function (a,\
    \ b) { return a - b });\n        if (l.length % 2 == 0) {\n            return\
    \ (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n        }\n        else {\n  \
    \          return l[Math.floor(l.length / 2)];\n        }\n    }\n}\n", "    if\
    \ (l.length === 0) {\n        return null;\n    }\n    l.sort(function (a, b)\
    \ { return a - b; });\n    var mid = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n    } else {\n    \
    \    return l[mid];\n    }\n}\n", "    let sorted = l.sort(function(a, b) { return\
    \ a - b; });\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    // YOUR CODE HERE\n    let\
    \ len = l.length;\n    if (len % 2 == 0) {\n        return (l[len / 2 - 1] + l[len\
    \ / 2]) / 2;\n    } else {\n        return l[(len - 1) / 2];\n    }\n}\n", " \
    \   // your code here\n    let sorted = l.sort(function(a, b){return a-b});\n\
    \    let mid = Math.floor(sorted.length/2);\n    if (sorted.length % 2 == 0){\n\
    \        return (sorted[mid] + sorted[mid-1])/2;\n    }\n    else{\n        return\
    \ sorted[mid];\n    }\n}\n", "    if (l.length === 0) {\n        return null;\n\
    \    }\n    l.sort();\n    let mid = Math.floor(l.length / 2);\n    if (l.length\
    \ % 2 === 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n    }\n    return l[mid];\n\
    }\n", "    return 0;\n}\n", "    if (l.length == 0) {\n        return null;\n\
    \    }\n    l.sort(function (a, b) { return a - b });\n    if (l.length % 2 ==\
    \ 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    }\n \
    \   else {\n        return l[Math.floor(l.length / 2)];\n    }\n}\n", "    if\
    \ (l.length === 0) {\n        return null;\n    }\n    l.sort();\n    if (l.length\
    \ % 2 === 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n\
    \    } else {\n        return l[Math.floor(l.length / 2)];\n    }\n}\n", "   \
    \ let n = l.length;\n    let m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n\
    \        return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n \
    \   }\n}\n", "    // your code here\n    return 0;\n}\n", "    //YOUR CODE HERE\n\
    \    let sorted = l.sort();\n    let length = sorted.length;\n    if (length %\
    \ 2 == 0) {\n        return (sorted[length / 2] + sorted[length / 2 - 1]) / 2;\n\
    \    } else {\n        return sorted[Math.floor(length / 2)];\n    }\n}\n", " \
    \   if (l.length == 0) {\n        return null;\n    }\n    l.sort();\n    if (l.length\
    \ % 2 == 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n \
    \   }\n    return l[Math.floor(l.length / 2)];\n}\n", "    return 0;\n}\n", " \
    \   //TODO: Implement median\n    return 0;\n}\n", "    if (l.length === 0) {\n\
    \        return 0;\n    }\n    l.sort(function (a, b) { return a - b; });\n  \
    \  if (l.length % 2 === 0) {\n        return (l[l.length / 2 - 1] + l[l.length\
    \ / 2]) / 2;\n    }\n    return l[Math.floor(l.length / 2)];\n}\n", "    let sorted\
    \ = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n \
    \   if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid -\
    \ 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    // YOUR\
    \ CODE HERE\n    let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 === 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    var\
    \ sorted = l.sort(function(a, b) { return a - b; });\n    var mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", " \
    \   if (l.length == 0) {\n        return null;\n    }\n    l.sort();\n    if (l.length\
    \ % 2 == 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n \
    \   }\n    return l[Math.floor(l.length / 2)];\n}\n", "    // >>> median([3, 1,\
    \ 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n\
    \    // >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    // 5.5\n    // >>> median([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    // 6\n    // >>> median([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12])\n    // 6.5\n    // >>> median([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13])\n    // 7\n    // >>> median([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14])\n    // 7.5\n    // >>> median([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15])\n    // 8\n    // >>> median([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    // 8.5\n    // >>> median([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n    // 9\n    // >>>\
    \ median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  \
    \  // 9.5\n    // >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19])\n    // 10\n    // >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    // 10.5\n    // >>> median([1,\
    \ 2, 3, 4, 5", "    if (l.length === 0) {\n        return 0;\n    }\n    l.sort();\n\
    \    if (l.length % 2 === 0) {\n        return (l[l.length / 2] + l[l.length /\
    \ 2 - 1]) / 2;\n    } else {\n        return l[Math.floor(l.length / 2)];\n  \
    \  }\n}\n", "    //YOUR CODE HERE\n    let n = l.length;\n    let m = Math.floor(n/2);\n\
    \    if (n % 2 == 0) {\n        return (l[m-1] + l[m])/2;\n    } else {\n    \
    \    return l[m];\n    }\n}\n", "    // YOUR CODE HERE\n    return 0;\n}\n", " \
    \   // YOUR CODE HERE\n    let length = l.length;\n    let mid = Math.floor(length\
    \ / 2);\n    if (length % 2 === 0) {\n        return (l[mid - 1] + l[mid]) / 2;\n\
    \    } else {\n        return l[mid];\n    }\n}\n", "    let sorted = l.sort((a,\
    \ b) => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n", "    // TODO\n    return 0;\n}\n",
  "    let sorted = l.sort();\n    let length = sorted.length;\n    if (length % 2\
    \ === 0) {\n        return (sorted[length / 2 - 1] + sorted[length / 2]) / 2;\n\
    \    } else {\n        return sorted[(length - 1) / 2];\n    }\n}\n", "    let\
    \ sorted = l.sort(function(a, b) { return a - b; });\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", " \
    \   let sorted = l.sort((a, b) => a - b);\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ sorted = l.sort(function(a, b) { return a - b; });\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid] + sorted[mid\
    \ - 1]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n", "    let\
    \ n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    if (n ===\
    \ 1) {\n        return l[0];\n    }\n    let sorted = l.sort();\n    if (n % 2\
    \ === 0) {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2;\n    }\n \
    \   return sorted[(n - 1) / 2];\n}\n", "    // >>> median([3, 1, 2, 4, 5])\n \
    \   // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n    // 15.0\n    var n\
    \ = len(l);\n    if (n === 0) {\n        throw new ValueError(\"median() arg is\
    \ an empty sequence\");\n    }\n    var i = floor(n / 2);\n    if (n % 2) {\n\
    \        return l[i];\n    }\n    else {\n        return (l[i - 1] + l[i]) / 2;\n\
    \    }\n}", "    if (l.length === 0) {\n        return null;\n    }\n    l.sort();\n\
    \    let mid = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n    \
    \    return (l[mid] + l[mid - 1]) / 2;\n    }\n    return l[mid];\n}\n", "   \
    \ // TODO\n    return 0;\n}\n", "    let sorted = l.sort((a, b) => a - b);\n \
    \   let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0)\
    \ {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n", "    if (l.length == 0) {\n        return\
    \ null;\n    }\n    l.sort();\n    if (l.length % 2 == 0) {\n        return (l[l.length\
    \ / 2 - 1] + l[l.length / 2]) / 2;\n    }\n    return l[Math.floor(l.length /\
    \ 2)];\n}\n", "    let n = l.length;\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2;\n    } else {\n        return l[(n - 1) / 2];\n  \
    \  }\n}\n", "    let l2 = l.sort();\n    let n = l2.length;\n    if (n % 2 ==\
    \ 0) {\n        return (l2[n / 2 - 1] + l2[n / 2]) / 2;\n    } else {\n      \
    \  return l2[(n - 1) / 2];\n    }\n}\n", "    let len = l.length;\n    let mid\
    \ = Math.floor(len / 2);\n    if (len % 2 === 0) {\n        return (l[mid - 1]\
    \ + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n}\n", "    let\
    \ n = l.length;\n    if (n == 0) {\n        return null;\n    }\n    if (n ==\
    \ 1) {\n        return l[0];\n    }\n    let sorted = l.sort();\n    if (n % 2\
    \ == 0) {\n        return (sorted[n / 2 - 1] + sorted[n / 2]) / 2;\n    }\n  \
    \  else {\n        return sorted[Math.floor(n / 2)];\n    }\n}\n", "    if (l.length\
    \ === 0) {\n        return null;\n    }\n    l.sort();\n    if (l.length % 2 ===\
    \ 0) {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    }\n \
    \   return l[Math.floor(l.length / 2)];\n}\n", "    //YOUR CODE HERE\n    let\
    \ sorted = l.sort(function(a, b){return a-b});\n    let len = sorted.length;\n\
    \    if (len % 2 == 0) {\n        return (sorted[len/2] + sorted[len/2 - 1]) /\
    \ 2;\n    } else {\n        return sorted[Math.floor(len/2)];\n    }\n}\n", " \
    \   let m = Math.floor(l.length / 2);\n    if (l.length % 2 === 0) {\n       \
    \ return (l[m - 1] + l[m]) / 2;\n    } else {\n        return l[m];\n    }\n}\n",
  "    let n = l.length;\n    if (n === 0) {\n        return null;\n    }\n    if\
    \ (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    return\
    \ l[Math.floor(n / 2)];\n}\n", "    let sorted = l.sort();\n    let len = sorted.length;\n\
    \    if (len % 2 === 0) {\n        return (sorted[len / 2 - 1] + sorted[len /\
    \ 2]) / 2;\n    } else {\n        return sorted[(len - 1) / 2];\n    }\n}\n",
  "    // YOUR CODE HERE\n    let len = l.length;\n    if (len % 2 == 0) {\n     \
    \   return (l[len / 2 - 1] + l[len / 2]) / 2;\n    } else {\n        return l[Math.floor(len\
    \ / 2)];\n    }\n}\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "    let l2\
    \ = l.sort(function(a, b) { return a - b; });\n    let mid = Math.floor(l2.length\
    \ / 2);\n    if (l2.length % 2 == 0) {\n        return (l2[mid] + l2[mid - 1])\
    \ / 2;\n    } else {\n        return l2[mid];\n    }\n}\n", "    let sorted =\
    \ l.sort((a, b) => a - b);\n    let len = sorted.length;\n    if (len % 2 ===\
    \ 0) {\n        return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else\
    \ {\n        return sorted[(len - 1) / 2];\n    }\n}\n", "    let len = l.length;\n\
    \    if (len % 2 == 0) {\n        return (l[len / 2 - 1] + l[len / 2]) / 2;\n\
    \    } else {\n        return l[Math.floor(len / 2)];\n    }\n}\n", "    // >>>\
    \ median([3, 1, 2, 4, 5])\n    // 3\n    // >>> median([-10, 4, 6, 1000, 10, 20])\n\
    \    // 15.0\n    let sorted = l.sort();\n    let length = sorted.length;\n  \
    \  let mid = Math.floor(length / 2);\n    if (length % 2 == 0) {\n        return\
    \ (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
