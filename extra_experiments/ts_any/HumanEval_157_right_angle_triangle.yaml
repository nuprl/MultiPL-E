name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: any, b: any, c: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["    // your code here\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    if (a > b && a > c) {\n        return Math.pow(a,\
    \ 2) == Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n \
    \       return Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2);\n    } else\
    \ if (c > a && c > b) {\n        return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n\
    \    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ if (a === null || b === null || c === null) {\n        return false;\n    }\n\
    \    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n   \
    \     return false;\n    }\n    if (a === b && b === c) {\n        return false;\n\
    \    }\n    if (a === b || b === c || a === c) {\n        return false;\n    }\n\
    \    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c ===\
    \ a * a) {\n        return true;\n    }\n    return false;\n}\n", "    let sides\
    \ = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    if (a > 0 && b > 0 && c > 0) {\n \
    \       if (a * a + b * b == c * c) {\n            return true;\n        }\n \
    \       else if (a * a + c * c == b * b) {\n            return true;\n       \
    \ }\n        else if (b * b + c * c == a * a) {\n            return true;\n  \
    \      }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return false;\n    }\n    if (a === null || b\
    \ === null || c === null) {\n        return false;\n    }\n    if (typeof a !==\
    \ 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return\
    \ false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n\
    \    }\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return false;\n\
    \    }\n    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b +\
    \ c * c === a * a) {\n        return true;\n    }\n    return false;\n}\n", " \
    \   if (a === undefined || b === undefined || c === undefined) {\n        return\
    \ undefined;\n    }\n    if (typeof a !== 'number' || typeof b !== 'number' ||\
    \ typeof c !== 'number') {\n        return undefined;\n    }\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0) {\n        return undefined;\n    }\n    if (a === b && b\
    \ === c) {\n        return false;\n    }\n    if (a * a + b * b === c * c) {\n\
    \        return true;\n    }\n    if (b * b + c * c === a * a) {\n        return\
    \ true;\n    }\n    if (c * c + a * a === b * b) {\n        return true;\n   \
    \ }\n    return false;\n}\n", "    if (a === undefined || b === undefined || c\
    \ === undefined) {\n        return false;\n    }\n    if (a === null || b ===\
    \ null || c === null) {\n        return false;\n    }\n    if (typeof a !== 'number'\
    \ || typeof b !== 'number' || typeof c !== 'number') {\n        return false;\n\
    \    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\
    \    if (a === b && b === c) {\n        return false;\n    }\n    if (a === b\
    \ || b === c || a === c) {\n        return false;\n    }\n    if (a * a + b *\
    \ b === c * c || b * b + c * c === a * a || a * a + c * c === b * b) {\n     \
    \   return true;\n    }\n    return false;\n}\n", "    let arr = [a, b, c];\n\
    \    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2]\
    \ ** 2;\n}\n", "    if (a == null || b == null || c == null) {\n        return\
    \ false;\n    }\n    if (a == 0 || b == 0 || c == 0) {\n        return false;\n\
    \    }\n    if (a == b && b == c) {\n        return false;\n    }\n    if (a ==\
    \ b || b == c || a == c) {\n        return false;\n    }\n    if (a > b && a >\
    \ c) {\n        if (a * a == b * b + c * c) {\n            return true;\n    \
    \    }\n    }\n    if (b > a && b > c) {\n        if (b * b == a * a + c * c)\
    \ {\n            return true;\n        }\n    }\n    if (c > a && c > b) {\n \
    \       if (c * c == a * a + b * b) {\n            return true;\n        }\n \
    \   }\n    return false;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    let [a, b, c] = sides;\n    return a * a + b * b === c *\
    \ c;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n  \
    \  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2],\
    \ 2);\n}\n", "    if (a === undefined || b === undefined || c === undefined) {\n\
    \        return undefined;\n    }\n    if (typeof a !== 'number' || typeof b !==\
    \ 'number' || typeof c !== 'number') {\n        return undefined;\n    }\n   \
    \ if (a <= 0 || b <= 0 || c <= 0) {\n        return undefined;\n    }\n    if\
    \ (a === b && b === c) {\n        return false;\n    }\n    let max = Math.max(a,\
    \ b, c);\n    let sum = a + b + c;\n    if (max === a) {\n        return Math.pow(a,\
    \ 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    }\n    if (max === b) {\n     \
    \   return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    }\n    if\
    \ (max === c) {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n", "    let x = Math.pow(a, 2);\n    let y = Math.pow(b, 2);\n\
    \    let z = Math.pow(c, 2);\n    if (x + y == z || x + z == y || y + z == x)\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    console.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    let\
    \ [x, y, z] = arr;\n    return x * x + y * y === z * z;\n}\n", "    if (a > 0\
    \ && b > 0 && c > 0) {\n        if (a * a + b * b == c * c) {\n            return\
    \ true;\n        }\n        else if (a * a + c * c == b * b) {\n            return\
    \ true;\n        }\n        else if (b * b + c * c == a * a) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "    let sides = [a, b, c];\n\
    \    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    return (a * a + b * b == c * c) ||\
    \ (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n", "    if (a ===\
    \ undefined || b === undefined || c === undefined) {\n        return false;\n\
    \    }\n    if (a === null || b === null || c === null) {\n        return false;\n\
    \    }\n    if (a === '' || b === '' || c === '') {\n        return false;\n \
    \   }\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !==\
    \ 'number') {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <=\
    \ 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a === b || b === c || a === c) {\n        return false;\n\
    \    }\n    if (a > b && a > c) {\n        if (a * a === b * b + c * c) {\n  \
    \          return true;\n        }\n    }\n    if (b > a && b > c) {\n       \
    \ if (b * b === a * a + c * c) {\n            return true;\n        }\n    }\n\
    \    if (c > a && c > b) {\n        if (c * c === a * a + b * b) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n", "    if (a == null\
    \ || b == null || c == null) {\n        return false;\n    }\n    if (a == 0 ||\
    \ b == 0 || c == 0) {\n        return false;\n    }\n    if (a == b && b == c)\
    \ {\n        return false;\n    }\n    if (a < 0 || b < 0 || c < 0) {\n      \
    \  return false;\n    }\n    if (a == b || b == c || a == c) {\n        return\
    \ false;\n    }\n    if (a * a + b * b == c * c) {\n        return true;\n   \
    \ }\n    if (a * a + c * c == b * b) {\n        return true;\n    }\n    if (b\
    \ * b + c * c == a * a) {\n        return true;\n    }\n    return false;\n}\n",
  "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    const sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    if (a > b && a > c) {\n        return a *\
    \ a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b * b\
    \ === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n\
    \    }\n}\n", "    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n\
    \    }\n    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    let sum_others\
    \ = sum - max;\n    if (sum_others > max) {\n        return false;\n    }\n  \
    \  return sum_others * sum_others + max * max === sum * sum;\n}\n", "    let sides\
    \ = [a, b, c].sort((a, b) => a - b);\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] === sides[2] * sides[2];\n}\n", "    let sides = [a, b, c];\n   \
    \ let max = Math.max(...sides);\n    let maxIndex = sides.indexOf(max);\n    let\
    \ sum = 0;\n    for (let i = 0; i < sides.length; i++) {\n        if (i !== maxIndex)\
    \ {\n            sum += Math.pow(sides[i], 2);\n        }\n    }\n    return sum\
    \ === Math.pow(max, 2);\n}\n", "    if (a === undefined || b === undefined ||\
    \ c === undefined) {\n        return false;\n    }\n    if (a === null || b ===\
    \ null || c === null) {\n        return false;\n    }\n    if (typeof a !== 'number'\
    \ || typeof b !== 'number' || typeof c !== 'number') {\n        return false;\n\
    \    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\
    \    if (a === b && b === c) {\n        return false;\n    }\n    if (a === b\
    \ || b === c || a === c) {\n        return false;\n    }\n    if (a > b && a >\
    \ c) {\n        return (a * a) === (b * b) + (c * c);\n    }\n    if (b > a &&\
    \ b > c) {\n        return (b * b) === (a * a) + (c * c);\n    }\n    if (c >\
    \ a && c > b) {\n        return (c * c) === (a * a) + (b * b);\n    }\n}\n", " \
    \   let sides = [a, b, c];\n    let max = Math.max(...sides);\n    let index =\
    \ sides.indexOf(max);\n    sides.splice(index, 1);\n    let sum = sides.reduce((a,\
    \ b) => a + b);\n    return sum === max;\n}\n", "    if (a === undefined || b\
    \ === undefined || c === undefined) {\n        return undefined;\n    }\n    if\
    \ (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number') {\n\
    \        return undefined;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n   \
    \     return undefined;\n    }\n    if (a + b <= c || a + c <= b || b + c <= a)\
    \ {\n        return undefined;\n    }\n    if (a * a + b * b === c * c || a *\
    \ a + c * c === b * b || b * b + c * c === a * a) {\n        return true;\n  \
    \  }\n    return false;\n}\n", "    if (a === undefined || b === undefined ||\
    \ c === undefined) {\n        return false;\n    }\n    if (a === null || b ===\
    \ null || c === null) {\n        return false;\n    }\n    if (a === '' || b ===\
    \ '' || c === '') {\n        return false;\n    }\n    if (isNaN(a) || isNaN(b)\
    \ || isNaN(c)) {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c\
    \ <= 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n     \
    \   return false;\n    }\n    if (a === b || b === c || a === c) {\n        return\
    \ false;\n    }\n    if (a > b && a > c) {\n        return a * a === b * b + c\
    \ * c;\n    }\n    if (b > a && b > c) {\n        return b * b === a * a + c *\
    \ c;\n    }\n    if (c > a && c > b) {\n        return c * c === a * a + b * b;\n\
    \    }\n}\n", "    if (a == null || b == null || c == null) {\n        return\
    \ false;\n    }\n    if (a == 0 || b == 0 || c == 0) {\n        return false;\n\
    \    }\n    if (a == b && b == c) {\n        return false;\n    }\n    if (a ==\
    \ b || b == c || a == c) {\n        return false;\n    }\n    if (a * a + b *\
    \ b == c * c) {\n        return true;\n    }\n    if (a * a + c * c == b * b)\
    \ {\n        return true;\n    }\n    if (b * b + c * c == a * a) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return undefined;\n    }\n    if (typeof a !==\
    \ 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return\
    \ undefined;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return undefined;\n\
    \    }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a\
    \ > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c,\
    \ 2);\n    }\n    if (b > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a,\
    \ 2) + Math.pow(c, 2);\n    }\n    if (c > a && c > b) {\n        return Math.pow(c,\
    \ 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n", "    if (a > 0 && b >\
    \ 0 && c > 0) {\n        if (a * a + b * b == c * c) {\n            return true;\n\
    \        }\n        else if (a * a + c * c == b * b) {\n            return true;\n\
    \        }\n        else if (b * b + c * c == a * a) {\n            return true;\n\
    \        }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return false;\n    }\n    if (a === null || b\
    \ === null || c === null) {\n        return false;\n    }\n    if (a === \"\"\
    \ || b === \"\" || c === \"\") {\n        return false;\n    }\n    if (typeof\
    \ a !== \"number\" || typeof b !== \"number\" || typeof c !== \"number\") {\n\
    \        return false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n       \
    \ return false;\n    }\n    if (a === b && b === c) {\n        return false;\n\
    \    }\n    if (a === b || b === c || a === c) {\n        return false;\n    }\n\
    \    if (a * a + b * b === c * c || b * b + c * c === a * a || a * a + c * c ===\
    \ b * b) {\n        return true;\n    }\n    return false;\n}\n", "    if (a ===\
    \ undefined || b === undefined || c === undefined) {\n        return false;\n\
    \    }\n    if (a === null || b === null || c === null) {\n        return false;\n\
    \    }\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !==\
    \ 'number') {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <=\
    \ 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a === b || b === c || a === c) {\n        return false;\n\
    \    }\n    if (a * a + b * b === c * c || b * b + c * c === a * a || a * a +\
    \ c * c === b * b) {\n        return true;\n    }\n    return false;\n}\n", " \
    \   if (a === undefined || b === undefined || c === undefined) {\n        return\
    \ false;\n    }\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof\
    \ c !== 'number') {\n        return false;\n    }\n    if (a <= 0 || b <= 0 ||\
    \ c <= 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n   \
    \     return false;\n    }\n    if (a === b || b === c || a === c) {\n       \
    \ return false;\n    }\n    if (a * a + b * b === c * c || a * a + c * c === b\
    \ * b || b * b + c * c === a * a) {\n        return true;\n    }\n    return false;\n\
    }\n", "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    let [x,\
    \ y, z] = sides;\n    return x ** 2 + y ** 2 === z ** 2;\n}\n", "    let arr =\
    \ [a, b, c];\n    arr.sort((a, b) => a - b);\n    if (arr[0] * arr[0] + arr[1]\
    \ * arr[1] == arr[2] * arr[2]) {\n        return true;\n    }\n    return false;\n\
    }\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let sides = [a, b, c];\n    sides.sort();\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n", "    if (a > b && a > c) {\n\
    \        return Math.pow(a, 2) == Math.pow(b, 2) + Math.pow(c, 2);\n    } else\
    \ if (b > a && b > c) {\n        return Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else if (c > a && c > b) {\n        return Math.pow(c, 2) == Math.pow(a,\
    \ 2) + Math.pow(b, 2);\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort(function\
    \ (a, b) { return a - b });\n    return Math.pow(arr[0], 2) + Math.pow(arr[1],\
    \ 2) == Math.pow(arr[2], 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(1, 2, 3));\n", "    let arr = [a, b, c];\n  \
    \  let max = Math.max(...arr);\n    let index = arr.indexOf(max);\n    arr.splice(index,\
    \ 1);\n    let sum = arr.reduce((a, b) => a + b);\n    if (sum == max) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "    let\
    \ arr = [a, b, c];\n    let max = Math.max(...arr);\n    let index = arr.indexOf(max);\n\
    \    arr.splice(index, 1);\n    let sum = arr.reduce((a, b) => a + b, 0);\n  \
    \  if (max * max === sum * sum) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b)\
    \ => a - b);\n    let [x, y, z] = arr;\n    return x * x + y * y === z * z;\n\
    }\n", "    let max = Math.max(a, b, c);\n    let sum = a + b + c;\n    let result\
    \ = (max * max) * 2;\n    return result === sum;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b **\
    \ 2 + c ** 2 === a ** 2);\n}\n", "    if (a === undefined || b === undefined ||\
    \ c === undefined) {\n        return undefined;\n    }\n    if (typeof a !== 'number'\
    \ || typeof b !== 'number' || typeof c !== 'number') {\n        return undefined;\n\
    \    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return undefined;\n   \
    \ }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a ===\
    \ b || b === c || a === c) {\n        return false;\n    }\n    if (a > b && a\
    \ > c) {\n        return a * a === b * b + c * c;\n    }\n    if (b > a && b >\
    \ c) {\n        return b * b === a * a + c * c;\n    }\n    if (c > a && c > b)\
    \ {\n        return c * c === a * a + b * b;\n    }\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ if (a === 0 || b === 0 || c === 0) {\n        return false;\n    }\n    if (a\
    \ < 0 || b < 0 || c < 0) {\n        return false;\n    }\n    if (typeof a !==\
    \ 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return\
    \ false;\n    }\n    if (a === b && b === c) {\n        return false;\n    }\n\
    \    if (a === b || b === c || a === c) {\n        return false;\n    }\n    if\
    \ (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a *\
    \ a) {\n        return true;\n    }\n    return false;\n}\n", "    // your code\
    \ here\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", "    let arr = [a,\
    \ b, c];\n    arr.sort((a, b) => a - b);\n    let [x, y, z] = arr;\n    return\
    \ Math.pow(x, 2) + Math.pow(y, 2) === Math.pow(z, 2);\n}\n", "    let sides =\
    \ [a, b, c];\n    sides.sort();\n    if (sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]) {\n        return true;\n    }\n    return false;\n\
    }\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0]\
    \ ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    // your code here\n    let arr\
    \ = [a, b, c];\n    arr.sort((a, b) => a - b);\n    if (Math.pow(arr[0], 2) +\
    \ Math.pow(arr[1], 2) === Math.pow(arr[2], 2)) {\n        return true;\n    }\n\
    \    return false;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a, b) =>\
    \ a - b);\n    return sides[0] * sides[0] + sides[1] * sides[1] === sides[2] *\
    \ sides[2];\n}\n", "    if (a * a + b * b == c * c) {\n        return true;\n\
    \    }\n    else if (a * a + c * c == b * b) {\n        return true;\n    }\n\
    \    else if (b * b + c * c == a * a) {\n        return true;\n    }\n    else\
    \ {\n        return false;\n    }\n}\nconsole.log(right_angle_triangle(3, 4, 5));\n\
    console.log(right_angle_triangle(1, 2, 3));\n", "    if (a === undefined || b\
    \ === undefined || c === undefined) {\n        return undefined;\n    }\n    if\
    \ (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number') {\n\
    \        return undefined;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n   \
    \     return undefined;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a > b && a > c) {\n        return Math.pow(a, 2) ===\
    \ Math.pow(b, 2) + Math.pow(c, 2);\n    }\n    if (b > a && b > c) {\n       \
    \ return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    }\n    if (c\
    \ > a && c > b) {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n", "    let aSq = Math.pow(a, 2);\n    let bSq = Math.pow(b,\
    \ 2);\n    let cSq = Math.pow(c, 2);\n    if (aSq + bSq === cSq) {\n        return\
    \ true;\n    } else if (aSq + cSq === bSq) {\n        return true;\n    } else\
    \ if (bSq + cSq === aSq) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    if (a === undefined || b === undefined || c === undefined)\
    \ {\n        return false;\n    }\n    if (a === null || b === null || c === null)\
    \ {\n        return false;\n    }\n    if (a === '' || b === '' || c === '') {\n\
    \        return false;\n    }\n    if (typeof a !== 'number' || typeof b !== 'number'\
    \ || typeof c !== 'number') {\n        return false;\n    }\n    if (a < 0 ||\
    \ b < 0 || c < 0) {\n        return false;\n    }\n    if (a === 0 || b === 0\
    \ || c === 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n\
    \        return false;\n    }\n    if (a === b || b === c || a === c) {\n    \
    \    return false;\n    }\n    if (a + b <= c || a + c <= b || b + c <= a) {\n\
    \        return false;\n    }\n    if (a * a + b * b === c * c || a * a + c *\
    \ c === b * b || b * b + c * c === a * a) {\n        return true;\n    }\n   \
    \ return false;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n\
    \    let [x, y, z] = arr;\n    return x * x + y * y === z * z;\n}\n", "    let\
    \ arr = [a, b, c];\n    let max = Math.max(...arr);\n    let sum = arr.reduce((a,\
    \ b) => a + b, 0);\n    return sum - max === max * 2;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    if (a > b && a\
    \ > c) {\n        return (a * a) == (b * b) + (c * c);\n    } else if (b > a &&\
    \ b > c) {\n        return (b * b) == (a * a) + (c * c);\n    } else if (c > a\
    \ && c > b) {\n        return (c * c) == (a * a) + (b * b);\n    }\n}\n", "  \
    \  if (a == undefined || b == undefined || c == undefined) {\n        return false;\n\
    \    }\n    if (a == 0 || b == 0 || c == 0) {\n        return false;\n    }\n\
    \    if (a == b || b == c || a == c) {\n        return false;\n    }\n    if (a\
    \ + b <= c || b + c <= a || a + c <= b) {\n        return false;\n    }\n    if\
    \ (a * a + b * b == c * c || b * b + c * c == a * a || a * a + c * c == b * b)\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    let arr = [a,\
    \ b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1],\
    \ 2) === Math.pow(arr[2], 2);\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    if (sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2]) {\n        return true;\n    }\n    return false;\n}\n", "    //\
    \ your code here\n    return false;\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return undefined;\n    }\n    if (typeof a !==\
    \ 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return\
    \ undefined;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return undefined;\n\
    \    }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a\
    \ === b || b === c || a === c) {\n        return false;\n    }\n    if (a * a\
    \ + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n\
    \        return true;\n    }\n    return false;\n}\n", "    let sides = [a, b,\
    \ c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    let sides = [a, b, c].sort((a, b) => a -\
    \ b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n", "  \
    \  let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n", "    let arr = [a, b, c];\n \
    \   arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2]\
    \ ** 2;\n}\n", "    if (a > 0 && b > 0 && c > 0) {\n        if (Math.pow(a, 2)\
    \ + Math.pow(b, 2) == Math.pow(c, 2)) {\n            return true;\n        }\n\
    \        else if (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) {\n     \
    \       return true;\n        }\n        else if (Math.pow(b, 2) + Math.pow(c,\
    \ 2) == Math.pow(a, 2)) {\n            return true;\n        }\n        else {\n\
    \            return false;\n        }\n    }\n    else {\n        return false;\n\
    \    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", " \
    \   let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    if (a > b\
    \ && a > c) {\n        return a * a == b * b + c * c;\n    } else if (b > a &&\
    \ b > c) {\n        return b * b == a * a + c * c;\n    } else {\n        return\
    \ c * c == a * a + b * b;\n    }\n}\n", "    return a ** 2 + b ** 2 === c ** 2;\n\
    }\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", " \
    \   let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    let [x, y, z] =\
    \ arr;\n    return x * x + y * y === z * z;\n}\n", "    let sides = [a, b, c];\n\
    \    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    let sides = [a, b, c];\n    sides.sort();\n\
    \    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2],\
    \ 2);\n}\n", "    let max = Math.max(a, b, c);\n    let min = Math.min(a, b, c);\n\
    \    let mid = a + b + c - max - min;\n    return max * max == min * min + mid\
    \ * mid;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n  \
    \  return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if (a == null\
    \ || b == null || c == null) {\n        return false;\n    }\n    if (a == 0 ||\
    \ b == 0 || c == 0) {\n        return false;\n    }\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a == b && b == c) {\n      \
    \  return false;\n    }\n    if (a == b || b == c || a == c) {\n        return\
    \ false;\n    }\n    if (a * a + b * b == c * c) {\n        return true;\n   \
    \ }\n    if (a * a + c * c == b * b) {\n        return true;\n    }\n    if (b\
    \ * b + c * c == a * a) {\n        return true;\n    }\n    return false;\n}\n",
  "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    let [x, y, z]\
    \ = sides;\n    return Math.pow(x, 2) + Math.pow(y, 2) === Math.pow(z, 2);\n}\n",
  "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    let [a, b, c]\
    \ = sides;\n    return a * a + b * b === c * c;\n}\n", "    let sides = [a, b,\
    \ c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    if (typeof a !== 'number' || typeof\
    \ b !== 'number' || typeof c !== 'number') {\n        return 'Invalid input';\n\
    \    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return 'Invalid input';\n\
    \    }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a\
    \ > b && a > c) {\n        return a * a === b * b + c * c;\n    }\n    if (b >\
    \ a && b > c) {\n        return b * b === a * a + c * c;\n    }\n    if (c > a\
    \ && c > b) {\n        return c * c === a * a + b * b;\n    }\n}\n", "    if (a\
    \ * a + b * b == c * c) {\n        return true;\n    }\n    else if (a * a + c\
    \ * c == b * b) {\n        return true;\n    }\n    else if (b * b + c * c ==\
    \ a * a) {\n        return true;\n    }\n    else {\n        return false;\n \
    \   }\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n\
    \    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n", "    return\
    \ (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a\
    \ * a);\n}\n", "    let arr = [a, b, c];\n    arr.sort(function (a, b) { return\
    \ a - b });\n    if (Math.pow(arr[0], 2) + Math.pow(arr[1], 2) == Math.pow(arr[2],\
    \ 2)) {\n        return true;\n    }\n    return false;\n}\n", "    let arr =\
    \ [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1]\
    \ ** 2 === arr[2] ** 2;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    if (a > b && a > c) {\n        return (a\
    \ * a) == (b * b) + (c * c);\n    } else if (b > a && b > c) {\n        return\
    \ (b * b) == (a * a) + (c * c);\n    } else if (c > a && c > b) {\n        return\
    \ (c * c) == (a * a) + (b * b);\n    }\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    let sides = [a,\
    \ b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) +\
    \ Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    return (a * a +\
    \ b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n",
  "    if (a == null || b == null || c == null) {\n        return false;\n    }\n\
    \    if (a == 0 || b == 0 || c == 0) {\n        return false;\n    }\n    if (a\
    \ < 0 || b < 0 || c < 0) {\n        return false;\n    }\n    if (a == b && b\
    \ == c) {\n        return false;\n    }\n    if (a == b || b == c || a == c) {\n\
    \        return false;\n    }\n    if (a * a + b * b == c * c) {\n        return\
    \ true;\n    }\n    if (a * a + c * c == b * b) {\n        return true;\n    }\n\
    \    if (b * b + c * c == a * a) {\n        return true;\n    }\n    return false;\n\
    }\n", "    if (a * a + b * b == c * c) {\n        return true;\n    }\n    else\
    \ if (a * a + c * c == b * b) {\n        return true;\n    }\n    else if (b *\
    \ b + c * c == a * a) {\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\n", "    let sides = [a, b, c].sort((a, b) => a - b);\n   \
    \ return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2],\
    \ 2);\n}\n", "    let a2 = Math.pow(a, 2);\n    let b2 = Math.pow(b, 2);\n   \
    \ let c2 = Math.pow(c, 2);\n    if (a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2\
    \ == a2) {\n        return true;\n    }\n    return false;\n}\n", "    let sides\
    \ = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    let sides\
    \ = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return sides[0] ** 2 + sides[1]\
    \ ** 2 === sides[2] ** 2;\n}\n", "    if (a === undefined || b === undefined ||\
    \ c === undefined) {\n        return false;\n    }\n    if (a === 0 || b === 0\
    \ || c === 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n\
    \        return false;\n    }\n    if (a === b || b === c || a === c) {\n    \
    \    return false;\n    }\n    if (a > b && a > c) {\n        return a * a ===\
    \ b * b + c * c;\n    }\n    if (b > a && b > c) {\n        return b * b === a\
    \ * a + c * c;\n    }\n    if (c > a && c > b) {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n", "    if (a === undefined || b === undefined || c ===\
    \ undefined) {\n        return false;\n    }\n    if (typeof a !== 'number' ||\
    \ typeof b !== 'number' || typeof c !== 'number') {\n        return false;\n \
    \   }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n \
    \   if (a === b && b === c) {\n        return false;\n    }\n    if (a * a + b\
    \ * b === c * c) {\n        return true;\n    }\n    if (a * a + c * c === b *\
    \ b) {\n        return true;\n    }\n    if (b * b + c * c === a * a) {\n    \
    \    return true;\n    }\n    return false;\n}\n", "    let arr = [a, b, c].sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n",
  "    if (a === undefined || b === undefined || c === undefined) {\n        return\
    \ false;\n    }\n    if (a === 0 || b === 0 || c === 0) {\n        return false;\n\
    \    }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a\
    \ === b || b === c || a === c) {\n        return false;\n    }\n    if (a * a\
    \ + b * b === c * c) {\n        return true;\n    }\n    if (a * a + c * c ===\
    \ b * b) {\n        return true;\n    }\n    if (b * b + c * c === a * a) {\n\
    \        return true;\n    }\n    return false;\n}\n", "    let arr = [a, b, c];\n\
    \    arr.sort((a, b) => a - b);\n    let [x, y, z] = arr;\n    return x * x +\
    \ y * y === z * z;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a, b) =>\
    \ a - b);\n    let [a, b, c] = sides;\n    return a ** 2 + b ** 2 === c ** 2;\n\
    }\n", "    if (a === undefined || b === undefined || c === undefined) {\n    \
    \    return undefined;\n    }\n    if (typeof a !== 'number' || typeof b !== 'number'\
    \ || typeof c !== 'number') {\n        return undefined;\n    }\n    if (a <=\
    \ 0 || b <= 0 || c <= 0) {\n        return undefined;\n    }\n    if (a === b\
    \ && b === c) {\n        return false;\n    }\n    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    let [x, y, z] = arr;\n    return x * x + y * y === z * z;\n\
    }\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", "    if (a == null\
    \ || b == null || c == null) {\n        return false;\n    }\n    if (a == 0 ||\
    \ b == 0 || c == 0) {\n        return false;\n    }\n    if (a == b && b == c)\
    \ {\n        return false;\n    }\n    if (a == b || b == c || a == c) {\n   \
    \     return false;\n    }\n    if (a > b && a > c) {\n        if (a * a == b\
    \ * b + c * c) {\n            return true;\n        }\n    }\n    if (b > a &&\
    \ b > c) {\n        if (b * b == a * a + c * c) {\n            return true;\n\
    \        }\n    }\n    if (c > a && c > b) {\n        if (c * c == a * a + b *\
    \ b) {\n            return true;\n        }\n    }\n    return false;\n}\n", " \
    \   let sides = [a, b, c];\n    let max = Math.max(...sides);\n    let maxIndex\
    \ = sides.indexOf(max);\n    let sum = sides.reduce((a, b) => a + b, 0);\n   \
    \ if (maxIndex === 0) {\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c,\
    \ 2);\n    } else if (maxIndex === 1) {\n        return Math.pow(b, 2) === Math.pow(a,\
    \ 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a,\
    \ 2) + Math.pow(b, 2);\n    }\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return false;\n    }\n    if (a === null || b\
    \ === null || c === null) {\n        return false;\n    }\n    if (typeof a !==\
    \ 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return\
    \ false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n\
    \    }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a\
    \ === b || b === c || a === c) {\n        return false;\n    }\n    if (a * a\
    \ + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n\
    \        return true;\n    }\n    return false;\n}\n", "    if (a == undefined\
    \ || b == undefined || c == undefined) {\n        return false;\n    }\n    var\
    \ arr = [a, b, c];\n    arr.sort(function (a, b) { return a - b });\n    if (arr[0]\
    \ * arr[0] + arr[1] * arr[1] == arr[2] * arr[2]) {\n        return true;\n   \
    \ }\n    return false;\n}\n", "    if (a === undefined || b === undefined || c\
    \ === undefined) {\n        return false;\n    }\n    if (typeof a !== 'number'\
    \ || typeof b !== 'number' || typeof c !== 'number') {\n        return false;\n\
    \    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\
    \    if (a === b && b === c) {\n        return false;\n    }\n    let max = Math.max(a,\
    \ b, c);\n    let sum = a + b + c;\n    if (max * max === sum - max * max) {\n\
    \        return true;\n    }\n    return false;\n}\n", "    let arr: any = [a,\
    \ b, c];\n    arr.sort(function (a: any, b: any) { return a - b });\n    return\
    \ (arr[0] ** 2 + arr[1] ** 2 == arr[2] ** 2);\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    let sides = [a,\
    \ b, c];\n    sides.sort((a, b) => a - b);\n    let [a, b, c] = sides;\n    return\
    \ a ** 2 + b ** 2 === c ** 2;\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return false;\n    }\n    if (a === null || b\
    \ === null || c === null) {\n        return false;\n    }\n    if (typeof a !==\
    \ 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return\
    \ false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n\
    \    }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a\
    \ === b || b === c || a === c) {\n        return false;\n    }\n    if (a * a\
    \ + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n\
    \        return true;\n    }\n    return false;\n}\n", "    return (a * a + b\
    \ * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\
    console.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if (a > 0 && b > 0 &&\
    \ c > 0) {\n        if (a * a + b * b == c * c) {\n            return true;\n\
    \        }\n        else if (a * a + c * c == b * b) {\n            return true;\n\
    \        }\n        else if (b * b + c * c == a * a) {\n            return true;\n\
    \        }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    return (a * a + b * b == c * c ||\
    \ a * a + c * c == b * b || b * b + c * c == a * a);\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    let arr = [a,\
    \ b, c];\n    arr.sort(function (a, b) { return a - b });\n    let [x, y, z] =\
    \ arr;\n    return x * x + y * y == z * z;\n}\n", "    if (a === undefined ||\
    \ b === undefined || c === undefined) {\n        return undefined;\n    }\n  \
    \  if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return undefined;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n\
    \        return undefined;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a > b && a > c) {\n        return Math.pow(a, 2) ===\
    \ Math.pow(b, 2) + Math.pow(c, 2);\n    }\n    if (b > a && b > c) {\n       \
    \ return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    }\n    if (c\
    \ > a && c > b) {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n", "    let arr = [a, b, c];\n    let max = Math.max(...arr);\n\
    \    let index = arr.indexOf(max);\n    arr.splice(index, 1);\n    let sum = arr.reduce((a,\
    \ b) => a + b, 0);\n    return max * max === sum * sum;\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return undefined;\n    }\n\
    \    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return undefined;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n\
    \        return undefined;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a > b && a > c) {\n        return a * a === b * b + c\
    \ * c;\n    }\n    if (b > a && b > c) {\n        return b * b === a * a + c *\
    \ c;\n    }\n    if (c > a && c > b) {\n        return c * c === a * a + b * b;\n\
    \    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    let\
    \ [x, y, z] = arr;\n    return x ** 2 + y ** 2 === z ** 2;\n}\n", "    let x =\
    \ Math.pow(a, 2) + Math.pow(b, 2);\n    let y = Math.pow(c, 2);\n    if (x ==\
    \ y) {\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", " \
    \   if (a === undefined || b === undefined || c === undefined) {\n        return\
    \ false;\n    }\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof\
    \ c !== 'number') {\n        return false;\n    }\n    if (a <= 0 || b <= 0 ||\
    \ c <= 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n   \
    \     return false;\n    }\n    if (a === b || b === c || a === c) {\n       \
    \ return false;\n    }\n    if (a === Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2))\
    \ || b === Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2)) || c === Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2))) {\n        return true;\n    }\n    return false;\n}\n",
  "    if (a > b && a > c) {\n        if (a * a == b * b + c * c) {\n            return\
    \ true;\n        }\n    } else if (b > a && b > c) {\n        if (b * b == a *\
    \ a + c * c) {\n            return true;\n        }\n    } else if (c > a && c\
    \ > b) {\n        if (c * c == a * a + b * b) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    let [x, y, z] = arr;\n    return x * x + y * y === z * z;\n\
    }\n", "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n",
  "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ if (a === 0 || b === 0 || c === 0) {\n        return false;\n    }\n    if (typeof\
    \ a !== 'number' || typeof b !== 'number' || typeof c !== 'number') {\n      \
    \  return false;\n    }\n    if (a < 0 || b < 0 || c < 0) {\n        return false;\n\
    \    }\n    if (a === b && b === c) {\n        return false;\n    }\n    if (a\
    \ === b || b === c || a === c) {\n        return false;\n    }\n    if (a * a\
    \ + b * b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n\
    \        return true;\n    }\n    return false;\n}\n", "    let sides = [a, b,\
    \ c];\n    sides.sort((a, b) => a - b);\n    let [x, y, z] = sides;\n    return\
    \ x * x + y * y === z * z;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n",
  "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return arr[0] **\
    \ 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if (isNaN(a) || isNaN(b) || isNaN(c))\
    \ {\n        return \"Please enter valid numbers.\";\n    }\n    else if (a <=\
    \ 0 || b <= 0 || c <= 0) {\n        return \"Please enter positive numbers.\"\
    ;\n    }\n    else {\n        if (a * a + b * b == c * c || a * a + c * c == b\
    \ * b || b * b + c * c == a * a) {\n            return true;\n        }\n    \
    \    else {\n            return false;\n        }\n    }\n}\n", "    if (a > 0\
    \ && b > 0 && c > 0) {\n        if (a * a + b * b == c * c) {\n            return\
    \ true;\n        }\n        else if (a * a + c * c == b * b) {\n            return\
    \ true;\n        }\n        else if (b * b + c * c == a * a) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ if (a === null || b === null || c === null) {\n        return false;\n    }\n\
    \    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n   \
    \     return false;\n    }\n    if (a === b && b === c) {\n        return false;\n\
    \    }\n    if (a === b || b === c || a === c) {\n        return false;\n    }\n\
    \    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c ===\
    \ a * a) {\n        return true;\n    }\n    return false;\n}\n", "    let a2\
    \ = Math.pow(a, 2);\n    let b2 = Math.pow(b, 2);\n    let c2 = Math.pow(c, 2);\n\
    \    if (a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    if (a === undefined || b === undefined ||\
    \ c === undefined) {\n        return false;\n    }\n    if (a === null || b ===\
    \ null || c === null) {\n        return false;\n    }\n    if (typeof a !== 'number'\
    \ || typeof b !== 'number' || typeof c !== 'number') {\n        return false;\n\
    \    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\
    \    if (a === b && b === c) {\n        return false;\n    }\n    if (a === b\
    \ || b === c || a === c) {\n        return false;\n    }\n    if (a * a + b *\
    \ b === c * c || a * a + c * c === b * b || b * b + c * c === a * a) {\n     \
    \   return true;\n    }\n    return false;\n}\n", "    let sides = [a, b, c];\n\
    \    let max = Math.max(...sides);\n    let index = sides.indexOf(max);\n    sides.splice(index,\
    \ 1);\n    let sum = sides.reduce((a, b) => a + b);\n    return max * max ===\
    \ sum * sum;\n}\n", "    if (a === undefined || b === undefined || c === undefined)\
    \ {\n        return false;\n    }\n    if (a === null || b === null || c === null)\
    \ {\n        return false;\n    }\n    if (typeof a !== 'number' || typeof b !==\
    \ 'number' || typeof c !== 'number') {\n        return false;\n    }\n    if (a\
    \ <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    if (a === b &&\
    \ b === c) {\n        return false;\n    }\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    }\n    if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    }\n    if (c > a && c > b) {\n        return\
    \ c * c === a * a + b * b;\n    }\n}\n", "    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n", "    let sides\
    \ = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    if (a > b\
    \ && a > c) {\n        return Math.pow(a, 2) == Math.pow(b, 2) + Math.pow(c, 2);\n\
    \    } else if (b > a && b > c) {\n        return Math.pow(b, 2) == Math.pow(a,\
    \ 2) + Math.pow(c, 2);\n    } else if (c > a && c > b) {\n        return Math.pow(c,\
    \ 2) == Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n", "    let sides = [a, b,\
    \ c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    let sides: number[] = [a, b, c];\n\
    \    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    let sides = [a, b, c].sort((a, b)\
    \ => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2],\
    \ 2);\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    let\
    \ [x, y, z] = arr;\n    return x * x + y * y === z * z;\n}\n", "    let arr =\
    \ [a, b, c];\n    let max = Math.max(...arr);\n    let sum = 0;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] != max) {\n            sum\
    \ += arr[i] ** 2;\n        }\n    }\n    return sum == max ** 2;\n}\n", "    let\
    \ max = Math.max(a, b, c);\n    let sum = a + b + c;\n    return max * max ==\
    \ sum - max * max;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a\
    \ - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2],\
    \ 2);\n}\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    if (a === undefined || b === undefined || c === undefined)\
    \ {\n        return undefined;\n    }\n    if (typeof a !== 'number' || typeof\
    \ b !== 'number' || typeof c !== 'number') {\n        return undefined;\n    }\n\
    \    if (a <= 0 || b <= 0 || c <= 0) {\n        return undefined;\n    }\n   \
    \ if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c,\
    \ 2);\n    }\n    if (b > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a,\
    \ 2) + Math.pow(c, 2);\n    }\n    if (c > a && c > b) {\n        return Math.pow(c,\
    \ 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n", "    if (a > b && a >\
    \ c) {\n        return a * a == b * b + c * c;\n    } else if (b > a && b > c)\
    \ {\n        return b * b == a * a + c * c;\n    } else {\n        return c *\
    \ c == a * a + b * b;\n    }\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    let sides: any[] = [a, b, c];\n    sides.sort((a:\
    \ any, b: any) => {\n        return a - b;\n    });\n    if (Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2)) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b)\
    \ => a - b);\n    let [x, y, z] = arr;\n    return x * x + y * y === z * z;\n\
    }\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", "    // TODO: Implement\
    \ me\n    return false;\n}\n", "    if (a <= 0 || b <= 0 || c <= 0) {\n      \
    \  return false;\n    }\n    if (a * a + b * b == c * c) {\n        return true;\n\
    \    }\n    if (a * a + c * c == b * b) {\n        return true;\n    }\n    if\
    \ (b * b + c * c == a * a) {\n        return true;\n    }\n    return false;\n\
    }\n", "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return\
    \ Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n",
  "    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return 'Invalid input';\n    }\n    if (a <= 0 || b <= 0 || c <=\
    \ 0) {\n        return 'Invalid input';\n    }\n    if (a > b && a > c) {\n  \
    \      if (a * a === b * b + c * c) {\n            return true;\n        }\n \
    \   }\n    if (b > a && b > c) {\n        if (b * b === a * a + c * c) {\n   \
    \         return true;\n        }\n    }\n    if (c > a && c > b) {\n        if\
    \ (c * c === a * a + b * b) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\n", "    let sides = [a, b, c];\n    sides.sort();\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n   \
    \     return false;\n    }\n    if (a === b && b === c) {\n        return false;\n\
    \    }\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    if (Math.pow(arr[0],\
    \ 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2)) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    if (a > b && a > c) {\n        return a\
    \ * a === b * b + c * c;\n    } else if (b > a && b > c) {\n        return b *\
    \ b === a * a + c * c;\n    } else {\n        return c * c === a * a + b * b;\n\
    \    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    return\
    \ Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", " \
    \   if (a == 0 || b == 0 || c == 0) {\n        return false;\n    }\n    if (a\
    \ * a + b * b == c * c) {\n        return true;\n    }\n    if (a * a + c * c\
    \ == b * b) {\n        return true;\n    }\n    if (b * b + c * c == a * a) {\n\
    \        return true;\n    }\n    return false;\n}\n", "    if (a == null || b\
    \ == null || c == null) {\n        return false;\n    }\n    if (a == 0 || b ==\
    \ 0 || c == 0) {\n        return false;\n    }\n    if (a == b && b == c) {\n\
    \        return false;\n    }\n    if (a == b || b == c || a == c) {\n       \
    \ return false;\n    }\n    if (a > b && a > c) {\n        if (a * a == b * b\
    \ + c * c) {\n            return true;\n        }\n    }\n    if (b > a && b >\
    \ c) {\n        if (b * b == a * a + c * c) {\n            return true;\n    \
    \    }\n    }\n    if (c > a && c > b) {\n        if (c * c == a * a + b * b)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n", "  \
    \  let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    let sides\
    \ = [a, b, c];\n    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0],\
    \ 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2);\n}\n", "    let arr =\
    \ [a, b, c];\n    arr.sort((a, b) => a - b);\n    return Math.pow(arr[0], 2) +\
    \ Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n}\n", "    let sides = [a, b,\
    \ c];\n    let hypotenuse = Math.max(...sides);\n    let catheti = sides.filter(side\
    \ => side !== hypotenuse);\n    let sumOfCatheti = catheti.reduce((a, b) => a\
    \ + b, 0);\n    return hypotenuse ** 2 === sumOfCatheti ** 2;\n}\n", "    if (a\
    \ > 0 && b > 0 && c > 0) {\n        if (a * a + b * b == c * c) {\n          \
    \  return true;\n        }\n        else if (a * a + c * c == b * b) {\n     \
    \       return true;\n        }\n        else if (b * b + c * c == a * a) {\n\
    \            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    else {\n        return false;\n    }\n}\n", "    if (a\
    \ === undefined || b === undefined || c === undefined) {\n        return undefined;\n\
    \    }\n    if (a === null || b === null || c === null) {\n        return null;\n\
    \    }\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !==\
    \ 'number') {\n        return undefined;\n    }\n    if (a <= 0 || b <= 0 || c\
    \ <= 0) {\n        return undefined;\n    }\n    if (a > b && a > c) {\n     \
    \   return a * a === b * b + c * c;\n    }\n    if (b > a && b > c) {\n      \
    \  return b * b === a * a + c * c;\n    }\n    if (c > a && c > b) {\n       \
    \ return c * c === a * a + b * b;\n    }\n    return undefined;\n}\n", "    let\
    \ arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    let [x, y, z] = arr;\n\
    \    return x * x + y * y === z * z;\n}\n", "    let max = Math.max(a, b, c);\n\
    \    let min = Math.min(a, b, c);\n    let mid = a + b + c - max - min;\n    return\
    \ max * max == min * min + mid * mid;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2],\
    \ 2);\n}\n", "    if (a === undefined || b === undefined || c === undefined) {\n\
    \        return undefined;\n    }\n    if (typeof a !== 'number' || typeof b !==\
    \ 'number' || typeof c !== 'number') {\n        return undefined;\n    }\n   \
    \ if (a <= 0 || b <= 0 || c <= 0) {\n        return undefined;\n    }\n    if\
    \ (a === b && b === c) {\n        return false;\n    }\n    if (a > b && a > c)\
    \ {\n        return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    }\n\
    \    if (b > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) +\
    \ Math.pow(c, 2);\n    }\n    if (c > a && c > b) {\n        return Math.pow(c,\
    \ 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n   \
    \     return false;\n    }\n    if (a === b && b === c) {\n        return false;\n\
    \    }\n    if (a > b && a > c) {\n        return a * a === b * b + c * c;\n \
    \   }\n    if (b > a && b > c) {\n        return b * b === a * a + c * c;\n  \
    \  }\n    if (c > a && c > b) {\n        return c * c === a * a + b * b;\n   \
    \ }\n}\n", "    let sides = [a, b, c];\n    let max = Math.max(...sides);\n  \
    \  let maxIndex = sides.indexOf(max);\n    let sum = sides.reduce((a, b) => a\
    \ + b, 0);\n    let sumWithoutMax = sum - max;\n    return max ** 2 === sumWithoutMax\
    \ ** 2;\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n   \
    \ let [x, y, z] = arr;\n    return x * x + y * y === z * z;\n}\n", "    if (a\
    \ === undefined || b === undefined || c === undefined) {\n        return false;\n\
    \    }\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !==\
    \ 'number') {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <=\
    \ 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a === b || b === c || a === c) {\n        return false;\n\
    \    }\n    if (a > b && a > c) {\n        return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2);\n    }\n    if (b > a && b > c) {\n        return Math.pow(b,\
    \ 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    }\n    if (c > a && c > b) {\n\
    \        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n",
  "    let arr = [a, b, c];\n    arr.sort(function (a, b) { return a - b });\n   \
    \ let [x, y, z] = arr;\n    return x * x + y * y == z * z;\n}\n", "    if (a ===\
    \ undefined || b === undefined || c === undefined) {\n        return false;\n\
    \    }\n    if (a === 0 || b === 0 || c === 0) {\n        return false;\n    }\n\
    \    if (a === b && b === c) {\n        return false;\n    }\n    if (a === b\
    \ && a !== c) {\n        return false;\n    }\n    if (a === c && a !== b) {\n\
    \        return false;\n    }\n    if (b === c && b !== a) {\n        return false;\n\
    \    }\n    if (a === b && b === c && a === c) {\n        return false;\n    }\n\
    \    if (a * a + b * b === c * c) {\n        return true;\n    }\n    if (a *\
    \ a + c * c === b * b) {\n        return true;\n    }\n    if (b * b + c * c ===\
    \ a * a) {\n        return true;\n    }\n    return false;\n}\n", "    let sides\
    \ = [a, b, c];\n    let max = Math.max(...sides);\n    let index = sides.indexOf(max);\n\
    \    sides.splice(index, 1);\n    let sum = sides.reduce((a, b) => a + b);\n \
    \   return max ** 2 === sum ** 2;\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return false;\n    }\n    if (a === null || b\
    \ === null || c === null) {\n        return false;\n    }\n    if (a === '' ||\
    \ b === '' || c === '') {\n        return false;\n    }\n    if (typeof a ===\
    \ 'string' || typeof b === 'string' || typeof c === 'string') {\n        return\
    \ false;\n    }\n    if (typeof a === 'boolean' || typeof b === 'boolean' || typeof\
    \ c === 'boolean') {\n        return false;\n    }\n    if (typeof a === 'object'\
    \ || typeof b === 'object' || typeof c === 'object') {\n        return false;\n\
    \    }\n    if (typeof a === 'function' || typeof b === 'function' || typeof c\
    \ === 'function') {\n        return false;\n    }\n    if (a < 0 || b < 0 || c\
    \ < 0) {\n        return false;\n    }\n    if (a === 0 || b === 0 || c === 0)\
    \ {\n        return false;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a === b || b === c || a === c) {\n        return false;\n\
    \    }\n    if (a > b && a > c) {\n        if (a * a === b * b + c * c) {\n  \
    \          return true;\n        }\n    }\n    if (b > a && b > c) {\n       \
    \ if (b * b === a * a + c * c) {\n            return true;\n        }\n    }\n\
    \    if (c > a && c > b) {\n        if (c * c === a * a + b * b) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n", "    if (a > b &&\
    \ a > c) {\n        return a * a === b * b + c * c;\n    } else if (b > a && b\
    \ > c) {\n        return b * b === a * a + c * c;\n    } else {\n        return\
    \ c * c === a * a + b * b;\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    if (arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2])\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return undefined;\n    }\n\
    \    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return undefined;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n\
    \        return undefined;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n  \
    \  return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2], 2);\n\
    }\n", "    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n \
    \   if (a * a + b * b == c * c) {\n        return true;\n    }\n    if (a * a\
    \ + c * c == b * b) {\n        return true;\n    }\n    if (b * b + c * c == a\
    \ * a) {\n        return true;\n    }\n    return false;\n}\n", "    if (a > b\
    \ && a > c) {\n        if (a * a == b * b + c * c) {\n            return true;\n\
    \        }\n    } else if (b > a && b > c) {\n        if (b * b == a * a + c *\
    \ c) {\n            return true;\n        }\n    } else if (c > a && c > b) {\n\
    \        if (c * c == a * a + b * b) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b)\
    \ => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", " \
    \   // your code here\n    if (a === undefined || b === undefined || c === undefined)\
    \ {\n        return false;\n    }\n    if (a === null || b === null || c === null)\
    \ {\n        return false;\n    }\n    if (typeof a !== 'number' || typeof b !==\
    \ 'number' || typeof c !== 'number') {\n        return false;\n    }\n    if (a\
    \ <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    if (a === b &&\
    \ b === c) {\n        return false;\n    }\n    if (a === b || b === c || a ===\
    \ c) {\n        return false;\n    }\n    if (a * a + b * b === c * c || a * a\
    \ + c * c === b * b || b * b + c * c === a * a) {\n        return true;\n    }\n\
    \    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
