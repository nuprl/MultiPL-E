name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: any, b: any, c: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["    // your code here\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n", "    if (a > b && a > c) {\n        return Math.pow(a,\
    \ 2) == Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b > a && b > c) {\n \
    \       return Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2);\n    } else\
    \ if (c > a && c > b) {\n        return Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n\
    \    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n", "    if (a === undefined\
    \ || b === undefined || c === undefined) {\n        return false;\n    }\n   \
    \ if (a === null || b === null || c === null) {\n        return false;\n    }\n\
    \    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number')\
    \ {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n   \
    \     return false;\n    }\n    if (a === b && b === c) {\n        return false;\n\
    \    }\n    if (a === b || b === c || a === c) {\n        return false;\n    }\n\
    \    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b + c * c ===\
    \ a * a) {\n        return true;\n    }\n    return false;\n}\n", "    let sides\
    \ = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    if (a > 0 && b > 0 && c > 0) {\n \
    \       if (a * a + b * b == c * c) {\n            return true;\n        }\n \
    \       else if (a * a + c * c == b * b) {\n            return true;\n       \
    \ }\n        else if (b * b + c * c == a * a) {\n            return true;\n  \
    \      }\n        else {\n            return false;\n        }\n    }\n    else\
    \ {\n        return false;\n    }\n}\n", "    if (a === undefined || b === undefined\
    \ || c === undefined) {\n        return false;\n    }\n    if (a === null || b\
    \ === null || c === null) {\n        return false;\n    }\n    if (typeof a !==\
    \ 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return\
    \ false;\n    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n\
    \    }\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return false;\n\
    \    }\n    if (a * a + b * b === c * c || a * a + c * c === b * b || b * b +\
    \ c * c === a * a) {\n        return true;\n    }\n    return false;\n}\n", " \
    \   if (a === undefined || b === undefined || c === undefined) {\n        return\
    \ undefined;\n    }\n    if (typeof a !== 'number' || typeof b !== 'number' ||\
    \ typeof c !== 'number') {\n        return undefined;\n    }\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0) {\n        return undefined;\n    }\n    if (a === b && b\
    \ === c) {\n        return false;\n    }\n    if (a * a + b * b === c * c) {\n\
    \        return true;\n    }\n    if (b * b + c * c === a * a) {\n        return\
    \ true;\n    }\n    if (c * c + a * a === b * b) {\n        return true;\n   \
    \ }\n    return false;\n}\n", "    if (a === undefined || b === undefined || c\
    \ === undefined) {\n        return false;\n    }\n    if (a === null || b ===\
    \ null || c === null) {\n        return false;\n    }\n    if (typeof a !== 'number'\
    \ || typeof b !== 'number' || typeof c !== 'number') {\n        return false;\n\
    \    }\n    if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n\
    \    if (a === b && b === c) {\n        return false;\n    }\n    if (a === b\
    \ || b === c || a === c) {\n        return false;\n    }\n    if (a * a + b *\
    \ b === c * c || b * b + c * c === a * a || a * a + c * c === b * b) {\n     \
    \   return true;\n    }\n    return false;\n}\n", "    let arr = [a, b, c];\n\
    \    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2]\
    \ ** 2;\n}\n", "    if (a == null || b == null || c == null) {\n        return\
    \ false;\n    }\n    if (a == 0 || b == 0 || c == 0) {\n        return false;\n\
    \    }\n    if (a == b && b == c) {\n        return false;\n    }\n    if (a ==\
    \ b || b == c || a == c) {\n        return false;\n    }\n    if (a > b && a >\
    \ c) {\n        if (a * a == b * b + c * c) {\n            return true;\n    \
    \    }\n    }\n    if (b > a && b > c) {\n        if (b * b == a * a + c * c)\
    \ {\n            return true;\n        }\n    }\n    if (c > a && c > b) {\n \
    \       if (c * c == a * a + b * b) {\n            return true;\n        }\n \
    \   }\n    return false;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    let [a, b, c] = sides;\n    return a * a + b * b === c *\
    \ c;\n}\n", "    let sides = [a, b, c];\n    sides.sort((a, b) => a - b);\n  \
    \  return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2],\
    \ 2);\n}\n", "    if (a === undefined || b === undefined || c === undefined) {\n\
    \        return undefined;\n    }\n    if (typeof a !== 'number' || typeof b !==\
    \ 'number' || typeof c !== 'number') {\n        return undefined;\n    }\n   \
    \ if (a <= 0 || b <= 0 || c <= 0) {\n        return undefined;\n    }\n    if\
    \ (a === b && b === c) {\n        return false;\n    }\n    let max = Math.max(a,\
    \ b, c);\n    let sum = a + b + c;\n    if (max === a) {\n        return Math.pow(a,\
    \ 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    }\n    if (max === b) {\n     \
    \   return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c, 2);\n    }\n    if\
    \ (max === c) {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n", "    let x = Math.pow(a, 2);\n    let y = Math.pow(b, 2);\n\
    \    let z = Math.pow(c, 2);\n    if (x + y == z || x + z == y || y + z == x)\
    \ {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\
    console.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n", "    let arr = [a, b, c];\n    arr.sort((a, b) => a - b);\n    let\
    \ [x, y, z] = arr;\n    return x * x + y * y === z * z;\n}\n", "    if (a > 0\
    \ && b > 0 && c > 0) {\n        if (a * a + b * b == c * c) {\n            return\
    \ true;\n        }\n        else if (a * a + c * c == b * b) {\n            return\
    \ true;\n        }\n        else if (b * b + c * c == a * a) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "    let sides = [a, b, c];\n\
    \    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n", "    return (a * a + b * b == c * c) ||\
    \ (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n", "    if (a ===\
    \ undefined || b === undefined || c === undefined) {\n        return false;\n\
    \    }\n    if (a === null || b === null || c === null) {\n        return false;\n\
    \    }\n    if (a === '' || b === '' || c === '') {\n        return false;\n \
    \   }\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !==\
    \ 'number') {\n        return false;\n    }\n    if (a <= 0 || b <= 0 || c <=\
    \ 0) {\n        return false;\n    }\n    if (a === b && b === c) {\n        return\
    \ false;\n    }\n    if (a === b || b === c || a === c) {\n        return false;\n\
    \    }\n    if (a > b && a > c) {\n        if (a * a === b * b + c * c) {\n  \
    \          return true;\n        }\n    }\n    if (b > a && b > c) {\n       \
    \ if (b * b === a * a + c * c) {\n            return true;\n        }\n    }\n\
    \    if (c > a && c > b) {\n        if (c * c === a * a + b * b) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
