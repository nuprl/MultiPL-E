name: HumanEval_132_is_nested
language: ts
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return true if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(': ')' };\n  \
    \  let closed: any = { '}': true, ']': true, ')': true };\n\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let letter: any = string[i];\n     \
    \   if (open[letter]) {\n            stack.push(letter);\n        } else if (closed[letter])\
    \ {\n            if (open[stack.pop()] !== letter) return false;\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === '[') {\n            stack.push(string[i]);\n        } else if\
    \ (string[i] === ']') {\n            if (stack.length === 0) {\n             \
    \   return false;\n            } else {\n                stack.pop();\n      \
    \      }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n\
    \    let closed = { '}': true, ']': true, ')': true };\n\n    for (let i = 0;\
    \ i < string.length; i++) {\n        let char = string[i];\n        if (open[char])\
    \ {\n            stack.push(char);\n        } else if (closed[char]) {\n     \
    \       if (open[stack.pop()] !== char) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    let open:\
    \ any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any = { '}': true,\
    \ ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        let letter: any = string[i];\n        if (open[letter]) {\n     \
    \       stack.push(letter);\n        } else if (closed[letter]) {\n          \
    \  if (open[stack.pop()] !== letter) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
