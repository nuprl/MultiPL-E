name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: any, k: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["    let result: any = [];\n    for (let i = 0; i < k; i++) {\n    \
    \    let max = Math.max(...arr);\n        result.push(max);\n        arr.splice(arr.indexOf(max),\
    \ 1);\n    }\n    return result;\n}\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result = [];\n    for (let i = 0; i < k; i++) {\n        let max = arr[0];\n\
    \        let index = 0;\n        for (let j = 0; j < arr.length; j++) {\n    \
    \        if (arr[j] > max) {\n                max = arr[j];\n                index\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(index,\
    \ 1);\n    }\n    return result;\n}\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result: any = [];\n    let max: any = 0;\n    for (let i = 0; i < k; i++) {\n\
    \        for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max)\
    \ {\n                max = arr[j];\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(arr.indexOf(max), 1);\n        max = 0;\n    }\n    return\
    \ result;\n}\n", "    let sorted = arr.sort((a, b) => b - a);\n    return sorted.slice(0,\
    \ k);\n}\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4],\
    \ 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result =\
    \ [];\n    let max = 0;\n    let maxIndex = 0;\n    for (let i = 0; i < k; i++)\
    \ {\n        max = arr[i];\n        maxIndex = i;\n        for (let j = i; j <\
    \ arr.length; j++) {\n            if (arr[j] > max) {\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n    }\n    return result;\n}\n", "    let\
    \ result = [];\n    let max = arr[0];\n    for (let i = 0; i < k; i++) {\n   \
    \     for (let j = 0; j < arr.length; j++) {\n            if (arr[j] > max) {\n\
    \                max = arr[j];\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(arr.indexOf(max), 1);\n        max = arr[0];\n    }\n    return\
    \ result;\n}\n", "    let result = [];\n    let max = 0;\n    let maxIndex = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        max = arr[i];\n        maxIndex =\
    \ i;\n        for (let j = i; j < arr.length; j++) {\n            if (arr[j] >\
    \ max) {\n                max = arr[j];\n                maxIndex = j;\n     \
    \       }\n        }\n        result.push(max);\n        arr[maxIndex] = arr[i];\n\
    \        arr[i] = max;\n    }\n    return result;\n}\n", "    let result = [];\n\
    \    for (let i = 0; i < k; i++) {\n        let max = arr[0];\n        let index\
    \ = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[j]\
    \ > max) {\n                max = arr[j];\n                index = j;\n      \
    \      }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n", "    let\
    \ max: any = [];\n    let temp: any = [];\n    for (let i = 0; i < k; i++) {\n\
    \        max.push(arr[i]);\n    }\n    for (let i = k; i < arr.length; i++) {\n\
    \        for (let j = 0; j < k; j++) {\n            if (arr[i] > max[j]) {\n \
    \               temp.push(max[j]);\n                max[j] = arr[i];\n       \
    \     }\n            else {\n                temp.push(arr[i]);\n            }\n\
    \        }\n        max = temp;\n        temp = [];\n    }\n    return max;\n\
    }\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result = [];\n \
    \   for (let i = 0; i < k; i++) {\n        result.push(Math.max(...arr));\n  \
    \      arr.splice(arr.indexOf(Math.max(...arr)), 1);\n    }\n    return result;\n\
    }\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: any = [];\n\
    \    let max: any = 0;\n    let maxIndex: any = 0;\n    for (let i: any = 0; i\
    \ < k; i++) {\n        for (let j: any = 0; j < arr.length; j++) {\n         \
    \   if (arr[j] > max) {\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n        max = 0;\n    }\n    return result;\n}\n", "    let result: any\
    \ = [];\n    let max: any = arr[0];\n    let maxIndex: any = 0;\n    for (let\
    \ i: any = 0; i < k; i++) {\n        for (let j: any = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(maxIndex, 1);\n        max = arr[0];\n    }\n    return result;\n\
    }\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let result: any = [];\n\
    \    let max: any = arr[0];\n    let index: any = 0;\n    for (let i: any = 0;\
    \ i < k; i++) {\n        max = arr[i];\n        index = i;\n        for (let j:\
    \ any = i; j < arr.length; j++) {\n            if (arr[j] > max) {\n         \
    \       max = arr[j];\n                index = j;\n            }\n        }\n\
    \        result.push(max);\n        arr[index] = arr[i];\n        arr[i] = max;\n\
    \    }\n    return result;\n}\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4,\
    \ -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    let\
    \ result: any = [];\n    let max: any = 0;\n    let index: any = 0;\n    for (let\
    \ i: any = 0; i < k; i++) {\n        for (let j: any = 0; j < arr.length; j++)\
    \ {\n            if (arr[j] > max) {\n                max = arr[j];\n        \
    \        index = j;\n            }\n        }\n        result.push(max);\n   \
    \     arr.splice(index, 1);\n        max = 0;\n    }\n    return result;\n}\n\
    console.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\n\
    console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    return arr.sort((a:\
    \ any, b: any) => b - a).slice(0, k);\n}\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    let max = [];\n    for (let i = 0; i < k; i++) {\n        max.push(arr[i]);\n\
    \    }\n    for (let i = k; i < arr.length; i++) {\n        for (let j = 0; j\
    \ < k; j++) {\n            if (arr[i] > max[j]) {\n                max.splice(j,\
    \ 0, arr[i]);\n                max.pop();\n                break;\n          \
    \  }\n        }\n    }\n    return max;\n}\nconsole.log(maximum([-3, -4, 5], 3));\n\
    console.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1));", "    let sorted = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length\
    \ - k, sorted.length);\n}\n", "    // Write your code here\n    let max = [];\n\
    \    let i = 0;\n    while (i < k) {\n        max.push(Math.max(...arr));\n  \
    \      arr.splice(arr.indexOf(Math.max(...arr)), 1);\n        i++;\n    }\n  \
    \  return max;\n}\n", "    let result = [];\n    for (let i = 0; i < k; i++) {\n\
    \        let max = arr[0];\n        let index = 0;\n        for (let j = 0; j\
    \ < arr.length; j++) {\n            if (arr[j] > max) {\n                max =\
    \ arr[j];\n                index = j;\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(index, 1);\n    }\n    return result;\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let sorted = arr.sort((a, b) => b - a);\n \
    \   return sorted.slice(0, k);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
