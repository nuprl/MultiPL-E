name: HumanEval_79_decimal_to_binary
language: ts
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunction decimal_to_binary(decimal: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"\
  db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"\
  db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"
completions: ["    let binary = \"\";\n    while (decimal > 0) {\n        binary =\
    \ (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    return \"db\" +\
    \ decimal.toString(2) + \"db\";\n}\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    let binary = '';\n    while (decimal > 0) {\n        binary\
    \ = (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return 'db' + binary + 'db';\n}\n", "    return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", " \
    \   return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary: string\
    \ = \"\";\n    let binaryArray: string[] = [];\n    let binaryString: string =\
    \ \"\";\n    let binaryStringArray: string[] = [];\n    let binaryStringArrayLength:\
    \ number = 0;\n    let binaryStringArrayLengthMinusOne: number = 0;\n    let binaryStringArrayLengthMinusTwo:\
    \ number = 0;\n    let binaryStringArrayLengthMinusThree: number = 0;\n    let\
    \ binaryStringArrayLengthMinusFour: number = 0;\n    let binaryStringArrayLengthMinusFive:\
    \ number = 0;\n    let binaryStringArrayLengthMinusSix: number = 0;\n    let binaryStringArrayLengthMinusSeven:\
    \ number = 0;\n    let binaryStringArrayLengthMinusEight: number = 0;\n    let\
    \ binaryStringArrayLengthMinusNine: number = 0;\n    let binaryStringArrayLengthMinusTen:\
    \ number = 0;\n    let binaryStringArrayLengthMinusEleven: number = 0;\n    let\
    \ binaryStringArrayLengthMinusTwelve: number = 0;\n    let binaryStringArrayLengthMinusThirteen:\
    \ number = 0;\n    let binaryStringArrayLengthMinusFourteen: number = 0;\n   \
    \ let binaryStringArrayLengthMinusFifteen: number = 0;\n    let binaryStringArrayLengthMinusSixteen:\
    \ number = 0;\n    let binaryStringArrayLengthMinusSeventeen: number = 0;\n  \
    \  let binaryStringArrayLengthMinusEighteen: number = 0;\n    let binaryStringArrayLengthMinusNineteen:\
    \ number = 0;\n    let binaryStringArrayLengthMinusTwenty: number = 0;\n    let\
    \ binaryStringArrayLengthMinusTwentyOne: number = 0;\n    let binaryStringArrayLengthMinusTwentyTwo:\
    \ number = 0;\n    let binaryStringArrayLengthMinusTwentyThree: number = 0;\n\
    \    let binaryStringArrayLengthMinusTwentyFour: number = 0;\n    let binaryStringArrayLengthMinusTwentyFive:\
    \ number = 0;\n    let binaryStringArrayLengthMinusTwentySix: number = 0;\n  \
    \  let binaryStringArrayLengthMinusTwentySeven: number = 0;\n    let binaryStringArrayLengthMinusTwentyEight:\
    \ number = 0;\n    let binaryStringArrayLengthMinusTwentyNine: number = 0;\n \
    \   let binaryStringArray", "    return \"db\" + decimal.toString(2) + \"db\"\
    ;\n}\n", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", "    let binary:\
    \ string = \"\";\n    let remainder: number;\n    while (decimal > 0) {\n    \
    \    remainder = decimal % 2;\n        decimal = Math.floor(decimal / 2);\n  \
    \      binary = remainder + binary;\n    }\n    return \"db\" + binary + \"db\"\
    ;\n}\n", "    let binary = \"\";\n    while (decimal > 0) {\n        binary =\
    \ (decimal % 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n\
    \    return \"db\" + binary + \"db\";\n}\n", "    return 'db' + decimal.toString(2)\
    \ + 'db';\n}\n", "    let binary = \"\";\n    let binary_string = \"\";\n    let\
    \ binary_array = [];\n    let binary_array_reverse = [];\n    let binary_array_reverse_string\
    \ = \"\";\n    let binary_array_reverse_string_db = \"\";\n    let binary_array_reverse_string_db_final\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db = \"\";\n    let binary_array_reverse_string_db_final_db_final\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db = \"\";\n\
    \    let binary_array_reverse_string_db_final_db_final_db_final = \"\";\n    let\
    \ binary_array_reverse_string_db_final_db_final_db_final_db = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db_final\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db_final_db\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db_final_db_final\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final_db_final_db_final_db\
    \ = \"\";\n    let binary_array_reverse_string_db_final_db_final_db_final_db_final_db_final",
  "    let binary = \"\";\n    while (decimal > 0) {\n        binary = (decimal %\
    \ 2) + binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return\
    \ \"db\" + binary + \"db\";\n}\n", "    let binary: string = \"\";\n    let remainder:\
    \ number;\n    while (decimal > 0) {\n        remainder = decimal % 2;\n     \
    \   binary = remainder + binary;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + binary + \"db\";\n}\n", "    let binary = \"\";\n\
    \    while (decimal > 0) {\n        binary = (decimal % 2) + binary;\n       \
    \ decimal = Math.floor(decimal / 2);\n    }\n    return \"db\" + binary + \"db\"\
    ;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
