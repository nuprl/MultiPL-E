language: ts
name: HumanEval_148_bf
results:
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 < 0 || index2 < 0) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        for (let i = index2 + 1;\
    \ i < index1; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328097
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return result;\n    }\n    if (planet1Index > planet2Index) {\n\
    \        for (let i = planet2Index + 1; i < planet1Index; i++) {\n           \
    \ result.push(planets[i]);\n        }\n    } else {\n        for (let i = planet1Index\
    \ + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n      \
    \  }\n    }\n    return result;\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\n\
    console.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328097
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let result: any = [];\n    if (planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1) {\n        return result;\n    }\n    let start = planets.indexOf(planet1);\n\
    \    let end = planets.indexOf(planet2);\n    if (start > end) {\n        start\
    \ = planets.indexOf(planet2);\n        end = planets.indexOf(planet1);\n    }\n\
    \    for (let i = start + 1; i < end; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328097
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let p1 = planets.indexOf(planet1);\n    let p2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (p1 === -1 || p2 === -1) {\n        return result;\n\
    \    }\n    if (p1 > p2) {\n        let temp = p1;\n        p1 = p2;\n       \
    \ p2 = temp;\n    }\n    for (let i = p1 + 1; i < p2; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328097
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        let temp = index1;\n        index1 = index2;\n\
    \        index2 = temp;\n    }\n    let result = [];\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n \
    \   }\n    let result = [];\n    if (planet1Index < planet2Index) {\n        for\
    \ (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if (planet1Index\
    \ < planet2Index) {\n        for (let i: number = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i: number = planet2Index + 1; i < planet1Index; i++) {\n       \
    \     result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index\
    \ = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return [];\n    }\n    if (planet1Index > planet2Index) {\n \
    \       return [];\n    }\n    return planets.slice(planet1Index + 1, planet2Index);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  'Venus'\n]\n    at test (/tmp/tmp2t4r5o4i.js:33:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp2t4r5o4i.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 'Venus' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n\
    \        for (let i = planet1Index + 1; i < planet2Index; i++) {\n           \
    \ result.push(planets[i]);\n        }\n    } else {\n        for (let i = planet2Index\
    \ + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n      \
    \  }\n    }\n    return result;\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\n\
    console.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if (planet1Index\
    \ < planet2Index) {\n        for (let i: number = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i: number = planet2Index + 1; i < planet1Index; i++) {\n       \
    \     result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index > planet2Index) {\n \
    \       for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n\
    \        for (let i = planet1Index + 1; i < planet2Index; i++) {\n           \
    \ result.push(planets[i]);\n        }\n    } else {\n        for (let i = planet2Index\
    \ + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"\
    ));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n  let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let\
    \ index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n\
    \  let result = [];\n  if (index1 === -1 || index2 === -1) {\n    return result;\n\
    \  }\n  if (index1 > index2) {\n    let temp = index1;\n    index1 = index2;\n\
    \    index2 = temp;\n  }\n  for (let i = index1 + 1; i < index2; i++) {\n    result.push(planets[i]);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 < index2) {\n        for (let i = index1 + 1; i < index2;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if (planet1Index\
    \ < planet2Index) {\n        for (let i: number = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i: number = planet2Index + 1; i < planet1Index; i++) {\n       \
    \     result.push(planets[i]);\n        }\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 === -1 || index2 === -1) {\n      \
    \  return result;\n    }\n    if (index1 < index2) {\n        for (let i = index1\
    \ + 1; i < index2; i++) {\n            result.push(planets[i]);\n        }\n \
    \   } else {\n        for (let i = index2 + 1; i < index1; i++) {\n          \
    \  result.push(planets[i]);\n        }\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if (planet1Index\
    \ < planet2Index) {\n        for (let i: number = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i: number = planet2Index + 1; i < planet1Index; i++) {\n       \
    \     result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if (planet1Index\
    \ < planet2Index) {\n        for (let i: number = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i: number = planet2Index + 1; i < planet1Index; i++) {\n       \
    \     result.push(planets[i]);\n        }\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if (planet1Index\
    \ < planet2Index) {\n        for (let i: number = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i: number = planet2Index + 1; i < planet1Index; i++) {\n       \
    \     result.push(planets[i]);\n        }\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n  let planets = [\n    \"Mercury\",\n\
    \    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  let planet1Index = planets.indexOf(planet1);\n\
    \  let planet2Index = planets.indexOf(planet2);\n  let result = [];\n  if (planet1Index\
    \ === -1 || planet2Index === -1) {\n    return result;\n  }\n  if (planet1Index\
    \ < planet2Index) {\n    for (let i = planet1Index + 1; i < planet2Index; i++)\
    \ {\n      result.push(planets[i]);\n    }\n  } else {\n    for (let i = planet2Index\
    \ + 1; i < planet1Index; i++) {\n      result.push(planets[i]);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328104
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 === -1 || index2 === -1) {\n      \
    \  return result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n\
    \        index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\"\
    , \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328104
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let result: string[] = [];\n    let index1: number = planets.indexOf(planet1);\n\
    \    let index2: number = planets.indexOf(planet2);\n    if (index1 === -1 ||\
    \ index2 === -1) {\n        return result;\n    }\n    if (index1 > index2) {\n\
    \        [index1, index2] = [index2, index1];\n    }\n    for (let i: number =\
    \ index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n  \
    \  return result;\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"\
    Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328104
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    } else if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"\
    ));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328104
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    let\
    \ result = [];\n    if (index1 < index2) {\n        for (let i = index1 + 1; i\
    \ < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let betweenPlanets = [];\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return [];\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            betweenPlanets.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            betweenPlanets.push(planets[i]);\n        }\n    }\n   \
    \ return betweenPlanets;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 < 0 || index2 < 0) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        for (let i = index2 + 1;\
    \ i < index1; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328097
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 === -1 || index2 === -1) {\n      \
    \  return result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n\
    \        index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        return planets.slice(index2 + 1, index1);\n   \
    \ }\n    return planets.slice(index1 + 1, index2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   [planet1Index, planet2Index] = [planet2Index, planet1Index];\n    }\n    for\
    \ (let i = planet1Index + 1; i < planet2Index; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328107
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let index1: number = planets.indexOf(planet1);\n    let index2: number\
    \ = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (index1\
    \ > index2) {\n        let temp: number = index1;\n        index1 = index2;\n\
    \        index2 = temp;\n    }\n    if (index1 === -1 || index2 === -1) {\n  \
    \      return result;\n    }\n    for (let i: number = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328107
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 < index2) {\n        for (let i = index1 + 1; i < index2;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index > planet2Index) {\n \
    \       for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"\
    ));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328107
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let result: any = [];\n    if (planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1) {\n        return result;\n    }\n    if (planets.indexOf(planet1) >\
    \ planets.indexOf(planet2)) {\n        let temp = planet1;\n        planet1 =\
    \ planet2;\n        planet2 = temp;\n    }\n    for (let i = planets.indexOf(planet1)\
    \ + 1; i < planets.indexOf(planet2); i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328107
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        return planets.slice(index2 + 1, index1);\n   \
    \ }\n    return planets.slice(index1 + 1, index2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        [index1, index2] = [index2, index1];\n\
    \    }\n    for (let i = index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328108
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        return planets.slice(index2 + 1, index1);\n   \
    \ }\n    return planets.slice(index1 + 1, index2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        let temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let firstPlanetIndex = planets.indexOf(planet1);\n    let secondPlanetIndex\
    \ = planets.indexOf(planet2);\n    let result = [];\n    if (firstPlanetIndex\
    \ === -1 || secondPlanetIndex === -1) {\n        return result;\n    }\n    if\
    \ (firstPlanetIndex > secondPlanetIndex) {\n        let temp = firstPlanetIndex;\n\
    \        firstPlanetIndex = secondPlanetIndex;\n        secondPlanetIndex = temp;\n\
    \    }\n    for (let i = firstPlanetIndex + 1; i < secondPlanetIndex; i++) {\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let result = [];\n    let index1 = planets.indexOf(planet1);\n    let index2\
    \ = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n   \
    \     return [];\n    }\n    if (index1 < index2) {\n        for (let i = index1\
    \ + 1; i < index2; i++) {\n            result.push(planets[i]);\n        }\n \
    \   } else {\n        for (let i = index2 + 1; i < index1; i++) {\n          \
    \  result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328110
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planets1 = planets.indexOf(planet1);\n    let planets2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planets1 > planets2) {\n        for (let i = planets2;\
    \ i <= planets1; i++) {\n            result.push(planets[i]);\n        }\n   \
    \ } else {\n        for (let i = planets1; i <= planets2; i++) {\n           \
    \ result.push(planets[i]);\n        }\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Jupiter',\n\
    \  'Saturn',\n  'Uranus',\n  'Neptune'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'Saturn',\n  'Uranus'\n]\n    at test (/tmp/tmpdk1kyxfh.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdk1kyxfh.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n[ 'Mercury', 'Venus', 'Earth'\
    \ ]\n[\n  'Mercury', 'Venus',\n  'Earth',   'Mars',\n  'Jupiter', 'Saturn',\n\
    \  'Uranus'\n]\n"
  timestamp: 1660328110
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328111
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 < 0 || index2 < 0) {\n        return [];\n    }\n    let result\
    \ = [];\n    if (index1 < index2) {\n        for (let i = index1 + 1; i < index2;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328111
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let p1 = planets.indexOf(planet1);\n    let p2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (p1 === -1 || p2 === -1) {\n        return result;\n\
    \    }\n    if (p1 < p2) {\n        for (let i = p1 + 1; i < p2; i++) {\n    \
    \        result.push(planets[i]);\n        }\n    } else {\n        for (let i\
    \ = p2 + 1; i < p1; i++) {\n            result.push(planets[i]);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328111
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index < 0 || planet2Index < 0) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328112
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let result = [];\n    if (planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1) {\n        return result;\n    }\n    if (planets.indexOf(planet1) >\
    \ planets.indexOf(planet2)) {\n        let temp = planet1;\n        planet1 =\
    \ planet2;\n        planet2 = temp;\n    }\n    for (let i = planets.indexOf(planet1)\
    \ + 1; i < planets.indexOf(planet2); i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328112
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n \
    \   }\n    if (planet1Index > planet2Index) {\n        return planets.slice(planet2Index\
    \ + 1, planet1Index);\n    }\n    return planets.slice(planet1Index + 1, planet2Index);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328112
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let index1: number = planets.indexOf(planet1);\n    let index2: number\
    \ = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (index1\
    \ < 0 || index2 < 0) {\n        return result;\n    }\n    if (index1 > index2)\
    \ {\n        let temp: number = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    for (let i: number = index1 + 1; i < index2; i++) {\n  \
    \      result.push(planets[i]);\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328113
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    if (planet1Index < 0 || planet2Index < 0) {\n        return [];\n    }\n\
    \    if (planet1Index > planet2Index) {\n        let temp = planet1Index;\n  \
    \      planet1Index = planet2Index;\n        planet2Index = temp;\n    }\n   \
    \ let result = [];\n    for (let i = planet1Index + 1; i < planet2Index; i++)\
    \ {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328113
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planets1 = planets.indexOf(planet1);\n    let planets2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planets1 === -1 || planets2 === -1) {\n       \
    \ return result;\n    } else if (planets1 < planets2) {\n        for (let i =\
    \ planets1 + 1; i < planets2; i++) {\n            result.push(planets[i]);\n \
    \       }\n        return result;\n    } else if (planets1 > planets2) {\n   \
    \     for (let i = planets2 + 1; i < planets1; i++) {\n            result.push(planets[i]);\n\
    \        }\n        return result;\n    }\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\"\
    ));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"\
    Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp3tfwk8uv.js:48:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp3tfwk8uv.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328114
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"\
    ));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: string[] = [];\n    if (index1 === -1 || index2 === -1) {\n \
    \       return result;\n    }\n    if (index1 > index2) {\n        let temp =\
    \ index1;\n        index1 = index2;\n        index2 = temp;\n    }\n    for (let\
    \ i = index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328114
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let result: string[] = [];\n    let index1: number = planets.indexOf(planet1);\n\
    \    let index2: number = planets.indexOf(planet2);\n    if (index1 == -1 || index2\
    \ == -1) {\n        return result;\n    }\n    if (index1 > index2) {\n      \
    \  let temp: number = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (let i: number = index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"\
    Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328115
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    if (planets.indexOf(planet1) === -1 || planets.indexOf(planet2) === -1)\
    \ {\n        return [];\n    }\n    const start = planets.indexOf(planet1);\n\
    \    const end = planets.indexOf(planet2);\n    if (start > end) {\n        return\
    \ planets.slice(end, start + 1).reverse();\n    }\n    return planets.slice(start,\
    \ end + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Jupiter',\n\
    \  'Saturn',\n  'Uranus',\n  'Neptune'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'Saturn',\n  'Uranus'\n]\n    at test (/tmp/tmp9et5od49.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9et5od49.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328115
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index > planet2Index) {\n \
    \       for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 < index2) {\n        for (let i = index1 + 1; i < index2;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 == -1 || index2 == -1) {\n        return [];\n    }\n    if (index1\
    \ > index2) {\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    let result = [];\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328115
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let result: any = [];\n    if (planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1) {\n        return result;\n    }\n    if (planets.indexOf(planet1) >\
    \ planets.indexOf(planet2)) {\n        for (let i = planets.indexOf(planet2);\
    \ i <= planets.indexOf(planet1); i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planets.indexOf(planet1); i <=\
    \ planets.indexOf(planet2); i++) {\n            result.push(planets[i]);\n   \
    \     }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Jupiter',\n\
    \  'Saturn',\n  'Uranus',\n  'Neptune'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  'Saturn',\n  'Uranus'\n]\n    at test (/tmp/tmps4yy769_.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps4yy769_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328115
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index < 0 || planet2Index < 0) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   planet1Index = planet1Index + planet2Index;\n        planet2Index = planet1Index\
    \ - planet2Index;\n        planet1Index = planet1Index - planet2Index;\n    }\n\
    \    for (let i = planet1Index + 1; i < planet2Index; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328116
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"\
    ));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328116
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        let temp = index1;\n        index1 = index2;\n\
    \        index2 = temp;\n    }\n    let result = [];\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        return planets.slice(index2 + 1, index1);\n   \
    \ }\n    return planets.slice(index1 + 1, index2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328117
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n\
    \        for (let i = planet1Index + 1; i < planet2Index; i++) {\n           \
    \ result.push(planets[i]);\n        }\n    } else {\n        for (let i = planet2Index\
    \ + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        let temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for (let i = planet1Index + 1; i < planet2Index; i++) {\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328117
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    else if\
    \ (planet1Index < planet2Index) {\n        for (let i: number = planet1Index +\
    \ 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n        }\n\
    \    }\n    else {\n        for (let i: number = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"\
    ));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328118
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    const planet1Index = planets.indexOf(planet1);\n    const planet2Index\
    \ = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return [];\n    }\n    if (planet1Index < planet2Index) {\n \
    \       return planets.slice(planet1Index + 1, planet2Index);\n    }\n    return\
    \ planets.slice(planet2Index + 1, planet1Index);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328118
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconsole.log(bf(\"Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"\
    ));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328116
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 > index2) {\n        for (let i = index2\
    \ + 1; i < index1; i++) {\n            result.push(planets[i]);\n        }\n \
    \   } else {\n        for (let i = index1 + 1; i < index2; i++) {\n          \
    \  result.push(planets[i]);\n        }\n    }\n    return result;\n}\nconsole.log(bf(\"\
    Jupiter\", \"Neptune\"));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"\
    Mercury\", \"Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mercury',\n\
    \  'Venus',\n  'Earth',\n  'Mars'\n]\n\nshould loosely deep-equal\n\n[]\n    at\
    \ test (/tmp/tmpygicvovn.js:46:12)\n    at Object.<anonymous> (/tmp/tmpygicvovn.js:48:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mercury',\
    \ 'Venus', 'Earth', 'Mars' ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328118
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    let\
    \ result = [];\n    if (index1 > index2) {\n        for (let i = index2 + 1; i\
    \ < index1; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328119
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        for (let i = index2 + 1;\
    \ i < index1; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328119
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 === -1 || index2 === -1) {\n      \
    \  return result;\n    } else if (index1 > index2) {\n        for (let i = index2\
    \ + 1; i < index1; i++) {\n            result.push(planets[i]);\n        }\n \
    \   } else {\n        for (let i = index1 + 1; i < index2; i++) {\n          \
    \  result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328120
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        return planets.slice(index2 + 1, index1);\n   \
    \ }\n    return planets.slice(index1 + 1, index2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return result;\n    }\n    if (planet1Index > planet2Index) {\n\
    \        let temp = planet1Index;\n        planet1Index = planet2Index;\n    \
    \    planet2Index = temp;\n    }\n    for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328120
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (planet1Index === -1 || planet2Index ===\
    \ -1) {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n\
    \        for (let i = planet1Index + 1; i < planet2Index; i++) {\n           \
    \ result.push(planets[i]);\n        }\n    } else {\n        for (let i = planet2Index\
    \ + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let p1 = planets.indexOf(planet1);\n    let p2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (p1 === -1 || p2 === -1) {\n        return result;\n\
    \    }\n    if (p1 > p2) {\n        let temp = p1;\n        p1 = p2;\n       \
    \ p2 = temp;\n    }\n    for (let i = p1 + 1; i < p2; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328097
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index < 0 || planet2Index < 0) {\n     \
    \   return result;\n    }\n    if (planet1Index < planet2Index) {\n        for\
    \ (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328120
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index < 0 || planet2Index < 0) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for (let i = planet1Index + 1; i < planet2Index; i++) {\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328121
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index < 0 || planet2Index < 0) {\n     \
    \   return result;\n    }\n    if (planet1Index < planet2Index) {\n        for\
    \ (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328120
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        for (let i = index2 + 1;\
    \ i < index1; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328119
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        let temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for (let i = planet1Index + 1; i < planet2Index; i++) {\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328121
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        let temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   let temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for (let i = planet1Index + 1; i < planet2Index; i++) {\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328121
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        let temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328117
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        let temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 == -1 || index2 == -1) {\n        return [];\n    }\n    if (index1\
    \ > index2) {\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    let result = [];\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328115
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        let temp = index1;\n        index1 = index2;\n\
    \        index2 = temp;\n    }\n    return planets.slice(index1 + 1, index2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328122
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let planet1Index: number = planets.indexOf(planet1);\n    let planet2Index:\
    \ number = planets.indexOf(planet2);\n    let result: string[] = [];\n    if (planet1Index\
    \ === -1 || planet2Index === -1) {\n        return result;\n    }\n    if (planet1Index\
    \ < planet2Index) {\n        for (let i: number = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i: number = planet2Index + 1; i < planet1Index; i++) {\n       \
    \     result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let result: any = [];\n    let index1: number = planets.indexOf(planet1);\n\
    \    let index2: number = planets.indexOf(planet2);\n    if (index1 >= 0 && index2\
    \ >= 0) {\n        if (index1 < index2) {\n            for (let i = index1 + 1;\
    \ i < index2; i++) {\n                result.push(planets[i]);\n            }\n\
    \        } else {\n            for (let i = index2 + 1; i < index1; i++) {\n \
    \               result.push(planets[i]);\n            }\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328122
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328111
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n \
    \   }\n    let result = [];\n    if (planet1Index < planet2Index) {\n        for\
    \ (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index > -1 && planet2Index > -1) {\n\
    \        if (planet1Index < planet2Index) {\n            for (let i = planet1Index\
    \ + 1; i < planet2Index; i++) {\n                result.push(planets[i]);\n  \
    \          }\n        } else {\n            for (let i = planet2Index + 1; i <\
    \ planet1Index; i++) {\n                result.push(planets[i]);\n           \
    \ }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328123
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (index1 === -1 || index2 === -1) {\n    \
    \    return result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n\
    \        index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328123
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n  let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let\
    \ index1 = planets.indexOf(planet1);\n  let index2 = planets.indexOf(planet2);\n\
    \  let result = [];\n  if (index1 === -1 || index2 === -1) {\n    return result;\n\
    \  }\n  if (index1 > index2) {\n    let temp = index1;\n    index1 = index2;\n\
    \    index2 = temp;\n  }\n  for (let i = index1 + 1; i < index2; i++) {\n    result.push(planets[i]);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328103
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let result: any = [];\n    if (planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1) {\n        return result;\n    }\n    if (planets.indexOf(planet1) >\
    \ planets.indexOf(planet2)) {\n        let temp = planet1;\n        planet1 =\
    \ planet2;\n        planet2 = temp;\n    }\n    for (let i = planets.indexOf(planet1)\
    \ + 1; i < planets.indexOf(planet2); i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328107
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        let temp = index1;\n        index1 = index2;\n\
    \        index2 = temp;\n    }\n    let result = [];\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328123
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 == -1 || index2 == -1) {\n        return\
    \ [];\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1; i <\
    \ index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328123
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        let temp = index1;\n        index1 = index2;\n\
    \        index2 = temp;\n    }\n    let result = [];\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let p1 = planets.indexOf(planet1);\n    let p2 = planets.indexOf(planet2);\n\
    \    if (p1 === -1 || p2 === -1) {\n        return [];\n    }\n    if (p1 > p2)\
    \ {\n        return planets.slice(p2 + 1, p1);\n    }\n    return planets.slice(p1\
    \ + 1, p2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328124
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n \
    \   }\n    let result = [];\n    if (planet1Index < planet2Index) {\n        for\
    \ (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index > planet2Index) {\n \
    \       let temp = planet1Index;\n        planet1Index = planet2Index;\n     \
    \   planet2Index = temp;\n    }\n    for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328125
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index > planet2Index) {\n \
    \       for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328101
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let result = [];\n    let index1 = planets.indexOf(planet1);\n    let index2\
    \ = planets.indexOf(planet2);\n    if (index1 === -1 || index2 === -1) {\n   \
    \     return result;\n    }\n    if (index1 < index2) {\n        for (let i =\
    \ index1 + 1; i < index2; i++) {\n            result.push(planets[i]);\n     \
    \   }\n    } else {\n        for (let i = index2 + 1; i < index1; i++) {\n   \
    \         result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328125
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        return planets.slice(index2 + 1, index1);\n   \
    \ }\n    return planets.slice(index1 + 1, index2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let result: any = [];\n    if (planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1) {\n        return result;\n    }\n    if (planets.indexOf(planet1) >\
    \ planets.indexOf(planet2)) {\n        result = planets.slice(planets.indexOf(planet2),\
    \ planets.indexOf(planet1));\n    } else {\n        result = planets.slice(planets.indexOf(planet1),\
    \ planets.indexOf(planet2));\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Jupiter',\n\
    \  'Saturn',\n  'Uranus'\n]\n\nshould loosely deep-equal\n\n[\n  'Saturn',\n \
    \ 'Uranus'\n]\n    at test (/tmp/tmp5lq00mlr.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5lq00mlr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328125
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: string[] = [];\n    if (planet1Index > -1 && planet2Index > -1)\
    \ {\n        if (planet1Index < planet2Index) {\n            for (let i = planet1Index\
    \ + 1; i < planet2Index; i++) {\n                result.push(planets[i]);\n  \
    \          }\n        } else {\n            for (let i = planet2Index + 1; i <\
    \ planet1Index; i++) {\n                result.push(planets[i]);\n           \
    \ }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328126
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\
    \    if (index1 < 0 || index2 < 0) {\n        return [];\n    }\n    if (index1\
    \ < index2) {\n        return planets.slice(index1 + 1, index2);\n    }\n    return\
    \ planets.slice(index2 + 1, index1);\n}\nconsole.log(bf(\"Jupiter\", \"Neptune\"\
    ));\nconsole.log(bf(\"Earth\", \"Mercury\"));\nconsole.log(bf(\"Mercury\", \"\
    Uranus\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ ''Saturn'', ''Uranus'' ]

    [ ''Venus'' ]

    [ ''Venus'', ''Earth'', ''Mars'', ''Jupiter'', ''Saturn'' ]

    '
  timestamp: 1660328126
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 > index2) {\n        return planets.slice(index2 + 1, index1);\n   \
    \ }\n    return planets.slice(index1 + 1, index2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328126
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    else if (index1 > index2) {\n        for (let i = index2\
    \ + 1; i < index1; i++) {\n            result.push(planets[i]);\n        }\n \
    \   }\n    else {\n        for (let i = index1 + 1; i < index2; i++) {\n     \
    \       result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328126
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index === -1 || planet2Index === -1)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let result: string[] = [];\n    let index1: number = planets.indexOf(planet1);\n\
    \    let index2: number = planets.indexOf(planet2);\n    if (index1 == -1 || index2\
    \ == -1) {\n        return result;\n    }\n    if (index1 > index2) {\n      \
    \  let temp: number = index1;\n        index1 = index2;\n        index2 = temp;\n\
    \    }\n    for (let i: number = index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328127
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: any = [];\n    if (planet1Index < 0 || planet2Index < 0) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328112
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result: any[] = [];\n    if (index1 > index2) {\n        for (let i =\
    \ index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n     \
    \   }\n    } else {\n        for (let i = index1 + 1; i < index2; i++) {\n   \
    \         result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mercury',\n\
    \  'Venus',\n  'Earth',\n  'Mars'\n]\n\nshould loosely deep-equal\n\n[]\n    at\
    \ test (/tmp/tmppl__gn6c.js:43:12)\n    at Object.<anonymous> (/tmp/tmppl__gn6c.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mercury',\
    \ 'Venus', 'Earth', 'Mars' ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328128
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result: string[] = [];\n    if (planet1Index < 0 || planet2Index < 0)\
    \ {\n        return result;\n    }\n    if (planet1Index < planet2Index) {\n \
    \       for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328128
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 > index2) {\n        let temp = index1;\n   \
    \     index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++) {\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 == -1 || index2 == -1) {\n        return [];\n    }\n    if (index1\
    \ > index2) {\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    let result = [];\n    for (let i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328115
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index > -1 && planet2Index > -1) {\n   \
    \     if (planet1Index < planet2Index) {\n            for (let i = planet1Index\
    \ + 1; i < planet2Index; i++) {\n                result.push(planets[i]);\n  \
    \          }\n        } else {\n            for (let i = planet2Index + 1; i <\
    \ planet1Index; i++) {\n                result.push(planets[i]);\n           \
    \ }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328128
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets: string[] = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let result: string[] = [];\n    if (planets.indexOf(planet1) > -1 && planets.indexOf(planet2)\
    \ > -1) {\n        if (planets.indexOf(planet1) < planets.indexOf(planet2)) {\n\
    \            for (let i = planets.indexOf(planet1) + 1; i < planets.indexOf(planet2);\
    \ i++) {\n                result.push(planets[i]);\n            }\n        } else\
    \ {\n            for (let i = planets.indexOf(planet2) + 1; i < planets.indexOf(planet1);\
    \ i++) {\n                result.push(planets[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328129
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 === -1 || index2 === -1) {\n        return\
    \ result;\n    }\n    if (index1 < index2) {\n        for (let i = index1 + 1;\
    \ i < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328109
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    let\
    \ result = [];\n    if (index1 < index2) {\n        for (let i = index1 + 1; i\
    \ < index2; i++) {\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328106
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index) {\n     \
    \   for (let i = planet1Index + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328098
- exit_code: 0
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"\
    Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328100
- exit_code: 1
  program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1: any, planet2: any): any {\n    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (index1 > index2) {\n        for (let i = index2\
    \ + 1; i < index1; i++) {\n            result.push(planets[i]);\n        }\n \
    \   } else {\n        for (let i = index1 + 1; i < index2; i++) {\n          \
    \  result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'Mercury',\n\
    \  'Venus',\n  'Earth',\n  'Mars'\n]\n\nshould loosely deep-equal\n\n[]\n    at\
    \ test (/tmp/tmpom00nnq8.js:43:12)\n    at Object.<anonymous> (/tmp/tmpom00nnq8.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mercury',\
    \ 'Venus', 'Earth', 'Mars' ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328129
