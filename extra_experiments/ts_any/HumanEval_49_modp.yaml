name: HumanEval_49_modp
language: ts
prompt: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
  // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n//\
  \ 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: any, p: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return\
    \ modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * n % p;\n}\n", "   \
    \ if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * n % p;\n}\n", " \
    \ if (n === 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n\
    \ / 2, p) ** 2 % p;\n  }\n  return n * modp(n - 1, p) % p;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return n * modp(n - 1, p) % p;\n}\n", "  if (n\
    \ === 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return Math.pow(modp(n\
    \ / 2, p), 2) % p;\n  }\n  return (n % p) * modp(n - 1, p) % p;\n}\n", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return n * modp(n - 1, p) % p;\n}\n", " \
    \ if (n === 0) return 1;\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2\
    \ % p;\n  } else {\n    return modp(n - 1, p) * n % p;\n  }\n}\n", "    if (n\
    \ === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return Math.pow(modp(n\
    \ / 2, p), 2) % p;\n    }\n    return (n % p) * modp(n - 1, p) % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n       \
    \ return modp(n / 2, p) ** 2 % p;\n    }\n    return n * modp(n - 1, p) % p;\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2\
    \ === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return n * modp(n\
    \ - 1, p) % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * n % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * n % p;\n}\n", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        let t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n\
    \    return (modp(n - 1, p) * n) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * n % p;\n}\n", "    if (n === 0) {\n      \
    \  return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * n % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    }\n    return modp(n - 1, p) * n % p;\n}\n", "  if (n < 0)\
    \ {\n    n = n + p;\n  }\n  if (n == 0) {\n    return 1;\n  }\n  if (n == 1) {\n\
    \    return n;\n  }\n  if (n % 2 == 0) {\n    return Math.pow(modp(n / 2, p),\
    \ 2) % p;\n  } else {\n    return (n * modp(n - 1, p)) % p;\n  }\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return n * modp(n - 1, p) % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n       \
    \ return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * n % p;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
