name: HumanEval_48_is_palindrome
language: ts
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
  \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n\
  // true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text:\
  \ any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    if (text.length <= 1) {\n        return true;\n    }\n    if (text[0]\
    \ != text[text.length - 1]) {\n        return false;\n    }\n    return is_palindrome(text.slice(1,\
    \ text.length - 1));\n}\n", "    if (text.length <= 1) {\n        return true;\n\
    \    }\n    if (text[0] != text[text.length - 1]) {\n        return false;\n \
    \   }\n    return is_palindrome(text.slice(1, text.length - 1));\n}\n", "    if\
    \ (typeof text !== \"string\") {\n        return false;\n    }\n    if (text.length\
    \ <= 1) {\n        return true;\n    }\n    if (text[0] !== text[text.length -\
    \ 1]) {\n        return false;\n    }\n    return is_palindrome(text.slice(1,\
    \ text.length - 1));\n}\n", "    if (text.length < 2) {\n        return true;\n\
    \    }\n    if (text[0] !== text[text.length - 1]) {\n        return false;\n\
    \    }\n    return is_palindrome(text.slice(1, text.length - 1));\n}\n", "   \
    \ if (text.length <= 1) {\n        return true;\n    }\n    else if (text[0] ==\
    \ text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n", "    if (text.length\
    \ === 0) {\n        return true;\n    }\n    if (text.length === 1) {\n      \
    \  return true;\n    }\n    if (text[0] === text[text.length - 1]) {\n       \
    \ return is_palindrome(text.slice(1, text.length - 1));\n    }\n    return false;\n\
    }\n", "    if (text.length === 0) {\n        return true;\n    }\n    if (text.length\
    \ === 1) {\n        return true;\n    }\n    if (text[0] === text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    return false;\n}\n", "    if (typeof text !== \"string\") {\n       \
    \ return false;\n    }\n    if (text.length === 0) {\n        return true;\n \
    \   }\n    if (text.length === 1) {\n        return true;\n    }\n    if (text.length\
    \ === 2) {\n        return text[0] === text[1];\n    }\n    if (text[0] === text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    return false;\n}\n", "    if (text.length == 0) {\n        return true;\n\
    \    }\n    else if (text.length == 1) {\n        return true;\n    }\n    else\
    \ if (text.length == 2) {\n        if (text[0] == text[1]) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }\n   \
    \ }\n    else {\n        if (text[0] == text[text.length - 1]) {\n           \
    \ return is_palindrome(text.slice(1, text.length - 1));\n        }\n        else\
    \ {\n            return false;\n        }\n    }\n}\n", "    if (text.length <=\
    \ 1) {\n        return true;\n    }\n    else if (text[0] == text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "    if (text.length == 0)\
    \ {\n        return true;\n    }\n    else if (text.length == 1) {\n        return\
    \ true;\n    }\n    else if (text.length == 2) {\n        if (text[0] == text[1])\
    \ {\n            return true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    else {\n        if (text[0] == text[text.length - 1]) {\n\
    \            return is_palindrome(text.slice(1, text.length - 1));\n        }\n\
    \        else {\n            return false;\n        }\n    }\n}\n", "    if (typeof\
    \ text !== \"string\") {\n        return false;\n    }\n    if (text.length ===\
    \ 0) {\n        return true;\n    }\n    if (text.length === 1) {\n        return\
    \ true;\n    }\n    if (text.length === 2) {\n        return text[0] === text[1];\n\
    \    }\n    if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n    return false;\n}\n", "    if (text === \"\")\
    \ {\n        return true;\n    } else if (text.length === 1) {\n        return\
    \ true;\n    } else if (text.length === 2) {\n        return text[0] === text[1];\n\
    \    } else {\n        if (text[0] === text[text.length - 1]) {\n            return\
    \ is_palindrome(text.slice(1, text.length - 1));\n        } else {\n         \
    \   return false;\n        }\n    }\n}\n", "    if (text.length <= 1) {\n    \
    \    return true;\n    } else if (text[0] == text[text.length - 1]) {\n      \
    \  return is_palindrome(text.slice(1, text.length - 1));\n    } else {\n     \
    \   return false;\n    }\n}\n", "    if (typeof text !== \"string\") {\n     \
    \   return false;\n    }\n    if (text.length === 0) {\n        return true;\n\
    \    }\n    if (text.length === 1) {\n        return true;\n    }\n    if (text.length\
    \ === 2) {\n        return text[0] === text[1];\n    }\n    if (text[0] === text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    return false;\n}\n", "    if (text.length <= 1) {\n        return true;\n\
    \    }\n    if (text[0] != text[text.length - 1]) {\n        return false;\n \
    \   }\n    return is_palindrome(text.slice(1, text.length - 1));\n}\n", "    if\
    \ (typeof text !== \"string\") {\n        return false;\n    }\n    return text\
    \ === text.split(\"\").reverse().join(\"\");\n}\n", "    if (text.length === 0)\
    \ {\n        return true;\n    }\n    if (text.length === 1) {\n        return\
    \ true;\n    }\n    if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n    return false;\n}\n", "    if (typeof text !==\
    \ \"string\") {\n        return false;\n    }\n    if (text.length === 0) {\n\
    \        return true;\n    }\n    if (text.length === 1) {\n        return true;\n\
    \    }\n    if (text.length === 2) {\n        return text[0] === text[1];\n  \
    \  }\n    if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n    return false;\n}\n", "    if (text.length <=\
    \ 1) {\n        return true;\n    }\n    if (text[0] != text[text.length - 1])\
    \ {\n        return false;\n    }\n    return is_palindrome(text.slice(1, text.length\
    \ - 1));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
