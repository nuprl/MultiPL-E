name: HumanEval_136_largest_smallest_integers
language: ts
prompt: "//Create a function that returns an array (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n\
  // If there is no negative or positive integers, return them as undefined.\n// Examples:\n\
  // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>>\
  \ largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n\
  // [undefined, undefined]\nfunction largest_smallest_integers(lst: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5,\
  \ 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7,\
  \ 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
  \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["    let largest: number = undefined;\n    let smallest: number = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largest == undefined) {\n                largest = lst[i];\n     \
    \       } else if (lst[i] > largest) {\n                largest = lst[i];\n  \
    \          }\n        } else if (lst[i] > 0) {\n            if (smallest == undefined)\
    \ {\n                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n", "    let smallest = undefined;\n    let largest\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0) {\n            if (smallest === undefined) {\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest\
    \ = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest\
    \ === undefined) {\n                largest = lst[i];\n            } else if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n", "    let smallest: number = Number.MAX_VALUE;\n\
    \    let largest: number = Number.MIN_VALUE;\n    let has_positive: boolean =\
    \ false;\n    let has_negative: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largest) {\n   \
    \             largest = lst[i];\n            }\n            has_negative = true;\n\
    \        } else if (lst[i] > 0) {\n            if (lst[i] < smallest) {\n    \
    \            smallest = lst[i];\n            }\n            has_positive = true;\n\
    \        }\n    }\n    if (has_positive && has_negative) {\n        return [largest,\
    \ smallest];\n    } else if (has_positive) {\n        return [undefined, smallest];\n\
    \    } else if (has_negative) {\n        return [largest, undefined];\n    } else\
    \ {\n        return [undefined, undefined];\n    }\n}\n", "    let largest_negative\
    \ = undefined;\n    let smallest_positive = undefined;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative\
    \ === undefined) {\n                largest_negative = lst[i];\n            }\
    \ else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive\
    \ === undefined) {\n                smallest_positive = lst[i];\n            }\
    \ else if (lst[i] < smallest_positive) {\n                smallest_positive =\
    \ lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let a: number = undefined;\n    let b: number = undefined;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if\
    \ (a === undefined) {\n                a = lst[i];\n            } else if (lst[i]\
    \ > a) {\n                a = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (b === undefined) {\n                b = lst[i];\n  \
    \          } else if (lst[i] < b) {\n                b = lst[i];\n           \
    \ }\n        }\n    }\n    return [a, b];\n}\n", "    let smallest_pos = undefined;\n\
    \    let largest_neg = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0) {\n            if (smallest_pos === undefined) {\n  \
    \              smallest_pos = lst[i];\n            } else if (lst[i] < smallest_pos)\
    \ {\n                smallest_pos = lst[i];\n            }\n        } else if\
    \ (lst[i] < 0) {\n            if (largest_neg === undefined) {\n             \
    \   largest_neg = lst[i];\n            } else if (lst[i] > largest_neg) {\n  \
    \              largest_neg = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_neg, smallest_pos];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let min: number = 0;\n    let max: number = 0;\n    let min_found: boolean\
    \ = false;\n    let max_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (!min_found) {\n         \
    \       min = lst[i];\n                min_found = true;\n            } else {\n\
    \                if (lst[i] < min) {\n                    min = lst[i];\n    \
    \            }\n            }\n        } else if (lst[i] < 0) {\n            if\
    \ (!max_found) {\n                max = lst[i];\n                max_found = true;\n\
    \            } else {\n                if (lst[i] > max) {\n                 \
    \   max = lst[i];\n                }\n            }\n        }\n    }\n    return\
    \ [max, min];\n}\n", "    let a: number = undefined;\n    let b: number = undefined;\n\
    \    let i: number = 0;\n    while (i < lst.length) {\n        if (lst[i] < 0)\
    \ {\n            if (a == undefined) {\n                a = lst[i];\n        \
    \    } else if (lst[i] > a) {\n                a = lst[i];\n            }\n  \
    \      } else if (lst[i] > 0) {\n            if (b == undefined) {\n         \
    \       b = lst[i];\n            } else if (lst[i] < b) {\n                b =\
    \ lst[i];\n            }\n        }\n        i = i + 1;\n    }\n    return [a,\
    \ b];\n}\n", "    let max_neg = undefined;\n    let min_pos = undefined;\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n        \
    \    if (max_neg === undefined) {\n                max_neg = lst[i];\n       \
    \     } else if (lst[i] > max_neg) {\n                max_neg = lst[i];\n    \
    \        }\n        } else if (lst[i] > 0) {\n            if (min_pos === undefined)\
    \ {\n                min_pos = lst[i];\n            } else if (lst[i] < min_pos)\
    \ {\n                min_pos = lst[i];\n            }\n        }\n    }\n    return\
    \ [max_neg, min_pos];\n}\n", "    let min: number = undefined;\n    let max: number\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (max === undefined) {\n                max = lst[i];\n\
    \            } else if (lst[i] > max) {\n                max = lst[i];\n     \
    \       }\n        } else if (lst[i] > 0) {\n            if (min === undefined)\
    \ {\n                min = lst[i];\n            } else if (lst[i] < min) {\n \
    \               min = lst[i];\n            }\n        }\n    }\n    return [max,\
    \ min];\n}\n", "    let largestNegative: number = null;\n    let smallestPositive:\
    \ number = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === null) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === null) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let a: number = undefined;\n\
    \    let b: number = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < 0) {\n            if (a === undefined) {\n             \
    \   a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (b === undefined)\
    \ {\n                b = lst[i];\n            } else if (lst[i] < b) {\n     \
    \           b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n\
    }\n", "    let smallest_positive: number = Number.MAX_VALUE;\n    let largest_negative:\
    \ number = Number.MIN_VALUE;\n    let result: any = [];\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] < smallest_positive)\
    \ {\n            smallest_positive = lst[i];\n        }\n        if (lst[i] <\
    \ 0 && lst[i] > largest_negative) {\n            largest_negative = lst[i];\n\
    \        }\n    }\n    result.push(largest_negative);\n    result.push(smallest_positive);\n\
    \    return result;\n}\n", "    let largestNegative: number = undefined;\n   \
    \ let smallestPositive: number = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest_positive = undefined;\n\
    \    let largest_negative = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined)\
    \ {\n                smallest_positive = lst[i];\n            } else if (lst[i]\
    \ < smallest_positive) {\n                smallest_positive = lst[i];\n      \
    \      }\n        } else if (lst[i] < 0) {\n            if (largest_negative ===\
    \ undefined) {\n                largest_negative = lst[i];\n            } else\
    \ if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let smallest_positive: number = Number.MAX_VALUE;\n    let largest_negative:\
    \ number = Number.MIN_VALUE;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] < 0 && lst[i] > largest_negative) {\n            largest_negative\
    \ = lst[i];\n        }\n        if (lst[i] > 0 && lst[i] < smallest_positive)\
    \ {\n            smallest_positive = lst[i];\n        }\n    }\n    if (largest_negative\
    \ === Number.MIN_VALUE) {\n        largest_negative = undefined;\n    }\n    if\
    \ (smallest_positive === Number.MAX_VALUE) {\n        smallest_positive = undefined;\n\
    \    }\n    return [largest_negative, smallest_positive];\n}\n", "    let largest:\
    \ number = 0;\n    let smallest: number = 0;\n    let largest_found: boolean =\
    \ false;\n    let smallest_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largest_found) {\n      \
    \          if (lst[i] > largest) {\n                    largest = lst[i];\n  \
    \              }\n            } else {\n                largest = lst[i];\n  \
    \              largest_found = true;\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (smallest_found) {\n                if (lst[i] < smallest)\
    \ {\n                    smallest = lst[i];\n                }\n            }\
    \ else {\n                smallest = lst[i];\n                smallest_found =\
    \ true;\n            }\n        }\n    }\n    if (largest_found) {\n        if\
    \ (smallest_found) {\n            return [largest, smallest];\n        } else\
    \ {\n            return [largest, undefined];\n        }\n    } else {\n     \
    \   if (smallest_found) {\n            return [undefined, smallest];\n       \
    \ } else {\n            return [undefined, undefined];\n        }\n    }\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
