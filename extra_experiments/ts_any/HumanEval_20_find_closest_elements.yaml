name: HumanEval_20_find_closest_elements
language: ts
prompt: "//From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
completions: ["    let closest_elements: any = [];\n    let min_diff: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let first_number: number = numbers[0];\n    let second_number:\
    \ number = numbers[1];\n    for (let i: number = 0; i < numbers.length; i++) {\n\
    \        for (let j: number = i + 1; j < numbers.length; j++) {\n            if\
    \ (Math.abs(numbers[i] - numbers[j]) < min_diff) {\n                min_diff =\
    \ Math.abs(numbers[i] - numbers[j]);\n                first_number = numbers[i];\n\
    \                second_number = numbers[j];\n            }\n        }\n    }\n\
    \    closest_elements.push(first_number);\n    closest_elements.push(second_number);\n\
    \    return closest_elements;\n}\n", "    let closest: number = numbers[0] - numbers[1];\n\
    \    let closest_elements: number[] = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < closest) {\n               \
    \ closest = Math.abs(numbers[i] - numbers[j]);\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ number[] = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let closest_elements: any = [];\n    let smallest_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ difference: number = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < smallest_difference) {\n                smallest_difference = difference;\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest_elements:\
    \ any = [];\n    let min_diff: number = Math.abs(numbers[0] - numbers[1]);\n \
    \   let diff: number;\n    for (let i: number = 0; i < numbers.length; i++) {\n\
    \        for (let j: number = i + 1; j < numbers.length; j++) {\n            diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n \
    \               min_diff = diff;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_index = [0,\
    \ 1];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         min_index = [i, j];\n            }\n        }\n    }\n    return [numbers[min_index[0]],\
    \ numbers[min_index[1]]];\n}\n", "    let closest: number = numbers[0] - numbers[1];\n\
    \    let closestPair: any = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closestPair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closestPair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest_elements: any =\
    \ [];\n    let min_difference: number = Math.abs(numbers[0] - numbers[1]);\n \
    \   for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min_difference) {\n                min_difference = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = numbers[0] - numbers[1];\n    let closestPair: number[] =\
    \ [];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i\
    \ + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closestPair = [numbers[i], numbers[j]];\n            }\n    \
    \    }\n    }\n    return closestPair;\n}\n", "    let closest_elements: any =\
    \ [];\n    let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let difference: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let min: number = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n     \
    \   for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_elements: number[] = [numbers[0], numbers[1]];\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements: any = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest) {\n                closest =\
    \ diff;\n                closest_elements = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest_elements;\n}\n", "    let closest:\
    \ number = Math.abs(numbers[0] - numbers[1]);\n    let result: number[] = [];\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let minPair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\
    \ {\n                minDiff = diff;\n                minPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return minPair;\n}\n", "    let closest:\
    \ any = [];\n    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = 0; j < numbers.length; j++) {\n            if (i !== j) {\n              \
    \  let diff: number = Math.abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest_diff) {\n                    closest_diff = diff;\n              \
    \      closest = [numbers[i], numbers[j]];\n                }\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closestPair: any = [numbers[0], numbers[1]];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n   \
    \             closest = Math.abs(numbers[i] - numbers[j]);\n                closestPair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closestPair;\n\
    }\n", "    let closest: number = numbers[0] - numbers[1];\n    let closest_elements:\
    \ number[] = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ diff: number = numbers[i] - numbers[j];\n            if (Math.abs(diff) < Math.abs(closest))\
    \ {\n                closest = diff;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest = [];\n    let closest_difference\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < closest_difference) {\n                closest_difference = difference;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let result = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest: number\
    \ = numbers[1] - numbers[0];\n    let closest_elements: number[] = [];\n    for\
    \ (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number =\
    \ i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest_elements:\
    \ any = [];\n    let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let difference: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest_elements: any = [];\n    let min_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ difference: number = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < min_difference) {\n                min_difference = difference;\n        \
    \        closest_elements = [numbers[i], numbers[j]];\n            }\n       \
    \ }\n    }\n    return closest_elements;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_pair: any = [numbers[0], numbers[1]];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let current_difference: number = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (current_difference < closest) {\n                closest = current_difference;\n\
    \                closest_pair = [numbers[i], numbers[j]];\n            }\n   \
    \     }\n    }\n    return closest_pair;\n}\n", "    let closest: any = [];\n\
    \    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            let diff: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest: number = numbers[0]\
    \ - numbers[1];\n    let closestNumbers: any = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff: number = numbers[i] - numbers[j];\n            if (Math.abs(diff)\
    \ < Math.abs(closest)) {\n                closest = diff;\n                closestNumbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closestNumbers;\n\
    }\n", "    let closest = [];\n    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest: any = [];\n    let min: number =\
    \ Math.abs(numbers[0] - numbers[1]);\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   let min = Math.abs(numbers[0] - numbers[1]);\n    let min_numbers = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                min_numbers = [numbers[i], numbers[j]];\n            }\n    \
    \    }\n    }\n    return min_numbers;\n}\n", "    let closest = [];\n    let\
    \ diff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < diff) {\n                diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest: any =\
    \ [];\n    let min: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest_elements = [];\n    let closest_difference\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let difference = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < closest_difference) {\n                closest_difference = difference;\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_index = [0, 1];\n    for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n        let diff = Math.abs(numbers[i] - numbers[i + 1]);\n   \
    \     if (diff < min) {\n            min = diff;\n            min_index = [i,\
    \ i + 1];\n        }\n    }\n    return [numbers[min_index[0]], numbers[min_index[1]]];\n\
    }\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ number[] = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "  let min = Math.abs(numbers[0] - numbers[1]);\n  let result = [numbers[0], numbers[1]];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length;\
    \ j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < min) {\n        min =\
    \ Math.abs(numbers[i] - numbers[j]);\n        result = [numbers[i], numbers[j]];\n\
    \      }\n    }\n  }\n  return result;\n}\n", "    let closest: number = numbers[0]\
    \ - numbers[1];\n    let closest_elements: number[] = [];\n    for (let i: number\
    \ = 0; i < numbers.length; i++) {\n        for (let j: number = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n   \
    \             closest = Math.abs(numbers[i] - numbers[j]);\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: number = numbers[0] - numbers[1];\n    let closest_elements:\
    \ any = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n        for\
    \ (let j: number = i + 1; j < numbers.length; j++) {\n            let diff: number\
    \ = numbers[i] - numbers[j];\n            if (Math.abs(diff) < Math.abs(closest))\
    \ {\n                closest = diff;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest = [];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest_diff = diff;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest_elements: any = [];\n    let\
    \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest_difference) {\n                closest_difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = numbers[0] - numbers[1];\n    let closest_elements: number[]\
    \ = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n        for (let\
    \ j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ min = Math.abs(numbers[0] - numbers[1]);\n    let min_index = 0;\n    for (let\
    \ i = 1; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i\
    \ + 1]) < min) {\n            min = Math.abs(numbers[i] - numbers[i + 1]);\n \
    \           min_index = i;\n        }\n    }\n    return [numbers[min_index],\
    \ numbers[min_index + 1]];\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let result = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest: number\
    \ = numbers[1] - numbers[0];\n    let closest_index: number = 0;\n    for (let\
    \ i: number = 1; i < numbers.length - 1; i++) {\n        if (numbers[i + 1] -\
    \ numbers[i] < closest) {\n            closest = numbers[i + 1] - numbers[i];\n\
    \            closest_index = i;\n        }\n    }\n    return [numbers[closest_index],\
    \ numbers[closest_index + 1]];\n}\n", "    let closest_elements: any = [];\n \
    \   let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for\
    \ (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number =\
    \ i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest_difference) {\n                closest_difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = 0;\n    let closest_pair: number[] = [];\n    let current_diff:\
    \ number = 0;\n    let smallest_diff: number = 0;\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ current_diff = Math.abs(numbers[i] - numbers[j]);\n            if (i === 0 &&\
    \ j === 1) {\n                smallest_diff = current_diff;\n                closest_pair\
    \ = [numbers[i], numbers[j]];\n            }\n            if (current_diff < smallest_diff)\
    \ {\n                smallest_diff = current_diff;\n                closest_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_index = 0;\n\
    \    for (let i = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i]\
    \ - numbers[i + 1]) < min) {\n            min = Math.abs(numbers[i] - numbers[i\
    \ + 1]);\n            min_index = i;\n        }\n    }\n    return [numbers[min_index],\
    \ numbers[min_index + 1]];\n}\n", "    let closest = [];\n    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < min) {\n                min = diff;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closestPair: any = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closestPair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closestPair;\n}\n",
  "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ any = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_pair = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest:\
    \ any = [];\n    let min: number = Math.abs(numbers[0] - numbers[1]);\n    for\
    \ (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number =\
    \ i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest: number = numbers[1] - numbers[0];\n\
    \    let closest_numbers: number[] = [numbers[0], numbers[1]];\n    for (let i:\
    \ number = 0; i < numbers.length; i++) {\n        for (let j: number = i + 1;\
    \ j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_numbers = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_numbers;\n}\n", "    let minDiff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let minPair = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < minDiff) {\n                minDiff = diff;\n                minPair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return minPair;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < min) {\n  \
    \          min = Math.abs(numbers[i] - numbers[i + 1]);\n            min_pair\
    \ = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return min_pair;\n}\n",
  "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_index:\
    \ number = 0;\n    for (let i: number = 0; i < numbers.length - 1; i++) {\n  \
    \      if (Math.abs(numbers[i] - numbers[i + 1]) < closest) {\n            closest\
    \ = Math.abs(numbers[i] - numbers[i + 1]);\n            closest_index = i;\n \
    \       }\n    }\n    return [numbers[closest_index], numbers[closest_index +\
    \ 1]];\n}\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n    let\
    \ min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n        let diff = Math.abs(numbers[i] - numbers[i + 1]);\n   \
    \     if (diff < min_diff) {\n            min_diff = diff;\n            min_pair\
    \ = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return min_pair;\n}\n",
  "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest: any = [];\n  \
    \  let diff: any = [];\n    let min: any = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ diff.push(Math.abs(numbers[i] - numbers[j]));\n        }\n    }\n    min = Math.min(...diff);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ === min) {\n                closest.push(numbers[i]);\n                closest.push(numbers[j]);\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let closest: number = numbers[0] - numbers[1];\n    let closest_pair: any\
    \ = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n        for (let\
    \ j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_pair = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest:\
    \ any = [];\n    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest_diff) {\n                closest_diff = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest = [numbers[0], numbers[1]];\n\
    \    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < closest_diff) {\n                closest_diff = diff;\n      \
    \          closest = [numbers[i], numbers[j]];\n            }\n        }\n   \
    \ }\n    return closest;\n}\n", "    let closest: number = numbers[0] - numbers[1];\n\
    \    let closestNumbers: any = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closestNumbers = [numbers[i], numbers[j]];\n \
    \           }\n        }\n    }\n    return closestNumbers;\n}\n", "    let closest\
    \ = [];\n    let closestDiff = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < closestDiff) {\n                closestDiff = diff;\n        \
    \        closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest_elements: any = [];\n    let min_difference:\
    \ number = Math.abs(numbers[0] - numbers[1]);\n    for (let i: number = 0; i <\
    \ numbers.length; i++) {\n        for (let j: number = i + 1; j < numbers.length;\
    \ j++) {\n            let difference: number = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (difference < min_difference) {\n                min_difference\
    \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_numbers:\
    \ any = [numbers[0], numbers[1]];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < closest) {\n               \
    \ closest = Math.abs(numbers[i] - numbers[j]);\n                closest_numbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_numbers;\n\
    }\n", "    let min: number = Math.abs(numbers[0] - numbers[1]);\n    let min_index:\
    \ number = 0;\n    for (let i: number = 0; i < numbers.length - 1; i++) {\n  \
    \      if (Math.abs(numbers[i] - numbers[i + 1]) < min) {\n            min = Math.abs(numbers[i]\
    \ - numbers[i + 1]);\n            min_index = i;\n        }\n    }\n    return\
    \ [numbers[min_index], numbers[min_index + 1]];\n}\n", "    let closest: number\
    \ = numbers[0] - numbers[1];\n    let closest_pair: any = [];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n   \
    \             closest = Math.abs(numbers[i] - numbers[j]);\n                closest_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
    }\n", "    let closest_elements: any = [];\n    let smallest_difference: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < smallest_difference) {\n   \
    \             smallest_difference = Math.abs(numbers[i] - numbers[j]);\n     \
    \           closest_elements = [numbers[i], numbers[j]];\n            }\n    \
    \    }\n    }\n    return closest_elements;\n}\n", "    let closest = [];\n  \
    \  let diff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < diff) {\n                diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_index = 0;\n    for (let i = 1; i < numbers.length\
    \ - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < min) {\n  \
    \          min = Math.abs(numbers[i] - numbers[i + 1]);\n            min_index\
    \ = i;\n        }\n    }\n    return [numbers[min_index], numbers[min_index +\
    \ 1]];\n}\n", "    let closest_elements = [];\n    let closest_distance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_index = 0;\n\
    \    for (let i = 1; i < numbers.length - 1; i++) {\n        let diff = Math.abs(numbers[i]\
    \ - numbers[i + 1]);\n        if (diff < min) {\n            min = diff;\n   \
    \         min_index = i;\n        }\n    }\n    return [numbers[min_index], numbers[min_index\
    \ + 1]];\n}\n", "    let closest: number = numbers[0] - numbers[1];\n    let closest_elements:\
    \ any = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n        for\
    \ (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest = [numbers[0], numbers[1]];\n    let closestDiff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closestDiff) {\n                closestDiff = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let min_index = 0;\n    for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < min) {\n  \
    \          min = Math.abs(numbers[i] - numbers[i + 1]);\n            min_index\
    \ = i;\n        }\n    }\n    return [numbers[min_index], numbers[min_index +\
    \ 1]];\n}\n", "    let closest = [numbers[0], numbers[1]];\n    let smallestDiff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < smallestDiff) {\n                smallestDiff\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   let min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closestPair: any = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closestPair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closestPair;\n}\n",
  "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ any = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_pair = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest_diff = diff;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n      \
    \  for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest = [];\n    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest_elements: any = [];\n    let\
    \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            let difference: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ any = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_pair = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return closest_pair;\n}\n", "    let min =\
    \ Math.abs(numbers[0] - numbers[1]);\n    let min_index = 0;\n    for (let i =\
    \ 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i\
    \ + 1]) < min) {\n            min = Math.abs(numbers[i] - numbers[i + 1]);\n \
    \           min_index = i;\n        }\n    }\n    return [numbers[min_index],\
    \ numbers[min_index + 1]];\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let closest = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n\
    \                min = diff;\n                closest = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let closest:\
    \ any = [];\n    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest_diff) {\n                closest_diff = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_elements: number[] = [numbers[0], numbers[1]];\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair: any = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let current_diff: number\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (current_diff < closest)\
    \ {\n                closest = current_diff;\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_numbers:\
    \ number[] = [numbers[0], numbers[1]];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < closest) {\n               \
    \ closest = Math.abs(numbers[i] - numbers[j]);\n                closest_numbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_numbers;\n\
    }\n", "    let closest_elements = [];\n    let closest_difference = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let min: number = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n     \
    \   for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let min_pair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n      \
    \      let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff)\
    \ {\n                min_diff = diff;\n                min_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return min_pair;\n}\n", " \
    \   let closest_elements: any = [];\n    let closest_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest_difference) {\n                closest_difference =\
    \ Math.abs(numbers[i] - numbers[j]);\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_pair = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closestDistance = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closestDistance) {\n            \
    \    closestDistance = distance;\n                closest = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest;\n}\n", "    let closest:\
    \ number = numbers[0] - numbers[1];\n    let closest_pair: any = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n   \
    \             closest = Math.abs(numbers[i] - numbers[j]);\n                closest_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
    }\n", "    let closest_elements: any = [];\n    let min_diff: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min_diff) {\n                min_diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: any = [];\n    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let diff: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closestPair: any = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closestPair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closestPair;\n}\n",
  "    let closest = [];\n    let min = Math.abs(numbers[0] - numbers[1]);\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                closest =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n\
    }\n", "    let closest_elements: any = [];\n    let closest_difference: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         let difference: number = Math.abs(numbers[i] - numbers[j]);\n      \
    \      if (difference < closest_difference) {\n                closest_difference\
    \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = numbers[0] - numbers[1];\n    let closest_numbers: number[]\
    \ = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n        for (let\
    \ j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_numbers = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_numbers;\n}\n", "    let\
    \ closest: any = [];\n    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let diff: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest\
    \ = [numbers[i], numbers[j]];\n                closest_diff = diff;\n        \
    \    }\n        }\n    }\n    return closest;\n}\n", "    let closest: number\
    \ = numbers[0] - numbers[1];\n    let closest_elements: any = [];\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest = [];\n\
    \    let min = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest: any =\
    \ [];\n    let min: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    let closest_elements: any = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         let diff: number = Math.abs(numbers[i] - numbers[j]);\n            if\
    \ (diff < closest) {\n                closest = diff;\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let min_diff: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min_diff) {\n                min_diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest_elements:\
    \ any = [];\n    let closest_distance: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let distance: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closest_distance) {\n           \
    \     closest_distance = distance;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let min: number = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n     \
    \   for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest_elements: any = [];\n    let\
    \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            let difference: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest_elements = [];\n    let smallest_difference = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let difference = Math.abs(numbers[i] - numbers[j]);\n  \
    \          if (smallest_difference === 0 || difference < smallest_difference)\
    \ {\n                smallest_difference = difference;\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest: number = numbers[0] - numbers[1];\n\
    \    let closestNumbers: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closestNumbers = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closestNumbers;\n\
    }\n", "    let closest_elements: any = [];\n    let closest_difference: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         let difference: number = Math.abs(numbers[i] - numbers[j]);\n      \
    \      if (difference < closest_difference) {\n                closest_difference\
    \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = numbers[0] - numbers[1];\n    let closest_elements: any =\
    \ [];\n    for (let i: number = 0; i < numbers.length; i++) {\n        for (let\
    \ j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements:\
    \ number[] = [numbers[0], numbers[1]];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < closest) {\n               \
    \ closest = Math.abs(numbers[i] - numbers[j]);\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest_elements = [];\n    let closest_difference = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_index:\
    \ number = 0;\n    for (let i: number = 0; i < numbers.length - 1; i++) {\n  \
    \      if (Math.abs(numbers[i] - numbers[i + 1]) < closest) {\n            closest\
    \ = Math.abs(numbers[i] - numbers[i + 1]);\n            closest_index = i;\n \
    \       }\n    }\n    return [numbers[closest_index], numbers[closest_index +\
    \ 1]];\n}\n", "    let closest: number = numbers[0] - numbers[1];\n    let closestNumbers:\
    \ number[] = [];\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let difference: number\
    \ = numbers[i] - numbers[j];\n            if (difference < 0) {\n            \
    \    difference = difference * -1;\n            }\n            if (difference\
    \ < closest) {\n                closest = difference;\n                closestNumbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closestNumbers;\n\
    }\n", "    let closest_elements = [];\n    let closest_distance = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n    \
    \        if (closest_distance == 0 || distance < closest_distance) {\n       \
    \         closest_distance = distance;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let diff: any = [];\n    let min: any =\
    \ [];\n    let min_index: any = [];\n    let min_index_1: any = [];\n    let min_index_2:\
    \ any = [];\n    let min_index_3: any = [];\n    let min_index_4: any = [];\n\
    \    let min_index_5: any = [];\n    let min_index_6: any = [];\n    let min_index_7:\
    \ any = [];\n    let min_index_8: any = [];\n    let min_index_9: any = [];\n\
    \    let min_index_10: any = [];\n    let min_index_11: any = [];\n    let min_index_12:\
    \ any = [];\n    let min_index_13: any = [];\n    let min_index_14: any = [];\n\
    \    let min_index_15: any = [];\n    let min_index_16: any = [];\n    let min_index_17:\
    \ any = [];\n    let min_index_18: any = [];\n    let min_index_19: any = [];\n\
    \    let min_index_20: any = [];\n    let min_index_21: any = [];\n    let min_index_22:\
    \ any = [];\n    let min_index_23: any = [];\n    let min_index_24: any = [];\n\
    \    let min_index_25: any = [];\n    let min_index_26: any = [];\n    let min_index_27:\
    \ any = [];\n    let min_index_28: any = [];\n    let min_index_29: any = [];\n\
    \    let min_index_30: any = [];\n    let min_index_31: any = [];\n    let min_index_32:\
    \ any = [];\n    let min_index_33: any = [];\n    let min_index_34: any = [];\n\
    \    let min_index_35: any = [];\n    let min_index_36: any = [];\n    let min_index_37:\
    \ any = [];\n    let min_index_38: any = [];\n    let min_index_39: any = [];\n\
    \    let min_index_40: any", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let result = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest: any = [];\n\
    \    let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n   \
    \ for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest_difference) {\n                closest = [numbers[i], numbers[j]];\n\
    \                closest_difference = Math.abs(numbers[i] - numbers[j]);\n   \
    \         }\n        }\n    }\n    return closest;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_index: number = 0;\n \
    \   for (let i: number = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i]\
    \ - numbers[i + 1]) < closest) {\n            closest = Math.abs(numbers[i] -\
    \ numbers[i + 1]);\n            closest_index = i;\n        }\n    }\n    return\
    \ [numbers[closest_index], numbers[closest_index + 1]];\n}\n", "    let closest:\
    \ number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair: any = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_pair = [numbers[i], numbers[j]];\n            }\n   \
    \     }\n    }\n    return closest_pair;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_pair: number[] = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_pair = [numbers[i], numbers[j]];\n            }\n   \
    \     }\n    }\n    return closest_pair;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closestPair: any = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closestPair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closestPair;\n}\n",
  "    let closest: number[] = [];\n    let closest_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let difference: number\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (difference < closest_difference)\
    \ {\n                closest_difference = difference;\n                closest\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n\
    }\n", "    let closest_elements = [];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest_elements = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_elements;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest_diff = diff;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest_elements: any = [];\n    let\
    \ closest_difference: number = 0;\n    let difference: number = 0;\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (closest_difference === 0 || difference < closest_difference)\
    \ {\n                closest_difference = difference;\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let smallestDifference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ difference: number = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < smallestDifference) {\n                smallestDifference = difference;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest = [numbers[0], numbers[1]];\n\
    \    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n        \
    \    if (diff < closest_diff) {\n                closest_diff = diff;\n      \
    \          closest = [numbers[i], numbers[j]];\n            }\n        }\n   \
    \ }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_elements: number[] = [numbers[0], numbers[1]];\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest_elements:\
    \ any = [];\n    let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest_difference) {\n                closest_difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    let closest_pair: any = [numbers[0], numbers[1]];\n    for (let i = 0; i\
    \ < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++)\
    \ {\n            let distance: number = Math.abs(numbers[i] - numbers[j]);\n \
    \           if (distance < closest) {\n                closest = distance;\n \
    \               closest_pair = [numbers[i], numbers[j]];\n            }\n    \
    \    }\n    }\n    return closest_pair;\n}\n", "    let closest = [];\n    let\
    \ min = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest: number\
    \ = numbers[0] - numbers[1];\n    let closest_numbers: any = [];\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_numbers = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_numbers;\n}\n", "    let closest_elements\
    \ = [];\n    let smallest_difference = numbers[1] - numbers[0];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let difference = numbers[j] - numbers[i];\n            if\
    \ (difference < smallest_difference) {\n                smallest_difference =\
    \ difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let diff = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < diff) {\n      \
    \          closest = [numbers[i], numbers[j]];\n                diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            }\n        }\n    }\n    return closest;\n}\n",
  "    let closest_elements: number[] = [];\n    let closest_difference: number =\
    \ Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let difference: number = Math.abs(numbers[i] - numbers[j]);\n            if\
    \ (difference < closest_difference) {\n                closest_difference = difference;\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest = [];\n\
    \    let min = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest: number\
    \ = numbers[0] - numbers[1];\n    let closest_index: number = 0;\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        if (Math.abs(numbers[i] -\
    \ numbers[i + 1]) < closest) {\n            closest = Math.abs(numbers[i] - numbers[i\
    \ + 1]);\n            closest_index = i;\n        }\n    }\n    return [numbers[closest_index],\
    \ numbers[closest_index + 1]];\n}\n", "  let closest = [numbers[0], numbers[1]];\n\
    \  let closest_diff = Math.abs(numbers[0] - numbers[1]);\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n\
    \      let diff = Math.abs(numbers[i] - numbers[j]);\n      if (diff < closest_diff)\
    \ {\n        closest_diff = diff;\n        closest = [numbers[i], numbers[j]];\n\
    \      }\n    }\n  }\n  return closest;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let closest_elements: any = [];\n    let smallest_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ difference: number = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < smallest_difference) {\n                smallest_difference = difference;\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest = [];\n\
    \    let min = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements: any = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest_elements:\
    \ any = [];\n    let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let difference: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_elements: any = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest_elements:\
    \ any = [];\n    let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    let current_difference: number = 0;\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = 0; j < numbers.length; j++) {\n       \
    \     if (i !== j) {\n                current_difference = Math.abs(numbers[i]\
    \ - numbers[j]);\n                if (current_difference < closest_difference)\
    \ {\n                    closest_difference = current_difference;\n          \
    \          closest_elements = [numbers[i], numbers[j]];\n                }\n \
    \           }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let result = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest = [];\n\
    \    let min = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest: any =\
    \ [];\n    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n   \
    \ for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let diff: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest\
    \ = [numbers[i], numbers[j]];\n                closest_diff = diff;\n        \
    \    }\n        }\n    }\n    return closest;\n}\n", "    let closest = [numbers[0],\
    \ numbers[1]];\n    let closest_diff = Math.abs(numbers[0] - numbers[1]);\n  \
    \  for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j <\
    \ numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closest_diff) {\n                closest_diff = diff;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_pair: any = [numbers[0], numbers[1]];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n   \
    \             closest = Math.abs(numbers[i] - numbers[j]);\n                closest_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
    }\n", "    let closest_elements: any = [];\n    let closest_difference: number\
    \ = Number.MAX_VALUE;\n    for (let i: number = 0; i < numbers.length; i++) {\n\
    \        for (let j: number = 0; j < numbers.length; j++) {\n            if (i\
    \ !== j) {\n                let difference: number = Math.abs(numbers[i] - numbers[j]);\n\
    \                if (difference < closest_difference) {\n                    closest_difference\
    \ = difference;\n                    closest_elements = [numbers[i], numbers[j]];\n\
    \                }\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest_elements: any = [];\n    let closest_difference: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         let difference: number = Math.abs(numbers[i] - numbers[j]);\n      \
    \      if (difference < closest_difference) {\n                closest_difference\
    \ = difference;\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ min = Math.abs(numbers[0] - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         result = [numbers[i], numbers[j]];\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    let closest: any = [];\n    let min: number =\
    \ Math.abs(numbers[0] - numbers[1]);\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   let closest: number = numbers[0] - numbers[1];\n    let closest_numbers: number[]\
    \ = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n        for (let\
    \ j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_numbers = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_numbers;\n}\n", "  let closest\
    \ = [];\n  let closest_difference = Infinity;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const difference\
    \ = Math.abs(numbers[i] - numbers[j]);\n      if (difference < closest_difference)\
    \ {\n        closest_difference = difference;\n        closest = [numbers[i],\
    \ numbers[j]];\n      }\n    }\n  }\n  return closest;\n}\n", "    let min_diff\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let min_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length - 1; i++) {\n        let diff = Math.abs(numbers[i]\
    \ - numbers[i + 1]);\n        if (diff < min_diff) {\n            min_diff = diff;\n\
    \            min_pair = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return\
    \ min_pair;\n}\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    let closest_index: number = 0;\n    for (let i: number = 0; i < numbers.length\
    \ - 1; i++) {\n        if (Math.abs(numbers[i] - numbers[i + 1]) < closest) {\n\
    \            closest = Math.abs(numbers[i] - numbers[i + 1]);\n            closest_index\
    \ = i;\n        }\n    }\n    return [numbers[closest_index], numbers[closest_index\
    \ + 1]];\n}\n", "    let closest = [numbers[0], numbers[1]];\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let distance = Math.abs(numbers[i] - numbers[j]);\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest = [numbers[i], numbers[j]];\n            }\n        }\n   \
    \ }\n    return closest;\n}\n", "    let closest_elements: any = [];\n    let\
    \ closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            let difference: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let result = [];\n    let min\
    \ = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements: number[] = [numbers[0],\
    \ numbers[1]];\n    for (let i: number = 0; i < numbers.length; i++) {\n     \
    \   for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closestPair: any\
    \ = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closestPair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closestPair;\n}\n", "    let closest:\
    \ any = [];\n    let diff: any = [];\n    let min: any = [];\n    let min_index:\
    \ any = [];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            diff.push(Math.abs(numbers[i]\
    \ - numbers[j]));\n        }\n    }\n    min = Math.min.apply(null, diff);\n \
    \   min_index = diff.indexOf(min);\n    closest.push(numbers[min_index]);\n  \
    \  closest.push(numbers[min_index + 1]);\n    return closest;\n}\n", "    let\
    \ closest: number = numbers[1] - numbers[0];\n    let closest_pair: any = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_pair = [numbers[i], numbers[j]];\n            }\n   \
    \     }\n    }\n    return closest_pair;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_pair: number[] = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_pair = [numbers[i], numbers[j]];\n            }\n   \
    \     }\n    }\n    return closest_pair;\n}\n", "    let closest = [];\n    let\
    \ closest_diff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < closest_diff)\
    \ {\n                closest_diff = diff;\n                closest = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n", " \
    \   let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ number[] = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest: number = numbers[0]\
    \ - numbers[1];\n    let closest_elements: any = [];\n    for (let i: number =\
    \ 0; i < numbers.length; i++) {\n        for (let j: number = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n   \
    \             closest = Math.abs(numbers[i] - numbers[j]);\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let closest_diff: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest_diff) {\n                closest_diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n                closest = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_index: number = 0;\n \
    \   for (let i: number = 0; i < numbers.length - 1; i++) {\n        let current:\
    \ number = Math.abs(numbers[i] - numbers[i + 1]);\n        if (current < closest)\
    \ {\n            closest = current;\n            closest_index = i;\n        }\n\
    \    }\n    return [numbers[closest_index], numbers[closest_index + 1]];\n}\n",
  "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ any = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_pair = [numbers[i], numbers[j]];\n   \
    \         }\n        }\n    }\n    return closest_pair;\n}\n", "    let closest\
    \ = [numbers[0], numbers[1]];\n    let closestDiff = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (diff < closestDiff) {\n                closestDiff = diff;\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n\
    \    let result = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min) {\n                min = Math.abs(numbers[i]\
    \ - numbers[j]);\n                result = [numbers[i], numbers[j]];\n       \
    \     }\n        }\n    }\n    return result;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_index: number = 0;\n \
    \   for (let i: number = 0; i < numbers.length - 1; i++) {\n        if (Math.abs(numbers[i]\
    \ - numbers[i + 1]) < closest) {\n            closest = Math.abs(numbers[i] -\
    \ numbers[i + 1]);\n            closest_index = i;\n        }\n    }\n    return\
    \ [numbers[closest_index], numbers[closest_index + 1]];\n}\n", "    let closest:\
    \ number = numbers[0] - numbers[1];\n    let closestNumbers: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closestNumbers = [numbers[i], numbers[j]];\n            }\n \
    \       }\n    }\n    return closestNumbers;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let closest_elements: any = [];\n    let closest_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ difference: number = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < closest_difference) {\n                closest_difference = difference;\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair: any = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] -\
    \ numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_pair = [numbers[i], numbers[j]];\n            }\n   \
    \     }\n    }\n    return closest_pair;\n}\n", "    let closest: any = [];\n\
    \    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n    for (let\
    \ i: number = 0; i < numbers.length; i++) {\n        for (let j: number = i +\
    \ 1; j < numbers.length; j++) {\n            let diff: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest: number = numbers[0]\
    \ - numbers[1];\n    let closest_pair: number[] = [];\n    for (let i = 0; i <\
    \ numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++)\
    \ {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n        \
    \        closest = Math.abs(numbers[i] - numbers[j]);\n                closest_pair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
