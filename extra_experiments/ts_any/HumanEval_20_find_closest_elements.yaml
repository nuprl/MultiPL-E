name: HumanEval_20_find_closest_elements
language: ts
prompt: "//From a supplied array of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ [2.0, 2.0]\nfunction find_closest_elements(numbers: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
completions: ["    let closest_elements: any = [];\n    let min_diff: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let first_number: number = numbers[0];\n    let second_number:\
    \ number = numbers[1];\n    for (let i: number = 0; i < numbers.length; i++) {\n\
    \        for (let j: number = i + 1; j < numbers.length; j++) {\n            if\
    \ (Math.abs(numbers[i] - numbers[j]) < min_diff) {\n                min_diff =\
    \ Math.abs(numbers[i] - numbers[j]);\n                first_number = numbers[i];\n\
    \                second_number = numbers[j];\n            }\n        }\n    }\n\
    \    closest_elements.push(first_number);\n    closest_elements.push(second_number);\n\
    \    return closest_elements;\n}\n", "    let closest: number = numbers[0] - numbers[1];\n\
    \    let closest_elements: number[] = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        for (let j: number = i + 1; j < numbers.length; j++) {\n   \
    \         if (Math.abs(numbers[i] - numbers[j]) < closest) {\n               \
    \ closest = Math.abs(numbers[i] - numbers[j]);\n                closest_elements\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: number = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair:\
    \ number[] = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < closest) {\n                closest\
    \ = Math.abs(numbers[i] - numbers[j]);\n                closest_pair = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_pair;\n}\n",
  "    let closest_elements: any = [];\n    let smallest_difference: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ difference: number = Math.abs(numbers[i] - numbers[j]);\n            if (difference\
    \ < smallest_difference) {\n                smallest_difference = difference;\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest_elements:\
    \ any = [];\n    let min_diff: number = Math.abs(numbers[0] - numbers[1]);\n \
    \   let diff: number;\n    for (let i: number = 0; i < numbers.length; i++) {\n\
    \        for (let j: number = i + 1; j < numbers.length; j++) {\n            diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n \
    \               min_diff = diff;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let min = Math.abs(numbers[0] - numbers[1]);\n    let min_index = [0,\
    \ 1];\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n       \
    \         min_index = [i, j];\n            }\n        }\n    }\n    return [numbers[min_index[0]],\
    \ numbers[min_index[1]]];\n}\n", "    let closest: number = numbers[0] - numbers[1];\n\
    \    let closestPair: any = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < closest) {\n                closest = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closestPair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closestPair;\n}\n", "    let min = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let result = [numbers[0], numbers[1]];\n    for (let i =\
    \ 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < min) {\n       \
    \         min = Math.abs(numbers[i] - numbers[j]);\n                result = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return result;\n}\n", " \
    \   let closest = [numbers[0], numbers[1]];\n    let closest_diff = Math.abs(numbers[0]\
    \ - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for\
    \ (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest_diff) {\n                closest_diff\
    \ = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest_elements: any =\
    \ [];\n    let min_difference: number = Math.abs(numbers[0] - numbers[1]);\n \
    \   for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < min_difference) {\n                min_difference = Math.abs(numbers[i] -\
    \ numbers[j]);\n                closest_elements = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closest_elements;\n}\n", "    let\
    \ closest: number = numbers[0] - numbers[1];\n    let closestPair: number[] =\
    \ [];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i\
    \ + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closestPair = [numbers[i], numbers[j]];\n            }\n    \
    \    }\n    }\n    return closestPair;\n}\n", "    let closest_elements: any =\
    \ [];\n    let closest_difference: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            let difference: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (difference < closest_difference) {\n       \
    \         closest_difference = difference;\n                closest_elements =\
    \ [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n", "    let closest: any = [];\n    let min: number = Math.abs(numbers[0] -\
    \ numbers[1]);\n    for (let i: number = 0; i < numbers.length; i++) {\n     \
    \   for (let j: number = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i]\
    \ - numbers[j]) < min) {\n                min = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closest_elements: number[] = [numbers[0], numbers[1]];\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                closest_elements = [numbers[i], numbers[j]];\n            }\n\
    \        }\n    }\n    return closest_elements;\n}\n", "    let closest: number\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_elements: any = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let diff: number = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (diff < closest) {\n                closest =\
    \ diff;\n                closest_elements = [numbers[i], numbers[j]];\n      \
    \      }\n        }\n    }\n    return closest_elements;\n}\n", "    let closest:\
    \ number = Math.abs(numbers[0] - numbers[1]);\n    let result: number[] = [];\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j])\
    \ < closest) {\n                closest = Math.abs(numbers[i] - numbers[j]);\n\
    \                result = [numbers[i], numbers[j]];\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let minDiff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let minPair = [numbers[0], numbers[1]];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < minDiff)\
    \ {\n                minDiff = diff;\n                minPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return minPair;\n}\n", "    let closest:\
    \ any = [];\n    let closest_diff: number = Math.abs(numbers[0] - numbers[1]);\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        for (let j: number\
    \ = 0; j < numbers.length; j++) {\n            if (i !== j) {\n              \
    \  let diff: number = Math.abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest_diff) {\n                    closest_diff = diff;\n              \
    \      closest = [numbers[i], numbers[j]];\n                }\n            }\n\
    \        }\n    }\n    return closest;\n}\n", "    let closest: number = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closestPair: any = [numbers[0], numbers[1]];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < closest) {\n   \
    \             closest = Math.abs(numbers[i] - numbers[j]);\n                closestPair\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closestPair;\n\
    }\n", "    let closest: number = numbers[0] - numbers[1];\n    let closest_elements:\
    \ number[] = [];\n    for (let i: number = 0; i < numbers.length; i++) {\n   \
    \     for (let j: number = i + 1; j < numbers.length; j++) {\n            let\
    \ diff: number = numbers[i] - numbers[j];\n            if (Math.abs(diff) < Math.abs(closest))\
    \ {\n                closest = diff;\n                closest_elements = [numbers[i],\
    \ numbers[j]];\n            }\n        }\n    }\n    return closest_elements;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
