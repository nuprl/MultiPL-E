name: HumanEval_6_parse_nested_parens
language: ts
prompt: "//Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n// For each of the group, output the deepest\
  \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
  (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"()\
  \ (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
  ),[4]);\n}\n\ntest();"
completions: ["    let parens = paren_string.split(\" \");\n    let max_nesting =\
    \ [];\n    for (let i = 0; i < parens.length; i++) {\n        let paren = parens[i];\n\
    \        let max = 0;\n        let current = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                current++;\n\
    \                if (current > max) {\n                    max = current;\n  \
    \              }\n            } else if (paren[j] === \")\") {\n             \
    \   current--;\n            }\n        }\n        max_nesting.push(max);\n   \
    \ }\n    return max_nesting;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let max_nested_parens = [];\n    for (let i = 0; i < paren_array.length;\
    \ i++) {\n        let paren_count = 0;\n        let max_paren_count = 0;\n   \
    \     for (let j = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j]\
    \ === \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        max_nested_parens.push(max_paren_count);\n\
    \    }\n    return max_nested_parens;\n}\n", "    let result: any = [];\n    let\
    \ paren_array: any = paren_string.split(\" \");\n    for (let i: number = 0; i\
    \ < paren_array.length; i++) {\n        let paren_group: any = paren_array[i];\n\
    \        let paren_count: number = 0;\n        let max_paren_count: number = 0;\n\
    \        for (let j: number = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_count += 1;\n          \
    \  } else if (paren_group[j] === \")\") {\n                paren_count -= 1;\n\
    \            }\n            if (paren_count > max_paren_count) {\n           \
    \     max_paren_count = paren_count;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let paren_groups = paren_string.split(\"\
    \ \");\n    let result = [];\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let count = 0;\n        let max = 0;\n        for (let j = 0; j <\
    \ paren_groups[i].length; j++) {\n            if (paren_groups[i][j] === \"(\"\
    ) {\n                count++;\n            } else if (paren_groups[i][j] === \"\
    )\") {\n                count--;\n            }\n            if (count > max)\
    \ {\n                max = count;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n", "    let paren_list = paren_string.split(\"\
    \ \");\n    let result = [];\n    for (let paren of paren_list) {\n        let\
    \ max_depth = 0;\n        let depth = 0;\n        for (let c of paren) {\n   \
    \         if (c === \"(\") {\n                depth += 1;\n                max_depth\
    \ = Math.max(max_depth, depth);\n            } else if (c === \")\") {\n     \
    \           depth -= 1;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n", "    let paren_array = paren_string.split(\"\
    \ \");\n    let result = [];\n    for (let i = 0; i < paren_array.length; i++)\
    \ {\n        let paren_count = 0;\n        let max_paren_count = 0;\n        for\
    \ (let j = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j]\
    \ === \"(\") {\n                paren_count++;\n                if (paren_count\
    \ > max_paren_count) {\n                    max_paren_count = paren_count;\n \
    \               }\n            } else if (paren_array[i][j] === \")\") {\n   \
    \             paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "  let paren_array = paren_string.split(\" \"\
    );\n  let result = [];\n  for (let i = 0; i < paren_array.length; i++) {\n   \
    \ let paren = paren_array[i];\n    let max_depth = 0;\n    let current_depth =\
    \ 0;\n    for (let j = 0; j < paren.length; j++) {\n      if (paren[j] === \"\
    (\") {\n        current_depth++;\n        if (current_depth > max_depth) {\n \
    \         max_depth = current_depth;\n        }\n      } else if (paren[j] ===\
    \ \")\") {\n        current_depth--;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n", "    let paren_array = paren_string.split(\" \"\
    );\n    let result = [];\n    for (let i = 0; i < paren_array.length; i++) {\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for (let\
    \ j = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j]\
    \ === \"(\") {\n                paren_count++;\n                if (paren_count\
    \ > max_paren_count) {\n                    max_paren_count = paren_count;\n \
    \               }\n            } else if (paren_array[i][j] === \")\") {\n   \
    \             paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let result: any = [];\n    let paren_array:\
    \ any = paren_string.split(\" \");\n    for (let i = 0; i < paren_array.length;\
    \ i++) {\n        let paren_count: number = 0;\n        let max_paren_count: number\
    \ = 0;\n        for (let j = 0; j < paren_array[i].length; j++) {\n          \
    \  if (paren_array[i][j] === \"(\") {\n                paren_count++;\n      \
    \      } else if (paren_array[i][j] === \")\") {\n                paren_count--;\n\
    \            }\n            if (paren_count > max_paren_count) {\n           \
    \     max_paren_count = paren_count;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n", "    let paren_groups = paren_string.split(\"\
    \ \");\n    let max_depth = 0;\n    let max_depth_index = 0;\n    let paren_depth\
    \ = 0;\n    let paren_depth_array = [];\n    for (let i = 0; i < paren_groups.length;\
    \ i++) {\n        for (let j = 0; j < paren_groups[i].length; j++) {\n       \
    \     if (paren_groups[i][j] === \"(\") {\n                paren_depth++;\n  \
    \          } else if (paren_groups[i][j] === \")\") {\n                paren_depth--;\n\
    \            }\n        }\n        paren_depth_array.push(paren_depth);\n    \
    \    paren_depth = 0;\n    }\n    return paren_depth_array;\n}\n", "    let paren_arr\
    \ = paren_string.split(\" \");\n    let result = [];\n    for (let i = 0; i <\
    \ paren_arr.length; i++) {\n        let paren_count = 0;\n        let max_paren_count\
    \ = 0;\n        for (let j = 0; j < paren_arr[i].length; j++) {\n            if\
    \ (paren_arr[i][j] === \"(\") {\n                paren_count++;\n            \
    \    if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_arr[i][j] ===\
    \ \")\") {\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n", "    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for (let i = 0; i <\
    \ paren_array.length; i++) {\n        let paren = paren_array[i];\n        let\
    \ max_depth = 0;\n        let current_depth = 0;\n        for (let j = 0; j <\
    \ paren.length; j++) {\n            if (paren[j] === \"(\") {\n              \
    \  current_depth++;\n                if (current_depth > max_depth) {\n      \
    \              max_depth = current_depth;\n                }\n            } else\
    \ if (paren[j] === \")\") {\n                current_depth--;\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n",
  "    let paren_groups = paren_string.split(\" \");\n    let max_depth = 0;\n   \
    \ let max_depth_index = 0;\n    let depth = 0;\n    let depth_index = 0;\n   \
    \ let result = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n    \
    \    let paren_group = paren_groups[i];\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                    max_depth_index = depth_index;\n                }\n     \
    \       } else if (paren_group[j] === \")\") {\n                depth--;\n   \
    \         }\n        }\n        result.push(max_depth);\n        depth = 0;\n\
    \        max_depth = 0;\n        depth_index++;\n    }\n    return result;\n}\n",
  "    let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j: number\
    \ = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n", "    let paren_array = paren_string.split(\" \");\n    let result\
    \ = [];\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group\
    \ = paren_array[i];\n        let paren_count = 0;\n        let max_paren_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_count++;\n             \
    \   if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n", "    let result\
    \ = [];\n    let paren_array = paren_string.split(\" \");\n    for (let i = 0;\
    \ i < paren_array.length; i++) {\n        let paren = paren_array[i];\n      \
    \  let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \              if (count > max) {\n                    max = count;\n        \
    \        }\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n", "    let result: any = [];\n    let paren_array: any = paren_string.split(\"\
    \ \");\n    for (let i = 0; i < paren_array.length; i++) {\n        let current_paren_string:\
    \ any = paren_array[i];\n        let current_paren_array: any = current_paren_string.split(\"\
    \");\n        let current_paren_array_length: any = current_paren_array.length;\n\
    \        let current_paren_array_length_half: any = current_paren_array_length\
    \ / 2;\n        let current_paren_array_length_half_floor: any = Math.floor(current_paren_array_length_half);\n\
    \        let current_paren_array_length_half_ceil: any = Math.ceil(current_paren_array_length_half);\n\
    \        let current_paren_array_length_half_diff: any = current_paren_array_length_half_ceil\
    \ - current_paren_array_length_half_floor;\n        let current_paren_array_length_half_diff_half:\
    \ any = current_paren_array_length_half_diff / 2;\n        let current_paren_array_length_half_diff_half_floor:\
    \ any = Math.floor(current_paren_array_length_half_diff_half);\n        let current_paren_array_length_half_diff_half_ceil:\
    \ any = Math.ceil(current_paren_array_length_half_diff_half);\n        let current_paren_array_length_half_diff_half_diff:\
    \ any = current_paren_array_length_half_diff_half_ceil - current_paren_array_length_half_diff_half_floor;\n\
    \        let current_paren_array_length_half_diff_half_diff_half: any = current_paren_array_length_half_diff_half_diff\
    \ / 2;\n        let current_paren_array_length_half_diff_half_diff_half_floor:\
    \ any = Math.floor(current_paren_array_length_half_diff_half_diff_half);\n   \
    \     let current_paren_array_length_half_diff_half_diff_", "    let paren_array\
    \ = paren_string.split(\" \");\n    let result = [];\n    for (let i = 0; i <\
    \ paren_array.length; i++) {\n        let paren_count = 0;\n        let max_paren_count\
    \ = 0;\n        for (let j = 0; j < paren_array[i].length; j++) {\n          \
    \  if (paren_array[i][j] === \"(\") {\n                paren_count++;\n      \
    \          if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n", "  let paren_array\
    \ = paren_string.split(\" \");\n  let result = [];\n  for (let i = 0; i < paren_array.length;\
    \ i++) {\n    let paren = paren_array[i];\n    let count = 0;\n    let max = 0;\n\
    \    for (let j = 0; j < paren.length; j++) {\n      if (paren[j] === \"(\") {\n\
    \        count++;\n      } else if (paren[j] === \")\") {\n        count--;\n\
    \      }\n      if (count > max) {\n        max = count;\n      }\n    }\n   \
    \ result.push(max);\n  }\n  return result;\n}\n", "    let result: any = [];\n\
    \    let paren_array: any = paren_string.split(\" \");\n    for (let i = 0; i\
    \ < paren_array.length; i++) {\n        let paren_group: any = paren_array[i];\n\
    \        let paren_count: any = 0;\n        let max_paren_count: any = 0;\n  \
    \      for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                paren_count++;\n                if (paren_count\
    \ > max_paren_count) {\n                    max_paren_count = paren_count;\n \
    \               }\n            } else if (paren_group[j] === \")\") {\n      \
    \          paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
