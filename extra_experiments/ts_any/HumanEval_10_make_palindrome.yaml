name: HumanEval_10_make_palindrome
language: ts
prompt: "//Find the shortest palindrome that begins with a supplied string.\n// Algorithm\
  \ idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n\
  // - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"\
  cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string:\
  \ any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),\"\");\n  assert.deepEqual(candidate(\"x\"),\"x\");\n  assert.deepEqual(candidate(\"\
  xyz\"),\"xyzyx\");\n  assert.deepEqual(candidate(\"xyx\"),\"xyx\");\n  assert.deepEqual(candidate(\"\
  jerry\"),\"jerryrrej\");\n}\n\ntest();"
completions: ["    if (string.length === 0) {\n        return string;\n    }\n   \
    \ let suffix = string.substring(1);\n    let prefix = string.substring(0, string.length\
    \ - 1);\n    if (is_palindrome(string)) {\n        return string;\n    }\n   \
    \ if (is_palindrome(suffix)) {\n        return string + reverse(prefix);\n   \
    \ }\n    if (is_palindrome(prefix)) {\n        return reverse(suffix) + string;\n\
    \    }\n    return string + reverse(prefix);\n}\n", "    if (string.length ===\
    \ 0) {\n        return \"\";\n    }\n    let palindrome_suffix = find_palindrome_suffix(string);\n\
    \    let prefix = string.slice(0, string.length - palindrome_suffix.length);\n\
    \    return prefix + palindrome_suffix + prefix.split(\"\").reverse().join(\"\"\
    );\n}\n", "    if (string.length === 0) {\n        return string;\n    }\n   \
    \ const longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n  \
    \  const prefix = string.slice(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + prefix.split(\"\").reverse().join(\"\
    \");\n}\n", "    if (string.length === 0) {\n        return \"\";\n    }\n   \
    \ let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n  \
    \  let prefix = string.substring(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + prefix.split(\"\").reverse().join(\"\
    \");\n}\n", "    if (string.length === 0) {\n        return \"\";\n    }\n   \
    \ let longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n    let\
    \ prefix = string.slice(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + reverse(prefix);\n}\n", "   \
    \ if (string.length === 0) {\n        return string;\n    }\n    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.slice(0,\
    \ string.length - longest_palindrome_suffix.length);\n    let reversed_prefix\
    \ = prefix.split(\"\").reverse().join(\"\");\n    return string + reversed_prefix;\n\
    }\n", "    if (string.length <= 1) {\n        return string;\n    }\n    let longest_palindrome_postfix\
    \ = find_longest_palindrome_postfix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_postfix.length);\n    let prefix_reversed\
    \ = prefix.split(\"\").reverse().join(\"\");\n    return prefix + longest_palindrome_postfix\
    \ + prefix_reversed;\n}\n", "    if (string.length === 0) {\n        return string;\n\
    \    }\n    let suffix = string;\n    let prefix = \"\";\n    while (!is_palindrome(suffix))\
    \ {\n        prefix = prefix + suffix[0];\n        suffix = suffix.slice(1);\n\
    \    }\n    return string + reverse(prefix);\n}\n", "    if (string.length ===\
    \ 0) {\n        return string;\n    }\n    let longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n\
    \    let prefix = string.slice(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + prefix.split(\"\").reverse().join(\"\
    \");\n}\n", "    if (string.length === 0) {\n        return string;\n    }\n \
    \   let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.slice(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + prefix.split(\"\").reverse().join(\"\
    \");\n}\n", "    if (string.length === 0) {\n        return string;\n    }\n \
    \   let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.slice(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + prefix.split(\"\").reverse().join(\"\
    \");\n}\n", "    if (string === \"\") {\n        return \"\";\n    }\n    let\
    \ longest_palindrome = longest_palindrome_postfix(string);\n    return string\
    \ + reverse(string.slice(0, string.length - longest_palindrome.length));\n}\n",
  "    if (string.length === 0) {\n        return \"\";\n    }\n    let longest_palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    if (string.length === 0) {\n        return \"\
    \";\n    }\n    let palindrome = string;\n    let i = 0;\n    let j = string.length\
    \ - 1;\n    while (i < j) {\n        if (string[i] !== string[j]) {\n        \
    \    break;\n        }\n        i++;\n        j--;\n    }\n    if (i >= j) {\n\
    \        return string;\n    }\n    let prefix = string.substring(0, i);\n   \
    \ let suffix = string.substring(i);\n    let reverse_suffix = suffix.split(\"\"\
    ).reverse().join(\"\");\n    return prefix + reverse_suffix + suffix;\n}\n", " \
    \   if (string.length === 0) {\n        return \"\";\n    }\n    let palindrome_suffix\
    \ = find_longest_palindrome_suffix(string);\n    let prefix = string.substring(0,\
    \ string.length - palindrome_suffix.length);\n    return prefix + palindrome_suffix\
    \ + reverse(prefix);\n}\n", "    if (string.length == 0) {\n        return string;\n\
    \    }\n    let max_postfix_length = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (is_palindrome(string.substring(i))) {\n            max_postfix_length\
    \ = i;\n            break;\n        }\n    }\n    let prefix = string.substring(0,\
    \ string.length - max_postfix_length);\n    return string + reverse(prefix);\n\
    }\n", "    if (string.length === 0) {\n        return \"\";\n    }\n    let longest_palindrome_suffix\
    \ = longest_palindrome_suffix_of(string);\n    let prefix = string.slice(0, string.length\
    \ - longest_palindrome_suffix.length);\n    return prefix + longest_palindrome_suffix\
    \ + prefix.split(\"\").reverse().join(\"\");\n}\n", "    if (string.length ===\
    \ 0) {\n        return string;\n    }\n    let longest_palindrome_suffix = find_longest_palindrome_suffix(string);\n\
    \    let prefix = string.slice(0, string.length - longest_palindrome_suffix.length);\n\
    \    return prefix + longest_palindrome_suffix + prefix.split(\"\").reverse().join(\"\
    \");\n}\n", "    if (string === \"\") {\n        return \"\";\n    }\n    let\
    \ longest_palindrome_suffix = longest_palindrome_suffix_of(string);\n    let prefix\
    \ = string.slice(0, string.length - longest_palindrome_suffix.length);\n    let\
    \ reverse_prefix = reverse(prefix);\n    return prefix + reverse_prefix + longest_palindrome_suffix;\n\
    }\n", "    if (string.length === 0) {\n        return string;\n    }\n    let\
    \ longest_postfix = find_longest_postfix(string);\n    let prefix = string.substring(0,\
    \ string.length - longest_postfix.length);\n    let reverse_prefix = reverse(prefix);\n\
    \    return string + reverse_prefix;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
