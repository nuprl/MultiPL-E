name: HumanEval_39_prime_fib
language: ts
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n:\
  \ any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
  \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
  \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n \
  \ assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
  \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
  }\n\ntest();"
completions: ["    let fib_prime_numbers = [2, 3, 5, 13, 89];\n    if (n > fib_prime_numbers.length)\
    \ {\n        let i = fib_prime_numbers.length;\n        while (i < n) {\n    \
    \        let next_fib = fib_prime_numbers[i - 1] + fib_prime_numbers[i - 2];\n\
    \            if (is_prime(next_fib)) {\n                fib_prime_numbers.push(next_fib);\n\
    \                i++;\n            }\n        }\n    }\n    return fib_prime_numbers[n\
    \ - 1];\n}\n", "    let fib_list = [2, 3];\n    let i = 2;\n    while (i < n)\
    \ {\n        fib_list.push(fib_list[i - 1] + fib_list[i - 2]);\n        i += 1;\n\
    \    }\n    return fib_list[n - 1];\n}\n", "    let fib = [2, 3, 5, 13, 89];\n\
    \    let i = 0;\n    while (i < n) {\n        fib.push(fib[i] + fib[i + 1]);\n\
    \        i++;\n    }\n    return fib[n - 1];\n}\n", '    let fib_list = [2, 3,
    5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,
    17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,
    3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155,
    165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073,
    4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272,
    139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920,
    2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288,
    44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129,
    498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707,
    5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906,
    61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585,
    420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189,
    2880067194370816120, 4660046610375530309, 7540113804746346429, 12200160415121876738,
    197402742', '    let fib: number[] = [2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,
    377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,
    196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352,
    24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733,
    1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,
    32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162,
    591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842,
    10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141,
    117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393,
    1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464,
    14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497,
    160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258,
    1100087778366101931, 1779979416004714189, 2880067194370816120, 4660046610375530309,
    7540113804746346429, 12200160415121876738, 1974027', "    let fib = fibonacci(n);\n\
    \    let prime = prime_numbers(n);\n    let result = [];\n    for (let i = 0;\
    \ i < fib.length; i++) {\n        for (let j = 0; j < prime.length; j++) {\n \
    \           if (fib[i] === prime[j]) {\n                result.push(fib[i]);\n\
    \            }\n        }\n    }\n    return result[n - 1];\n}\n", "    let fib\
    \ = fibonacci(n);\n    let i = 0;\n    while (i < fib.length) {\n        if (is_prime(fib[i]))\
    \ {\n            return fib[i];\n        }\n        i++;\n    }\n}\n", "    let\
    \ fib_arr = [2, 3];\n    let i = 2;\n    while (i < n) {\n        fib_arr.push(fib_arr[i\
    \ - 1] + fib_arr[i - 2]);\n        i++;\n    }\n    return fib_arr[n - 1];\n}\n",
  "    let fib = fibonacci(n);\n    while (!is_prime(fib)) {\n        fib = fibonacci(n);\n\
    \        n++;\n    }\n    return fib;\n}\n", "    let fib_numbers = [2, 3, 5,\
    \ 13, 89];\n    return fib_numbers[n - 1];\n}\n", "    let fib_list = [2, 3, 5];\n\
    \    let i = 3;\n    while (i < n) {\n        let next_fib = fib_list[i - 1] +\
    \ fib_list[i - 2];\n        if (is_prime(next_fib)) {\n            fib_list.push(next_fib);\n\
    \            i += 1;\n        }\n    }\n    return fib_list[n - 1];\n}\n", " \
    \   let fib_numbers = fibonacci(n);\n    let prime_fib_numbers = [];\n    for\
    \ (let i = 0; i < fib_numbers.length; i++) {\n        if (is_prime(fib_numbers[i]))\
    \ {\n            prime_fib_numbers.push(fib_numbers[i]);\n        }\n    }\n \
    \   return prime_fib_numbers[n - 1];\n}\n", "    let fib: any = fibonacci(n);\n\
    \    let prime: any = prime_number(n);\n    let prime_fib: any = [];\n    for\
    \ (let i: number = 0; i < prime.length; i++) {\n        for (let j: number = 0;\
    \ j < fib.length; j++) {\n            if (prime[i] === fib[j]) {\n           \
    \     prime_fib.push(prime[i]);\n            }\n        }\n    }\n    return prime_fib[n\
    \ - 1];\n}\n", "    let fib_nums = [2, 3, 5, 13, 89];\n    if (n < 1) {\n    \
    \    return \"Error: n must be a positive integer.\";\n    }\n    if (n > 5) {\n\
    \        return \"Error: n must be less than 6.\";\n    }\n    return fib_nums[n\
    \ - 1];\n}\n", "    let fib_list = [2, 3];\n    let i = 2;\n    while (i < n)\
    \ {\n        fib_list.push(fib_list[i - 1] + fib_list[i - 2]);\n        i += 1;\n\
    \    }\n    return fib_list[n - 1];\n}\n", "    let i: number = 1;\n    let fib:\
    \ number = 1;\n    let prime_fib: number = 2;\n    while (i < n) {\n        fib\
    \ = fibonacci(i);\n        if (is_prime(fib)) {\n            prime_fib = fib;\n\
    \            i += 1;\n        }\n    }\n    return prime_fib;\n}\n", "    let\
    \ fib = fibonacci(n);\n    let prime = prime_number(n);\n    let result = 0;\n\
    \    let i = 0;\n    let j = 0;\n    while (i < n) {\n        if (fib[i] === prime[j])\
    \ {\n            result = fib[i];\n            i++;\n            j++;\n      \
    \  } else if (fib[i] < prime[j]) {\n            i++;\n        } else {\n     \
    \       j++;\n        }\n    }\n    return result;\n}\n", "    let fib_list =\
    \ [2, 3];\n    let i = 2;\n    while (i < n) {\n        fib_list.push(fib_list[i\
    \ - 1] + fib_list[i - 2]);\n        i += 1;\n    }\n    return fib_list[n - 1];\n\
    }\n", "    let fib_numbers = [2, 3, 5, 13, 89];\n    if (n > 5) {\n        let\
    \ i = 5;\n        while (i < n) {\n            fib_numbers.push(fib_numbers[i\
    \ - 1] + fib_numbers[i - 2]);\n            i++;\n        }\n    }\n    return\
    \ fib_numbers[n - 1];\n}\n", "    let fib_list = [2, 3, 5, 13, 89];\n    if (n\
    \ <= 5) {\n        return fib_list[n - 1];\n    }\n    let i = 5;\n    let fib_num\
    \ = 0;\n    while (i < n) {\n        fib_num = fib_list[i - 1] + fib_list[i -\
    \ 2];\n        if (is_prime(fib_num)) {\n            fib_list.push(fib_num);\n\
    \            i += 1;\n        }\n    }\n    return fib_list[n - 1];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
