name: HumanEval_83_starts_one_ends
language: ts
prompt: "//Given a positive integer n, return the count of the numbers of n-digit\n\
  // positive integers that start or end with 1.\nfunction starts_one_ends(n: any):\
  \ any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = starts_one_ends;\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(2),18);\n  assert.deepEqual(candidate(3),180);\n \
  \ assert.deepEqual(candidate(4),1800);\n  assert.deepEqual(candidate(5),18000);\n\
  }\n\ntest();"
completions: ["    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n\
    \        return 3;\n    } else {\n        return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2);\n    }\n}\n", "    let count = 0;\n    if (n === 1) {\n        return\
    \ 1;\n    }\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "    if (n == 1) {\n        return\
    \ 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n    \
    \    let num = Math.pow(10, i) - 1;\n        let num_str = num.toString();\n \
    \       if (num_str.charAt(0) === '1' || num_str.charAt(num_str.length - 1) ===\
    \ '1') {\n            count++;\n        }\n    }\n    return count;\n}\n", " \
    \   if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return\
    \ 10;\n    }\n    return 9 + starts_one_ends(n - 1);\n}\n", "    if (n == 1) {\n\
    \        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "  if (n == 1) {\n \
    \   return 2;\n  } else if (n == 2) {\n    return 3;\n  } else {\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n  }\n}\n", "    if (n === 1) {\n        return\
    \ 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    let count = 0;\n    for (let i =\
    \ 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n    }\n    return\
    \ count;\n}\n", "    if (n === 1) {\n        return 10;\n    } else if (n ===\
    \ 2) {\n        return 91;\n    } else {\n        return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);\n    }\n}\n", "    if (n === 1) {\n        return\
    \ 2;\n    }\n    if (n === 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    if (n === 1) {\n        return 2;\n\
    \    }\n    if (n === 2) {\n        return 3;\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2);\n}\n", "    if (n === 1) {\n        return 2;\n\
    \    }\n    if (n === 2) {\n        return 3;\n    }\n    if (n === 3) {\n   \
    \     return 5;\n    }\n    if (n === 4) {\n        return 8;\n    }\n    if (n\
    \ === 5) {\n        return 13;\n    }\n    if (n === 6) {\n        return 21;\n\
    \    }\n    if (n === 7) {\n        return 34;\n    }\n    if (n === 8) {\n  \
    \      return 55;\n    }\n    if (n === 9) {\n        return 89;\n    }\n    if\
    \ (n === 10) {\n        return 144;\n    }\n    if (n === 11) {\n        return\
    \ 233;\n    }\n    if (n === 12) {\n        return 377;\n    }\n    if (n ===\
    \ 13) {\n        return 610;\n    }\n    if (n === 14) {\n        return 987;\n\
    \    }\n    if (n === 15) {\n        return 1597;\n    }\n    if (n === 16) {\n\
    \        return 2584;\n    }\n    if (n === 17) {\n        return 4181;\n    }\n\
    \    if (n === 18) {\n        return 6765;\n    }\n    if (n === 19) {\n     \
    \   return 10946;\n    }\n    if (n === 20) {\n        return 17711;\n    }\n\
    \    if (n === 21) {\n        return 28657;\n    }\n    if (n === 22) {\n    \
    \    return 46368;\n    }\n    if (n === 23) {\n        return 75025;\n    }\n\
    \    if (n === 24) {\n        return 121393;\n    }\n    if (n === 25) {\n   \
    \     return 196418;\n    }\n    if (n === 26) {\n        return 317811;\n   \
    \ }\n    if (n === 27) {\n        return 514229;\n    }\n    if (n === 28) {\n\
    \        return 832040;\n    }\n    if (n === 29) {\n        return 1346269;\n",
  "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10,\
    \ i - 1);\n    }\n    return count;\n}\n", "    if (n === 1) {\n        return\
    \ 1;\n    }\n    if (n === 2) {\n        return 10;\n    }\n    return 9 * Math.pow(10,\
    \ n - 1);\n}\n", "    let count = 0;\n    for (let i = 1; i <= n; i++) {\n   \
    \     count += Math.pow(10, i - 1);\n    }\n    return count;\n}\n", "  if (n\
    \ === 1) {\n    return 2;\n  }\n  if (n === 2) {\n    return 3;\n  }\n  return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2);\n}\n", "    let count = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        count += Math.pow(10, i - 1);\n \
    \   }\n    return count;\n}\n", "    if (n == 1) {\n        return 2;\n    }\n\
    \    if (n == 2) {\n        return 3;\n    }\n    return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
