name: HumanEval_75_is_multiply_prime
language: ts
prompt: "//Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  function is_multiply_prime(a: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n\
  \  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n\
  \  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n\
  \  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n\
  \  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n\
  \  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"
completions: ["    let result: boolean = false;\n    let prime: number[] = [];\n \
    \   for (let i: number = 2; i < a; i++) {\n        if (is_prime(i)) {\n      \
    \      prime.push(i);\n        }\n    }\n    for (let i: number = 0; i < prime.length;\
    \ i++) {\n        for (let j: number = 0; j < prime.length; j++) {\n         \
    \   for (let k: number = 0; k < prime.length; k++) {\n                if (prime[i]\
    \ * prime[j] * prime[k] == a) {\n                    result = true;\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let isPrime = true;\n    let primeNumbers = [];\n    for (let i = 2; i < a;\
    \ i++) {\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        if (isPrime) {\n            primeNumbers.push(i);\n      \
    \  }\n        isPrime = true;\n    }\n    let isMultiplyPrime = false;\n    for\
    \ (let i = 0; i < primeNumbers.length; i++) {\n        for (let j = 0; j < primeNumbers.length;\
    \ j++) {\n            for (let k = 0; k < primeNumbers.length; k++) {\n      \
    \          if (primeNumbers[i] * primeNumbers[j] * primeNumbers[k] === a) {\n\
    \                    isMultiplyPrime = true;\n                }\n            }\n\
    \        }\n    }\n    return isMultiplyPrime;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let result: boolean = false;\n    let prime: number[] = [];\n    for (let i:\
    \ number = 2; i < a; i++) {\n        if (is_prime(i)) {\n            prime.push(i);\n\
    \        }\n    }\n    for (let i: number = 0; i < prime.length; i++) {\n    \
    \    for (let j: number = 0; j < prime.length; j++) {\n            for (let k:\
    \ number = 0; k < prime.length; k++) {\n                if (prime[i] * prime[j]\
    \ * prime[k] == a) {\n                    result = true;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let result: boolean = false;\n    let primeNumbers: number[] = [];\n    let\
    \ primeNumbersMultiplied: number[] = [];\n    let primeNumbersMultipliedSum: number\
    \ = 0;\n    let primeNumbersMultipliedSum2: number = 0;\n    let primeNumbersMultipliedSum3:\
    \ number = 0;\n    let primeNumbersMultipliedSum4: number = 0;\n    let primeNumbersMultipliedSum5:\
    \ number = 0;\n    let primeNumbersMultipliedSum6: number = 0;\n    let primeNumbersMultipliedSum7:\
    \ number = 0;\n    let primeNumbersMultipliedSum8: number = 0;\n    let primeNumbersMultipliedSum9:\
    \ number = 0;\n    let primeNumbersMultipliedSum10: number = 0;\n    let primeNumbersMultipliedSum11:\
    \ number = 0;\n    let primeNumbersMultipliedSum12: number = 0;\n    let primeNumbersMultipliedSum13:\
    \ number = 0;\n    let primeNumbersMultipliedSum14: number = 0;\n    let primeNumbersMultipliedSum15:\
    \ number = 0;\n    let primeNumbersMultipliedSum16: number = 0;\n    let primeNumbersMultipliedSum17:\
    \ number = 0;\n    let primeNumbersMultipliedSum18: number = 0;\n    let primeNumbersMultipliedSum19:\
    \ number = 0;\n    let primeNumbersMultipliedSum20: number = 0;\n    let primeNumbersMultipliedSum21:\
    \ number = 0;\n    let primeNumbersMultipliedSum22: number = 0;\n    let primeNumbersMultipliedSum23:\
    \ number = 0;\n    let primeNumbersMultipliedSum24: number = 0;\n    let primeNumbersMultipliedSum25:\
    \ number = 0;\n    let primeNumbersMultipliedSum26: number = 0;\n    let primeNumbersMultipliedSum27:\
    \ number = 0;\n    let primeNumbersMultipliedSum28: number = 0;\n    let primeNumbersMultipliedSum29:\
    \ number = 0;\n    let primeNumbersMultipliedSum30: number = 0;\n    let primeNumbersMultipliedSum31:\
    \ number = 0;\n    let primeNumbersMultipliedSum32: number = 0;\n", "    let prime\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    let result = [];\n    for (let i = 0; i < prime.length;\
    \ i++) {\n        if (a % prime[i] == 0) {\n            result.push(prime[i]);\n\
    \        }\n    }\n    if (result.length == 3) {\n        return true;\n    }\n\
    \    else {\n        return false;\n    }\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let arr: number[] = [];\n    let result: boolean = false;\n    for (let i:\
    \ number = 2; i < a; i++) {\n        if (a % i == 0) {\n            arr.push(i);\n\
    \        }\n    }\n    for (let i: number = 0; i < arr.length; i++) {\n      \
    \  for (let j: number = i + 1; j < arr.length; j++) {\n            for (let k:\
    \ number = j + 1; k < arr.length; k++) {\n                if (arr[i] * arr[j]\
    \ * arr[k] == a) {\n                    result = true;\n                }\n  \
    \          }\n        }\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let primeNumbers: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let primeNumbersMultiply:\
    \ number[] = [];\n    for (let i: number = 0; i < primeNumbers.length; i++) {\n\
    \        for (let j: number = 0; j < primeNumbers.length; j++) {\n           \
    \ for (let k: number = 0; k < primeNumbers.length; k++) {\n                primeNumbersMultiply.push(primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k]);\n            }\n        }\n    }\n   \
    \ for (let i: number = 0; i < primeNumbersMultiply.length; i++) {\n        if\
    \ (primeNumbersMultiply[i] === a) {\n            return true;\n        }\n   \
    \ }\n    return false;\n}\nconsole.log(is_multiply_prime(30));\n", "    if (a\
    \ < 100) {\n        for (let i = 2; i < a; i++) {\n            if (a % i == 0)\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nconsole.log(is_multiply_prime(30));\n", "    let prime = true;\n\
    \    let prime_numbers = [];\n    for (let i = 2; i < a; i++) {\n        for (let\
    \ j = 2; j < i; j++) {\n            if (i % j == 0) {\n                prime =\
    \ false;\n                break;\n            }\n        }\n        if (prime)\
    \ {\n            prime_numbers.push(i);\n        }\n        prime = true;\n  \
    \  }\n    let result = false;\n    for (let i = 0; i < prime_numbers.length; i++)\
    \ {\n        for (let j = 0; j < prime_numbers.length; j++) {\n            for\
    \ (let k = 0; k < prime_numbers.length; k++) {\n                if (prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a) {\n                    result =\
    \ true;\n                }\n            }\n        }\n    }\n    return result;\n\
    }\nconsole.log(is_multiply_prime(30));\n", "    let result: boolean = false;\n\
    \    let primeNumbers: number[] = [];\n    let primeNumbersMultiply: number[]\
    \ = [];\n    let counter: number = 0;\n    for (let i: number = 2; i < 100; i++)\
    \ {\n        for (let j: number = 2; j < i; j++) {\n            if (i % j ===\
    \ 0) {\n                counter++;\n            }\n        }\n        if (counter\
    \ === 0) {\n            primeNumbers.push(i);\n        }\n        counter = 0;\n\
    \    }\n    for (let i: number = 0; i < primeNumbers.length; i++) {\n        for\
    \ (let j: number = 0; j < primeNumbers.length; j++) {\n            for (let k:\
    \ number = 0; k < primeNumbers.length; k++) {\n                primeNumbersMultiply.push(primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k]);\n            }\n        }\n    }\n   \
    \ for (let i: number = 0; i < primeNumbersMultiply.length; i++) {\n        if\
    \ (primeNumbersMultiply[i] === a) {\n            result = true;\n        }\n \
    \   }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n", "    let\
    \ primeNumbers: number[] = [];\n    let isPrime: boolean = true;\n    for (let\
    \ i: number = 2; i < a; i++) {\n        for (let j: number = 2; j < i; j++) {\n\
    \            if (i % j === 0) {\n                isPrime = false;\n          \
    \  }\n        }\n        if (isPrime) {\n            primeNumbers.push(i);\n \
    \       }\n        isPrime = true;\n    }\n    let result: boolean = false;\n\
    \    for (let i: number = 0; i < primeNumbers.length; i++) {\n        for (let\
    \ j: number = 0; j < primeNumbers.length; j++) {\n            for (let k: number\
    \ = 0; k < primeNumbers.length; k++) {\n                if (primeNumbers[i] *\
    \ primeNumbers[j] * primeNumbers[k] === a) {\n                    result = true;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    let count: number = 0;\n    for (let i\
    \ = 0; i < prime.length; i++) {\n        if (a % prime[i] == 0) {\n          \
    \  count++;\n        }\n    }\n    if (count == 3) {\n        return true;\n \
    \   }\n    else {\n        return false;\n    }\n}\nconsole.log(is_multiply_prime(30));\n\
    console.log(is_multiply_prime(31));\nconsole.log(is_multiply_prime(32));\nconsole.log(is_multiply_prime(33));\n\
    console.log(is_multiply_prime(34));\nconsole.log(is_multiply_prime(35));\nconsole.log(is_multiply_prime(36));\n\
    console.log(is_multiply_prime(37));\nconsole.log(is_multiply_prime(38));\nconsole.log(is_multiply_prime(39));\n\
    console.log(is_multiply_prime(40));\nconsole.log(is_multiply_prime(41));\nconsole.log(is_multiply_prime(42));\n\
    console.log(is_multiply_prime(43));\nconsole.log(is_multiply_prime(44));\nconsole.log(is_multiply_prime(45));\n\
    console.log(is_multiply_prime(46));\nconsole.log(is_multiply_prime(47));\nconsole.log(is_multiply_prime(48));\n\
    console.log(is_multiply_prime(49));\nconsole.log(is_multiply_prime(50));\nconsole.log(is_multiply_prime(51));\n\
    console.log(is_multiply_prime(52));\nconsole.log(is_multiply_prime(53));\nconsole.log(is_multiply_prime(54",
  "    let result: boolean = false;\n    let count: number = 0;\n    let prime: number\
    \ = 0;\n    for (let i: number = 2; i < a; i++) {\n        if (a % i == 0) {\n\
    \            count++;\n            prime = i;\n        }\n    }\n    if (count\
    \ == 1) {\n        result = true;\n    }\n    return result;\n}\n", "    let is_prime\
    \ = true;\n    let is_multiply_prime = false;\n    let prime_numbers = [];\n \
    \   let prime_numbers_multiply = [];\n    for (let i = 2; i < a; i++) {\n    \
    \    for (let j = 2; j < i; j++) {\n            if (i % j == 0) {\n          \
    \      is_prime = false;\n                break;\n            }\n        }\n \
    \       if (is_prime) {\n            prime_numbers.push(i);\n        }\n     \
    \   is_prime = true;\n    }\n    for (let i = 0; i < prime_numbers.length; i++)\
    \ {\n        for (let j = 0; j < prime_numbers.length; j++) {\n            for\
    \ (let k = 0; k < prime_numbers.length; k++) {\n                if (prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a) {\n                    prime_numbers_multiply.push(prime_numbers[i]);\n\
    \                    prime_numbers_multiply.push(prime_numbers[j]);\n        \
    \            prime_numbers_multiply.push(prime_numbers[k]);\n                \
    \    is_multiply_prime = true;\n                }\n            }\n        }\n\
    \    }\n    return is_multiply_prime;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let result: boolean = false;\n    let primeNumbers: number[] = [];\n    let\
    \ counter: number = 0;\n    for (let i: number = 2; i < a; i++) {\n        if\
    \ (is_prime(i)) {\n            primeNumbers.push(i);\n        }\n    }\n    for\
    \ (let i: number = 0; i < primeNumbers.length; i++) {\n        for (let j: number\
    \ = 0; j < primeNumbers.length; j++) {\n            for (let k: number = 0; k\
    \ < primeNumbers.length; k++) {\n                if (primeNumbers[i] * primeNumbers[j]\
    \ * primeNumbers[k] === a) {\n                    counter++;\n               \
    \ }\n            }\n        }\n    }\n    if (counter > 0) {\n        result =\
    \ true;\n    }\n    return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let result: boolean = false;\n    let prime: number[] = [];\n    let prime2:\
    \ number[] = [];\n    let prime3: number[] = [];\n    let prime4: number[] = [];\n\
    \    let prime5: number[] = [];\n    let prime6: number[] = [];\n    let prime7:\
    \ number[] = [];\n    let prime8: number[] = [];\n    let prime9: number[] = [];\n\
    \    let prime10: number[] = [];\n    let prime11: number[] = [];\n    let prime12:\
    \ number[] = [];\n    let prime13: number[] = [];\n    let prime14: number[] =\
    \ [];\n    let prime15: number[] = [];\n    let prime16: number[] = [];\n    let\
    \ prime17: number[] = [];\n    let prime18: number[] = [];\n    let prime19: number[]\
    \ = [];\n    let prime20: number[] = [];\n    let prime21: number[] = [];\n  \
    \  let prime22: number[] = [];\n    let prime23: number[] = [];\n    let prime24:\
    \ number[] = [];\n    let prime25: number[] = [];\n    let prime26: number[] =\
    \ [];\n    let prime27: number[] = [];\n    let prime28: number[] = [];\n    let\
    \ prime29: number[] = [];\n    let prime30: number[] = [];\n    let prime31: number[]\
    \ = [];\n    let prime32: number[] = [];\n    let prime33: number[] = [];\n  \
    \  let prime34: number[] = [];\n    let prime35: number[] = [];\n    let prime36:\
    \ number[] = [];\n    let prime37: number[] = [];\n    let prime38: number[] =\
    \ [];\n    let prime39: number[] = [];\n    let prime40: number[] = [];\n    let\
    \ prime41: number[] = [];\n    let prime42: number[] = [];\n    let prime43: number[]\
    \ = [];\n    let prime44: number[] = [];\n    let prime45: number[] = [];\n  \
    \  let prime46: number[] = [];\n    let prime47: number[] = [];\n    let prime48:\
    \ number[] = [];\n    let prime49: number[] = [];\n    let prime50: number[] =\
    \ [];\n    let prime", "    let prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    let result = [];\n\
    \    for (let i = 0; i < prime.length; i++) {\n        if (a % prime[i] == 0)\
    \ {\n            result.push(prime[i]);\n        }\n    }\n    if (result.length\
    \ == 3) {\n        return true;\n    }\n    else {\n        return false;\n  \
    \  }\n}\nconsole.log(is_multiply_prime(30));\n", "    let prime_numbers = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let prime_numbers_count = 0;\n    for (let i = 0; i <\
    \ prime_numbers.length; i++) {\n        if (a % prime_numbers[i] == 0) {\n   \
    \         prime_numbers_count++;\n        }\n    }\n    if (prime_numbers_count\
    \ == 3) {\n        return true;\n    }\n    else {\n        return false;\n  \
    \  }\n}\nconsole.log(is_multiply_prime(30));\n", "    let prime: number[] = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    let prime_num: number[] = [];\n    let result: boolean\
    \ = false;\n    for (let i: number = 0; i < prime.length; i++) {\n        if (a\
    \ % prime[i] == 0) {\n            prime_num.push(prime[i]);\n        }\n    }\n\
    \    if (prime_num.length == 3) {\n        result = true;\n    }\n    return result;\n\
    }\nconsole.log(is_multiply_prime(30));\n", "    let arr: number[] = [];\n    let\
    \ arr2: number[] = [];\n    let arr3: number[] = [];\n    let arr4: number[] =\
    \ [];\n    let arr5: number[] = [];\n    let arr6: number[] = [];\n    let arr7:\
    \ number[] = [];\n    let arr8: number[] = [];\n    let arr9: number[] = [];\n\
    \    let arr10: number[] = [];\n    let arr11: number[] = [];\n    let arr12:\
    \ number[] = [];\n    let arr13: number[] = [];\n    let arr14: number[] = [];\n\
    \    let arr15: number[] = [];\n    let arr16: number[] = [];\n    let arr17:\
    \ number[] = [];\n    let arr18: number[] = [];\n    let arr19: number[] = [];\n\
    \    let arr20: number[] = [];\n    let arr21: number[] = [];\n    let arr22:\
    \ number[] = [];\n    let arr23: number[] = [];\n    let arr24: number[] = [];\n\
    \    let arr25: number[] = [];\n    let arr26: number[] = [];\n    let arr27:\
    \ number[] = [];\n    let arr28: number[] = [];\n    let arr29: number[] = [];\n\
    \    let arr30: number[] = [];\n    let arr31: number[] = [];\n    let arr32:\
    \ number[] = [];\n    let arr33: number[] = [];\n    let arr34: number[] = [];\n\
    \    let arr35: number[] = [];\n    let arr36: number[] = [];\n    let arr37:\
    \ number[] = [];\n    let arr38: number[] = [];\n    let arr39: number[] = [];\n\
    \    let arr40: number[] = [];\n    let arr41: number[] = [];\n    let arr42:\
    \ number[] = [];\n    let arr43: number[] = [];\n    let arr44: number[] = [];\n\
    \    let arr45: number[] = [];\n    let arr46: number[] = [];\n    let arr47:\
    \ number[] = [];\n    let arr48: number[] = [];\n    let arr49: number[] = [];\n\
    \    let arr50: number[] = [];\n    let arr51: number[] = [];\n    let"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
