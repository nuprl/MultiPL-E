name: HumanEval_23_strlen
language: ts
prompt: "//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"\
  abc\")\n// 3\nfunction strlen(string: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = strlen;\n  assert.deepEqual(candidate(\"\"),0);\n\
  \  assert.deepEqual(candidate(\"x\"),1);\n  assert.deepEqual(candidate(\"asdasnakj\"\
  ),9);\n}\n\ntest();"
completions: ["    if (typeof string !== \"string\") {\n        throw new Error(\"\
    strlen() expects a string\");\n    }\n    return string.length;\n}\n", "    return\
    \ string.length;\n}\n", "    return string.length;\n}\n", "    if (typeof string\
    \ === \"string\") {\n        return string.length;\n    }\n    else {\n      \
    \  return \"Error: input is not a string\";\n    }\n}\n", "    if (typeof string\
    \ === \"string\") {\n        return string.length;\n    }\n    else {\n      \
    \  return \"ERROR: Input is not a string.\";\n    }\n}\n", "    return string.length;\n\
    }\n", "    if (typeof string !== \"string\") {\n        throw new Error(\"strlen:\
    \ parameter must be a string\");\n    }\n    return string.length;\n}\n", "  \
    \  if (typeof string !== \"string\") {\n        throw new Error(\"strlen: argument\
    \ must be a string\");\n    }\n    return string.length;\n}\n", "    return string.length;\n\
    }\n", "    return string.length;\n}\n", "    return string.length;\n}\n", "  \
    \  if (typeof string !== \"string\") {\n        throw new Error(\"strlen: argument\
    \ must be a string\");\n    }\n    return string.length;\n}\n", "    if (string\
    \ === \"\") {\n        return 0;\n    }\n    else {\n        return 1 + strlen(string.slice(1));\n\
    \    }\n}\n", "    if (string === undefined) {\n        return undefined;\n  \
    \  }\n    if (typeof string !== \"string\") {\n        return undefined;\n   \
    \ }\n    return string.length;\n}\n", "    return string.length;\n}\n", "    if\
    \ (typeof string === \"string\") {\n        return string.length;\n    }\n   \
    \ else {\n        return \"Invalid input\";\n    }\n}\n", "    if (typeof string\
    \ !== \"string\") {\n        throw new Error(\"strlen: input must be a string\"\
    );\n    }\n    return string.length;\n}\n", "    if (typeof string !== \"string\"\
    ) {\n        throw new Error(\"strlen: argument must be a string\");\n    }\n\
    \    return string.length;\n}\n", "    return string.length;\n}\n", "    if (typeof\
    \ string !== \"string\") {\n        throw new Error(\"strlen: argument must be\
    \ a string\");\n    }\n    return string.length;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
