name: HumanEval_26_remove_duplicates
language: ts
prompt: "//From an array of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
completions: ["    let result = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (result.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let unique: any = [];\n    for\
    \ (let i: number = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "    let unique_numbers = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (unique_numbers.indexOf(numbers[i]) === -1) {\n         \
    \   unique_numbers.push(numbers[i]);\n        }\n    }\n    return unique_numbers;\n\
    }\n\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));\n", "    let unique = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ == -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "    let unique: any = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\nconsole.log(remove_duplicates([1, 2,\
    \ 3, 2, 4]));\n", "    let unique = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "    let unique = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i]) ===\
    \ -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n", "    let unique_numbers = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (unique_numbers.indexOf(numbers[i]) === -1) {\n            unique_numbers.push(numbers[i]);\n\
    \        }\n    }\n    return unique_numbers;\n}\n", "    let uniq: any = [];\n\
    \    for (let i: number = 0; i < numbers.length; i++) {\n        if (uniq.indexOf(numbers[i])\
    \ === -1) {\n            uniq.push(numbers[i]);\n        }\n    }\n    return\
    \ uniq;\n}\n", "    let unique: any = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        if (unique.indexOf(numbers[i]) == -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "    const unique = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ === -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "    return numbers.filter((v, i) => numbers.indexOf(v) === i);\n\
    }\n", "    let result: any = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        if (result.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nconsole.log(remove_duplicates([1, 2,\
    \ 3, 2, 4]));\n", "    let uniqueNumbers = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n          \
    \  uniqueNumbers.push(numbers[i]);\n        }\n    }\n    return uniqueNumbers;\n\
    }\n", "    let unique = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (unique.indexOf(numbers[i]) === -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "    let unique = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers.indexOf(numbers[i]) ===\
    \ i) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n", "    let result: any = [];\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (result.indexOf(numbers[i]) === -1) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let unique_numbers = [];\n \
    \   for (let i = 0; i < numbers.length; i++) {\n        if (unique_numbers.indexOf(numbers[i])\
    \ === -1) {\n            unique_numbers.push(numbers[i]);\n        }\n    }\n\
    \    return unique_numbers;\n}\n", "    let unique: any = [];\n    numbers.forEach(function\
    \ (i: any) {\n        if (unique.indexOf(i) === -1) {\n            unique.push(i);\n\
    \        }\n    });\n    return unique;\n}\n", "    let result = [];\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (result.indexOf(numbers[i])\
    \ === -1) {\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
