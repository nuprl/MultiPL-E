language: pl
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $num)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split(//, $word)) {\n            if ($letter =~ /[^aeiou]/i) {\n          \
    \      $count++;\n            }\n        }\n        if ($count == $n) {\n    \
    \        push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split(/\\s+/, $string);\n    my\
    \ @result;\n    foreach my $word (@words) {\n        my $count = 0;\n        foreach\
    \ my $letter (split(//, $word)) {\n            if ($letter !~ /[aeiou]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $num)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            if ($letter =~ /[bcdfghjklmnpqrstvwxyz]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n     \
    \           $count++;\n            }\n        }\n        if ($count == $n) {\n\
    \            push @result, $word;\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char !~ /[aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i);\n\
    \        }\n        push @result, $word if ($count == $n);\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n              \
    \  $count++;\n            }\n        }\n        if ($count == $n) {\n        \
    \    push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split(/\\s+/, $string);\n    my\
    \ @result;\n    foreach my $word (@words) {\n        my $count = 0;\n        for\
    \ (my $i = 0; $i < length($word); $i++) {\n            my $letter = substr($word,\
    \ $i, 1);\n            if ($letter =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $num) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @consonants\
    \ = qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        foreach my $letter (@consonants)\
    \ {\n            $count += () = $word =~ /$letter/gi;\n        }\n        push\
    \ @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/ /, $s);\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        my @chars = split(//, $word);\n\
    \        foreach my $char (@chars) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @result;\n    my @words = split /\\s+/, $str;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split //, $word) {\n            $consonants++ if $char !~ /[aeiou]/i;\n\
    \        }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my $s = shift;\n    my $n = shift;\n    my @words = split(/\\s+/, $s);\n \
    \   my @result = ();\n    foreach my $word (@words) {\n        my $count = 0;\n\
    \        $count++ while $word =~ /[bcdfghjklmnpqrstvwxyz]/gi;\n        push @result,\
    \ $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        my @chars = split\
    \ //, $word;\n        foreach my $char (@chars) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n     \
    \           $count++;\n            }\n        }\n        if ($count == $n) {\n\
    \            push @result, $word;\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char !~ /[aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $num) {\n     \
    \       push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $char = substr($word, $i, 1);\n\
    \            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push(@result,\
    \ $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $consonants = 0;\n        foreach my\
    \ $char (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n       \
    \         $consonants++;\n            }\n        }\n        if ($consonants ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $char = substr($word, $i, 1);\n\
    \            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiouAEIOU]/) {\n\
    \                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my $str = shift;\n    my $n = shift;\n    my @words = split(/\\s+/, $str);\n\
    \    my @result;\n    foreach my $word (@words) {\n        my $consonants = 0;\n\
    \        foreach my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i)\
    \ {\n                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = ($word =~ tr/bcdfghjklmnpqrstvwxyz//);\n\
    \        if ($consonants == $n) {\n            push @result, $word;\n        }\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $num)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/ /, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split(//, $word)) {\n            if ($letter !~ /[aeiou]/i) {\n           \
    \     $count++;\n            }\n        }\n        if ($count == $n) {\n     \
    \       push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n              \
    \  $count++;\n            }\n        }\n        if ($count == $n) {\n        \
    \    push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $num) {\n     \
    \       push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $char = substr($word, $i, 1);\n\
    \            if ($char =~ /[^aeiou]/i) {\n                $count++;\n        \
    \    }\n        }\n        if ($count == $n) {\n            push @result, $word;\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    for my $word (@words) {\n        my $consonants = 0;\n        for my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $consonants++;\n            }\n        }\n        if ($consonants == $n) {\n\
    \            push @result, $word;\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $c\
    \ (split //, $word) {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  for my $word (@words) {\n        my $count = 0;\n        for my $c (split //,\
    \ $word) {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n        push\
    \ @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split(/\\s+/, $string);\n    my\
    \ @selected_words;\n    foreach my $word (@words) {\n        my $consonants =\
    \ $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n        if ($consonants == $num) {\n \
    \           push @selected_words, $word;\n        }\n    }\n    return @selected_words;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n     \
    \           $count++;\n            }\n        }\n        if ($count == $n) {\n\
    \            push @result, $word;\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $char = substr($word, $i, 1);\n\
    \            if ($char !~ /[aeiou]/i) {\n                $count++;\n         \
    \   }\n        }\n        if ($count == $n) {\n            push(@result, $word);\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/ /, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        if ($consonants == $n) {\n            push @result, $word;\n        }\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $num) {\n     \
    \       push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        if ($consonants == $n) {\n            push @result, $word;\n        }\n\
    \    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had\
    \ a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @result;\n    my @words = split /\\s+/, $str;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $c = substr($word, $i, 1);\n\
    \            if ($c !~ /[aeiou]/i) {\n                $count++;\n            }\n\
    \        }\n        if ($count == $n) {\n            push(@result, $word);\n \
    \       }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        my @chars =\
    \ split //, $word;\n        foreach my $char (@chars) {\n            if ($char\
    \ =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n                $count++;\n            }\n\
    \        }\n        if ($count == $n) {\n            push @result, $word;\n  \
    \      }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $letter (split(//, $word)) {\n            if ($letter =~ /[bcdfghjklmnpqrstvwxyz]/i)\
    \ {\n                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $consonants) = @_;\n    my @words = split(/\\s+/, $string);\n\
    \    my @results;\n    foreach my $word (@words) {\n        my $count = 0;\n \
    \       foreach my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $consonants) {\n            push(@results, $word);\n        }\n    }\n    return\
    \ @results;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $letter (split\
    \ //, $word) {\n            if ($letter =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(' ', $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split('', $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $number) = @_;\n    my @words = split /\\s+/, $string;\n    my\
    \ @result;\n    foreach my $word (@words) {\n        my $count = 0;\n        foreach\
    \ my $letter (split //, $word) {\n            if ($letter =~ /[^aeiou]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $number)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $consonants = 0;\n        foreach my\
    \ $char (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n       \
    \         $consonants++;\n            }\n        }\n        if ($consonants ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split(//, $word)) {\n            if ($letter !~ /[aeiou]/i) {\n           \
    \     $count++;\n            }\n        }\n        if ($count == $n) {\n     \
    \       push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            $count++ if $letter =~ /[^aeiou]/i;\n     \
    \   }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split(/\\s+/, $string);\n    my\
    \ @result;\n    foreach my $word (@words) {\n        my $count = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char !~ /[aeiou]/i) {\n    \
    \            $count++;\n            }\n        }\n        if ($count == $num)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @selected_words;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@selected_words, $word);\n        }\n    }\n    return\
    \ @selected_words;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $c\
    \ (split //, $word) {\n            $count++ if $c !~ /[aeiou]/i;\n        }\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            $count++ if ($char =~ /[^aeiou]/i);\n    \
    \    }\n        push(@result, $word) if ($count == $n);\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split(/\\s+/, $string);\n    my\
    \ @result;\n    foreach my $word (@words) {\n        my $consonants = 0;\n   \
    \     foreach my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i)\
    \ {\n                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $num) {\n            push(@result, $word);\n        }\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char !~ /[aeiou]/i;\n        }\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            if ($letter =~ /[^aeiou]/i) {\n           \
    \     $count++;\n            }\n        }\n        if ($count == $n) {\n     \
    \       push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char !~ /[aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split(/\\s+/, $string);\n    my\
    \ @result;\n    foreach my $word (@words) {\n        my $count = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $count++;\n            }\n        }\n        if ($count == $num)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n              \
    \  $count++;\n            }\n        }\n        if ($count == $n) {\n        \
    \    push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n              \
    \  $count++;\n            }\n        }\n        if ($count == $n) {\n        \
    \    push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(' ', $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split('', $word)) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $num;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split(//, $word)) {\n            if ($letter =~ /[^aeiou]/i) {\n          \
    \      $count++;\n            }\n        }\n        if ($count == $n) {\n    \
    \        push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            if ($letter =~ /[bcdfghjklmnpqrstvwxyz]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n              \
    \  $count++;\n            }\n        }\n        if ($count == $n) {\n        \
    \    push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        for (my $i =\
    \ 0; $i < length($word); $i++) {\n            my $c = substr($word, $i, 1);\n\
    \            if ($c !~ /[aeiou]/i) {\n                $count++;\n            }\n\
    \        }\n        if ($count == $n) {\n            push(@result, $word);\n \
    \       }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @consonants\
    \ = grep { $_ =~ /[^aeiou]/ } split //, $string;\n    my @result;\n    for my\
    \ $word (@words) {\n        my @word_consonants = grep { $_ =~ /[^aeiou]/ } split\
    \ //, $word;\n        push @result, $word if @word_consonants == $n;\n    }\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $consonants) = @_;\n    my @words = split(/\\s+/, $string);\n\
    \    my @result;\n    foreach my $word (@words) {\n        my $count = 0;\n  \
    \      foreach my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $consonants) {\n            push(@result, $word);\n        }\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split ' ', $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split '', $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my $s = shift;\n    my $n = shift;\n    my @words = split(/\\s+/, $s);\n \
    \   my @result = ();\n    foreach my $word (@words) {\n        my $count = 0;\n\
    \        foreach my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @result;\n    my @words = split /\\s+/, $string;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        $count++ while\
    \ $word =~ /[^aeiou]/gi;\n        push @result, $word if $count == $n;\n    }\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter\
    \ (split //, $word) {\n            if ($letter =~ /[^aeiou]/i) {\n           \
    \     $count++;\n            }\n        }\n        if ($count == $n) {\n     \
    \       push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split / /, $s;\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        foreach my $char (split\
    \ //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n     \
    \           $count++;\n            }\n        }\n        if ($count == $n) {\n\
    \            push @result, $word;\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char !~ /[aeiou]/i;\n        }\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @consonants\
    \ = qw(b c d f g h j k l m n p q r s t v w x y z);\n    my @result;\n    foreach\
    \ my $word (@words) {\n        my $count = 0;\n        foreach my $consonant (@consonants)\
    \ {\n            $count += () = $word =~ /$consonant/gi;\n        }\n        push\
    \ @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split(/\\s+/, $string);\n    my\
    \ @result;\n    foreach my $word (@words) {\n        my $count = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $count++;\n            }\n        }\n        if ($count == $num)\
    \ {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if ($char =~ /[^aeiou]/i);\n     \
    \   }\n        push @result, $word if ($count == $n);\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char !~ /[aeiou]/i) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char !~ /[aeiou]/i) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            push @result,\
    \ $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            $consonants++ if $char !~ /[aeiou]/i;\n\
    \        }\n        push @result, $word if $consonants == $n;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        $count++ while\
    \ $word =~ /[bcdfghjklmnpqrstvwxyz]/gi;\n        push @result, $word if $count\
    \ == $n;\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n              \
    \  $count++;\n            }\n        }\n        if ($count == $n) {\n        \
    \    push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n   \
    \             $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push(@result, $word);\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $consonants = 0;\n        foreach my\
    \ $char (split //, $word) {\n            if ($char !~ /[aeiou]/i) {\n        \
    \        $consonants++;\n            }\n        }\n        if ($consonants ==\
    \ $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n\
    \        }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n     \
    \           $count++;\n            }\n        }\n        if ($count == $n) {\n\
    \            push @result, $word;\n        }\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(' ', $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split('', $word)) {\n            if ($char !~ /[aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = $word =~ tr/[bcdfghjklmnpqrstvwxyz]//;\n\
    \        push @result, $word if $consonants == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char !~ /[aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = 0;\n        for my $char (split\
    \ //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n        }\n   \
    \     push @result, $word if $count == $n;\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $letter (split //, $word) {\n            if ($letter =~ /[^aeiou]/i) {\n\
    \                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $num) {\n     \
    \       push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $num) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $consonants = 0;\n        foreach\
    \ my $char (split //, $word) {\n            $consonants++ if $char !~ /[aeiou]/i;\n\
    \        }\n        push @result, $word if $consonants == $num;\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        my @chars =\
    \ split //, $word;\n        foreach my $char (@chars) {\n            if ($char\
    \ =~ /[^aeiou]/i) {\n                $count++;\n            }\n        }\n   \
    \     if ($count == $n) {\n            push @result, $word;\n        }\n    }\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\"\
    , 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char !~ /[aeiou]/i;\n        }\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            $count++ if $char =~ /[^aeiou]/i;\n       \
    \ }\n        push @result, $word if $count == $n;\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227694
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split /\\s+/, $s;\n    my @result;\n  \
    \  foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($str, $n) = @_;\n    my @words = split /\\s+/, $str;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[bcdfghjklmnpqrstvwxyz]/i) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
    \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white\
    \ space\", 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"Hello world\", 4),[\"world\"])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Uncle sam\", 3),[\"Uncle\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"\", 4),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $n) = @_;\n    my @words = split /\\s+/, $string;\n    my @result;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split //, $word) {\n            if ($char =~ /[^aeiou]/i) {\n             \
    \   $count++;\n            }\n        }\n        if ($count == $n) {\n       \
    \     push @result, $word;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($string, $number) = @_;\n    my @words = split(/\\s+/, $string);\n   \
    \ my @result;\n    foreach my $word (@words) {\n        my $count = 0;\n     \
    \   foreach my $char (split(//, $word)) {\n            if ($char !~ /[aeiou]/i)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $number) {\n            push(@result, $word);\n        }\n    }\n    return\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &select_words;\n        if(eq_deeply($candidate->(\"Mary had a little lamb\",\
    \ 4),[\"little\"])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"simple white space\", 2),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
- exit_code: 1
  program: "# Given a string s and a natural number n, you have been tasked to implement\
    \ \n# a function that returns an array of all words from string s that contain\
    \ exactly \n# n consonants, in order these words appear in the string s.\n# If\
    \ the string s is empty then the function should return an empty array.\n# Note:\
    \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
    # >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"\
    Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple\
    \ white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"\
    ]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n \
    \   my ($s, $n) = @_;\n    my @words = split(/\\s+/, $s);\n    my @result;\n \
    \   foreach my $word (@words) {\n        my $count = 0;\n        foreach my $char\
    \ (split(//, $word)) {\n            if ($char =~ /[^aeiou]/i) {\n            \
    \    $count++;\n            }\n        }\n        if ($count == $n) {\n      \
    \      push(@result, $word);\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n        if(eq_deeply($candidate->(\"\
    Mary had a little lamb\", 4),[\"little\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\", 2),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232278
