language: pl
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  if ($num =~ /[02468]/) {\n            next;\n        }\n        else {\n  \
    \          push @result, $num;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15,\
    \ 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num = int($num / 10);\n        }\n   \
    \     if ($flag) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        my $flag\
    \ = 1;\n        while ($i) {\n            if ($i % 2 == 0) {\n               \
    \ $flag = 0;\n                last;\n            }\n            $i /= 10;\n  \
    \      }\n        push @res, $i if $flag;\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $is_unique = 1;\n        while ($num > 0) {\n            if ($num % 2 == 0)\
    \ {\n                $is_unique = 0;\n                last;\n            }\n \
    \           $num /= 10;\n        }\n        if ($is_unique) {\n            push\
    \ @res, $num;\n        }\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $flag = 1;\n        while ($num > 0) {\n            if ($num % 10 % 2 ==\
    \ 0) {\n                $flag = 0;\n                last;\n            }\n   \
    \         $num /= 10;\n        }\n        push @result, $num if $flag;\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my ($x) = @_;\n    my @result;\n    foreach my $n (@$x) {\n        my\
    \ $has_even_digit = 0;\n        while ($n > 0) {\n            if ($n % 2 == 0)\
    \ {\n                $has_even_digit = 1;\n                last;\n           \
    \ }\n            $n /= 10;\n        }\n        push @result, $n if !$has_even_digit;\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $n (@x) {\n        my $has_even\
    \ = 0;\n        while ($n > 0) {\n            my $digit = $n % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $n = int($n / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @result, $n;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            if (($i % 10) % 2 == 0) {\n    \
    \            $has_even = 1;\n                last;\n            }\n          \
    \  $i /= 10;\n        }\n        if (!$has_even) {\n            push @result,\
    \ $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        my @digits = split //, $i;\n        foreach my $j (@digits) {\n\
    \            if ($j % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n        if ($flag) {\n            push @y, $i;\n  \
    \      }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        if ($i\
    \ =~ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        if (!$has_even) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $is_unique\
    \ = 1;\n        my $num = $i;\n        while ($num > 0) {\n            my $digit\
    \ = $num % 10;\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n            $num = int($num / 10);\n\
    \        }\n        if ($is_unique) {\n            push @result, $i;\n       \
    \ }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $has_even = 1;\n\
    \                last;\n            }\n            $num = int($num / 10);\n  \
    \      }\n        if (!$has_even) {\n            push @result, $num;\n       \
    \ }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @res;\n    foreach my $num (@$arr) {\n     \
    \   my $flag = 1;\n        while ($num > 0) {\n            if ($num % 10 % 2 ==\
    \ 0) {\n                $flag = 0;\n                last;\n            }\n   \
    \         $num /= 10;\n        }\n        push @res, $num if $flag;\n    }\n \
    \   return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $is_unique = 1;\n        for my $digit (split //, $num) {\n            if ($digit\
    \ =~ /[02468]/) {\n                $is_unique = 0;\n                last;\n  \
    \          }\n        }\n        push @result, $num if $is_unique;\n    }\n  \
    \  return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        if\
    \ ($num =~ /[02468]/) {\n            next;\n        }\n        push @result, $num;\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $has_even = 0;\n        for my $digit (split //, $num) {\n            if ($digit\
    \ % 2 == 0) {\n                $has_even = 1;\n                last;\n       \
    \     }\n        }\n        push @result, $num if !$has_even;\n    }\n    return\
    \ sort { $a <=> $b } @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $x (@x) {\n        my $has_even\
    \ = 0;\n        while ($x > 0) {\n            if ($x % 2 == 0) {\n           \
    \     $has_even = 1;\n                last;\n            }\n            $x /=\
    \ 10;\n        }\n        if (!$has_even) {\n            push @result, $x;\n \
    \       }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $flag\
    \ = 1;\n        for my $j (split //, $i) {\n            if ($j % 2 == 0) {\n \
    \               $flag = 0;\n                last;\n            }\n        }\n\
    \        if ($flag) {\n            push @result, $i;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        my $j = $i;\n\
    \        while ($j > 0) {\n            my $k = $j % 10;\n            if ($k %\
    \ 2 == 0) {\n                last;\n            }\n            $j = int($j / 10);\n\
    \        }\n        if ($j == 0) {\n            push @y, $i;\n        }\n    }\n\
    \    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $is_even\
    \ = 0;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $is_even = 1;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if (!$is_even) {\n            push @result, $i;\n        }\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        my @digits = split //, $num;\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @result, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num) {\n            if ($num % 10 % 2 == 0) {\n\
    \                $flag = 0;\n                last;\n            }\n          \
    \  $num /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return\
    \ sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422,\
    \ 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @nums = @_;\n    my @result;\n    for my $num (@nums) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num /= 10;\n        }\n        push\
    \ @result, $num if !$has_even;\n    }\n    return sort { $a <=> $b } @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $flag = 1;\n        my @digits = split(//, $num);\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $flag = 0;\n\
    \                last;\n            }\n        }\n        if ($flag) {\n     \
    \       push @result, $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $is_unique\
    \ = 1;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $is_unique = 0;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if ($is_unique)\
    \ {\n            push @result, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $tmp\
    \ = $i;\n        my $flag = 1;\n        while ($tmp > 0) {\n            if ($tmp\
    \ % 2 == 0) {\n                $flag = 0;\n                last;\n           \
    \ }\n            $tmp /= 10;\n        }\n        if ($flag) {\n            push\
    \ @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            my $d = $i % 10;\n            if\
    \ ($d % 2 == 0) {\n                $flag = 0;\n                last;\n       \
    \     }\n            $i = $i / 10;\n        }\n        if ($flag) {\n        \
    \    push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num /= 10;\n        }\n        if ($flag)\
    \ {\n            push @res, $num;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $flag\
    \ = 1;\n        while ($num) {\n            if ($num % 10 % 2 == 0) {\n      \
    \          $flag = 0;\n                last;\n            }\n            $num\
    \ /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return sort\
    \ {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num /= 10;\n        }\n        push\
    \ @result, $num if !$has_even;\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num /= 10;\n        }\n        if ($flag)\
    \ {\n            push @res, $num;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $is_unique = 1;\n        my @digits = split(//, $num);\n        foreach\
    \ my $digit (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num /= 10;\n        }\n        if ($flag)\
    \ {\n            push @res, $num;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $is_unique\
    \ = 1;\n        for my $d (split //, $i) {\n            if ($d % 2 == 0) {\n \
    \               $is_unique = 0;\n                last;\n            }\n      \
    \  }\n        push @result, $i if $is_unique;\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            my $d = $i % 10;\n            if\
    \ ($d % 2 == 0) {\n                $has_even = 1;\n                last;\n   \
    \         }\n            $i = int($i / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        while ($num > 0) {\n            my $digit = $num %\
    \ 10;\n            if ($digit % 2 == 0) {\n                $is_unique = 0;\n \
    \               last;\n            }\n            $num = int($num / 10);\n   \
    \     }\n        if ($is_unique) {\n            push @result, $num;\n        }\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $has_even = 1;\n\
    \                last;\n            }\n            $num = int($num / 10);\n  \
    \      }\n        if (!$has_even) {\n            push @result, $num;\n       \
    \ }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if ($flag)\
    \ {\n            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        if ($i\
    \ =~ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $str\
    \ = \"$num\";\n        my $flag = 1;\n        for my $c (split //, $str) {\n \
    \           if ($c % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n        if ($flag) {\n            push @res, $num;\n\
    \        }\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $is_even\
    \ = 0;\n        while ($i > 0) {\n            if (($i % 10) % 2 == 0) {\n    \
    \            $is_even = 1;\n                last;\n            }\n           \
    \ $i /= 10;\n        }\n        if (!$is_even) {\n            push @y, $i;\n \
    \       }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $flag\
    \ = 1;\n        while ($num) {\n            my $digit = $num % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n            $num /= 10;\n        }\n        push @res, $num if\
    \ $flag;\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @ret;\n    for my $num (@arr) {\n        if ($num\
    \ =~ /[02468]/) {\n            next;\n        }\n        push @ret, $num;\n  \
    \  }\n    return sort {$a <=> $b} @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $j\
    \ = $i;\n        my $flag = 1;\n        while ($j > 0) {\n            if ($j %\
    \ 2 == 0) {\n                $flag = 0;\n                last;\n            }\n\
    \            $j = int($j / 10);\n        }\n        if ($flag) {\n           \
    \ push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        push @res, $num if !$has_even;\n    }\n\
    \    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num = int($num / 10);\n        }\n   \
    \     if ($flag) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @result, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $flag = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if ($flag) {\n            push @result, $i;\n        }\n \
    \   }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        my $flag\
    \ = 1;\n        my @digits = split(//, $i);\n        for my $j (@digits) {\n \
    \           if ($j % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n        if ($flag) {\n            push @y, $i;\n  \
    \      }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $flag = 1;\n        for my $digit (split //, $num) {\n            if ($digit\
    \ % 2 == 0) {\n                $flag = 0;\n                last;\n           \
    \ }\n        }\n        push @result, $num if $flag;\n    }\n    return sort {$a\
    \ <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num /= 10;\n        }\n        if\
    \ (!$has_even) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $is_unique\
    \ = 1;\n        for my $digit (split //, $num) {\n            if ($digit % 2 ==\
    \ 0) {\n                $is_unique = 0;\n                last;\n            }\n\
    \        }\n        push @res, $num if $is_unique;\n    }\n    return sort {$a\
    \ <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $is_unique\
    \ = 1;\n        for my $digit (split //, $i) {\n            if ($digit % 2 ==\
    \ 0) {\n                $is_unique = 0;\n                last;\n            }\n\
    \        }\n        push @result, $i if $is_unique;\n    }\n    return sort {$a\
    \ <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $is_unique\
    \ = 1;\n        for my $j (split //, $i) {\n            if ($j % 2 == 0) {\n \
    \               $is_unique = 0;\n                last;\n            }\n      \
    \  }\n        if ($is_unique) {\n            push @result, $i;\n        }\n  \
    \  }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num) {\n            my $digit = $num % 10;\n   \
    \         if ($digit % 2 == 0) {\n                $flag = 0;\n               \
    \ last;\n            }\n            $num /= 10;\n        }\n        push @res,\
    \ $num if $flag;\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        my $flag\
    \ = 1;\n        for my $j (split //, $i) {\n            if ($j % 2 == 0) {\n \
    \               $flag = 0;\n                last;\n            }\n        }\n\
    \        if ($flag) {\n            push @y, $i;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $n (@arr) {\n        my $has_even\
    \ = 0;\n        while ($n) {\n            if ($n % 2 == 0) {\n               \
    \ $has_even = 1;\n                last;\n            }\n            $n /= 10;\n\
    \        }\n        push @result, $n if !$has_even;\n    }\n    return sort {\
    \ $a <=> $b } @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $flag = 1;\n        while ($num) {\n            if ($num % 10 % 2 == 0) {\n\
    \                $flag = 0;\n                last;\n            }\n          \
    \  $num /= 10;\n        }\n        push @result, $num if $flag;\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num /= 10;\n        }\n        if ($flag)\
    \ {\n            push @res, $num;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $j\
    \ = $i;\n        my $has_even = 0;\n        while ($j > 0) {\n            if ($j\
    \ % 2 == 0) {\n                $has_even = 1;\n                last;\n       \
    \     }\n            $j = int($j / 10);\n        }\n        if (!$has_even) {\n\
    \            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        if ($i\
    \ =~ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num > 0) {\n            if ($num % 10 % 2 == 0)\
    \ {\n                $flag = 0;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return\
    \ sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422,\
    \ 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            my $rem = $i % 10;\n           \
    \ if ($rem % 2 == 0) {\n                $flag = 0;\n                last;\n  \
    \          }\n            $i = int($i / 10);\n        }\n        if ($flag) {\n\
    \            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if ($flag)\
    \ {\n            push @result, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $j\
    \ = $i;\n        my $flag = 1;\n        while ($j > 0) {\n            my $k =\
    \ $j % 10;\n            if ($k % 2 == 0) {\n                $flag = 0;\n     \
    \           last;\n            }\n            $j = int($j / 10);\n        }\n\
    \        if ($flag == 1) {\n            push @y, $i;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $x (@x) {\n        my $has_even\
    \ = 0;\n        while ($x > 0) {\n            my $digit = $x % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $x = int($x / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @result, $x;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $n (@x) {\n        my $flag\
    \ = 1;\n        while ($n > 0) {\n            my $d = $n % 10;\n            if\
    \ ($d % 2 == 0) {\n                $flag = 0;\n                last;\n       \
    \     }\n            $n = int($n / 10);\n        }\n        if ($flag) {\n   \
    \         push @y, $n;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        push @result, $num if !$has_even;\n   \
    \ }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        my @digits = split //, $i;\n        foreach my $j (@digits) {\n\
    \            if ($j % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n        if ($flag) {\n            push @y, $i;\n  \
    \      }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @result;\n    foreach my $num (@_) {\n        my $has_even = 0;\n\
    \        while ($num > 0) {\n            if ($num % 2 == 0) {\n              \
    \  $has_even = 1;\n                last;\n            }\n            $num /= 10;\n\
    \        }\n        push @result, $num if !$has_even;\n    }\n    return sort\
    \ {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @result;\n    foreach my $num (@$arr) {\n  \
    \      my $is_unique = 1;\n        while ($num > 0) {\n            my $digit =\
    \ $num % 10;\n            if ($digit % 2 == 0) {\n                $is_unique =\
    \ 0;\n                last;\n            }\n            $num = int($num / 10);\n\
    \        }\n        if ($is_unique) {\n            push @result, $num;\n     \
    \   }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $is_unique\
    \ = 1;\n        for my $digit (split //, $i) {\n            if ($digit % 2 ==\
    \ 0) {\n                $is_unique = 0;\n                last;\n            }\n\
    \        }\n        push @result, $i if $is_unique;\n    }\n    return sort {$a\
    \ <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        if\
    \ ($num =~ /[02468]/) {\n            next;\n        }\n        push @result, $num;\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        if ($i =~\
    \ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        my $flag\
    \ = 1;\n        while ($i) {\n            if ($i % 2 == 0) {\n               \
    \ $flag = 0;\n                last;\n            }\n            $i /= 10;\n  \
    \      }\n        push @res, $i if $flag;\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $flag\
    \ = 1;\n        while ($num > 0) {\n            if ($num % 10 % 2 == 0) {\n  \
    \              $flag = 0;\n                last;\n            }\n            $num\
    \ /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return sort\
    \ {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @nums = @_;\n    my @unique_digits = ();\n    foreach my $num (@nums)\
    \ {\n        my $has_even_digit = 0;\n        my @digits = split(//, $num);\n\
    \        foreach my $digit (@digits) {\n            if ($digit % 2 == 0) {\n \
    \               $has_even_digit = 1;\n                last;\n            }\n \
    \       }\n        if (!$has_even_digit) {\n            push(@unique_digits, $num);\n\
    \        }\n    }\n    return sort {$a <=> $b} @unique_digits;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        my @digits = split(//, $i);\n        foreach my $j (@digits) {\n\
    \            if ($j % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n        if ($flag) {\n            push @y, $i;\n  \
    \      }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        my @digits = split(//, $num);\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        my @digits = split //, $num;\n        foreach my\
    \ $digit (@digits) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = 1;\n                last;\n            }\n        }\n        if (!$has_even)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if ($flag)\
    \ {\n            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $str = \"$num\";\n        my $flag = 1;\n        for my $char (split //, $str)\
    \ {\n            if ($char % 2 == 0) {\n                $flag = 0;\n         \
    \       last;\n            }\n        }\n        if ($flag) {\n            push\
    \ @result, $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        if ($i\
    \ =~ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        my $is_unique\
    \ = 1;\n        for my $j (split //, $i) {\n            if ($j % 2 == 0) {\n \
    \               $is_unique = 0;\n                last;\n            }\n      \
    \  }\n        if ($is_unique) {\n            push @result, $i;\n        }\n  \
    \  }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        if\
    \ ($num =~ /[02468]/) {\n            next;\n        }\n        else {\n      \
    \      push @result, $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @res;\n    foreach my $num (@$arr) {\n     \
    \   my $is_even = 0;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $is_even = 1;\n \
    \               last;\n            }\n            $num = int($num / 10);\n   \
    \     }\n        push @res, $num if !$is_even;\n    }\n    return \\@res;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 ==\
    \ 0) {\n                $has_even = 1;\n                last;\n            }\n\
    \            $num /= 10;\n        }\n        push @result, $num if !$has_even;\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        if (!$has_even) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        while ($num > 0) {\n            my $digit = $num %\
    \ 10;\n            if ($digit % 2 == 0) {\n                $is_unique = 0;\n \
    \               last;\n            }\n            $num = int($num / 10);\n   \
    \     }\n        if ($is_unique) {\n            push @result, $num;\n        }\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        if (!$has_even) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        if ($i =~\
    \ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @res, $i;\n        }\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @result;\n    my @array = @_;\n    foreach my $num (@array) {\n  \
    \      if ($num =~ /[02468]/) {\n            next;\n        }\n        else {\n\
    \            push @result, $num;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15,\
    \ 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $is_even = 0;\n        while ($num) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $is_even = 1;\n         \
    \       last;\n            }\n            $num /= 10;\n        }\n        push\
    \ @result, $num if !$is_even;\n    }\n    return sort {$a <=> $b} @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        foreach my $digit (split //, $num) {\n            if\
    \ ($digit % 2 == 0) {\n                $is_unique = 0;\n                last;\n\
    \            }\n        }\n        if ($is_unique) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num) {\n            if ($num % 10 % 2 == 0) {\n\
    \                $flag = 0;\n                last;\n            }\n          \
    \  $num /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return\
    \ sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422,\
    \ 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $has_even = 1;\n                last;\n            }\n            $i /=\
    \ 10;\n        }\n        if (!$has_even) {\n            push @result, $i;\n \
    \       }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        my $num\
    \ = $i;\n        my $flag = 1;\n        while ($num > 0) {\n            if ($num\
    \ % 10 % 2 == 0) {\n                $flag = 0;\n                last;\n      \
    \      }\n            $num /= 10;\n        }\n        if ($flag) {\n         \
    \   push @res, $i;\n        }\n    }\n    return sort {$a <=> $b} @res;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $is_unique = 1;\n        my @digits = split //, $num;\n        foreach my\
    \ $digit (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $has_even = 1;\n                last;\n            }\n            $i /=\
    \ 10;\n        }\n        push @result, $i if $has_even == 0;\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 ==\
    \ 0) {\n                $has_even = 1;\n                last;\n            }\n\
    \            $num /= 10;\n        }\n        if (!$has_even) {\n            push\
    \ @result, $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $j\
    \ = $i;\n        my $flag = 1;\n        while ($j > 0) {\n            if ($j %\
    \ 2 == 0) {\n                $flag = 0;\n                last;\n            }\n\
    \            $j = int($j / 10);\n        }\n        if ($flag) {\n           \
    \ push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $flag = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        push @res, $i if $flag;\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        my $flag\
    \ = 1;\n        for my $j (split //, $i) {\n            if ($j % 2 == 0) {\n \
    \               $flag = 0;\n                last;\n            }\n        }\n\
    \        if ($flag) {\n            push @res, $i;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422,\
    \ 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 ==\
    \ 0) {\n                $has_even = 1;\n                last;\n            }\n\
    \            $num /= 10;\n        }\n        push @result, $num if !$has_even;\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if ($flag)\
    \ {\n            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @res;\n    foreach my $num (@$arr) {\n     \
    \   my $is_unique = 1;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $is_unique = 0;\n\
    \                last;\n            }\n            $num /= 10;\n        }\n  \
    \      push @res, $num if $is_unique;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $is_unique = 1;\n        for my $digit (split //, $num) {\n            if ($digit\
    \ % 2 == 0) {\n                $is_unique = 0;\n                last;\n      \
    \      }\n        }\n        push @result, $num if $is_unique;\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $flag = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if ($flag) {\n            push @y, $i;\n        }\n    }\n\
    \    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num = int($num / 10);\n        }\n   \
    \     if ($flag) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        my @digits = split(//, $i);\n        foreach my $j (@digits) {\n\
    \            if ($j % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n        if ($flag) {\n            push(@y, $i);\n \
    \       }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        my @digits = split //, $num;\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @result;\n    foreach my $num (@$arr) {\n  \
    \      my $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2\
    \ == 0) {\n                $has_even = 1;\n                last;\n           \
    \ }\n            $num /= 10;\n        }\n        push @result, $num if !$has_even;\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $n (@x) {\n        my $has_even\
    \ = 0;\n        while ($n) {\n            if ($n % 2 == 0) {\n               \
    \ $has_even = 1;\n                last;\n            }\n            $n /= 10;\n\
    \        }\n        push @result, $n if !$has_even;\n    }\n    return sort {$a\
    \ <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        my @digits = split(//, $num);\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        if (!$has_even) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        if\
    \ ($num =~ /[02468]/) {\n            next;\n        }\n        push @res, $num;\n\
    \    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $has_even = 1;\n                last;\n            }\n            $i /=\
    \ 10;\n        }\n        if (!$has_even) {\n            push @result, $i;\n \
    \       }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $is_unique\
    \ = 1;\n        for my $digit (split //, $num) {\n            if ($digit % 2 ==\
    \ 0) {\n                $is_unique = 0;\n                last;\n            }\n\
    \        }\n        push @res, $num if $is_unique;\n    }\n    return sort {$a\
    \ <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $str = \"$num\";\n        my $flag = 1;\n        for (my $i = 0; $i < length($str);\
    \ $i++) {\n            if ($str % 2 == 0) {\n                $flag = 0;\n    \
    \            last;\n            }\n        }\n        if ($flag) {\n         \
    \   push @result, $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        if ($i\
    \ =~ /[02468]/) {\n            next;\n        }\n        push @y, $i;\n    }\n\
    \    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $is_unique\
    \ = 1;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $is_unique = 0;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if ($is_unique)\
    \ {\n            push @result, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num = int($num / 10);\n        }\n   \
    \     if ($flag) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        my @digits = split //, $num;\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $has_even =\
    \ 1;\n                last;\n            }\n        }\n        if (!$has_even)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $flag = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if ($flag) {\n            push @y, $i;\n        }\n    }\n\
    \    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $flag\
    \ = 1;\n        while ($num) {\n            if ($num % 10 % 2 == 0) {\n      \
    \          $flag = 0;\n                last;\n            }\n            $num\
    \ /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return sort\
    \ {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        foreach my $digit (split //, $num) {\n            if\
    \ ($digit % 2 == 0) {\n                $is_unique = 0;\n                last;\n\
    \            }\n        }\n        if ($is_unique) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        if (!$has_even) {\n            push @res,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num /= 10;\n        }\n        if ($flag)\
    \ {\n            push @res, $num;\n        }\n    }\n    return sort {$a <=> $b}\
    \ @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $array = shift;\n    my @result;\n    foreach my $num (@$array) {\n\
    \        my $has_even = 0;\n        while ($num > 0) {\n            my $digit\
    \ = $num % 10;\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = 1;\n                last;\n            }\n            $num = int($num / 10);\n\
    \        }\n        push @result, $num if $has_even == 0;\n    }\n    return \\\
    @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15,\
    \ 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $is_unique\
    \ = 1;\n        my $j = $i;\n        while ($j > 0) {\n            if ($j % 2\
    \ == 0) {\n                $is_unique = 0;\n                last;\n          \
    \  }\n            $j /= 10;\n        }\n        if ($is_unique) {\n          \
    \  push @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $is_unique = 1;\n        for my $digit (split //, $num) {\n            if ($digit\
    \ % 2 == 0) {\n                $is_unique = 0;\n                last;\n      \
    \      }\n        }\n        push @result, $num if $is_unique;\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $flag = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if ($flag) {\n            push @y, $i;\n        }\n    }\n\
    \    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        my $j = $i;\n\
    \        my $flag = 1;\n        while ($j > 0) {\n            my $k = $j % 10;\n\
    \            if ($k % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n            $j = int($j / 10);\n        }\n        if ($flag)\
    \ {\n            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        my @digits = split(//, $num);\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num /= 10;\n        }\n        push\
    \ @result, $num if $has_even == 0;\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my ($arr) = @_;\n    my @result;\n    foreach my $num (@$arr) {\n   \
    \     my $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $has_even = 1;\n\
    \                last;\n            }\n            $num /= 10;\n        }\n  \
    \      push @result, $num if !$has_even;\n    }\n    return \\@result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $i (@arr) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $flag = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if ($flag) {\n            push @result, $i;\n        }\n \
    \   }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $flag = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if ($flag) {\n            push @y, $i;\n        }\n    }\n\
    \    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $flag\
    \ = 1;\n        while ($num) {\n            if ($num % 10 % 2 == 0) {\n      \
    \          $flag = 0;\n                last;\n            }\n            $num\
    \ /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return sort\
    \ {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $is_unique = 1;\n        my @digits = split //, $num;\n        foreach my\
    \ $digit (@digits) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = 0;\n                last;\n            }\n        }\n        if ($is_unique)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @result, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @ret;\n    for my $i (@arr) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $i /= 10;\n        }\n        push @ret, $i if !$has_even;\n\
    \    }\n    return sort {$a <=> $b} @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $i (@arr) {\n        my $flag\
    \ = 1;\n        for my $j (split //, $i) {\n            if ($j % 2 == 0) {\n \
    \               $flag = 0;\n                last;\n            }\n        }\n\
    \        if ($flag) {\n            push @result, $i;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $is_unique = 1;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $is_unique = 0;\n\
    \                last;\n            }\n            $num = int($num / 10);\n  \
    \      }\n        if ($is_unique) {\n            push @result, $num;\n       \
    \ }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @result;\n    foreach my $num (@$arr) {\n  \
    \      my $str = \"$num\";\n        my $flag = 1;\n        for (my $i = 0; $i\
    \ < length($str); $i++) {\n            if ($str =~ /[02468]/) {\n            \
    \    $flag = 0;\n                last;\n            }\n        }\n        if ($flag)\
    \ {\n            push @result, $num;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @result;\n    foreach my $num (@$arr) {\n  \
    \      push @result, $num if $num =~ /^[13579]+$/;\n    }\n    return sort {$a\
    \ <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $has_even = 1;\n\
    \                last;\n            }\n            $num = int($num / 10);\n  \
    \      }\n        if (!$has_even) {\n            push @result, $num;\n       \
    \ }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @result;\n    foreach my $num (@$arr) {\n  \
    \      my $has_even = 0;\n        while ($num > 0) {\n            my $digit =\
    \ $num % 10;\n            if ($digit % 2 == 0) {\n                $has_even =\
    \ 1;\n                last;\n            }\n            $num = int($num / 10);\n\
    \        }\n        push @result, $num if !$has_even;\n    }\n    return \\@result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    for my $num (@arr) {\n        my\
    \ $str = $num;\n        my $has_even = 0;\n        while ($str) {\n          \
    \  my $digit = $str % 10;\n            if ($digit % 2 == 0) {\n              \
    \  $has_even = 1;\n                last;\n            }\n            $str = int($str\
    \ / 10);\n        }\n        push @result, $num if !$has_even;\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        foreach my $digit (split //, $num) {\n            if\
    \ ($digit % 2 == 0) {\n                $is_unique = 0;\n                last;\n\
    \            }\n        }\n        if ($is_unique) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @ret;\n    foreach my $n (@_) {\n        my $has_even = 0;\n     \
    \   while ($n) {\n            if ($n % 2 == 0) {\n                $has_even =\
    \ 1;\n                last;\n            }\n            $n /= 10;\n        }\n\
    \        push @ret, $n if !$has_even;\n    }\n    return sort {$a <=> $b} @ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        my @digits = split(//, $num);\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $flag = 0;\n\
    \                last;\n            }\n        }\n        if ($flag) {\n     \
    \       push @res, $num;\n        }\n    }\n    return sort {$a <=> $b} @res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        if ($i =~\
    \ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @res;\n    foreach my $num (@$arr) {\n     \
    \   my $str = \"$num\";\n        if ($str =~ /[02468]/) {\n            next;\n\
    \        }\n        push @res, $num;\n    }\n    return sort {$a <=> $b} @res;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        while ($i) {\n            if ($i % 2 == 0) {\n               \
    \ $flag = 0;\n                last;\n            }\n            $i /= 10;\n  \
    \      }\n        if ($flag) {\n            push @y, $i;\n        }\n    }\n \
    \   return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num = int($num / 10);\n        }\n   \
    \     if ($flag) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $n (@x) {\n        my $has_even\
    \ = 0;\n        while ($n > 0) {\n            my $digit = $n % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $has_even = 1;\n                last;\n\
    \            }\n            $n = int($n / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @result, $n;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $j\
    \ = $i;\n        my $flag = 1;\n        while ($j > 0) {\n            if ($j %\
    \ 2 == 0) {\n                $flag = 0;\n                last;\n            }\n\
    \            $j = int($j / 10);\n        }\n        if ($flag) {\n           \
    \ push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $x (@x) {\n        my $has_even\
    \ = 0;\n        while ($x > 0) {\n            my $d = $x % 10;\n            if\
    \ ($d % 2 == 0) {\n                $has_even = 1;\n                last;\n   \
    \         }\n            $x = int($x / 10);\n        }\n        if (!$has_even)\
    \ {\n            push @y, $x;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        if ($i\
    \ =~ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        if (!$has_even) {\n            push @result, $num;\n        }\n    }\n\
    \    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        if\
    \ ($num =~ /[02468]/) {\n            next;\n        }\n        else {\n      \
    \      push @result, $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        if ($i =~\
    \ /[02468]/) {\n            next;\n        }\n        push @res, $i;\n    }\n\
    \    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num\
    \ % 10;\n            if ($digit % 2 == 0) {\n                $has_even = 1;\n\
    \                last;\n            }\n            $num = int($num / 10);\n  \
    \      }\n        if (!$has_even) {\n            push @result, $num;\n       \
    \ }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @result;\n    foreach my $num (@$arr) {\n  \
    \      if ($num =~ /[02468]/) {\n            next;\n        }\n        push @result,\
    \ $num;\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        if ($i =~\
    \ /[02468]/) {\n            next;\n        }\n        else {\n            push\
    \ @result, $i;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num) {\n            my $digit = $num % 10;\n   \
    \         if ($digit % 2 == 0) {\n                $flag = 0;\n               \
    \ last;\n            }\n            $num /= 10;\n        }\n        push @res,\
    \ $num if $flag;\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $flag = 1;\n        my @digits = split(//, $num);\n        foreach my $digit\
    \ (@digits) {\n            if ($digit % 2 == 0) {\n                $flag = 0;\n\
    \                last;\n            }\n        }\n        if ($flag) {\n     \
    \       push @result, $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    foreach my $num (@arr) {\n        my\
    \ $flag = 1;\n        while ($num) {\n            my $digit = $num % 10;\n   \
    \         if ($digit % 2 == 0) {\n                $flag = 0;\n               \
    \ last;\n            }\n            $num /= 10;\n        }\n        push @res,\
    \ $num if $flag;\n    }\n    return sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $num (@arr) {\n        my $has_even\
    \ = 0;\n        while ($num) {\n            if ($num % 2 == 0) {\n           \
    \     $has_even = 1;\n                last;\n            }\n            $num /=\
    \ 10;\n        }\n        push @res, $num if !$has_even;\n    }\n    return sort\
    \ {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    for my $i (@x) {\n        push @result,\
    \ $i if $i !~ /[02468]/;\n    }\n    return sort {$a <=> $b} @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $has_even = 0;\n        while ($num) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num /= 10;\n        }\n        if\
    \ (!$has_even) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $is_unique\
    \ = 1;\n        while ($i > 0) {\n            my $digit = $i % 10;\n         \
    \   if ($digit % 2 == 0) {\n                $is_unique = 0;\n                last;\n\
    \            }\n            $i = int($i / 10);\n        }\n        if ($is_unique)\
    \ {\n            push @result, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $has_even = 1;\n        \
    \        last;\n            }\n            $num = int($num / 10);\n        }\n\
    \        push @result, $num if !$has_even;\n    }\n    return sort {$a <=> $b}\
    \ @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15,\
    \ 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @res;\n    for my $i (@arr) {\n        if ($i !~\
    \ /[02468]/) {\n            push @res, $i;\n        }\n    }\n    return sort\
    \ {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        while ($num > 0) {\n            my $digit = $num %\
    \ 10;\n            if ($digit % 2 == 0) {\n                $is_unique = 0;\n \
    \               last;\n            }\n            $num = int($num / 10);\n   \
    \     }\n        if ($is_unique) {\n            push @result, $num;\n        }\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $has_even = 0;\n        while ($num > 0) {\n            if ($num % 2 == 0) {\n\
    \                $has_even = 1;\n                last;\n            }\n      \
    \      $num /= 10;\n        }\n        if (!$has_even) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227840
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $is_odd\
    \ = 1;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $is_odd = 0;\n                last;\n            }\n            $i /= 10;\n\
    \        }\n        if ($is_odd) {\n            push @result, $i;\n        }\n\
    \    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $i (@x) {\n        my $has_even\
    \ = 0;\n        while ($i > 0) {\n            if ($i % 2 == 0) {\n           \
    \     $has_even = 1;\n                last;\n            }\n            $i /=\
    \ 10;\n        }\n        if (!$has_even) {\n            push @result, $i;\n \
    \       }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @result;\n    foreach my $num (@$arr) {\n  \
    \      my $has_even = 0;\n        while ($num > 0) {\n            my $digit =\
    \ $num % 10;\n            if ($digit % 2 == 0) {\n                $has_even =\
    \ 1;\n                last;\n            }\n            $num = int($num / 10);\n\
    \        }\n        if (!$has_even) {\n            push @result, $num;\n     \
    \   }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my $arr = shift;\n    my @res;\n    for my $num (@$arr) {\n        my\
    \ $flag = 1;\n        while ($num) {\n            if ($num % 10 % 2 == 0) {\n\
    \                $flag = 0;\n                last;\n            }\n          \
    \  $num /= 10;\n        }\n        push @res, $num if $flag;\n    }\n    return\
    \ sort {$a <=> $b} @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422,\
    \ 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    foreach my $i (@x) {\n        my $flag\
    \ = 1;\n        my @digits = split(//, $i);\n        foreach my $j (@digits) {\n\
    \            if ($j % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n        }\n        if ($flag) {\n            push @y, $i;\n  \
    \      }\n    }\n    return sort {$a <=> $b} @y;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @arr = @_;\n    my @result;\n    foreach my $num (@arr) {\n      \
    \  my $flag = 1;\n        while ($num > 0) {\n            my $digit = $num % 10;\n\
    \            if ($digit % 2 == 0) {\n                $flag = 0;\n            \
    \    last;\n            }\n            $num = int($num / 10);\n        }\n   \
    \     if ($flag) {\n            push @result, $num;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235703
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @result;\n    foreach my $num (@x) {\n        my\
    \ $is_unique = 1;\n        foreach my $digit (split //, $num) {\n            if\
    \ ($digit % 2 == 0) {\n                $is_unique = 0;\n                last;\n\
    \            }\n        }\n        if ($is_unique) {\n            push @result,\
    \ $num;\n        }\n    }\n    return sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15,\
    \ 33, 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n \
    \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    for my $i (@x) {\n        my $j = $i;\n\
    \        my $flag = 1;\n        while ($j > 0) {\n            my $k = $j % 10;\n\
    \            if ($k % 2 == 0) {\n                $flag = 0;\n                last;\n\
    \            }\n            $j = int($j / 10);\n        }\n        if ($flag)\
    \ {\n            push @y, $i;\n        }\n    }\n    return sort {$a <=> $b} @y;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_digits;\n\
    \        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1, 15, 33])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([152,\
    \ 323, 1422, 10]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([12345, 2033, 111, 151]),[111, 151]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([135,\
    \ 103, 31]),[31, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 1
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @array = @_;\n    my @result = ();\n    foreach my $element (@array)\
    \ {\n        if ($element =~ /[02468]/) {\n            next;\n        }\n    \
    \    else {\n            push @result, $element;\n        }\n    }\n    return\
    \ sort {$a <=> $b} @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33,\
    \ 1422, 1]),[1, 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235704
- exit_code: 255
  program: "# Given an array of positive integers x. return a sorted array of all\
    \ \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted\
    \ in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n\
    # [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits\
    \ {\n    my @x = @_;\n    my @y = ();\n    my $i = 0;\n    my $j = 0;\n    my\
    \ $k = 0;\n    my $flag = 0;\n    my $temp = 0;\n    my $len = 0;\n    my $len2\
    \ = 0;\n    my $len3 = 0;\n    my $len4 = 0;\n    my $len5 = 0;\n    my $len6\
    \ = 0;\n    my $len7 = 0;\n    my $len8 = 0;\n    my $len9 = 0;\n    my $len10\
    \ = 0;\n    my $len11 = 0;\n    my $len12 = 0;\n    my $len13 = 0;\n    my $len14\
    \ = 0;\n    my $len15 = 0;\n    my $len16 = 0;\n    my $len17 = 0;\n    my $len18\
    \ = 0;\n    my $len19 = 0;\n    my $len20 = 0;\n    my $len21 = 0;\n    my $len22\
    \ = 0;\n    my $len23 = 0;\n    my $len24 = 0;\n    my $len25 = 0;\n    my $len26\
    \ = 0;\n    my $len27 = 0;\n    my $len28 = 0;\n    my $len29 = 0;\n    my $len30\
    \ = 0;\n    my $len31 = 0;\n    my $len32 = 0;\n    my $len33 = 0;\n    my $len34\
    \ = 0;\n    my $len35 = 0;\n    my $len36 = 0;\n    my $len37 = 0;\n    my $len38\
    \ = 0;\n    my $len39 = 0;\n    my $len40 = 0;\n    my $len41 = 0;\n    my $len42\
    \ = 0;\n    my $len43 = 0;\n    my $len44 = 0;\n    my $len45 = 0;\n    my $len46\
    \ = 0;\n    my $len47 = 0;\n    my $len48 = 0;\n    my $len49 = 0;\n    my $len50\
    \ = 0;\n    my $len51 = 0\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&unique_digits;\n        if(eq_deeply($candidate->([15, 33, 1422, 1]),[1,\
    \ 15, 33])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([152, 323, 1422, 10]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12345,\
    \ 2033, 111, 151]),[111, 151])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([135, 103, 31]),[31, 135]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '"use" not allowed in expression at /tmp/tmphupoe9ct.pl line 68, at end
    of line

    syntax error at /tmp/tmphupoe9ct.pl line 68, near "use Test::Deep"

    Missing right curly or square bracket at /tmp/tmphupoe9ct.pl line 91, at end of
    line

    syntax error at /tmp/tmphupoe9ct.pl line 91, at EOF

    Execution of /tmp/tmphupoe9ct.pl aborted due to compilation errors.

    '
  stdout: ''
  timestamp: 1660235704
