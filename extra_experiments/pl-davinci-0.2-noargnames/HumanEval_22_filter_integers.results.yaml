language: pl
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return [grep { Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_ } @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227818
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { /^\\d+$/\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_int($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @result = grep {\n        ref $_ eq ''\
    \ && $_ =~ /^\\d+$/\n    } @_;\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_int($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = ();\n    for\
    \ my $elem (@arr) {\n        if (is_integer($elem)) {\n            push @res,\
    \ $elem;\n        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp5sw0ahup.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_int($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    foreach\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @result,\
    \ $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpaboho9b3.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        ref $_ eq \"\" and $_ =~ /^\\d+$/\n    } @array;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $elem (@array) {\n        if (is_integer($elem)) {\n           \
    \ push @result, $elem;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpqr2h8y61.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        Scalar::Util::looks_like_number($_) && int($_) == $_\n    } @array;\n\
    \    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $value = $_;\n        not ref $value and $value =~ /^\\d+$/;\n   \
    \ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { Scalar::Util::looks_like_number($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep { is_integer($_)\
    \ } @array;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp23id78_g.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array_ref) = @_;\n    return [ grep {\
    \ is_integer($_) } @{$array_ref} ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmphmcy4us2.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = grep\
    \ {\n        ref($_) eq \"\" && $_ =~ /^\\d+$/\n    } @$array;\n    return \\\
    @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $value = $_;\n        not ref $value and $value =~ /^\\d+$/;\n   \
    \ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        ref $_ eq '' && $_ =~ /^\\d+$/\n    } @array;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $value = $_;\n        if (ref $value) {\n            return 0;\n \
    \       }\n        if ($value =~ /^\\d+$/) {\n            return 1;\n        }\n\
    \        return 0;\n    } @array;\n    return @integers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { is_integer($_)\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp0_9h4lhs.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    return grep {\n       \
    \ ref $_ eq '' && $_ =~ /^\\d+$/\n    } @arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  for my $element (@array) {\n        if (is_integer($element)) {\n         \
    \   push @result, $element;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpst7m981l.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return [grep { is_int($_)\
    \ } @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_int called at /tmp/tmpqurwwp_7.pl line 8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ int($_) == $_ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { /^\\d+$/\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  for my $element (@array) {\n        if (is_integer($element)) {\n         \
    \   push @result, $element;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpst7m981l.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @values = @_;\n    return grep { is_integer($_)\
    \ } @values;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpka5_neju.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @integers = grep\
    \ { is_integer($_) } @$array;\n    return \\@integers;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp6or0sob_.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    for\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @result,\
    \ $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp_g0uhzn9.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  for my $item (@array) {\n        if (is_integer($item)) {\n            push\
    \ @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp4720kqbj.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @list = @_;\n    my @result = ();\n   \
    \ foreach my $item (@list) {\n        if (is_integer($item)) {\n            push\
    \ @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpooxfwd60.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    for\
    \ my $elem (@arr) {\n        if (is_integer($elem)) {\n            push @result,\
    \ $elem;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp_phx5jqo.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        push @result, $item if (is_integer($item));\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp8q_viepa.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    return grep { is_integer($_)\
    \ } @arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp9hw2n4go.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $value = $_;\n        ref $value eq '' && $value =~ /^\\d+$/;\n  \
    \  } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { is_integer($_)\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp0_9h4lhs.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = ();\n    foreach\
    \ my $el (@arr) {\n        if (is_integer($el)) {\n            push @res, $el;\n\
    \        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp1evit3hv.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep {\n     \
    \   ref $_ eq '' && $_ =~ /^\\d+$/\n    } @array;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ Scalar::Util::looks_like_number($_) && int($_) == $_ } @array;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  for my $element (@array) {\n        if (is_integer($element)) {\n         \
    \   push @result, $element;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpst7m981l.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    for\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @result,\
    \ $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp_g0uhzn9.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    return grep { is_integer($_)\
    \ } @arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp9hw2n4go.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $element (@array) {\n        if (is_integer($element)) {\n     \
    \       push @result, $element;\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpf37i8j31.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep {\n     \
    \   Scalar::Util::looks_like_number($_) && int($_) == $_\n    } @array;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = ();\n    foreach\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @res,\
    \ $item;\n        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp2dxgh2a6.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @result = grep { $_ =~ /^\\d+$/ } @_;\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    my @result;\n    foreach\
    \ my $item (@$array) {\n        push @result, $item if is_integer($item);\n  \
    \  }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpxn8sax5t.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    return grep { is_integer($_)\
    \ } @arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp9hw2n4go.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  for my $value (@array) {\n        if (is_integer($value)) {\n            push\
    \ @result, $value;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpaooa3xf4.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    return grep { is_integer($_)\
    \ } @arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp9hw2n4go.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        if (is_integer($item)) {\n        \
    \    push @result, $item;\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp8a4pcuro.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @input = @_;\n    my @output = ();\n  \
    \  for my $item (@input) {\n        if (is_integer($item)) {\n            push\
    \ @output, $item;\n        }\n    }\n    return @output;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp7hz6hruu.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_int($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_int($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @list = @_;\n    return grep { is_integer($_)\
    \ } @list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpj0axj9jk.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  for my $element (@array) {\n        if (is_integer($element)) {\n         \
    \   push @result, $element;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpst7m981l.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_integer($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { Scalar::Util::looks_like_number($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    for\
    \ my $el (@arr) {\n        if (is_integer($el)) {\n            push @result, $el;\n\
    \        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp_emh_6bu.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = ();\n\
    \    foreach my $item (@array) {\n        if (is_integer($item)) {\n         \
    \   push @integers, $item;\n        }\n    }\n    return @integers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpnndpcagr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = ();\n    foreach\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @res,\
    \ $item;\n        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp2dxgh2a6.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = ();\n    foreach\
    \ my $el (@arr) {\n        if (is_integer($el)) {\n            push @res, $el;\n\
    \        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp1evit3hv.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $value = $_;\n        if (ref $value) {\n            return 0;\n \
    \       }\n        return $value =~ /^\\d+$/;\n    } @array;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($arr) = @_;\n    my @result = ();\n  \
    \  for my $elem (@$arr) {\n        push @result, $elem if is_integer($elem);\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpz4py7kep.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { is_integer($_)\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp0_9h4lhs.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { is_integer($_)\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp0_9h4lhs.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return [grep { is_int($_)\
    \ } @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_int called at /tmp/tmpqurwwp_7.pl line 8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return grep { is_integer($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @list = @_;\n    my @filtered_list = grep\
    \ { is_integer($_) } @list;\n    return @filtered_list;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbh__9pz.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        push @result, $item if (is_integer($item));\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp8q_viepa.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [grep {Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_} @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @list = @_;\n    my @integers = grep {is_integer($_)}\
    \ @list;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmprrdn5pf4.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { $_ =~ /^\\\
    d+$/ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = grep\
    \ {\n        Scalar::Util::looks_like_number($_) && int($_) == $_\n    } @$array;\n\
    \    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @filtered_array =\
    \ ();\n    foreach my $element (@array) {\n        if (is_integer($element)) {\n\
    \            push(@filtered_array, $element);\n        }\n    }\n    return @filtered_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpg0dcrxv5.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $item = $_;\n        ref $item eq \"\" and $item =~ /^\\d+$/;\n  \
    \  } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_int($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_integer($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @result = grep { $_ =~ /^\\d+$/ } @_;\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $element (@array) {\n        if (is_integer($element)) {\n     \
    \       push @result, $element;\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpf37i8j31.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $arr = shift;\n    my @arr_int = grep {\
    \ is_integer($_) } @$arr;\n    return \\@arr_int;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpti4o56v7.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @result = grep {\n        my $value = $_;\n\
    \        my $type = ref $value;\n        not $type and $value =~ /^\\d+$/\n  \
    \  } @_;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ $_ =~ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {/^\\\
    d+$/} @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    return grep {\n       \
    \ my $val = $_;\n        not ref $val and $val =~ /^-?\\d+$/;\n    } @arr;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @list = @_;\n    my @integers = grep {\n\
    \        ref $_ eq '' && $_ =~ /^\\d+$/\n    } @list;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    return grep {\n       \
    \ my $val = $_;\n        ref $val eq '' && $val =~ /^-?\\d+$/;\n    } @arr;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        ref $_ eq '' and $_ =~ /^-?\\d+$/\n    } @array;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep { is_integer($_)\
    \ } @array;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp23id78_g.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $element (@array) {\n        if (is_integer($element)) {\n     \
    \       push @result, $element;\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpf37i8j31.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  for my $element (@array) {\n        if (is_integer($element)) {\n         \
    \   push @result, $element;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpst7m981l.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @integers = grep\
    \ {\n        ref($_) eq '' && $_ =~ /^\\d+$/\n    } @$array;\n    return \\@integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep {\n\
    \        Scalar::Util::looks_like_number($_) && int($_) == $_\n    } @array;\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep {\n\
    \        my $value = $_;\n        not ref $value and $value =~ /^\\d+$/\n    }\
    \ @array;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep { is_integer($_)\
    \ } @array;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp23id78_g.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { $_ =~ /^\\\
    d+$/ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        if (is_integer($item)) {\n        \
    \    push @result, $item;\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp8a4pcuro.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @result = grep {\n        Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_\n    } @_;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { /^\\d+$/\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = ();\n\
    \    foreach my $item (@array) {\n        if (is_integer($item)) {\n         \
    \   push @integers, $item;\n        }\n    }\n    return @integers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpnndpcagr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @new_array = ();\n\
    \    foreach my $item (@array) {\n        if (is_integer($item)) {\n         \
    \   push @new_array, $item;\n        }\n    }\n    return @new_array;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpdsocmsyp.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $val = $_;\n        not ref $val and $val =~ /^[+-]?\\d+$/;\n    }\
    \ @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { is_integer($_)\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp0_9h4lhs.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        push @result, $item if is_integer($item);\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpw5rw6aut.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @list = @_;\n    my @integers;\n    for\
    \ my $item (@list) {\n        if (is_integer($item)) {\n            push @integers,\
    \ $item;\n        }\n    }\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp6f5o7c9c.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_integer($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep {\n     \
    \   ref($_) eq '' && $_ =~ /^\\d+$/\n    } @array;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @result = grep {\n        ref $_ eq ''\
    \ && $_ =~ /^\\d+$/;\n    } @_;\n    return @result;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { Scalar::Util::looks_like_number($_)\
    \ && int($_) == $_ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @ret = ();\n    for\
    \ my $elem (@arr) {\n        if (is_integer($elem)) {\n            push @ret,\
    \ $elem;\n        }\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpeoyiul8m.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    foreach\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @result,\
    \ $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpaboho9b3.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @result = grep { $_ =~ /^\\d+$/ } @_;\n\
    \    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return grep { is_integer($_)\
    \ } @$array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { $_ =~ /^\\\
    d+$/ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @filtered_array =\
    \ ();\n    foreach my $item (@array) {\n        if (is_integer($item)) {\n   \
    \         push @filtered_array, $item;\n        }\n    }\n    return @filtered_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmptc496hp_.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        push @result, $item if is_integer($item);\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpw5rw6aut.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { is_integer($_)\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp0_9h4lhs.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @values = @_;\n    return grep { is_integer($_)\
    \ } @values;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpka5_neju.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {/^\\\
    d+$/} @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        my $value = $_;\n        not ref $value and $value =~ /^-?\\d+$/;\n \
    \   } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep { $_\
    \ =~ /^\\d+$/ } @array;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        ref $_ eq '' && $_ =~ /^\\d+$/\n    } @array;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = ();\n    foreach\
    \ my $el (@arr) {\n        if (is_integer($el)) {\n            push @res, $el;\n\
    \        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp1evit3hv.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep {\n\
    \        my $value = $_;\n        ref $value eq '' && $value =~ /^\\d+$/;\n  \
    \  } @array;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @integers = grep\
    \ {\n        Scalar::Util::looks_like_number($_) && int($_) == $_\n    } @$array;\n\
    \    return \\@integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array_ref) = @_;\n    my @result = grep\
    \ { is_integer($_) } @$array_ref;\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpl2dnkzir.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {/^\\\
    d+$/} @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $element (@array) {\n        if (is_integer($element)) {\n     \
    \       push @result, $element;\n        }\n    }\n    return @result;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpf37i8j31.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\n\
    \        ref $_ eq '' && $_ =~ /^-?\\d+$/\n    } @array;\n    return @integers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235360
- exit_code: 0
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @integers = grep\
    \ { $_ =~ /^[0-9]+$/ } @$array;\n    return \\@integers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @filtered_array =\
    \ ();\n    foreach my $item (@array) {\n        if (is_integer($item)) {\n   \
    \         push @filtered_array, $item;\n        }\n    }\n    return @filtered_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmptc496hp_.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    return grep { is_integer($_)\
    \ } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp0_9h4lhs.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @filtered_array =\
    \ ();\n    foreach my $item (@array) {\n        if (is_integer($item)) {\n   \
    \         push @filtered_array, $item;\n        }\n    }\n    return @filtered_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmptc496hp_.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @filtered = grep {\
    \ is_integer($_) } @array;\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpmcmio6wv.pl line
    8.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = grep {\n    \
    \    my $val = $_;\n        ref $val ? 0 : $val =~ /^\\d+$/;\n    } @arr;\n  \
    \  return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235361
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    return [ grep { is_integer($_)\
    \ } @$array ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpiem1ed5u.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @res = ();\n    foreach\
    \ my $el (@arr) {\n        if (is_integer($el)) {\n            push @res, $el;\n\
    \        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp1evit3hv.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    for\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @result,\
    \ $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp_g0uhzn9.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @integers = grep {\
    \ /^\\d+$/ } @array;\n    return @integers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @filtered = grep\
    \ { is_integer($_) } @$array;\n    return \\@filtered;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp8iqdqiho.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @arr = @_;\n    my @result = ();\n    foreach\
    \ my $item (@arr) {\n        if (is_integer($item)) {\n            push @result,\
    \ $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpaboho9b3.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = ();\n  \
    \  foreach my $item (@array) {\n        if (is_integer($item)) {\n           \
    \ push @result, $item;\n        }\n    }\n    return @result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpwbk6y5lr.pl line
    10.

    '
  stdout: ''
  timestamp: 1660227818
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @filtered_array =\
    \ ();\n    foreach my $item (@array) {\n        if (is_integer($item)) {\n   \
    \         push @filtered_array, $item;\n        }\n    }\n    return @filtered_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, {}, [], 23.2,\
    \ 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"a\", \"b\"]),[3,\
    \ 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmptc496hp_.pl line
    10.

    '
  stdout: ''
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my ($array) = @_;\n    return [grep { is_integer($_)\
    \ } @$array];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmpgdl1vjsj.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 1
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my @array = @_;\n    my @result = grep {\n\
    \        my $value = $_;\n        not ref $value and $value =~ /^\\d+$/;\n   \
    \ } @array;\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235361
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        push @result, $item if (is_integer($item));\n\
    \    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp8q_viepa.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
- exit_code: 255
  program: "# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1,\
    \ 2, 3]\nsub filter_integers {\n    my $array = shift;\n    my @result = ();\n\
    \    foreach my $item (@$array) {\n        if (is_integer($item)) {\n        \
    \    push @result, $item;\n        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&filter_integers;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9])) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->([3, \"c\", 3, 3, \"\
    a\", \"b\"]),[3, 3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_integer called at /tmp/tmp8a4pcuro.pl line
    10.

    '
  stdout: ok!
  timestamp: 1660235360
