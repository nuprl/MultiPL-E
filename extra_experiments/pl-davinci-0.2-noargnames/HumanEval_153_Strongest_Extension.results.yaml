language: pl
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n\
    \        my $sm = 0;\n        foreach my $letter (split //, $extension) {\n  \
    \          if ($letter =~ /[A-Z]/) {\n                $cap++;\n            }\n\
    \            elsif ($letter =~ /[a-z]/) {\n                $sm++;\n          \
    \  }\n        }\n        my $strength = $cap - $sm;\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $cur_strength\
    \ = $cap - $sm;\n        if ($cur_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $cur_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n\
    \        my $sm = 0;\n        foreach my $letter (split //, $extension) {\n  \
    \          if ($letter =~ /[A-Z]/) {\n                $cap++;\n            } else\
    \ {\n                $sm++;\n            }\n        }\n        my $strength =\
    \ $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    for my $extension (@$extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my @extensions = @$extensions;\n    my\
    \ $strongest_extension = $extensions[0];\n    my $strongest_extension_strength\
    \ = 0;\n    foreach my $extension (@extensions) {\n        my $extension_strength\
    \ = 0;\n        my @extension_chars = split //, $extension;\n        foreach my\
    \ $char (@extension_chars) {\n            if ($char =~ /[A-Z]/) {\n          \
    \      $extension_strength++;\n            }\n            elsif ($char =~ /[a-z]/)\
    \ {\n                $extension_strength--;\n            }\n        }\n      \
    \  if ($extension_strength > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n\
    \        my $sm = 0;\n        foreach my $char (split //, $extension) {\n    \
    \        if ($char =~ /[A-Z]/) {\n                $cap++;\n            } else\
    \ {\n                $sm++;\n            }\n        }\n        my $strength =\
    \ $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $strength\
    \ = $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = ($extension\
    \ =~ tr/A-Z//);\n        my $sm = ($extension =~ tr/a-z//);\n        my $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $curr_strength;\n        }\n    }\n \
    \   return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $strength\
    \ = $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = '';\n    foreach my $extension (@$extensions) {\n        my $cap = () = $extension\
    \ =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n        my $strength\
    \ = $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = () =\
    \ $extension =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n   \
    \     my $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = 0;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        my @chars = split(//, $extension);\n        foreach my $char (@chars)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n     \
    \       }\n            elsif ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_extension = $extension;\n\
    \        }\n    }\n    return $class . \".\" . $max_strength_extension;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        my @extension_chars = split\
    \ //, $extension;\n        foreach my $char (@extension_chars) {\n           \
    \ if ($char =~ /[A-Z]/) {\n                $extension_strength++;\n          \
    \  }\n            elsif ($char =~ /[a-z]/) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    for my $extension (@$extensions) {\n        my\
    \ $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n     \
    \   if ($strength > $strongest_strength) {\n            $strongest_strength =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        my @chars = split //, $extension;\n        foreach my $char (@chars)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n     \
    \       }\n            elsif ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strength = 0;\n    my $strongest =\
    \ \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n  \
    \      my $sm = 0;\n        foreach my $letter (split //, $extension) {\n    \
    \        if ($letter =~ /[A-Z]/) {\n                $cap++;\n            }\n \
    \           else {\n                $sm++;\n            }\n        }\n       \
    \ my $temp = $cap - $sm;\n        if ($temp > $strength) {\n            $strength\
    \ = $temp;\n            $strongest = $extension;\n        }\n    }\n    return\
    \ \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $st = $cap\
    \ - $sm;\n        if ($st > $strength) {\n            $strongest = $extension;\n\
    \            $strength = $st;\n        }\n    }\n    return \"$class.$strongest\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    for my $extension (@$extensions) {\n        my $strength = 0;\n\
    \        for my $letter (split //, $extension) {\n            if ($letter =~ /[A-Z]/)\
    \ {\n                $strength++;\n            } elsif ($letter =~ /[a-z]/) {\n\
    \                $strength--;\n            }\n        }\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = ($extension\
    \ =~ tr/A-Z//) - ($extension =~ tr/a-z//);\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = '';\n    for my $extension (@extensions) {\n        my $strength = 0;\n  \
    \      for my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            }\n            elsif ($char =~\
    \ /[a-z]/) {\n                $strength--;\n            }\n        }\n       \
    \ if ($strength > $max_strength) {\n            $max_strength = $strength;\n \
    \           $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $new_strength\
    \ = $cap - $sm;\n        if ($new_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $new_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n    \
    \    if ($strength > $strongest_strength) {\n            $strongest_strength =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $letter (split //, $extension) {\n            if ($letter\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($letter =~ /[a-z]/) {\n                $strength--;\n            }\n      \
    \  }\n        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_strength_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$max_strength_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $st = $cap\
    \ - $sm;\n        if ($st > $strength) {\n            $strongest = $extension;\n\
    \            $strength = $st;\n        }\n    }\n    return \"$class.$strongest\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        my @chars = split(\"\", $extension);\n\
    \        foreach my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n  \
    \              $extension_strength++;\n            }\n            elsif ($char\
    \ =~ /[a-z]/) {\n                $extension_strength--;\n            }\n     \
    \   }\n        if ($extension_strength > $strongest_extension_strength) {\n  \
    \          $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        my @chars = split //, $extension;\n\
    \        foreach my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n  \
    \              $extension_strength++;\n            }\n            elsif ($char\
    \ =~ /[a-z]/) {\n                $extension_strength--;\n            }\n     \
    \   }\n        if ($extension_strength > $strongest_extension_strength) {\n  \
    \          $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            else\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n \
    \       if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        my @chars = split(//, $extension);\n        foreach\
    \ my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n\
    \            }\n            elsif ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strength = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n\
    \        my $sm = 0;\n        foreach my $letter (split //, $extension) {\n  \
    \          if ($letter =~ /[A-Z]/) {\n                $cap++;\n            }\n\
    \            elsif ($letter =~ /[a-z]/) {\n                $sm++;\n          \
    \  }\n        }\n        my $extension_strength = $cap - $sm;\n        if ($extension_strength\
    \ > $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n \
    \       if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $temp_strength\
    \ = $cap - $sm;\n        if ($temp_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $temp_strength;\n        }\n    }\n \
    \   return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\
    \ elsif ($char =~ /[a-z]/) {\n                $strength--;\n            }\n  \
    \      }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\
    \ elsif ($char =~ /[a-z]/) {\n                $strength--;\n            }\n  \
    \      }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\
    \ elsif ($char =~ /[a-z]/) {\n                $strength--;\n            }\n  \
    \      }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        my @extension_chars = split\
    \ //, $extension;\n        foreach my $char (@extension_chars) {\n           \
    \ if ($char =~ /[A-Z]/) {\n                $extension_strength++;\n          \
    \  }\n            elsif ($char =~ /[a-z]/) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        my @chars = split(\"\", $extension);\n        foreach my $char (@chars)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n     \
    \       } elsif ($char =~ /[a-z]/) {\n                $strength--;\n         \
    \   }\n        }\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        for (my $i = 0; $i < length($extension); $i++)\
    \ {\n            my $char = substr($extension, $i, 1);\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $strongest_strength) {\n            $strongest_strength = $strength;\n   \
    \         $strongest_extension = $extension;\n        }\n    }\n    return \"\
    $class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my $class = shift;\n    my @extensions = @_;\n    my $strongest_extension =\
    \ \"\";\n    my $strongest_strength = -1;\n    foreach my $extension (@extensions)\
    \ {\n        my $strength = 0;\n        foreach my $letter (split //, $extension)\
    \ {\n            if ($letter =~ /[A-Z]/) {\n                $strength++;\n   \
    \         }\n            elsif ($letter =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $new_strength\
    \ = $cap - $sm;\n        if ($new_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $new_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strength = 0;\n    foreach my $extension (@$extensions) {\n        my $cap\
    \ = $extension =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n      \
    \  my $current_strength = $cap - $sm;\n        if ($current_strength > $strength)\
    \ {\n            $strength = $current_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        for (my $i = 0; $i < length($extension); $i++) {\n            if\
    \ (substr($extension, $i, 1) =~ /[A-Z]/) {\n                $strength++;\n   \
    \         }\n            else {\n                $strength--;\n            }\n\
    \        }\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $cur_strength\
    \ = $cap - $sm;\n        if ($cur_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $cur_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $st = $cap\
    \ - $sm;\n        if ($st > $strength) {\n            $strongest = $extension;\n\
    \            $strength = $st;\n        }\n    }\n    return \"$class.$strongest\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = 0;\n    my $max_index\
    \ = 0;\n    for (my $i = 0; $i < @extensions; $i++) {\n        my $strength =\
    \ 0;\n        my $extension = $extensions[$i];\n        for (my $j = 0; $j < length($extension);\
    \ $j++) {\n            my $char = substr($extension, $j, 1);\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            else\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_index\
    \ = $i;\n        }\n    }\n    return \"$class.$extensions[$max_index]\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    for my $extension (@$extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    for my $extension (@$extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    for my $extension (@$extensions) {\n        my $strength = $extension\
    \ =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $curr_strength;\n        }\n    }\n \
    \   return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $letter (split //, $extension) {\n \
    \           if ($letter =~ /[A-Z]/) {\n                $strength++;\n        \
    \    }\n            elsif ($letter =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        foreach my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            } elsif ($char =~ /[a-z]/) {\n\
    \                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strength = 0;\n    foreach my $extension (@$extensions) {\n        my $cap\
    \ = () = $extension =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n\
    \        my $new_strength = $cap - $sm;\n        if ($new_strength > $strength)\
    \ {\n            $strongest_extension = $extension;\n            $strength = $new_strength;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = $extension\
    \ =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@extensions)\
    \ {\n        my $extension_strength = 0;\n        my @chars = split //, $extension;\n\
    \        foreach my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n  \
    \              $extension_strength++;\n            }\n            elsif ($char\
    \ =~ /[a-z]/) {\n                $extension_strength--;\n            }\n     \
    \   }\n        if ($extension_strength > $strongest_extension_strength) {\n  \
    \          $strongest_extension = $extension;\n            $strongest_extension_strength\
    \ = $extension_strength;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max = 0;\n    my $max_ext = \"\";\n\
    \    foreach my $ext (@$extensions) {\n        my $strength = $ext =~ tr/A-Z//\
    \ - $ext =~ tr/a-z//;\n        if ($strength > $max) {\n            $max = $strength;\n\
    \            $max_ext = $ext;\n        }\n    }\n    return \"$class.$max_ext\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class . \".\" . $strongest_extension;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = ($extension\
    \ =~ tr/A-Z//);\n        my $sm = ($extension =~ tr/a-z//);\n        my $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $curr_strength;\n        }\n    }\n \
    \   return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strength = -1;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = ($extension\
    \ =~ tr/A-Z//);\n        my $sm = ($extension =~ tr/a-z//);\n        my $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strength\
    \ = $curr_strength;\n            $strongest_extension = $extension;\n        }\n\
    \    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $letter (split //, $extension) {\n            if ($letter\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($letter =~\
    \ /[a-z]/) {\n                $strength--;\n            }\n        }\n       \
    \ if ($strength > $strongest) {\n            $strongest = $strength;\n       \
    \     $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_strength_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_strength_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strongest_strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $strength = $extension\
    \ =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength > $strongest_strength)\
    \ {\n            $strongest = $extension;\n            $strongest_strength = $strength;\n\
    \        }\n    }\n    return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = () =\
    \ $extension =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n   \
    \     my $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class . \".\" . $strongest_extension;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = () = $extension\
    \ =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n        my $st\
    \ = $cap - $sm;\n        if ($st > $strength) {\n            $strongest = $extension;\n\
    \            $strength = $st;\n        }\n    }\n    return \"$class.$strongest\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@extensions) {\n        my $cap = () = $extension\
    \ =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n        my $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $curr_strength;\n        }\n    }\n \
    \   return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n \
    \       if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        foreach my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            }\n            else {\n       \
    \         $strength--;\n            }\n        }\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        foreach my $char (split //, $extension) {\n    \
    \        if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $letter (split //, $extension) {\n            if ($letter\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($letter =~\
    \ /[a-z]/) {\n                $strength--;\n            }\n        }\n       \
    \ if ($strength > $max_strength) {\n            $max_strength = $strength;\n \
    \           $max_strength_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$max_strength_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = $extensions[0];\n\
    \    my $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n\
    \        my $strength = $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n\
    \        my $sm = 0;\n        foreach my $letter (split //, $extension) {\n  \
    \          if ($letter =~ /[A-Z]/) {\n                $cap++;\n            }\n\
    \            elsif ($letter =~ /[a-z]/) {\n                $sm++;\n          \
    \  }\n        }\n        my $strength = $cap - $sm;\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $cap = ($extension\
    \ =~ tr/[A-Z]//);\n        my $sm = ($extension =~ tr/[a-z]//);\n        my $strength\
    \ = $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return $class . \".\" . $strongest_extension;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    for my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $strength\
    \ = $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = $extensions->[0];\n   \
    \ my $strength = 0;\n    foreach my $extension (@$extensions) {\n        my $cap\
    \ = ($extension =~ tr/A-Z//);\n        my $sm = ($extension =~ tr/a-z//);\n  \
    \      my $new_strength = $cap - $sm;\n        if ($new_strength > $strength)\
    \ {\n            $strongest = $extension;\n            $strength = $new_strength;\n\
    \        }\n    }\n    return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n     \
    \   if ($strength > $strongest_strength) {\n            $strongest_strength =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@extensions)\
    \ {\n        my $extension_strength = 0;\n        my @extension_chars = split\
    \ //, $extension;\n        foreach my $char (@extension_chars) {\n           \
    \ if ($char =~ /[A-Z]/) {\n                $extension_strength++;\n          \
    \  }\n            elsif ($char =~ /[a-z]/) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        foreach my $char (split //, $extension) {\n    \
    \        if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class . \".\" . $strongest_extension;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = $extension\
    \ =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = () = $extension\
    \ =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n        my $cur_strength\
    \ = $cap - $sm;\n        if ($cur_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $cur_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            else\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $letter (split //, $extension) {\n \
    \           if ($letter =~ /[A-Z]/) {\n                $strength++;\n        \
    \    }\n            else {\n                $strength--;\n            }\n    \
    \    }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        foreach my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            }\n            elsif ($char =~\
    \ /[a-z]/) {\n                $strength--;\n            }\n        }\n       \
    \ if ($strength > $max_strength) {\n            $max_strength = $strength;\n \
    \           $max_strength_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$max_strength_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = () =\
    \ $extension =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n   \
    \     my $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\
    \ elsif ($char =~ /[a-z]/) {\n                $strength--;\n            }\n  \
    \      }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return $class . \".\" . $strongest_extension;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        foreach my $char (split //,\
    \ $extension) {\n            if ($char =~ /[A-Z]/) {\n                $extension_strength++;\n\
    \            }\n            elsif ($char =~ /[a-z]/) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        foreach my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            }\n            elsif ($char =~\
    \ /[a-z]/) {\n                $strength--;\n            }\n        }\n       \
    \ if ($strength > $max_strength) {\n            $max_strength = $strength;\n \
    \           $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = 0;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        foreach my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            }\n            elsif ($char =~\
    \ /[a-z]/) {\n                $strength--;\n            }\n        }\n       \
    \ if ($strength > $max_strength) {\n            $max_strength = $strength;\n \
    \           $max_strength_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$max_strength_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        $strength += $extension =~ tr/A-Z//;\n        $strength\
    \ -= $extension =~ tr/a-z//;\n        if ($strength > $strongest_strength) {\n\
    \            $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        my @chars = split //, $extension;\n        foreach my $char (@chars)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n     \
    \       }\n            elsif ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            else\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strength = 0;\n    foreach my $extension (@extensions) {\n        my $cap =\
    \ ($extension =~ tr/A-Z//);\n        my $sm = ($extension =~ tr/a-z//);\n    \
    \    my $new_strength = $cap - $sm;\n        if ($new_strength > $strength) {\n\
    \            $strongest_extension = $extension;\n            $strength = $new_strength;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength += 1;\n         \
    \   }\n            elsif ($char =~ /[a-z]/) {\n                $strength -= 1;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        my @chars = split(\"\", $extension);\n        foreach\
    \ my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n\
    \            }\n            if ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class . \".\" . $strongest_extension;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $strength = 0;\n        my @chars = split //, $extension;\n  \
    \      foreach my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n    \
    \            $strength++;\n            }\n            elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/A-Z//) - ($extension =~ tr/a-z//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = '';\n    foreach my $extension (@$extensions) {\n        my $strength = 0;\n\
    \        foreach my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            }\n            elsif ($char =~\
    \ /[a-z]/) {\n                $strength--;\n            }\n        }\n       \
    \ if ($strength > $strongest) {\n            $strongest = $strength;\n       \
    \     $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = () = $extension\
    \ =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n        my $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $curr_strength;\n        }\n    }\n \
    \   return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n \
    \       if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        $strength += $extension =~ tr/A-Z//;\n        $strength\
    \ -= $extension =~ tr/a-z//;\n        if ($strength > $strongest_strength) {\n\
    \            $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max = 0;\n    my $max_ext = \"\";\n\
    \    foreach my $ext (@$extensions) {\n        my $cap = () = $ext =~ /[A-Z]/g;\n\
    \        my $sm = () = $ext =~ /[a-z]/g;\n        my $strength = $cap - $sm;\n\
    \        if ($strength > $max) {\n            $max = $strength;\n            $max_ext\
    \ = $ext;\n        }\n    }\n    return \"$class.$max_ext\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        foreach my $letter (split //,\
    \ $extension) {\n            if ($letter =~ /[A-Z]/) {\n                $extension_strength++;\n\
    \            }\n            elsif ($letter =~ /[a-z]/) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension = $extension;\n            $strongest_extension_strength\
    \ = $extension_strength;\n        }\n    }\n    return $class . \".\" . $strongest_extension;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        my @chars = split(//, $extension);\n        foreach my $char (@chars)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n     \
    \       }\n            elsif ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $strength\
    \ = $cap - $sm;\n        if ($strength > $strongest) {\n            $strongest\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strongest_strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $strongest_strength)\
    \ {\n            $strongest = $extension;\n            $strongest_strength = $strength;\n\
    \        }\n    }\n    return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max = -1;\n    my $max_extension =\
    \ \"\";\n    foreach my $extension (@$extensions) {\n        my $strength = $extension\
    \ =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength > $max) {\n\
    \            $max = $strength;\n            $max_extension = $extension;\n   \
    \     }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        my @chars = split //, $extension;\n        foreach\
    \ my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n\
    \            }\n            elsif ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_strength_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$max_strength_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        for (my $i = 0; $i < length($extension); $i++) {\n            my\
    \ $char = substr($extension, $i, 1);\n            if ($char =~ /[A-Z]/) {\n  \
    \              $strength++;\n            } elsif ($char =~ /[a-z]/) {\n      \
    \          $strength--;\n            }\n        }\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    for my $extension (@$extensions) {\n        my\
    \ $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n     \
    \   if ($strength > $strongest_strength) {\n            $strongest_strength =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = '.';\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n   \
    \     my $sm = 0;\n        foreach my $letter (split //, $extension) {\n     \
    \       if ($letter =~ /[A-Z]/) {\n                $cap++;\n            } else\
    \ {\n                $sm++;\n            }\n        }\n        my $new_strength\
    \ = $cap - $sm;\n        if ($new_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $new_strength;\n        }\n    }\n  \
    \  return $class . '.' . $strongest;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = 0;\n   \
    \     my $sm = 0;\n        foreach my $char (split //, $extension) {\n       \
    \     if ($char =~ /[A-Z]/) {\n                $cap++;\n            }\n      \
    \      elsif ($char =~ /[a-z]/) {\n                $sm++;\n            }\n   \
    \     }\n        my $new_strength = $cap - $sm;\n        if ($new_strength > $strength)\
    \ {\n            $strongest = $extension;\n            $strength = $new_strength;\n\
    \        }\n    }\n    return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        foreach my $letter (split //,\
    \ $extension) {\n            if ($letter =~ /[A-Z]/) {\n                $extension_strength++;\n\
    \            }\n            elsif ($letter =~ /[a-z]/) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n \
    \       if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\
    \ elsif ($char =~ /[a-z]/) {\n                $strength--;\n            }\n  \
    \      }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        my @chars = split //, $extension;\n        foreach my $char (@chars)\
    \ {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n     \
    \       }\n            elsif ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_strength_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $cap = 0;\n \
    \       my $sm = 0;\n        foreach my $letter (split //, $extension) {\n   \
    \         if ($letter =~ /[A-Z]/) {\n                $cap++;\n            }\n\
    \            elsif ($letter =~ /[a-z]/) {\n                $sm++;\n          \
    \  }\n        }\n        my $strength = $cap - $sm;\n        if ($strength > $strongest)\
    \ {\n            $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $letter (split //, $extension) {\n \
    \           if ($letter =~ /[A-Z]/) {\n                $strength++;\n        \
    \    }\n            elsif ($letter =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n    \
    \    if ($strength > $strongest_strength) {\n            $strongest_strength =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        my @chars = split //, $extension;\n        foreach\
    \ my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n\
    \            }\n            if ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        foreach my $char (split //, $extension) {\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            }\n            else {\n       \
    \         $strength--;\n            }\n        }\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        my @extension_chars = split(//,\
    \ $extension);\n        foreach my $extension_char (@extension_chars) {\n    \
    \        if ($extension_char =~ /[A-Z]/) {\n                $extension_strength++;\n\
    \            }\n            elsif ($extension_char =~ /[a-z]/) {\n           \
    \     $extension_strength--;\n            }\n        }\n        if ($extension_strength\
    \ > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class . \".\" . $strongest_extension;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $ext_strength\
    \ = $cap - $sm;\n        if ($ext_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $ext_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n     \
    \   if ($strength > $strongest_strength) {\n            $strongest_strength =\
    \ $strength;\n            $strongest_extension = $extension;\n        }\n    }\n\
    \    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $letter (split //, $extension) {\n \
    \           if ($letter =~ /[A-Z]/) {\n                $strength++;\n        \
    \    }\n            elsif ($letter =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\
    \ elsif ($char =~ /[a-z]/) {\n                $strength--;\n            }\n  \
    \      }\n        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        $strength += $extension =~ tr/A-Z//;\n        $strength\
    \ -= $extension =~ tr/a-z//;\n        if ($strength > $strongest_strength) {\n\
    \            $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $char (split //, $extension) {\n   \
    \         if ($char =~ /[A-Z]/) {\n                $strength++;\n            }\n\
    \            elsif ($char =~ /[a-z]/) {\n                $strength--;\n      \
    \      }\n        }\n        if ($strength > $strongest_strength) {\n        \
    \    $strongest_strength = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max = 0;\n    my $max_ext = \"\";\n\
    \    foreach my $ext (@$extensions) {\n        my $cap = $ext =~ tr/A-Z//;\n \
    \       my $sm = $ext =~ tr/a-z//;\n        my $strength = $cap - $sm;\n     \
    \   if ($strength > $max) {\n            $max = $strength;\n            $max_ext\
    \ = $ext;\n        }\n    }\n    return \"$class.$max_ext\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 255
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = $extensions->[0];\n\
    \    my $strongest_extension_strength = Strength($strongest_extension);\n    for\
    \ (my $i = 1; $i < scalar @$extensions; $i++) {\n        my $extension = $extensions->[$i];\n\
    \        my $extension_strength = Strength($extension);\n        if ($extension_strength\
    \ > $strongest_extension_strength) {\n            $strongest_extension = $extension;\n\
    \            $strongest_extension_strength = $extension_strength;\n        }\n\
    \    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::Strength called at /tmp/tmpnk_nmjyj.pl line
    20.

    '
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $curr_strength\
    \ = $cap - $sm;\n        if ($curr_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $curr_strength;\n        }\n    }\n \
    \   return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_strength_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$max_strength_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = '';\n    foreach my $extension (@$extensions) {\n        my $strength = ($extension\
    \ =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n        if ($strength > $max_strength)\
    \ {\n            $max_strength = $strength;\n            $max_extension = $extension;\n\
    \        }\n    }\n    return \"$class.$max_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n \
    \       if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_strength_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_strength_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_strength_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            } elsif ($char =~ /[a-z]/)\
    \ {\n                $strength--;\n            }\n        }\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_strength_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_strength_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strength = 0;\n    foreach my $extension (@$extensions) {\n        my $cap\
    \ = ($extension =~ tr/A-Z//);\n        my $sm = ($extension =~ tr/a-z//);\n  \
    \      my $curr_strength = $cap - $sm;\n        if ($curr_strength > $strength)\
    \ {\n            $strongest_extension = $extension;\n            $strength = $curr_strength;\n\
    \        }\n    }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n       \
    \ if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"__YESIMHERE\"\
    , [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"\
    __YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_extension_strength = 0;\n    foreach my $extension (@$extensions)\
    \ {\n        my $extension_strength = 0;\n        foreach my $char (split //,\
    \ $extension) {\n            if ($char =~ /[A-Z]/) {\n                $extension_strength++;\n\
    \            }\n            elsif ($char =~ /[a-z]/) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = 0;\n    my $strongest_extension\
    \ = \"\";\n    foreach my $extension (@extensions) {\n        my $strength = 0;\n\
    \        foreach my $letter (split //, $extension) {\n            if ($letter\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($letter =~ /[a-z]/) {\n                $strength--;\n            }\n      \
    \  }\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@extensions) {\n      \
    \  my $strength = 0;\n        for (my $i = 0; $i < length($extension); $i++) {\n\
    \            my $char = substr($extension, $i, 1);\n            if ($char =~ /[A-Z]/)\
    \ {\n                $strength++;\n            } elsif ($char =~ /[a-z]/) {\n\
    \                $strength--;\n            }\n        }\n        if ($strength\
    \ > $strongest_strength) {\n            $strongest_strength = $strength;\n   \
    \         $strongest_extension = $extension;\n        }\n    }\n    return \"\
    $class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = 0;\n    my $extension =\
    \ \"\";\n    foreach my $ext (@extensions) {\n        my $cap = () = $ext =~ /[A-Z]/g;\n\
    \        my $sm = () = $ext =~ /[a-z]/g;\n        my $strength = $cap - $sm;\n\
    \        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $extension = $ext;\n        }\n    }\n    return \"$class.$extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = ($extension =~ tr/[A-Z]//) - ($extension =~ tr/[a-z]//);\n\
    \        if ($strength > $strongest_strength) {\n            $strongest_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return \"$class.$strongest_extension\";\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@$extensions) {\n        my $cap = $extension\
    \ =~ tr/A-Z//;\n        my $sm = $extension =~ tr/a-z//;\n        my $new_strength\
    \ = $cap - $sm;\n        if ($new_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $new_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        foreach my $letter (split //, $extension) {\n \
    \           if ($letter =~ /[A-Z]/) {\n                $strength++;\n        \
    \    }\n            elsif ($letter =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 0
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = -1;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ 0;\n        foreach my $char (split //, $extension) {\n            if ($char\
    \ =~ /[A-Z]/) {\n                $strength++;\n            }\n            elsif\
    \ ($char =~ /[a-z]/) {\n                $strength--;\n            }\n        }\n\
    \        if ($strength > $max_strength) {\n            $max_strength = $strength;\n\
    \            $max_extension = $extension;\n        }\n    }\n    return \"$class.$max_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227817
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $strongest_extension = \"\";\n    my\
    \ $strongest_strength = 0;\n    foreach my $extension (@$extensions) {\n     \
    \   my $strength = 0;\n        my @chars = split //, $extension;\n        foreach\
    \ my $char (@chars) {\n            if ($char =~ /[A-Z]/) {\n                $strength++;\n\
    \            }\n            if ($char =~ /[a-z]/) {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$strongest_extension\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, $extensions) = @_;\n    my $max_strength = 0;\n    my $max_extension\
    \ = \"\";\n    foreach my $extension (@$extensions) {\n        my $strength =\
    \ $extension =~ tr/[A-Z]// - $extension =~ tr/[a-z]//;\n        if ($strength\
    \ > $max_strength) {\n            $max_strength = $strength;\n            $max_extension\
    \ = $extension;\n        }\n    }\n    return \"$class.$max_extension\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Strongest_Extension;\n\
    \        if(eq_deeply($candidate->(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    ]),\"Watashi.eIGHt8OKe\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"Boku123\", [\"nani\", \"NazeDa\"\
    , \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660235312
- exit_code: 1
  program: "# You will be given the name of a class (a string) and an array of extensions.\n\
    # The extensions are to be used to load additional classes to the class. The\n\
    # strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    # letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n# in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n# You should find the strongest extension and return a string in this \n#\
    \ format: ClassName.StrongestExtensionName.\n# If there are two or more extensions\
    \ with the same strength, you should\n# choose the one that comes first in the\
    \ array.\n# For example, if you are given \"Slices\" as the class and an array\
    \ of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    # return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n  \
    \  my ($class, @extensions) = @_;\n    my $strongest = \"\";\n    my $strength\
    \ = 0;\n    foreach my $extension (@extensions) {\n        my $cap = () = $extension\
    \ =~ /[A-Z]/g;\n        my $sm = () = $extension =~ /[a-z]/g;\n        my $cur_strength\
    \ = $cap - $sm;\n        if ($cur_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $cur_strength;\n        }\n    }\n  \
    \  return \"$class.$strongest\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&Strongest_Extension;\n        if(eq_deeply($candidate->(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\")) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]),\"K.TAR\")) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->(\"__HAHA\", [\"Tab\", \"123\", \"\
    781345\", \"-_-\"]),\"__HAHA.123\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"YameRore\", [\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]),\"finNNalLLly.WoW\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    _\", [\"Bb\", \"91245\"]),\"_.Bb\")) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235312
