name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a hash\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n\
  # >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b\
  \ c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\"\
  \ => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["my $string = shift;\n    my %histogram;\n    my @letters = split(/\\\
    s+/, $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %hash;\n    my\
    \ @array = split(/ /, $string);\n    foreach my $letter (@array) {\n        if\
    \ (exists $hash{$letter}) {\n            $hash{$letter}++;\n        } else {\n\
    \            $hash{$letter} = 1;\n        }\n    }\n    return %hash;\n}", "my\
    \ $str = shift;\n    my %hist;\n    my @letters = split(/\\s+/, $str);\n    foreach\
    \ my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return %hist;\n\
    }", "my $str = shift;\n    my @letters = split(/\\s+/, $str);\n    my %histogram;\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    my $max = max(values %histogram);\n    my @max_letters = grep { $histogram{$_}\
    \ == $max } keys %histogram;\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}", "my $str\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $str);\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my @letters = split(/\\s+/, $string);\n    my %histogram;\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    foreach my\
    \ $c (split(/\\s+/, $str)) {\n        $hist{$c}++;\n    }\n    return \\%hist;\n\
    }", "my $str = shift;\n    my @str = split(/ /, $str);\n    my %histogram;\n \
    \   foreach my $letter (@str) {\n        $histogram{$letter}++;\n    }\n    return\
    \ %histogram;\n}", "my $str = shift;\n    my %hash;\n    my @str = split / /,\
    \ $str;\n    foreach my $i (@str) {\n        $hash{$i}++;\n    }\n    my $max\
    \ = 0;\n    foreach my $i (keys %hash) {\n        if ($hash{$i} > $max) {\n  \
    \          $max = $hash{$i};\n        }\n    }\n    my %result;\n    foreach my\
    \ $i (keys %hash) {\n        if ($hash{$i} == $max) {\n            $result{$i}\
    \ = $max;\n        }\n    }\n    return %result;\n}", "my $str = shift;\n    my\
    \ %hash;\n    my @arr = split(/ /, $str);\n    foreach my $i (@arr) {\n      \
    \  $hash{$i}++;\n    }\n    return %hash;\n}", "my $str = shift;\n    my %hist;\n\
    \    my %max;\n    my $max = 0;\n    foreach my $c (split(/\\s+/, $str)) {\n \
    \       $hist{$c}++;\n        if ($hist{$c} > $max) {\n            $max = $hist{$c};\n\
    \            %max = ($c => $max);\n        } elsif ($hist{$c} == $max) {\n   \
    \         $max{$c} = $max;\n        }\n    }\n    return %max;\n}", "my $str =\
    \ shift;\n    my %hist;\n    foreach my $letter (split(/\\s+/, $str)) {\n    \
    \    $hist{$letter}++;\n    }\n    return %hist;\n}", "my $string = shift;\n \
    \   my %hash;\n    my @array = split(/ /, $string);\n    foreach my $letter (@array)\
    \ {\n        $hash{$letter}++;\n    }\n    return %hash;\n}", "my $string = shift;\n\
    \    my %hash = ();\n    my @array = split(\" \", $string);\n    foreach my $element\
    \ (@array) {\n        $hash{$element}++;\n    }\n    return %hash;\n}", "my $string\
    \ = shift;\n    my %hash;\n    foreach my $char (split(/\\s+/, $string)) {\n \
    \       $hash{$char}++;\n    }\n    return %hash;\n}", "my $string = shift;\n\
    \    my %histogram;\n    my @letters = split(/\\s+/, $string);\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/,\
    \ $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(' ', $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n    foreach my\
    \ $element (@array) {\n        $hash{$element}++;\n    }\n    return %hash;\n}",
  "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my $string = shift;\n    my %hist;\n    my %max;\n\
    \    my $max = 0;\n    my @letters = split(/\\s+/, $string);\n    foreach my $letter\
    \ (@letters) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max)\
    \ {\n            $max = $hist{$letter};\n            %max = ($letter => $max);\n\
    \        } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n\
    \        }\n    }\n    return %max;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $string = shift;\n    my @letters = split(/\\s+/,\
    \ $string);\n    my %histogram;\n    foreach my $letter (@letters) {\n       \
    \ $histogram{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($histogram{$letter} == $max) {\n            push @max_letters,\
    \ $letter;\n        }\n    }\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @letters = split(/ /, $string);\n    foreach\
    \ my $letter (@letters) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $str = shift;\n    my @letters = split(' ', $str);\n    my %histogram;\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    my $max = max(values %histogram);\n    my @max_letters = grep { $histogram{$_}\
    \ == $max } keys %histogram;\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n    foreach my\
    \ $word (@array) {\n        if (exists $hash{$word}) {\n            $hash{$word}++;\n\
    \        } else {\n            $hash{$word} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my ($string) = @_;\n    my %histogram;\n    my @letters = split(/\
    \ /, $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my ($str) = @_;\n    my %hash;\n    my @arr\
    \ = split(' ', $str);\n    foreach my $item (@arr) {\n        if (exists $hash{$item})\
    \ {\n            $hash{$item}++;\n        } else {\n            $hash{$item} =\
    \ 1;\n        }\n    }\n    return %hash;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(' ', $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(' ', $string);\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $str = shift;\n    my %hist;\n    my @letters = split(/\\s+/, $str);\n\
    \    foreach my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return\
    \ \\%hist;\n}", "my $string = shift;\n    my %histogram;\n    foreach my $letter\
    \ (split(/\\s+/, $string)) {\n        $histogram{$letter}++;\n    }\n    return\
    \ %histogram;\n}", "my $str = shift;\n    my %hash;\n    my @arr = split(/ /,\
    \ $str);\n    foreach my $i (@arr) {\n        $hash{$i}++;\n    }\n    return\
    \ %hash;\n}", "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\\
    s+/, $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    foreach\
    \ my $letter (split(/\\s+/, $str)) {\n        $hist{$letter}++;\n    }\n    return\
    \ \\%hist;\n}", "my $string = shift;\n    my %hash;\n    my @letters = split(/\
    \ /, $string);\n    foreach my $letter (@letters) {\n        if (exists $hash{$letter})\
    \ {\n            $hash{$letter}++;\n        } else {\n            $hash{$letter}\
    \ = 1;\n        }\n    }\n    return %hash;\n}", "my @letters = split(/ /, $_[0]);\n\
    \    my %histogram;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    foreach\
    \ my $c (split(/\\s+/, $str)) {\n        $hist{$c}++;\n    }\n    return %hist;\n\
    }", "my $string = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n\
    \    foreach my $letter (@array) {\n        $hash{$letter}++;\n    }\n    my @keys\
    \ = sort { $hash{$b} <=> $hash{$a} } keys %hash;\n    my %result;\n    my $max\
    \ = $hash{$keys[0]};\n    foreach my $key (@keys) {\n        if ($hash{$key} ==\
    \ $max) {\n            $result{$key} = $max;\n        }\n    }\n    return %result;\n\
    }", "my $string = shift;\n    my %hash;\n    my @letters = split(/ /, $string);\n\
    \    foreach my $letter (@letters) {\n        if (exists $hash{$letter}) {\n \
    \           $hash{$letter}++;\n        } else {\n            $hash{$letter} =\
    \ 1;\n        }\n    }\n    return %hash;\n}", "my $str = shift;\n    my %hist;\n\
    \    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\s+/, $str))\
    \ {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n       \
    \     $max = $hist{$letter};\n            %max = ($letter => $max);\n        }\
    \ elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n      \
    \  }\n    }\n    return %max;\n}", "my $str = shift;\n    my %histogram;\n   \
    \ foreach my $letter (split(/\\s+/, $str)) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    my %max;\n\
    \    my $max = 0;\n    foreach my $letter (split(/\\s+/, $str)) {\n        $hist{$letter}++;\n\
    \        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n  \
    \          %max = ($letter => $max);\n        } elsif ($hist{$letter} == $max)\
    \ {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n}",
  "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str = shift;\n\
    \    my %hash;\n    my @arr = split(/ /, $str);\n    foreach my $i (@arr) {\n\
    \        $hash{$i}++;\n    }\n    return %hash;\n}", "my $string = shift;\n  \
    \  my %hash;\n    my @array = split(\" \", $string);\n    foreach my $letter (@array)\
    \ {\n        $hash{$letter}++;\n    }\n    return %hash;\n}", "my $str = shift;\n\
    \    my %hist;\n    my @letters = split(/\\s+/, $str);\n    foreach my $letter\
    \ (@letters) {\n        $hist{$letter}++;\n    }\n    return \\%hist;\n}", "my\
    \ $str = shift;\n    my %hash;\n    my @arr = split(/ /, $str);\n    foreach my\
    \ $i (@arr) {\n        if (!exists $hash{$i}) {\n            $hash{$i} = 1;\n\
    \        } else {\n            $hash{$i}++;\n        }\n    }\n    return %hash;\n\
    }", "my $str = shift;\n    my %hist;\n    my @letters = split(/\\s+/, $str);\n\
    \    foreach my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return\
    \ %hist;\n}", "my $string = shift;\n    my %hash;\n    my @letters = split(/ /,\
    \ $string);\n    foreach my $letter (@letters) {\n        $hash{$letter}++;\n\
    \    }\n    return %hash;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str = shift;\n\
    \    my %hash;\n    my @arr = split(/ /, $str);\n    foreach my $letter (@arr)\
    \ {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n   \
    \     } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $str = shift;\n    my %hist;\n    my %max;\n    my $max = 0;\n\
    \    foreach my $ch (split ' ', $str) {\n        $hist{$ch}++;\n        if ($hist{$ch}\
    \ > $max) {\n            $max = $hist{$ch};\n            %max = ($ch => $max);\n\
    \        } elsif ($hist{$ch} == $max) {\n            $max{$ch} = $max;\n     \
    \   }\n    }\n    return \\%max;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(' ', $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "my $str\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $str);\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n\
    \    foreach my $letter (@array) {\n        if (exists $hash{$letter}) {\n   \
    \         $hash{$letter}++;\n        } else {\n            $hash{$letter} = 1;\n\
    \        }\n    }\n    return %hash;\n}", "my $string = shift;\n    my %hash;\n\
    \    my @array = split(/ /, $string);\n    foreach my $element (@array) {\n  \
    \      $hash{$element}++;\n    }\n    return %hash;\n}", "my ($str) = @_;\n  \
    \  my %hash;\n    my @arr = split(/ /, $str);\n    foreach my $word (@arr) {\n\
    \        $hash{$word}++;\n    }\n    my $max = 0;\n    my @max_keys;\n    foreach\
    \ my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n            $max\
    \ = $hash{$key};\n            @max_keys = ($key);\n        } elsif ($hash{$key}\
    \ == $max) {\n            push @max_keys, $key;\n        }\n    }\n    my %result;\n\
    \    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n    }\n   \
    \ return %result;\n}", "my $string = shift;\n    my %hash;\n    my @array = split(/\
    \ /, $string);\n    foreach my $letter (@array) {\n        $hash{$letter}++;\n\
    \    }\n    my $max = 0;\n    foreach my $key (keys %hash) {\n        if ($hash{$key}\
    \ > $max) {\n            $max = $hash{$key};\n        }\n    }\n    my %result;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n    \
    \        $result{$key} = $max;\n        }\n    }\n    return %result;\n}", "my\
    \ $str = shift;\n    my %hash;\n    my @arr = split / /, $str;\n    foreach my\
    \ $item (@arr) {\n        $hash{$item}++;\n    }\n    my @max_keys = grep { $hash{$_}\
    \ == max(values %hash) } keys %hash;\n    my %max_hash;\n    foreach my $key (@max_keys)\
    \ {\n        $max_hash{$key} = $hash{$key};\n    }\n    return %max_hash;\n}",
  "my $string = shift;\n    my %hash;\n    my @letters = split(' ', $string);\n  \
    \  foreach my $letter (@letters) {\n        $hash{$letter}++;\n    }\n    return\
    \ \\%hash;\n}", "my $string = shift;\n    my %hash;\n    my @array = split(\"\
    \ \", $string);\n    foreach my $item (@array) {\n        $hash{$item}++;\n  \
    \  }\n    return %hash;\n}", "my $string = shift;\n    my %hash;\n    foreach\
    \ my $letter (split(/\\s+/, $string)) {\n        $hash{$letter}++;\n    }\n  \
    \  return %hash;\n}", "my $str = shift;\n    my %hist;\n    my %max;\n    my $max\
    \ = 0;\n    foreach my $char (split(/\\s+/, $str)) {\n        $hist{$char}++;\n\
    \        if ($hist{$char} > $max) {\n            $max = $hist{$char};\n      \
    \      %max = ($char => $max);\n        } elsif ($hist{$char} == $max) {\n   \
    \         $max{$char} = $max;\n        }\n    }\n    return %max;\n}", "my $str\
    \ = shift;\n    my %hash;\n    my @arr = split(/ /, $str);\n    foreach (@arr)\
    \ {\n        $hash{$_}++;\n    }\n    return %hash;\n}", "my $str = shift;\n \
    \   my %hist;\n    my @letters = split ' ', $str;\n    for my $letter (@letters)\
    \ {\n        $hist{$letter}++;\n    }\n    return \\%hist;\n}", "my $string =\
    \ shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/,\
    \ $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n    foreach my\
    \ $letter (@array) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $string = shift;\n    my %histogram;\n    my @letters = split\
    \ / /, $string;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    for my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $string = shift;\n    my %hash;\n    my @array\
    \ = split(/ /, $string);\n    foreach my $letter (@array) {\n        if (exists\
    \ $hash{$letter}) {\n            $hash{$letter}++;\n        } else {\n       \
    \     $hash{$letter} = 1;\n        }\n    }\n    return %hash;\n}", "my $str =\
    \ shift;\n    my %hash;\n    my @arr = split(/ /, $str);\n    foreach my $i (@arr)\
    \ {\n        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else\
    \ {\n            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}", "my\
    \ $str = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $str);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my $str = shift;\n    my %hist = ();\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        if (exists\
    \ $hist{$letter}) {\n            $hist{$letter}++;\n        } else {\n       \
    \     $hist{$letter} = 1;\n        }\n    }\n    return %hist;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n    foreach my\
    \ $word (@array) {\n        $hash{$word}++;\n    }\n    return %hash;\n}", "my\
    \ $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str = shift;\n\
    \    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\\
    s+/, $str)) {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n\
    \            $max = $hist{$letter};\n            %max = ($letter => $max);\n \
    \       } elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n\
    \        }\n    }\n    return %max;\n}", "my $str = shift;\n    my %hash;\n  \
    \  my @arr = split(/ /, $str);\n    foreach my $i (@arr) {\n        $hash{$i}++;\n\
    \    }\n    return %hash;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $string = shift;\n    my %hash = ();\n    my @array\
    \ = split(/ /, $string);\n    foreach my $letter (@array) {\n        $hash{$letter}++;\n\
    \    }\n    return %hash;\n}", "my $str = shift;\n    my %histogram;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str\
    \ = shift;\n    my %hist = ();\n    my @letters = split(/\\s+/, $str);\n    foreach\
    \ my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return %hist;\n\
    }", "my $str = shift;\n    my %hist;\n    my @letters = split /\\s+/, $str;\n\
    \    foreach my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return\
    \ \\%hist;\n}", "my $string = shift;\n    my %hash;\n    my @array = split(/ /,\
    \ $string);\n    foreach my $letter (@array) {\n        $hash{$letter}++;\n  \
    \  }\n    return %hash;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @letters = split / /, $string;\n    foreach\
    \ my $letter (@letters) {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n        }\n    }\n    my %result;\n    foreach my\
    \ $key (keys %hash) {\n        if ($hash{$key} == $max) {\n            $result{$key}\
    \ = $max;\n        }\n    }\n    return %result;\n}", "my $string = shift;\n \
    \   my %hash;\n    my @letters = split(' ', $string);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}\
    \ += 1;\n        } else {\n            $hash{$letter} = 1;\n        }\n    }\n\
    \    return %hash;\n}", "my $str = shift;\n    my @letters = split(/\\s+/, $str);\n\
    \    my %hist;\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    my $max = 0;\n    foreach my $letter (keys %hist) {\n        $max\
    \ = $hist{$letter} if $hist{$letter} > $max;\n    }\n    my %result;\n    foreach\
    \ my $letter (keys %hist) {\n        $result{$letter} = $hist{$letter} if $hist{$letter}\
    \ == $max;\n    }\n    return %result;\n}", "my $str = shift;\n    my %hist;\n\
    \    my @letters = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n\
    \        $hist{$letter}++;\n    }\n    my $max = 0;\n    foreach my $letter (keys\
    \ %hist) {\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (keys %hist) {\n  \
    \      if ($hist{$letter} == $max) {\n            $result{$letter} = $max;\n \
    \       }\n    }\n    return %result;\n}", "my $str = shift;\n    my %hist = ();\n\
    \    my @letters = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n\
    \        $hist{$letter}++;\n    }\n    return %hist;\n}", "my $string = shift;\n\
    \    my %count;\n    my %result;\n    my $max = 0;\n    foreach my $letter (split(/\\\
    s+/, $string)) {\n        $count{$letter}++;\n        if ($count{$letter} > $max)\
    \ {\n            $max = $count{$letter};\n        }\n    }\n    foreach my $letter\
    \ (keys %count) {\n        if ($count{$letter} == $max) {\n            $result{$letter}\
    \ = $max;\n        }\n    }\n    return %result;\n}", "my $string = shift;\n \
    \   my %hash;\n    my @array = split(/ /, $string);\n    foreach my $letter (@array)\
    \ {\n        $hash{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n\
    \    foreach my $letter (keys %hash) {\n        if ($hash{$letter} > $max) {\n\
    \            $max = $hash{$letter};\n            @max_letters = ($letter);\n \
    \       } elsif ($hash{$letter} == $max) {\n            push @max_letters, $letter;\n\
    \        }\n    }\n    my %result;\n    foreach my $letter (@max_letters) {\n\
    \        $result{$letter} = $max;\n    }\n    return %result;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $string = shift;\n    my %histogram;\n    my @letters\
    \ = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str\
    \ = shift;\n    my %hash;\n    my @arr = split(/ /, $str);\n    foreach my $char\
    \ (@arr) {\n        if (exists $hash{$char}) {\n            $hash{$char}++;\n\
    \        } else {\n            $hash{$char} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $str = shift;\n    my %hash;\n    my @letters = split(/\\s+/,\
    \ $str);\n    foreach my $letter (@letters) {\n        $hash{$letter}++;\n   \
    \ }\n    return \\%hash;\n}", "my $string = shift;\n    my %hash;\n    my @array\
    \ = split(/ /, $string);\n    foreach my $letter (@array) {\n        if (exists\
    \ $hash{$letter}) {\n            $hash{$letter} += 1;\n        } else {\n    \
    \        $hash{$letter} = 1;\n        }\n    }\n    return %hash;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $str = shift;\n    my %count;\n    my %max;\n \
    \   my $max = 0;\n    foreach my $char (split(/\\s+/, $str)) {\n        $count{$char}++;\n\
    \        if ($count{$char} > $max) {\n            $max = $count{$char};\n    \
    \        %max = ($char => $max);\n        } elsif ($count{$char} == $max) {\n\
    \            $max{$char} = $max;\n        }\n    }\n    return %max;\n}", "my\
    \ $str = shift;\n    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my\
    \ $letter (split(/\\s+/, $str)) {\n        $hist{$letter}++;\n        if ($hist{$letter}\
    \ > $max) {\n            $max = $hist{$letter};\n            %max = ($letter =>\
    \ $max);\n        } elsif ($hist{$letter} == $max) {\n            $max{$letter}\
    \ = $max;\n        }\n    }\n    return %max;\n}", "my ($str) = @_;\n    my %hist;\n\
    \    my %max;\n    my $max = 0;\n    foreach my $letter (split(/\\s+/, $str))\
    \ {\n        $hist{$letter}++;\n        if ($hist{$letter} > $max) {\n       \
    \     $max = $hist{$letter};\n            %max = ($letter => $max);\n        }\
    \ elsif ($hist{$letter} == $max) {\n            $max{$letter} = $max;\n      \
    \  }\n    }\n    return %max;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $string = shift;\n    my %histogram;\n    my @letters\
    \ = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my @letters\
    \ = split(/ /, $_[0]);\n    my %histogram;\n    foreach my $letter (@letters)\
    \ {\n        if (exists $histogram{$letter}) {\n            $histogram{$letter}\
    \ += 1;\n        } else {\n            $histogram{$letter} = 1;\n        }\n \
    \   }\n    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    return %hist;\n}", "my $string = shift;\n    my %hash;\n    my @array\
    \ = split(' ', $string);\n    foreach my $letter (@array) {\n        $hash{$letter}++;\n\
    \    }\n    return %hash;\n}", "my $str = shift;\n    my %hist;\n    foreach my\
    \ $letter (split(/\\s+/, $str)) {\n        $hist{$letter}++;\n    }\n    return\
    \ \\%hist;\n}", "my $string = shift;\n    my @letters = split(' ', $string);\n\
    \    my %histogram;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(' ', $string);\n    foreach my\
    \ $item (@array) {\n        $hash{$item}++;\n    }\n    my $max = 0;\n    my @max_keys;\n\
    \    foreach my $key (keys %hash) {\n        if ($hash{$key} > $max) {\n     \
    \       $max = $hash{$key};\n            @max_keys = ($key);\n        } elsif\
    \ ($hash{$key} == $max) {\n            push @max_keys, $key;\n        }\n    }\n\
    \    my %result;\n    foreach my $key (@max_keys) {\n        $result{$key} = $max;\n\
    \    }\n    return %result;\n}", "my $string = shift;\n    my %histogram;\n  \
    \  my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $str = shift;\n    my %hist;\n    my @letters =\
    \ split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    return \\%hist;\n}", "my $str = shift;\n    my %hist;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    return %hist;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my ($string)\
    \ = @_;\n    my %histogram;\n    my @words = split / /, $string;\n    foreach\
    \ my $word (@words) {\n        $histogram{$word}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/,\
    \ $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return \\%histogram;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my @letters = split(/\\s+/, $string);\n    my %histogram;\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram)\
    \ {\n        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n \
    \   }\n    return %result;\n}", "my $string = shift;\n    my %histogram;\n   \
    \ my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n\
    \        if (exists $histogram{$letter}) {\n            $histogram{$letter} +=\
    \ 1;\n        } else {\n            $histogram{$letter} = 1;\n        }\n    }\n\
    \    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    my $max = 0;\n    foreach my $letter (keys %hist) {\n        $max\
    \ = $hist{$letter} if $hist{$letter} > $max;\n    }\n    my %result;\n    foreach\
    \ my $letter (keys %hist) {\n        $result{$letter} = $hist{$letter} if $hist{$letter}\
    \ == $max;\n    }\n    return %result;\n}", "my $string = shift;\n    my %histogram;\n\
    \    my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters)\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    foreach my $letter (split(/\\s+/, $string))\
    \ {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my @letters\
    \ = split(' ', shift);\n    my %histogram;\n    foreach (@letters) {\n       \
    \ $histogram{$_}++;\n    }\n    return %histogram;\n}", "my $string = shift;\n\
    \    my @letters = split /\\s+/, $string;\n    my %histogram;\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    my $max_count\
    \ = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram) {\n   \
    \     if ($histogram{$letter} > $max_count) {\n            $max_count = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max_count) {\n            push @max_letters, $letter;\n        }\n    }\n \
    \   my %max_histogram;\n    foreach my $letter (@max_letters) {\n        $max_histogram{$letter}\
    \ = $max_count;\n    }\n    return %max_histogram;\n}", "my $str = shift;\n  \
    \  my %histogram;\n    my @letters = split(/\\s+/, $str);\n    foreach my $letter\
    \ (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my @letters = split(/\\s+/, $string);\n    my %histogram;\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(' ', $string);\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/,\
    \ $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $str = shift;\n    my @letters = split(/\\\
    s+/, $str);\n    my %histogram;\n    foreach my $letter (@letters) {\n       \
    \ $histogram{$letter}++;\n    }\n    my $max = 0;\n    my @max_letters;\n    foreach\
    \ my $letter (keys %histogram) {\n        if ($histogram{$letter} > $max) {\n\
    \            $max = $histogram{$letter};\n            @max_letters = ($letter);\n\
    \        } elsif ($histogram{$letter} == $max) {\n            push @max_letters,\
    \ $letter;\n        }\n    }\n    my %result;\n    foreach my $letter (@max_letters)\
    \ {\n        $result{$letter} = $max;\n    }\n    return %result;\n}", "my $str\
    \ = shift;\n    my %hist;\n    my %max;\n    my $max = 0;\n    foreach my $letter\
    \ (split(/\\s+/, $str)) {\n        $hist{$letter}++;\n        if ($hist{$letter}\
    \ > $max) {\n            $max = $hist{$letter};\n            %max = ($letter =>\
    \ $max);\n        } elsif ($hist{$letter} == $max) {\n            $max{$letter}\
    \ = $max;\n        }\n    }\n    return %max;\n}", "my $string = shift;\n    my\
    \ %hash = ();\n    my @array = split(/ /, $string);\n    foreach my $letter (@array)\
    \ {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n   \
    \     } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $string = shift;\n    my @letters = split(/\\s+/, $string);\n\
    \    my %counts;\n    foreach my $letter (@letters) {\n        $counts{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %counts)\
    \ {\n        if ($counts{$letter} > $max) {\n            $max = $counts{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($counts{$letter} == $max)\
    \ {\n            push @max_letters, $letter;\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n \
    \   }\n    return %result;\n}", "my $string = shift;\n    my %histogram;\n   \
    \ my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str =\
    \ shift;\n    my %hist;\n    my @letters = split(/\\s+/, $str);\n    foreach my\
    \ $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return %hist;\n}",
  "my $string = shift;\n    my %histogram;\n    foreach my $letter (split /\\s+/,\
    \ $string) {\n        $histogram{$letter}++;\n    }\n    return \\%histogram;\n\
    }", "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/,\
    \ $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %hash;\n    my\
    \ @array = split(/ /, $string);\n    foreach my $letter (@array) {\n        if\
    \ (exists $hash{$letter}) {\n            $hash{$letter} += 1;\n        } else\
    \ {\n            $hash{$letter} = 1;\n        }\n    }\n    return %hash;\n}",
  "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my ($str) = @_;\n    my %histogram;\n    my @letters\
    \ = split / /, $str;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $letter (keys %histogram)\
    \ {\n        if ($histogram{$letter} > $max) {\n            $max = $histogram{$letter};\n\
    \            @max_letters = ($letter);\n        } elsif ($histogram{$letter} ==\
    \ $max) {\n            push @max_letters, $letter;\n        }\n    }\n    my %result;\n\
    \    foreach my $letter (@max_letters) {\n        $result{$letter} = $max;\n \
    \   }\n    return %result;\n}", "my $string = shift;\n    my %histogram;\n   \
    \ my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str =\
    \ shift;\n    my %hash;\n    my @arr = split(/ /, $str);\n    foreach my $letter\
    \ (@arr) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $string = shift;\n    my %histogram;\n    my @letters = split(\"\
    \ \", $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    my %max;\n\
    \    my $max = 0;\n    foreach my $letter (split /\\s+/, $str) {\n        $hist{$letter}++;\n\
    \        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n  \
    \          %max = ($letter => $max);\n        } elsif ($hist{$letter} == $max)\
    \ {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n}",
  "my $string = shift;\n    my %hash;\n    my @letters = split(' ', $string);\n  \
    \  foreach my $letter (@letters) {\n        $hash{$letter}++;\n    }\n    return\
    \ %hash;\n}", "my $string = shift;\n    my %hash;\n    my @array = split(' ',\
    \ $string);\n    foreach my $i (@array) {\n        $hash{$i}++;\n    }\n    return\
    \ %hash;\n}", "my @letters = split(/ /, $_[0]);\n    my %histogram;\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $str = shift;\n    my %hist;\n    my @letters = split(/\\s+/, $str);\n\
    \    foreach my $letter (@letters) {\n        $hist{$letter}++;\n    }\n    return\
    \ %hist;\n}", "my $string = shift;\n    my @letters = split(' ', $string);\n \
    \   my %histogram;\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        if (exists\
    \ $hist{$letter}) {\n            $hist{$letter}++;\n        } else {\n       \
    \     $hist{$letter} = 1;\n        }\n    }\n    return %hist;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $string = shift;\n    my %hash;\n    my @array\
    \ = split(\" \", $string);\n    foreach my $letter (@array) {\n        $hash{$letter}++;\n\
    \    }\n    return %hash;\n}", "my $str = shift;\n    my %hist;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    return %hist;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str = shift;\n\
    \    my %hash;\n    my @arr = split(' ', $str);\n    foreach my $i (@arr) {\n\
    \        if (exists $hash{$i}) {\n            $hash{$i}++;\n        } else {\n\
    \            $hash{$i} = 1;\n        }\n    }\n    return %hash;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n    foreach my\
    \ $i (@array) {\n        $hash{$i}++;\n    }\n    return %hash;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n    foreach my\
    \ $i (@array) {\n        $hash{$i}++;\n    }\n    return %hash;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(\" \", $string);\n    foreach\
    \ my $letter (@array) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $string = shift;\n    my %hash;\n    my @letters = split(/ /,\
    \ $string);\n    foreach my $letter (@letters) {\n        $hash{$letter}++;\n\
    \    }\n    return %hash;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split / /, $string;\n    foreach my $letter (@letters) {\n      \
    \  $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string = shift;\n\
    \    my %histogram;\n    my @letters = split(/\\s+/, $string);\n    foreach my\
    \ $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n\
    \    foreach my $letter (@array) {\n        if (exists $hash{$letter}) {\n   \
    \         $hash{$letter}++;\n        } else {\n            $hash{$letter} = 1;\n\
    \        }\n    }\n    return %hash;\n}", "my $str = shift;\n    my %hash;\n \
    \   my @arr = split(/ /, $str);\n    foreach my $letter (@arr) {\n        $hash{$letter}++;\n\
    \    }\n    return %hash;\n}", "my $str = shift;\n    my %hist;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    return \\%hist;\n}", "my $string = shift;\n    my %histogram;\n  \
    \  my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $string\
    \ = shift;\n    my %hash;\n    my @array = split(/ /, $string);\n    foreach my\
    \ $item (@array) {\n        $hash{$item}++;\n    }\n    return %hash;\n}", "my\
    \ $string = shift;\n    my %histogram;\n    my @letters = split(\" \", $string);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return %histogram;\n}", "my $string = shift;\n    my %histogram;\n    my\
    \ @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n  \
    \      $histogram{$letter}++;\n    }\n    return %histogram;\n}", "my $str = shift;\n\
    \    my %hist;\n    my @letters = split(/\\s+/, $str);\n    foreach my $letter\
    \ (@letters) {\n        $hist{$letter}++;\n    }\n    return %hist;\n}", "my $string\
    \ = shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n  \
    \  foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n  \
    \  return %histogram;\n}", "my $string = shift;\n    my %hash;\n    my @array\
    \ = split(/ /, $string);\n    foreach my $element (@array) {\n        $hash{$element}++;\n\
    \    }\n    my $max = 0;\n    my %result;\n    foreach my $key (keys %hash) {\n\
    \        if ($hash{$key} > $max) {\n            $max = $hash{$key};\n        }\n\
    \    }\n    foreach my $key (keys %hash) {\n        if ($hash{$key} == $max) {\n\
    \            $result{$key} = $max;\n        }\n    }\n    return %result;\n}",
  "my $string = shift;\n    my %hash;\n    my @array = split(\" \", $string);\n  \
    \  foreach my $item (@array) {\n        $hash{$item}++;\n    }\n    return %hash;\n\
    }", "my $str = shift;\n    my %hist;\n    foreach my $char (split(' ', $str))\
    \ {\n        $hist{$char}++;\n    }\n    return %hist;\n}", "my $string = shift;\n\
    \    my %hash;\n    my @letters = split(/ /, $string);\n    foreach my $letter\
    \ (@letters) {\n        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n\
    \        } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return\
    \ %hash;\n}", "my $string = shift;\n    my %hash;\n    foreach my $letter (split(/\\\
    s+/, $string)) {\n        $hash{$letter}++;\n    }\n    return %hash;\n}", "my\
    \ $str = shift;\n    my %hist;\n    my %max;\n    my $max_count = 0;\n    for\
    \ my $c (split /\\s+/, $str) {\n        $hist{$c}++;\n        if ($hist{$c} >\
    \ $max_count) {\n            $max_count = $hist{$c};\n            %max = ($c =>\
    \ $max_count);\n        } elsif ($hist{$c} == $max_count) {\n            $max{$c}\
    \ = $max_count;\n        }\n    }\n    return %max;\n}", "my $string = shift;\n\
    \    my %hash;\n    my @array = split(/ /, $string);\n    foreach my $letter (@array)\
    \ {\n        $hash{$letter}++;\n    }\n    return %hash;\n}", "my $str = shift;\n\
    \    my %hist = ();\n    my %max = ();\n    my $max = 0;\n    my @letters = split(/\\\
    s+/, $str);\n    foreach my $letter (@letters) {\n        if (exists $hist{$letter})\
    \ {\n            $hist{$letter}++;\n        } else {\n            $hist{$letter}\
    \ = 1;\n        }\n        if ($hist{$letter} > $max) {\n            $max = $hist{$letter};\n\
    \            %max = ($letter => $max);\n        } elsif ($hist{$letter} == $max)\
    \ {\n            $max{$letter} = $max;\n        }\n    }\n    return %max;\n}",
  "my $string = shift;\n    my %histogram;\n    my @letters = split / /, $string;\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    my $max = 0;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
    \ > $max) {\n            $max = $histogram{$letter};\n        }\n    }\n    my\
    \ %result;\n    foreach my $letter (keys %histogram) {\n        if ($histogram{$letter}\
    \ == $max) {\n            $result{$letter} = $max;\n        }\n    }\n    return\
    \ %result;\n}", "my $str = shift;\n    my %histogram;\n    my @letters = split(/\\\
    s+/, $str);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $string = shift;\n    my %hash = ();\n\
    \    my @letters = split(/ /, $string);\n    foreach my $letter (@letters) {\n\
    \        if (exists $hash{$letter}) {\n            $hash{$letter}++;\n       \
    \ } else {\n            $hash{$letter} = 1;\n        }\n    }\n    return %hash;\n\
    }", "my $string = shift;\n    my %histogram;\n    my @letters = split(/\\s+/,\
    \ $string);\n    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n\
    \    }\n    return %histogram;\n}", "my $str = shift;\n    my %hist;\n    my @letters\
    \ = split(/\\s+/, $str);\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    return \\%hist;\n}", "my $string = shift;\n    my %histogram;\n  \
    \  my @letters = split(/\\s+/, $string);\n    foreach my $letter (@letters) {\n\
    \        $histogram{$letter}++;\n    }\n    return \\%histogram;\n}", "my $str\
    \ = shift;\n    my %hash;\n    my @arr = split(\" \", $str);\n    foreach my $i\
    \ (@arr) {\n        $hash{$i}++;\n    }\n    return %hash;\n}", "my $string =\
    \ shift;\n    my %histogram;\n    my @letters = split(/\\s+/, $string);\n    foreach\
    \ my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n    return %histogram;\n\
    }", "my $string = shift;\n    my %histogram;\n    my @letters = split(' ', $string);\n\
    \    foreach my $letter (@letters) {\n        $histogram{$letter}++;\n    }\n\
    \    return \\%histogram;\n}", "my ($str) = @_;\n    my %hist;\n    my @letters\
    \ = split / /, $str;\n    foreach my $letter (@letters) {\n        $hist{$letter}++;\n\
    \    }\n    return %hist;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
