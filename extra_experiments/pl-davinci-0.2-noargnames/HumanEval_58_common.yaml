name: HumanEval_58_common
language: pl
prompt: "# Return sorted unique common elements for two arrays.\n# >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common;\n\
  \        if(eq_deeply($candidate->([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653,\
  \ 121]),[1, 5, 653])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([5, 3, 2, 8], [3, 2]),[2, 3])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 8], [3, 2, 4]),[2, 3, 4])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 8], []),[])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++\
    \ } @$a, @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n  \
    \  my @result;\n    foreach my $e (@$a, @$b) {\n        push @result, $e unless\
    \ $seen{$e}++;\n    }\n    return sort { $a <=> $b } @result;\n}", "my ($a, $b)\
    \ = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_}\
    \ } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$a, @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n  \
    \  return grep { !$seen{$_}++ } @$a, @$b;\n}", "my ($a, $b) = @_;\n    my %h;\n\
    \    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}", "my ($a,\
    \ $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return [sort\
    \ keys %h];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$a, @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a}\
    \ = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n\
    \    my %a = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1 } @$b;\n    my @common\
    \ = grep { $a{$_} && $b{$_} } keys %a;\n    return @common;\n}", "my ($a, $b)\
    \ = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return\
    \ [ sort { $a <=> $b } keys %seen ];\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    return grep { !$seen{$_}++ } @$a, @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a,\
    \ $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort\
    \ keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return\
    \ grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my\
    \ @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } keys\
    \ %seen ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @c = grep { !$seen{$_}++\
    \ } @$a, @$b;\n    return sort { $a <=> $b } @c;\n}", "my ($a, $b) = @_;\n   \
    \ my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return [sort { $a <=> $b } keys %seen];\n}", "my ($a, $b) = @_;\n\
    \    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return [sort { $a <=> $b } keys %seen];\n}", "my ($a, $b) = @_;\n\
    \    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [\
    \ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my\
    \ @uniq = grep { !$seen{$_}++ } @$a, @$b;\n    return sort { $a <=> $b } @uniq;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n \
    \   my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort\
    \ { $a <=> $b } keys %seen ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } @common ];\n\
    }", "my ($a, $b) = @_;\n    my %hash;\n    my @result;\n    foreach my $e (@$a)\
    \ {\n        $hash{$e} = 1;\n    }\n    foreach my $e (@$b) {\n        if (exists\
    \ $hash{$e}) {\n            push @result, $e;\n        }\n    }\n    return @result;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep {\
    \ exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { $seen{$_}++ } @$a, @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n\
    \    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [\
    \ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my\
    \ @common = grep { not $seen{$_}++ } @$a, @$b;\n    return @common;\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_}\
    \ } @$b;\n}", "my ($a, $b) = @_;\n    my %h = map { $_ => 1 } @$a;\n    return\
    \ grep { $h{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { !$seen{$_}++ } @$a, @$b;\n    return sort { $a <=> $b } @common;\n}",
  "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return\
    \ sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep\
    \ { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } @common ];\n}", "my\
    \ ($a, $b) = @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++ } @$a, @$b;\n\
    \    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} =\
    \ ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n   \
    \ my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n   \
    \ return sort { $a <=> $b } keys %h;\n}", "my ($a, $b) = @_;\n    my %h;\n   \
    \ @h{@$a} = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}", "my ($a, $b)\
    \ = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return [sort keys\
    \ %h];\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return\
    \ grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my\
    \ @common = grep { $seen{$_}++ } @$a, @$b;\n    return [sort { $a <=> $b } keys\
    \ %seen];\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return\
    \ grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %h = map { $_\
    \ => 1 } @$a;\n    return grep { $h{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my\
    \ %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return [ sort keys %h ];\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n\
    \    return [sort { $a <=> $b } @common];\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    grep { !$seen{$_}++ } @$a, @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    @seen{@$a} = ();\n    return sort { $a <=> $b } grep { exists $seen{$_} }\
    \ @$b;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n\
    \    return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } @common ];\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return [sort { $a <=> $b } @common];\n}", "my ($a, $b) = @_;\n   \
    \ my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort\
    \ { $a <=> $b } keys %seen ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a}\
    \ = ();\n    delete @seen{@$b};\n    return [keys %seen];\n}", "my ($a, $b) =\
    \ @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++ } @$a, @$b;\n    return\
    \ @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    delete\
    \ @seen{@$b};\n    return [keys %seen];\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n\
    \    return @common;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n\
    \    @h{@$b} = ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n\
    \    return [sort { $a <=> $b } keys %seen];\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b\
    \ } keys %seen ];\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n   \
    \ @h{@$b} = ();\n    my @c = sort keys %h;\n    return \\@c;\n}", "my ($a, $b)\
    \ = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_}\
    \ } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++\
    \ } @$a, @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n  \
    \  my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b\
    \ } keys %seen ];\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n   \
    \ @h{@$b} = ();\n    return sort { $a <=> $b } keys %h;\n}", "my ($a, $b) = @_;\n\
    \    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n   \
    \ return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n\
    \    @h{@$b} = ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    @seen{@$a} = ();\n    delete @seen{@$b};\n    return [sort keys %seen];\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return [sort { $a <=> $b } @common];\n}", "my ($a, $b) = @_;\n   \
    \ my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a}\
    \ = ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n \
    \   my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n   \
    \ return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } keys %seen\
    \ ];\n}", "my ($a, $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n    my %b = map\
    \ { $_ => 1 } @$b;\n    my @c = grep { $a{$_} && $b{$_} } keys %a;\n    return\
    \ @c;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$a, @$b;\n    return [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) =\
    \ @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return\
    \ [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n    my %seen;\n   \
    \ my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [sort { $a <=> $b }\
    \ @common];\n}", "my @a = @{$_[0]};\n    my @b = @{$_[1]};\n    my @c = ();\n\
    \    my %count = ();\n    foreach my $element (@a, @b) { $count{$element}++ }\n\
    \    foreach my $element (keys %count) {\n        push @c, $element if $count{$element}\
    \ == 2;\n    }\n    return @c;\n}", "my %seen;\n    my @common = grep { !$seen{$_}++\
    \ } @_;\n    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } @common ];\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep {\
    \ exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a}\
    \ = ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n \
    \   my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return sort { $a <=> $b } keys %seen;\n}", "my ($a, $b) = @_;\n  \
    \  my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return [ sort { $a <=> $b } keys %seen ];\n}", "my ($a, $b) = @_;\n\
    \    my %a = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1 } @$b;\n    return\
    \ sort keys %a, keys %b;\n}", "my ($a, $b) = @_;\n    my @common = ();\n    my\
    \ %seen = ();\n    foreach my $e (@$a, @$b) {\n        next if $seen{$e}++;\n\
    \        push @common, $e;\n    }\n    return sort { $a <=> $b } @common;\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++ } @$a, @$b;\n\
    \    return @common;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n\
    \    return grep { exists $h{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %h = map\
    \ { $_ => 1 } @$a;\n    my @c = grep { $h{$_} } @$b;\n    return sort { $a <=>\
    \ $b } @c;\n}", "my ($a, $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n    my %b\
    \ = map { $_ => 1 } @$b;\n    my @common = grep { $a{$_} && $b{$_} } keys %a;\n\
    \    return sort { $a <=> $b } @common;\n}", "my %count;\n    foreach my $e (@_)\
    \ { $count{$e}++ }\n    return sort { $a <=> $b } grep { $count{$_} > 1 } keys\
    \ %count;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return\
    \ grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    grep\
    \ { !$seen{$_}++ } @$a, @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { $seen{$_}++ } @$a, @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n\
    \    my %a = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1 } @$b;\n    my @common\
    \ = grep { $a{$_} && $b{$_} } keys %a;\n    return sort { $a <=> $b } @common;\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    grep { !$seen{$_}++ } @$a, @$b;\n}",
  "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return\
    \ sort keys %h;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b}\
    \ = ();\n    return sort { $a <=> $b } keys %h;\n}", "my ($a, $b) = @_;\n    my\
    \ %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n\
    \    return [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n    my %h;\n\
    \    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}", "my ($a,\
    \ $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1 } @$b;\n\
    \    my @c = grep { $a{$_} && $b{$_} } keys %a;\n    return @c;\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return sort grep { exists\
    \ $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep\
    \ { $seen{$_}++ } @$a, @$b;\n    return [sort { $a <=> $b } keys %seen];\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists\
    \ $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n\
    \    my %b = map { $_ => 1 } @$b;\n    my @c = grep { $a{$_} && $b{$_} } keys\
    \ %a;\n    return @c;\n}", "my ($a, $b) = @_;\n    my %seen;\n    return grep\
    \ { !$seen{$_}++ } (@$a, @$b);\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a}\
    \ = ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n \
    \   my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n\
    }", "my ($a, $b) = @_;\n    return sort keys %{{map {$_ => 1} @$a}, {map {$_ =>\
    \ 1} @$b}};\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @result;\n    foreach\
    \ my $e (@$a, @$b) {\n        next if $seen{$e}++;\n        push @result, $e;\n\
    \    }\n    return sort { $a <=> $b } @result;\n}", "my ($a, $b) = @_;\n    my\
    \ %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++ } (@$a,\
    \ @$b);\n    return [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n\
    \    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return sort\
    \ { $a <=> $b } keys %seen;\n}", "my ($a, $b) = @_;\n    my %seen;\n    grep {\
    \ $seen{$_}++ } @$a, @$b;\n    return sort keys %seen;\n}", "my ($a, $b) = @_;\n\
    \    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    grep { !$seen{$_}++ } @$a, @$b;\n}", "my\
    \ ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return\
    \ sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep\
    \ { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } @common ];\n}", "my\
    \ ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return\
    \ sort keys %h;\n}", "my @a = @{$_[0]};\n    my @b = @{$_[1]};\n    my %count;\n\
    \    foreach my $element (@a, @b) { $count{$element}++ }\n    return sort { $a\
    \ <=> $b } grep { $count{$_} == 2 } keys %count;\n}", "my ($a, $b) = @_;\n   \
    \ my %seen;\n    grep { $seen{$_}++ } @$a, @$b;\n    return [sort keys %seen];\n\
    }", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a,\
    \ @$b;\n    return [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n \
    \   my %seen;\n    my @common = grep { !$seen{$_}++ } @$a, @$b;\n    return sort\
    \ { $a <=> $b } @common;\n}", "my ($a, $b) = @_;\n    my %h = map { $_ => 1 }\
    \ @$a;\n    my @common = grep { $h{$_} } @$b;\n    return @common;\n}", "my ($a,\
    \ $b) = @_;\n    my %hash;\n    @hash{@$a} = ();\n    return grep { exists $hash{$_}\
    \ } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return\
    \ grep { exists $seen{$_} } @$b;\n}", "my %count;\n    foreach my $e (@_) { $count{$e}++\
    \ }\n    return sort { $a <=> $b } grep { $count{$_} > 1 } keys %count;\n}", "my\
    \ ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return\
    \ [sort keys %h];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep\
    \ { $seen{$_}++ } @$a, @$b;\n    return [sort { $a <=> $b } keys %seen];\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n\
    \    return [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b\
    \ } @common ];\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b}\
    \ = ();\n    return sort { $a <=> $b } keys %h;\n}", "my ($a, $b) = @_;\n    my\
    \ %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}", "my\
    \ ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return\
    \ sort keys %h;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b}\
    \ = ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n   \
    \ my @common = grep { $seen{$_}++ } @$a, @$b;\n    return @common;\n}", "my ($a,\
    \ $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1 } @$b;\n\
    \    my @c = grep { $a{$_} && $b{$_} } keys %a;\n    return \\@c;\n}", "my ($a,\
    \ $b) = @_;\n    my %hash;\n    for (@$a) {\n        $hash{$_} = 1;\n    }\n \
    \   for (@$b) {\n        $hash{$_} = 1;\n    }\n    return sort keys %hash;\n}",
  "my ($a, $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1\
    \ } @$b;\n    my @common = sort { $a <=> $b } grep { $a{$_} && $b{$_} } keys %a;\n\
    \    return \\@common;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common\
    \ = grep { !$seen{$_}++ } @$a, @$b;\n    return sort @common;\n}", "my ($a, $b)\
    \ = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort { $a\
    \ <=> $b } keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n\
    \    return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    @seen{@$a} = ();\n    return sort keys %seen if @$b == 1;\n    return grep\
    \ { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} =\
    \ ();\n    @h{@$b} = ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n \
    \   my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists\
    \ $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n  \
    \  @h{@$b} = ();\n    return sort { $a <=> $b } keys %h;\n}", "my ($a, $b) = @_;\n\
    \    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort keys %h;\n}",
  "my ($a, $b) = @_;\n    my %hash;\n    @hash{@$a} = ();\n    return grep { exists\
    \ $hash{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %h = map { $_ => 1 } @$a;\n\
    \    return sort grep { $h{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b\
    \ } @common ];\n}", "my ($a, $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n   \
    \ my %b = map { $_ => 1 } @$b;\n    my @c = grep { $a{$_} && $b{$_} } keys %a;\n\
    \    return \\@c;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n\
    \    return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %a\
    \ = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1 } @$b;\n    my @c = grep {\
    \ $a{$_} && $b{$_} } keys %a;\n    return sort { $a <=> $b } @c;\n}", "my ($a,\
    \ $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return sort\
    \ keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$a, @$b;\n    return [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) =\
    \ @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_}\
    \ } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$a, @$b;\n    return [ sort { $a <=> $b } keys %seen ];\n}", "my ($a, $b)\
    \ = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return\
    \ [ sort { $a <=> $b } @common ];\n}", "my ($a, $b) = @_;\n    my %seen;\n   \
    \ my @result;\n    foreach my $e (@$a, @$b) {\n        push @result, $e unless\
    \ $seen{$e}++;\n    }\n    return @result;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    my @common = grep { !$seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=>\
    \ $b } @common ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep\
    \ { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b } keys %seen ];\n}",
  "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} = ();\n    return\
    \ sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n    grep { !$seen{$_}++\
    \ } @$a, @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep {\
    \ !$seen{$_}++ } @$a, @$b;\n    return sort { $a <=> $b } @common;\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n\
    \    return [sort { $a <=> $b } keys %seen];\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [ sort { $a <=> $b\
    \ } keys %seen ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n\
    \    return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    my @common = grep { !$seen{$_}++ } @$a, @$b;\n    return @common;\n}", "my\
    \ ($a, $b) = @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++ } @$a, @$b;\n\
    \    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common =\
    \ grep { !$seen{$_}++ } @$a, @$b;\n    return sort { $a <=> $b } @common;\n}",
  "my ($a, $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n    my %b = map { $_ => 1\
    \ } @$b;\n    return sort { $a <=> $b } grep { $a{$_} && $b{$_} } keys %a;\n}",
  "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++ } @$a, @$b;\n\
    \    return [sort { $a <=> $b } keys %seen];\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    my @common = grep { !$seen{$_}++ } @$a, @$b;\n\
    \    return sort { $a <=> $b } @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n\
    \    my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [sort { $a <=> $b\
    \ } keys %seen];\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b}\
    \ = ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %seen;\n   \
    \ my @common = grep { $seen{$_}++ } @$a, @$b;\n    return [sort { $a <=> $b }\
    \ keys %seen];\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b}\
    \ = ();\n    return [sort keys %h];\n}", "my ($a, $b) = @_;\n    my %seen;\n \
    \   grep { $seen{$_}++ } @$a, @$b;\n    return [ sort keys %seen ];\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_}\
    \ } @$b;\n}", "my ($a, $b) = @_;\n    my %a = map { $_ => 1 } @$a;\n    my %b\
    \ = map { $_ => 1 } @$b;\n    my @c = grep { $a{$_} && $b{$_} } keys %a;\n   \
    \ return @c;\n}", "my ($a, $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n  \
    \  return grep { exists $seen{$_} } @$b;\n}", "my ($a, $b) = @_;\n    my %h;\n\
    \    @h{@$a} = ();\n    @h{@$b} = ();\n    return [sort keys %h];\n}", "my ($a,\
    \ $b) = @_;\n    my %seen;\n    @seen{@$a} = ();\n    return grep { exists $seen{$_}\
    \ } @$b;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b} =\
    \ ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %h = map { $_\
    \ => 1 } @$a;\n    my @common = grep { $h{$_} } @$b;\n    return sort { $a <=>\
    \ $b } @common;\n}", "my ($a, $b) = @_;\n    my %h;\n    @h{@$a} = ();\n    @h{@$b}\
    \ = ();\n    return sort keys %h;\n}", "my ($a, $b) = @_;\n    my %h = map { $_\
    \ => 1 } @$a;\n    my @c = grep { $h{$_} } @$b;\n    return [ sort { $a <=> $b\
    \ } @c ];\n}", "my ($a, $b) = @_;\n    my %seen;\n    my @common = grep { $seen{$_}++\
    \ } @$a, @$b;\n    return @common;\n}", "my ($a, $b) = @_;\n    my %seen;\n  \
    \  @seen{@$a} = ();\n    return grep { exists $seen{$_} } @$b;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
