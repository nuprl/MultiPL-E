name: HumanEval_130_tri
language: pl
prompt: "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n# the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n\
  # tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n\
  # tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative\
  \ integer number n, you have to a return an array of the \n# first n + 1 numbers\
  \ of the Tribonacci sequence.\n# Examples:\n# >>> tri(3)\n# [1, 3, 2, 8]\nsub tri\
  \ {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n  \
  \      if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1,\
  \ 3, 2, 8, 3, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1,\
  \ 3, 2, 8, 3, 15, 4, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5, 35])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24,\
  \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my $n = shift;\n    my @result = (1, 3, 2);\n    if ($n == 0) {\n \
    \       return [1];\n    }\n    elsif ($n == 1) {\n        return [1, 3];\n  \
    \  }\n    elsif ($n == 2) {\n        return [1, 3, 2];\n    }\n    else {\n  \
    \      for (my $i = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n   \
    \             push @result, 1 + $i / 2;\n            }\n            else {\n \
    \               push @result, $result[$i - 1] + $result[$i - 2] + $result[$i +\
    \ 1];\n            }\n        }\n    }\n    return \\@result;\n}", "my $n = shift;\n\
    \    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @a, 1 + $i / 2;\n        } else {\n          \
    \  push @a, $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n        }\n    }\n    return\
    \ @a;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n\
    \        } else {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i\
    \ + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @tri\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result =\
    \ (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @arr = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @arr, 1 + ($i / 2);\n      \
    \  } else {\n            push @arr, $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \        }\n    }\n    return @arr;\n}", "my $n = shift;\n    my @result = (1,\
    \ 3, 2);\n    for my $i (3 .. $n) {\n        if ($i % 2 == 0) {\n            push\
    \ @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @ret = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @ret, 1 + $i / 2;\n        } else {\n            push @ret,\
    \ $ret[$i - 1] + $ret[$i - 2] + $ret[$i + 1];\n        }\n    }\n    return @ret;\n\
    }", "my ($n) = @_;\n    my @r;\n    $r[0] = 1;\n    $r[1] = 3;\n    $r[2] = 2;\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   $r[$i] = 1 + $i / 2;\n        } else {\n            $r[$i] = $r[$i - 1] +\
    \ $r[$i - 2] + $r[$i + 1];\n        }\n    }\n    return @r;\n}", "my $n = shift;\n\
    \    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @seq, 1 + $i / 2;\n        } else {\n        \
    \    push @seq, $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n        }\n    }\n\
    \    return @seq;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n =\
    \ shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @res = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @res, 1 + $i / 2;\n        } else {\n        \
    \    push @res, $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n        }\n    }\n\
    \    return @res;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @a, 1 +\
    \ $i / 2;\n        } else {\n            push @a, $a[$i - 1] + $a[$i - 2] + $a[$i\
    \ + 1];\n        }\n    }\n    return @a;\n}", "my $n = shift;\n    my @a = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        $a[$i] = $a[$i - 1] +\
    \ $a[$i - 2] + $a[$i - 3];\n    }\n    return @a;\n}", "my $n = shift;\n    my\
    \ @tribonacci = (1, 3, 2);\n    return @tribonacci if $n < 3;\n    for (3..$n)\
    \ {\n        push @tribonacci, $tribonacci[-1] + $tribonacci[-2] + $tribonacci[-3];\n\
    \    }\n    return @tribonacci;\n}", "my $n = shift;\n    my @result = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my ($n)\
    \ = @_;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @a\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        $a[$i] = $a[$i\
    \ - 1] + $a[$i - 2] + $a[$i - 3];\n    }\n    return @a;\n}", "my $n = shift;\n\
    \    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @a, 1 + $i / 2;\n        } else {\n          \
    \  push @a, $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n        }\n    }\n    return\
    \ @a;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n\
    \        } else {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i\
    \ + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @seq\
    \ = (1, 3, 2);\n    return @seq if $n < 3;\n    for (3..$n) {\n        push @seq,\
    \ $seq[$_ - 1] + $seq[$_ - 2] + $seq[$_ - 3];\n    }\n    return @seq;\n}", "my\
    \ $n = shift;\n    my @tri = (1, 3, 2);\n    return @tri if $n < 3;\n    for (3\
    \ .. $n) {\n        push @tri, $tri[$_ - 1] + $tri[$_ - 2] + $tri[$_ - 3];\n \
    \   }\n    return @tri;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n  \
    \  for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @res = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @res, 1 + $i / 2;\n        }\
    \ else {\n            push @res, $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n\
    \        }\n    }\n    return @res;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @a, 1 + $i / 2;\n        } else {\n            push @a, $a[$i - 1] +\
    \ $a[$i - 2] + $a[$i + 1];\n        }\n    }\n    return @a;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result =\
    \ (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @tri;\n    $tri[0] = 1;\n\
    \    $tri[1] = 3;\n    $tri[2] = 2;\n    for (my $i = 3; $i <= $n; $i++) {\n \
    \       if ($i % 2 == 0) {\n            $tri[$i] = 1 + $i / 2;\n        } else\
    \ {\n            $tri[$i] = $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n    \
    \    }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n\
    \    for my $i (3 .. $n) {\n        push @a, $i % 2 ? $a[-1] + $a[-2] + $a[-3]\
    \ : 1 + $i / 2;\n    }\n    return @a;\n}", "my $n = shift;\n    my @tri = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        }\
    \ else {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n\
    \        }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @result = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @tri,\
    \ 1 + $i / 2;\n        } else {\n            push @tri, $tri[$i - 1] + $tri[$i\
    \ - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n\
    \    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @seq, 1 + $i / 2;\n        } else {\n        \
    \    push @seq, $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n        }\n    }\n\
    \    return @seq;\n}", "my $n = shift;\n    my @arr = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @arr,\
    \ 1 + $i / 2;\n        } else {\n            push @arr, $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return @arr;\n}", "my $n = shift;\n\
    \    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @a, 1 + $i / 2;\n        } else {\n          \
    \  push @a, $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n        }\n    }\n    return\
    \ @a;\n}", "my ($n) = @_;\n    my @result = (1, 3, 2);\n    if ($n == 0) {\n \
    \       return [1];\n    }\n    elsif ($n == 1) {\n        return [1, 3];\n  \
    \  }\n    elsif ($n == 2) {\n        return [1, 3, 2];\n    }\n    else {\n  \
    \      for (my $i = 3; $i <= $n; $i++) {\n            if ($i % 2 == 0) {\n   \
    \             push @result, 1 + $i / 2;\n            }\n            else {\n \
    \               push @result, $result[$i - 1] + $result[$i - 2] + $result[$i +\
    \ 1];\n            }\n        }\n    }\n    return \\@result;\n}", "my $n = shift;\n\
    \    my @seq = (1, 3, 2);\n    return @seq if $n < 3;\n    for (3..$n) {\n   \
    \     push @seq, $seq[$_ - 1] + $seq[$_ - 2] + $seq[$_ - 3];\n    }\n    return\
    \ @seq;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i = 3; $i <=\
    \ $n; $i++) {\n        $a[$i] = $a[$i - 1] + $a[$i - 2] + $a[$i - 3];\n    }\n\
    \    return @a;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n =\
    \ shift;\n    my @result = (1, 3, 2);\n    for my $i (3 .. $n) {\n        if ($i\
    \ % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n     \
    \       push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n \
    \       }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @arr = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @arr,\
    \ 1 + $i / 2;\n        } else {\n            push @arr, $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return @arr;\n}", "my ($n) = @_;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my ($n) = @_;\n    my @result = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        push @a, $i % 2 ? $a[$i - 1] + $a[$i - 2] +\
    \ $a[$i + 1] : 1 + $i / 2;\n    }\n    return @a;\n}", "my $n = shift;\n    my\
    \ @seq = (1, 3, 2);\n    for (3..$n) {\n        push @seq, $seq[$_ - 1] + $seq[$_\
    \ - 2] + $seq[$_ - 3];\n    }\n    return @seq;\n}", "my $n = shift;\n    my @seq\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @seq, 1 + $i / 2;\n        } else {\n            push @seq,\
    \ $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n        }\n    }\n    return @seq;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    my $i = 3;\n    while ($i\
    \ < $n) {\n        $result[$i] = $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        $i++;\n    }\n    return @result;\n}", "my $n = shift;\n    my\
    \ @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n     \
    \       push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n \
    \       }\n    }\n    return @result;\n}", "my ($n) = @_;\n    my @result = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        $a[$i] = $a[$i - 1] + $a[$i - 2] + $a[$i - 3];\n\
    \    }\n    return @a;\n}", "my $n = shift;\n    my @arr = (1, 3, 2);\n    for\
    \ (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push\
    \ @arr, 1 + $i / 2;\n        } else {\n            push @arr, $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return @arr;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @a = (1, 3,\
    \ 2);\n    for (3..$n) {\n        push @a, $a[$_ - 1] + $a[$_ - 2] + $a[$_ - 3];\n\
    \    }\n    return @a;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n   \
    \ for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push\
    \ @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @tri = (1, 3, 2);\n    for my $i (3 .. $n) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @res = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @res, 1 + $i / 2;\n        }\
    \ else {\n            push @res, $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n\
    \        }\n    }\n    return @res;\n}", "my ($n) = @_;\n    my @result = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @tri,\
    \ 1 + $i / 2;\n        } else {\n            push @tri, $tri[$i - 1] + $tri[$i\
    \ - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n\
    \    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @a, 1 + $i / 2;\n        } else {\n          \
    \  push @a, $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n        }\n    }\n    return\
    \ @a;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n\
    \        } else {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i\
    \ + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @tri\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my ($n) = @_;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        }\
    \ else {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n\
    \        }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @tri = (1, 3,\
    \ 2);\n    for (3..$n) {\n        push @tri, $tri[$_ - 1] + $tri[$_ - 2] + $tri[$_\
    \ - 3];\n    }\n    return @tri;\n}", "my $n = shift;\n    my @result = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @tri;\n    for (1..$n) {\n    \
    \    if ($_ == 1) {\n            push @tri, 3;\n        } elsif ($_ % 2 == 0)\
    \ {\n            push @tri, 1 + $_ / 2;\n        } else {\n            push @tri,\
    \ $tri[$_ - 2] + $tri[$_ - 1] + $tri[$_ + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @a = (1, 3, 2);\n    my $i = 3;\n    while ($i <=\
    \ $n) {\n        if ($i % 2 == 0) {\n            push @a, 1 + $i / 2;\n      \
    \  } else {\n            push @a, $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n    \
    \    }\n        $i++;\n    }\n    return @a;\n}", "my $n = shift;\n    my @tri\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else {\n        \
    \    push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n\
    \    return @tri;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n =\
    \ shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @tri\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @res = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @res, 1 + $i / 2;\n        }\
    \ else {\n            push @res, $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n\
    \        }\n    }\n    return @res;\n}", "my $n = shift;\n    my @arr = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @arr, 1 + $i / 2;\n        } else {\n            push @arr, $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return @arr;\n}",
  "my $n = shift;\n    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @seq, 1 + $i / 2;\n        } else\
    \ {\n            push @seq, $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n    \
    \    }\n    }\n    return @seq;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n\
    \    for (3..$n) {\n        push @a, $a[$_ - 1] + $a[$_ - 2] + $a[$_ - 3];\n \
    \   }\n    return @a;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    return\
    \ @a if $n < 3;\n    for (3 .. $n) {\n        push @a, $a[$_ - 1] + $a[$_ - 2]\
    \ + $a[$_ - 3];\n    }\n    return @a;\n}", "my $n = shift;\n    my @a = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        $a[$i] = $i % 2 == 0 ? 1\
    \ + $i / 2 : $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n    }\n    return @a;\n}",
  "my $n = shift;\n    my @seq = (1, 3, 2);\n    for (3..$n) {\n        push @seq,\
    \ $seq[$_ - 1] + $seq[$_ - 2] + $seq[$_ - 3];\n    }\n    return @seq;\n}", "my\
    \ ($n) = @_;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n     \
    \   } else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @tri;\n\
    \    $tri[0] = 1;\n    $tri[1] = 3;\n    $tri[2] = 2;\n    for (my $i = 3; $i\
    \ <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $tri[$i] = 1 + $i /\
    \ 2;\n        } else {\n            $tri[$i] = $tri[$i - 1] + $tri[$i - 2] + $tri[$i\
    \ + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @tri\
    \ = (1, 3, 2);\n    for (3..$n) {\n        push @tri, ($_ % 2) ? $tri[$_ - 1]\
    \ + $tri[$_ - 2] + $tri[$_ + 1] : 1 + $_ / 2;\n    }\n    return @tri;\n}", "my\
    \ $n = shift;\n    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        push @seq, $i % 2 == 0 ? 1 + $i / 2 : $seq[$i - 1] + $seq[$i - 2] + $seq[$i\
    \ + 1];\n    }\n    return @seq;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @tri, 1 + ($i / 2);\n        } else {\n            push @tri, $tri[$i\
    \ - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}",
  "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        $a[$i] = $a[$i - 1] + $a[$i - 2] + $a[$i - 3];\n    }\n    return @a;\n\
    }", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (3..$n) {\n        push\
    \ @tri, $tri[$_ - 1] + $tri[$_ - 2] + $tri[$_ - 3];\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    if ($n < 3) {\n        return\
    \ @result[0..$n];\n    }\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n     \
    \       push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n \
    \       }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result = (1,\
    \ 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n =\
    \ shift;\n    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    $a[$i] = $a[$i - 1] + $a[$i - 2] + $a[$i - 3];\n    }\n    return @a;\n}",
  "my $n = shift;\n    my @seq = (1, 3, 2);\n    for my $i (3 .. $n) {\n        if\
    \ ($i % 2 == 0) {\n            push @seq, 1 + $i / 2;\n        } else {\n    \
    \        push @seq, $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n        }\n \
    \   }\n    return @seq;\n}", "my ($n) = @_;\n    my @result = (1, 3, 2);\n   \
    \ for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push\
    \ @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (3..$n) {\n        push @a,\
    \ $a[$_ - 1] + $a[$_ - 2] + $a[$_ - 3];\n    }\n    return @a;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result =\
    \ (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    my\
    \ $i = 3;\n    while ($i <= $n) {\n        push @a, $i % 2 ? $a[$i - 1] + $a[$i\
    \ - 2] + $a[$i + 1] : 1 + $i / 2;\n        $i++;\n    }\n    return @a;\n}", "my\
    \ $n = shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else\
    \ {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n    \
    \    }\n    }\n    return @tri;\n}", "my ($n) = @_;\n    my @seq = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @seq, 1 + $i / 2;\n        } else {\n            push @seq, $seq[$i -\
    \ 1] + $seq[$i - 2] + $seq[$i + 1];\n        }\n    }\n    return @seq;\n}", "my\
    \ $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n     \
    \   } else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @seq = (1, 3, 2);\n  \
    \  for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ push @seq, 1 + $i / 2;\n        } else {\n            push @seq, $seq[$i - 1]\
    \ + $seq[$i - 2] + $seq[$i + 1];\n        }\n    }\n    return @seq;\n}", "my\
    \ $n = shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else\
    \ {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n    \
    \    }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n\
    \    for my $i (3 .. $n) {\n        $tri[$i] = $i % 2 ? $tri[$i - 1] + $tri[$i\
    \ - 2] + $tri[$i + 1] : 1 + $i / 2;\n    }\n    return @tri;\n}", "my $n = shift;\n\
    \    my @res = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @res, 1 + $i / 2;\n        } else {\n        \
    \    push @res, $res[$i - 1] + $res[$i - 2] + $res[$i + 1];\n        }\n    }\n\
    \    return @res;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    while\
    \ (scalar @result < $n + 1) {\n        my $last = $result[-1];\n        my $second_last\
    \ = $result[-2];\n        my $third_last = $result[-3];\n        if ($last % 2\
    \ == 0) {\n            push @result, 1 + $last / 2;\n        } else {\n      \
    \      push @result, $last + $second_last + $third_last;\n        }\n    }\n \
    \   return @result;\n}", "my $n = shift;\n    my @tribonacci = (1, 3, 2);\n  \
    \  for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ push @tribonacci, 1 + $i / 2;\n        } else {\n            push @tribonacci,\
    \ $tribonacci[$i - 1] + $tribonacci[$i - 2] + $tribonacci[$i + 1];\n        }\n\
    \    }\n    return @tribonacci;\n}", "my $n = shift;\n    my @result = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my ($n) = @_;\n    my @seq = (1, 3, 2);\n    return @seq\
    \ if $n <= 2;\n    for (3 .. $n) {\n        push @seq, $seq[$_ - 1] + $seq[$_\
    \ - 2] + $seq[$_ - 3];\n    }\n    return @seq;\n}", "my $n = shift;\n    my @tri;\n\
    \    $tri[0] = 1;\n    $tri[1] = 3;\n    $tri[2] = 2;\n    for (my $i = 3; $i\
    \ <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $tri[$i] = 1 + $i /\
    \ 2;\n        } else {\n            $tri[$i] = $tri[$i - 1] + $tri[$i - 2] + $tri[$i\
    \ + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n  \
    \  for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ push @tri, 1 + $i / 2;\n        } else {\n            push @tri, $tri[$i - 1]\
    \ + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}", "my\
    \ $n = shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else\
    \ {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n    \
    \    }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @result = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n =\
    \ shift;\n    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n  \
    \      if ($i % 2 == 0) {\n            push @seq, 1 + $i / 2;\n        } else\
    \ {\n            push @seq, $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n    \
    \    }\n    }\n    return @seq;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        $a[$i] = $a[$i - 1] + $a[$i -\
    \ 2] + $a[$i - 3];\n    }\n    return @a;\n}", "my $n = shift;\n    my @a = (1,\
    \ 3, 2);\n    for (3..$n) {\n        push @a, $a[$_ - 1] + $a[$_ - 2] + $a[$_\
    \ - 3];\n    }\n    return @a;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        $a[$i] = $a[$i - 1] + $a[$i -\
    \ 2] + $a[$i - 3];\n    }\n    return @a;\n}", "my $n = shift;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    return [1, 3, 2] if $n == 2;\n    my $arr = tri($n - 1);\n    push @$arr,\
    \ $arr->[-1] + $arr->[-2] + $arr->[-3];\n    return $arr;\n}", "my $n = shift;\n\
    \    my @tribonacci = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n    \
    \    if ($i % 2 == 0) {\n            push @tribonacci, 1 + $i / 2;\n        }\
    \ else {\n            push @tribonacci, $tribonacci[$i - 1] + $tribonacci[$i -\
    \ 2] + $tribonacci[$i + 1];\n        }\n    }\n    return @tribonacci;\n}", "my\
    \ $n = shift;\n    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @seq, 1 + $i / 2;\n        } else\
    \ {\n            push @seq, $seq[$i - 1] + $seq[$i - 2] + $seq[$i + 1];\n    \
    \    }\n    }\n    return @seq;\n}", "my $n = shift;\n    my @result = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        $a[$i] = $a[$i - 1] + $a[$i - 2] + $a[$i - 3];\n\
    \    }\n    return @a;\n}", "my $n = shift;\n    my @arr = (1, 3, 2);\n    for\
    \ (my $i = 3; $i <= $n; $i++) {\n        $arr[$i] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i - 3];\n    }\n    return @arr;\n}", "my $n = shift;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n  \
    \  for (my $i = 3; $i <= $n; $i++) {\n        $tri[$i] = $i % 2 ? $tri[$i - 1]\
    \ + $tri[$i - 2] + $tri[$i + 1] : 1 + $i / 2;\n    }\n    return @tri;\n}", "my\
    \ $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n     \
    \   } else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    return @result if $n < 3;\n\
    \    for (3..$n) {\n        push @result, ($_ % 2) ? $result[-1] + $result[-2]\
    \ + $result[-3] : 1 + $_ / 2;\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @a = (1, 3, 2);\n    for (3..$n) {\n        push @a, ($_ % 2) ? $a[-1]\
    \ + $a[-2] + $a[-3] : 1 + $_ / 2;\n    }\n    return @a;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @a = (1, 3,\
    \ 2);\n    my $i = 3;\n    while ($i <= $n) {\n        if ($i % 2 == 0) {\n  \
    \          push @a, 1 + $i / 2;\n        } else {\n            push @a, $a[$i\
    \ - 1] + $a[$i - 2] + $a[$i + 1];\n        }\n        $i++;\n    }\n    return\
    \ @a;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            push @a, 1 + $i / 2;\n\
    \        } else {\n            push @a, $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n\
    \        }\n    }\n    return @a;\n}", "my ($n) = @_;\n    my @result = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @result, 1 + $i / 2;\n        } else {\n            push @result,\
    \ $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n   \
    \ return @result;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @tri,\
    \ 1 + $i / 2;\n        } else {\n            push @tri, $tri[$i - 1] + $tri[$i\
    \ - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n\
    \    my @ret = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @ret, 1 + $i / 2;\n        } else {\n        \
    \    push @ret, $ret[$i - 1] + $ret[$i - 2] + $ret[$i + 1];\n        }\n    }\n\
    \    return @ret;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my ($n)\
    \ = @_;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my ($n) = @_;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for\
    \ (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push\
    \ @a, 1 + $i / 2;\n        } else {\n            push @a, $a[$i - 1] + $a[$i -\
    \ 2] + $a[$i + 1];\n        }\n    }\n    return @a;\n}", "my $n = shift;\n  \
    \  my @tribonacci = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n      \
    \  if ($i % 2 == 0) {\n            push @tribonacci, 1 + $i / 2;\n        } else\
    \ {\n            push @tribonacci, $tribonacci[$i - 1] + $tribonacci[$i - 2] +\
    \ $tribonacci[$i + 1];\n        }\n    }\n    return @tribonacci;\n}", "my $n\
    \ = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @tri\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else {\n        \
    \    push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n\
    \    return @tri;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n =\
    \ shift;\n    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n  \
    \      if ($i % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else\
    \ {\n            push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n    \
    \    }\n    }\n    return @tri;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @tri, 1 + $i / 2;\n        } else {\n            push @tri, $tri[$i -\
    \ 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}", "my\
    \ $n = shift;\n    my @result = (1, 3, 2);\n    return @result if $n <= 2;\n \
    \   for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n          \
    \  push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my ($n) = @_;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my ($n) = @_;\n    my @tri = (1,\
    \ 3, 2);\n    while (@tri < $n + 1) {\n        my $next = $tri[-1] + $tri[-2]\
    \ + $tri[-3];\n        push @tri, $next;\n    }\n    return @tri;\n}", "my $n\
    \ = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @result\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @result, 1 + $i / 2;\n        } else {\n            push\
    \ @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n \
    \   }\n    return @result;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n\
    \    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n         \
    \   push @result, 1 + $i / 2;\n        } else {\n            push @result, $result[$i\
    \ - 1] + $result[$i - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n\
    }", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (3..$n) {\n        push @a,\
    \ $a[$_ - 1] + $a[$_ - 2] + $a[$_ - 3];\n    }\n    return @a;\n}", "my $n = shift;\n\
    \    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else {\n        \
    \    push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n\
    \    return @tri;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @tri,\
    \ 1 + $i / 2;\n        } else {\n            push @tri, $tri[$i - 1] + $tri[$i\
    \ - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n\
    \    my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else {\n        \
    \    push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n\
    \    return @tri;\n}", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result,\
    \ 1 + $i / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n =\
    \ shift;\n    my @seq = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n  \
    \      $seq[$i] = $seq[$i - 1] + $seq[$i - 2] + $seq[$i - 3];\n    }\n    return\
    \ @seq;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i = 3; $i <=\
    \ $n; $i++) {\n        $a[$i] = $a[$i - 1] + $a[$i - 2] + $a[$i - 3];\n    }\n\
    \    return @a;\n}", "my $n = shift;\n    my @arr = (1, 3, 2);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @arr, 1\
    \ + $i / 2;\n        } else {\n            push @arr, $arr[$i - 1] + $arr[$i -\
    \ 2] + $arr[$i + 1];\n        }\n    }\n    return @arr;\n}", "my $n = shift;\n\
    \    my @a = (1, 3, 2);\n    for (3..$n) {\n        push @a, $a[$_ - 1] + $a[$_\
    \ - 2] + $a[$_ - 3];\n    }\n    return @a;\n}", "my $n = shift;\n    my @arr\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @arr, 1 + $i / 2;\n        } else {\n            push @arr,\
    \ $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return @arr;\n\
    }", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for (3..$n) {\n        push\
    \ @tri, ($_ % 2) ? $tri[$_ - 1] + $tri[$_ - 2] + $tri[$_ + 1] : 1 + $_ / 2;\n\
    \    }\n    return @tri;\n}", "my $n = shift;\n    my @tri = (1, 3, 2);\n    for\
    \ (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push\
    \ @tri, 1 + $i / 2;\n        } else {\n            push @tri, $tri[$i - 1] + $tri[$i\
    \ - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n \
    \           push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @a = (1, 3,\
    \ 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         push @a, 1 + $i / 2;\n        } else {\n            push @a, $a[$i -\
    \ 1] + $a[$i - 2] + $a[$i + 1];\n        }\n    }\n    return @a;\n}", "my $n\
    \ = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        }\
    \ else {\n            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n    my @tri\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i <= $n;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n\
    \        } else {\n            push @result, $result[$i - 1] + $result[$i - 2]\
    \ + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my $n = shift;\n\
    \    my @result = (1, 3, 2);\n    my $i = 3;\n    while ($i <= $n) {\n       \
    \ if ($i % 2 == 0) {\n            push @result, 1 + $i / 2;\n        } else {\n\
    \            push @result, $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n\
    \        }\n        $i++;\n    }\n    return @result;\n}", "my $n = shift;\n \
    \   my @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            push @tri, 1 + $i / 2;\n        } else {\n        \
    \    push @tri, $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n\
    \    return @tri;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @a, 1 +\
    \ $i / 2;\n        } else {\n            push @a, $a[$i - 1] + $a[$i - 2] + $a[$i\
    \ + 1];\n        }\n    }\n    return @a;\n}", "my $n = shift;\n    my @tri =\
    \ (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        $a[$i] = $a[$i - 1] + $a[$i - 2] + $a[$i - 3];\n    }\n    return\
    \ @a;\n}", "my ($n) = @_;\n    my @result = (1, 3, 2);\n    for (my $i = 3; $i\
    \ <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @result, 1 + $i\
    \ / 2;\n        } else {\n            push @result, $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return @result;\n}", "my ($n)\
    \ = @_;\n    my @result = (1, 3, 2);\n    while ($n > 2) {\n        my $last =\
    \ $result[-1];\n        my $second_last = $result[-2];\n        my $third_last\
    \ = $result[-3];\n        push @result, $last + $second_last + $third_last;\n\
    \        $n--;\n    }\n    return @result;\n}", "my $n = shift;\n    my @tri =\
    \ (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @tri, 1 + $i / 2;\n        } else {\n            push @tri,\
    \ $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1];\n        }\n    }\n    return @tri;\n\
    }", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            push @a, 1 + $i / 2;\n        } else\
    \ {\n            push @a, $a[$i - 1] + $a[$i - 2] + $a[$i + 1];\n        }\n \
    \   }\n    return @a;\n}", "my $n = shift;\n    my @a = (1, 3, 2);\n    for (my\
    \ $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @a,\
    \ 1 + $i / 2;\n        } else {\n            push @a, $a[$i - 1] + $a[$i - 2]\
    \ + $a[$i + 1];\n        }\n    }\n    return @a;\n}", "my $n = shift;\n    my\
    \ @tri = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        push @tri,\
    \ $i % 2 ? $tri[$i - 1] + $tri[$i - 2] + $tri[$i + 1] : 1 + $i / 2;\n    }\n \
    \   return @tri;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
