language: pl
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $i (@arr) {\n        if ($i > 0)\
    \ {\n            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0)\
    \ {\n            $prod *= -1;\n            $sum += $i;\n        } else {\n   \
    \         $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sum = 0;\n    my $prod = 1;\n    for (@$arr)\
    \ {\n        $sum += abs($_);\n        $prod *= $_ == 0 ? 1 : $_ / abs($_);\n\
    \    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $n (@$arr) {\n        if ($n\
    \ > 0) {\n            $prod *= 1;\n        } elsif ($n < 0) {\n            $prod\
    \ *= -1;\n        } else {\n            $prod *= 0;\n        }\n        $sum +=\
    \ abs($n);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sign = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $sign *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $sign;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach (@arr) {\n        if ($_ > 0) {\n\
    \            $prod *= 1;\n            $sum += $_;\n        } elsif ($_ < 0) {\n\
    \            $prod *= -1;\n            $sum += -$_;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return undef if $prod\
    \ == 0;\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        if ($num > 0) {\n            $prod *= 1;\n         \
    \   $sum += $num;\n        } elsif ($num < 0) {\n            $prod *= -1;\n  \
    \          $sum += -$num;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $i (@$arr) {\n        if ($i > 0) {\n            $prod *= 1;\n            $sum\
    \ += $i;\n        } elsif ($i < 0) {\n            $prod *= -1;\n            $sum\
    \ += -$i;\n        } else {\n            $prod *= 0;\n        }\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sign = 1;\n    my $sum = 0;\n    foreach my $i (@$arr) {\n        if ($i\
    \ > 0) {\n            $sign *= 1;\n            $sum += $i;\n        } elsif ($i\
    \ < 0) {\n            $sign *= -1;\n            $sum += abs($i);\n        } else\
    \ {\n            $sign *= 0;\n        }\n    }\n    return undef if $sign == 0;\n\
    \    return $sum * $sign;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $prod *= $_ <=> 0;\n        $sum += abs $_;\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    foreach\
    \ (@$arr) {\n        $prod *= $_ <=> 0;\n        $sum += abs($_);\n    }\n   \
    \ return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sum = 0;\n    my $prod = 1;\n    for my\
    \ $num (@$arr) {\n        $sum += abs($num);\n        $prod *= $num <=> 0;\n \
    \   }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    foreach\
    \ my $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs($num);\n\
    \    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        if ($num > 0) {\n            $prod *= 1;\n         \
    \   $sum += $num;\n        } elsif ($num < 0) {\n            $prod *= -1;\n  \
    \          $sum += -$num;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach (@arr) {\n        if ($_ > 0) {\n\
    \            $prod *= 1;\n            $sum += $_;\n        } elsif ($_ < 0) {\n\
    \            $prod *= -1;\n            $sum += -$_;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $signs = 1;\n    my $magnitudes = 0;\n\
    \    for my $num (@$arr) {\n        $signs *= $num <=> 0;\n        $magnitudes\
    \ += abs $num;\n    }\n    return $magnitudes * $signs;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ == 0) {\n            $prod = 0;\n            last;\n        }\n        $prod\
    \ *= ($num > 0) ? 1 : -1;\n        $sum += abs($num);\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    if (scalar @$arr == 0) {\n        return\
    \ undef;\n    }\n    foreach my $num (@$arr) {\n        if ($num < 0) {\n    \
    \        $prod *= -1;\n        } elsif ($num == 0) {\n            $prod = 0;\n\
    \        }\n        $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n \
    \       if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $prod *= $_ <=> 0;\n        $sum += abs($_);\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    for my $num (@arr) {\n        if ($num > 0)\
    \ {\n            $sum += $num;\n            $prod *= 1;\n        } elsif ($num\
    \ < 0) {\n            $sum += -$num;\n            $prod *= -1;\n        } else\
    \ {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        if ($num > 0) {\n            $prod *= 1;\n         \
    \   $sum += $num;\n        } elsif ($num < 0) {\n            $prod *= -1;\n  \
    \          $sum += -$num;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $n (@arr)\
    \ {\n        $prod *= $n <=> 0;\n        $sum += abs $n;\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $i (@arr) {\n        if ($i > 0)\
    \ {\n            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0)\
    \ {\n            $prod *= -1;\n            $sum += -$i;\n        } else {\n  \
    \          $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ == 0) {\n            $prod = 0;\n            last;\n        }\n        elsif\
    \ ($num > 0) {\n            $sum += $num;\n        }\n        else {\n       \
    \     $sum -= $num;\n            $prod *= -1;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $i (@arr)\
    \ {\n        if ($i > 0) {\n            $prod *= 1;\n            $sum += $i;\n\
    \        } elsif ($i < 0) {\n            $prod *= -1;\n            $sum += abs($i);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $prod *= $_ <=> 0;\n        $sum += abs $_;\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sum += $num;\n            $prod *= 1;\n        }\
    \ elsif ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    if ($prod ==\
    \ 0) {\n        return 0;\n    } else {\n        return $sum * $prod;\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ == 0) {\n            $prod = 0;\n            last;\n        }\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n        }\n        else {\n            $prod\
    \ *= -1;\n        }\n        $sum += abs($num);\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $elem (@$arr) {\n        if\
    \ ($elem > 0) {\n            $prod *= 1;\n        } elsif ($elem < 0) {\n    \
    \        $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n\
    \        $sum += abs($elem);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num;\n        }\
    \ else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $signs = 1;\n    my $magnitudes = 0;\n    foreach my $num (@arr) {\n       \
    \ if ($num > 0) {\n            $signs *= 1;\n            $magnitudes += $num;\n\
    \        } elsif ($num < 0) {\n            $signs *= -1;\n            $magnitudes\
    \ += abs($num);\n        } else {\n            $signs *= 0;\n        }\n    }\n\
    \    if ($signs == 0) {\n        return 0;\n    } else {\n        return $magnitudes\
    \ * $signs;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sign = 1;\n    my $sum = 0;\n    foreach my $i (@arr) {\n        if ($i > 0)\
    \ {\n            $sign *= 1;\n        } elsif ($i < 0) {\n            $sign *=\
    \ -1;\n        } else {\n            $sign *= 0;\n        }\n        $sum += abs($i);\n\
    \    }\n    return $sum * $sign;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    foreach\
    \ my $n (@$arr) {\n        if ($n > 0) {\n            $prod *= 1;\n          \
    \  $sum += $n;\n        } elsif ($n < 0) {\n            $prod *= -1;\n       \
    \     $sum += -$n;\n        } else {\n            $prod *= 0;\n        }\n   \
    \ }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2,\
    \ -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        $sum\
    \ += abs($num);\n        $prod *= $num <=> 0;\n    }\n    return $sum * $prod;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $prod *= $_ <=> 0;\n        $sum += abs($_);\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        if ($num > 0) {\n            $prod *= 1;\n         \
    \   $sum += $num;\n        } elsif ($num < 0) {\n            $prod *= -1;\n  \
    \          $sum += abs($num);\n        } else {\n            $prod *= 0;\n   \
    \     }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $i (@arr) {\n        if ($i > 0) {\n\
    \            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0) {\n\
    \            $prod *= -1;\n            $sum += abs($i);\n        } else {\n  \
    \          $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        if ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n\
    \        } elsif ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach (@arr) {\n        if ($_ == 0) {\n\
    \            $prod = 0;\n            last;\n        }\n        $prod *= $_ <=>\
    \ 0;\n        $sum += abs($_);\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $i (@$arr) {\n        if ($i\
    \ > 0) {\n            $prod *= 1;\n        } elsif ($i < 0) {\n            $prod\
    \ *= -1;\n        } else {\n            $prod *= 0;\n        }\n        $sum +=\
    \ abs($i);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num == 0 ? 1 : $num <=> 0;\n        $sum +=\
    \ abs $num;\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  return undef unless @$arr;\n    my $signs = 1;\n    my $magnitudes = 0;\n \
    \   for my $num (@$arr) {\n        $signs *= $num == 0 ? 0 : $num > 0 ? 1 : -1;\n\
    \        $magnitudes += abs $num;\n    }\n    return $magnitudes * $signs;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    for my $num (@arr) {\n        if ($num > 0)\
    \ {\n            $sum += $num;\n            $prod *= 1;\n        } elsif ($num\
    \ < 0) {\n            $sum += -$num;\n            $prod *= -1;\n        } else\
    \ {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $sign = 1;\n    for my $num (@arr) {\n        $sign *= $num\
    \ <=> 0;\n        $sum += abs($num);\n    }\n    return $sign * $sum;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n \
    \       if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    if (@arr == 0) {\n        return undef;\n\
    \    }\n    foreach my $num (@arr) {\n        if ($num > 0) {\n            $prod\
    \ *= 1;\n            $sum += $num;\n        } elsif ($num < 0) {\n           \
    \ $prod *= -1;\n            $sum += abs($num);\n        } else {\n           \
    \ $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $elem (@$arr) {\n        if\
    \ ($elem > 0) {\n            $prod *= 1;\n        } elsif ($elem < 0) {\n    \
    \        $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n\
    \        $sum += abs($elem);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $prod *= $_ <=> 0;\n        $sum += abs $_;\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $signs = 1;\n    my $magnitudes = 0;\n    foreach my $num (@$arr) {\n \
    \       if ($num > 0) {\n            $signs *= 1;\n            $magnitudes +=\
    \ $num;\n        } elsif ($num < 0) {\n            $signs *= -1;\n           \
    \ $magnitudes += abs($num);\n        } else {\n            $signs *= 0;\n    \
    \    }\n    }\n    return undef if $signs == 0;\n    return $magnitudes * $signs;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $n (@$arr) {\n        $prod *= $n <=> 0;\n        $sum += abs $n;\n    }\n \
    \   return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $n (@arr) {\n        if ($n > 0) {\n\
    \            $prod *= 1;\n            $sum += $n;\n        } elsif ($n < 0) {\n\
    \            $prod *= -1;\n            $sum += -$n;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $sign = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        if ($num > 0) {\n            $sign *= 1;\n            $sum += $num;\n\
    \        } elsif ($num < 0) {\n            $sign *= -1;\n            $sum += -$num;\n\
    \        } else {\n            $sign *= 0;\n        }\n    }\n    return $sum\
    \ * $sign;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $i (@arr) {\n        if ($i > 0)\
    \ {\n            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0)\
    \ {\n            $prod *= -1;\n            $sum += -$i;\n        } else {\n  \
    \          $prod *= 0;\n        }\n    }\n    return undef if $prod == 0;\n  \
    \  return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $prod\
    \ *= ($num == 0) ? 1 : ($num > 0) ? 1 : -1;\n        $sum += abs($num);\n    }\n\
    \    return $prod * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $sum += abs($num);\n        $prod *= $num ? $num / abs($num) : 0;\n\
    \    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $num (@arr) {\n        if ($num > 0)\
    \ {\n            $prod *= 1;\n            $sum += $num;\n        } elsif ($num\
    \ < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n        }\
    \ else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sign *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $sign *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $sign *= 0;\n        }\n    }\n    return $sum\
    \ * $sign;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        if ($num > 0) {\n            $prod *= 1;\n         \
    \   $sum += $num;\n        } elsif ($num < 0) {\n            $prod *= -1;\n  \
    \          $sum += abs($num);\n        } else {\n            $prod *= 0;\n   \
    \     }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $i (@$arr) {\n        $prod *= $i <=> 0;\n        $sum += abs $i;\n    }\n \
    \   return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $i (@$arr) {\n        $prod *= $i <=> 0;\n        $sum += abs $i;\n    }\n \
    \   return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sum = 0;\n    my $prod = 1;\n    for my\
    \ $num (@$arr) {\n        $sum += abs($num);\n        $prod *= $num <=> 0;\n \
    \   }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        if ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n\
    \        } elsif ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $a (@arr) {\n        if ($a > 0)\
    \ {\n            $prod *= 1;\n            $sum += $a;\n        } elsif ($a < 0)\
    \ {\n            $prod *= -1;\n            $sum += $a;\n        } else {\n   \
    \         $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $num (@arr) {\n        if ($num > 0)\
    \ {\n            $prod *= 1;\n            $sum += $num;\n        } elsif ($num\
    \ < 0) {\n            $prod *= -1;\n            $sum += -$num;\n        } else\
    \ {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num;\n        }\
    \ else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sum = 0;\n    my $prod = 1;\n    foreach\
    \ (@$arr) {\n        $sum += abs($_);\n        $prod *= $_ <=> 0;\n    }\n   \
    \ return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    foreach my $num\
    \ (@arr) {\n        $prod *= $num <=> 0;\n        $sum += abs($num);\n    }\n\
    \    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    if (@arr == 0) {\n        return undef;\n\
    \    }\n    foreach my $num (@arr) {\n        if ($num > 0) {\n            $prod\
    \ *= 1;\n            $sum += $num;\n        } elsif ($num < 0) {\n           \
    \ $prod *= -1;\n            $sum += $num * -1;\n        } else {\n           \
    \ $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $i (@arr) {\n        if ($i > 0) {\n\
    \            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0) {\n\
    \            $prod *= -1;\n            $sum += -$i;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ == 0) {\n            $prod = 0;\n            last;\n        }\n        $prod\
    \ *= $num / abs($num);\n        $sum += abs($num);\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $i (@arr) {\n        if ($i > 0) {\n\
    \            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0) {\n\
    \            $prod *= -1;\n            $sum += abs($i);\n        } else {\n  \
    \          $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sign = 1;\n    my $sum = 0;\n    for my $num (@arr) {\n        if ($num > 0)\
    \ {\n            $sign *= 1;\n            $sum += $num;\n        } elsif ($num\
    \ < 0) {\n            $sign *= -1;\n            $sum += -$num;\n        } else\
    \ {\n            $sign *= 0;\n        }\n    }\n    return $sign * $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sum += $num;\n            $prod *= 1;\n        }\
    \ elsif ($num < 0) {\n            $sum += $num;\n            $prod *= -1;\n  \
    \      } else {\n            $prod *= 0;\n        }\n    }\n    return $sum *\
    \ $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $sign = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        if ($num\
    \ > 0) {\n            $sign *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $sign *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $sign *= 0;\n        }\n    }\n    return $sign ?\
    \ $sum * $sign : undef;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ == 0) {\n            $prod = 0;\n            last;\n        }\n        $prod\
    \ *= $num / abs($num);\n        $sum += abs($num);\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    for my $num (@$arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n            $prod\
    \ *= -1;\n        } else {\n            $prod *= 0;\n        }\n        $sum +=\
    \ abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  return undef unless scalar @$arr;\n    my $signs = 1;\n    my $magnitudes =\
    \ 0;\n    for my $num (@$arr) {\n        $signs *= $num > 0 ? 1 : $num < 0 ? -1\
    \ : 0;\n        $magnitudes += abs $num;\n    }\n    return $magnitudes * $signs;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sum += $num;\n            $prod *= 1;\n        }\
    \ elsif ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    return undef\
    \ if $prod == 0;\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach (@arr) {\n        if ($_ > 0) {\n\
    \            $sum += $_;\n            $prod *= 1;\n        } elsif ($_ < 0) {\n\
    \            $sum += -$_;\n            $prod *= -1;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach (@arr) {\n        if ($_ > 0) {\n\
    \            $sum += $_;\n            $prod *= 1;\n        } elsif ($_ < 0) {\n\
    \            $sum += -$_;\n            $prod *= -1;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $n (@$arr) {\n        $prod *= $n <=> 0;\n        $sum += abs $n;\n    }\n \
    \   return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sign *= 1;\n        } elsif ($num < 0) {\n      \
    \      $sign *= -1;\n        } else {\n            $sign *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $sign;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $i (@arr) {\n        if ($i > 0)\
    \ {\n            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0)\
    \ {\n            $prod *= -1;\n            $sum += $i * -1;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    return undef unless @$arr;\n    foreach\
    \ my $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs($num);\n\
    \    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += abs($num);\n            $prod *= -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $prod\
    \ *= $num <=> 0;\n        $sum += abs($num);\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $i (@arr) {\n        if ($i > 0)\
    \ {\n            $sum += $i;\n            $prod *= 1;\n        } elsif ($i < 0)\
    \ {\n            $sum += $i * -1;\n            $prod *= -1;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $prod *= $_ <=> 0;\n        $sum += abs $_;\n    }\n    return $sum\
    \ * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    if ($prod == 0)\
    \ {\n        return 0;\n    } else {\n        return $sum * $prod;\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    if ($prod == 0)\
    \ {\n        return 0;\n    } else {\n        return $sum * $prod;\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num;\n        }\
    \ else {\n            $prod *= 0;\n        }\n    }\n    if ($prod == 0) {\n \
    \       return 0;\n    } else {\n        return $sum * $prod;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $num (@arr) {\n        if ($num > 0)\
    \ {\n            $prod *= 1;\n            $sum += $num;\n        } elsif ($num\
    \ < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n        }\
    \ else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        if ($num > 0) {\n            $prod *= 1;\n         \
    \   $sum += $num;\n        } elsif ($num < 0) {\n            $prod *= -1;\n  \
    \          $sum += $num * -1;\n        } else {\n            $prod *= 0;\n   \
    \     }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $i (@$arr) {\n        $prod *= $i <=> 0;\n        $sum += abs $i;\n    }\n \
    \   return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sum += $num;\n            $prod *= 1;\n        }\
    \ elsif ($num < 0) {\n            $sum += abs($num);\n            $prod *= -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return undef\
    \ if $prod == 0;\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $i (@arr) {\n        if ($i > 0) {\n\
    \            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0) {\n\
    \            $prod *= -1;\n            $sum += -$i;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num == 0) {\n            $prod = 0;\n            last;\n        }\n      \
    \  $prod *= $num <=> 0;\n        $sum += abs($num);\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += abs($num);\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num == 0) {\n            $prod = 0;\n            last;\n        }\n      \
    \  $sum += abs($num);\n        $prod *= ($num > 0) ? 1 : -1;\n    }\n    return\
    \ $prod ? $sum * $prod : undef;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        $sum +=\
    \ abs($num);\n        $prod *= $num <=> 0;\n    }\n    return $sum * $prod;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $prod\
    \ *= $num <=> 0;\n        $sum += abs($num);\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    return\
    \ undef unless @arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my $num (@arr)\
    \ {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n    }\n    return\
    \ $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach (@arr) {\n        $prod *= $_ <=>\
    \ 0;\n        $sum += abs($_);\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sign = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sign *= 1;\n        } elsif ($num < 0) {\n            $sign\
    \ *= -1;\n        } else {\n            $sign *= 0;\n        }\n        $sum +=\
    \ abs($num);\n    }\n    return $sum * $sign;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    for my $num (@arr) {\n        if ($num > 0)\
    \ {\n            $prod *= 1;\n            $sum += $num;\n        } elsif ($num\
    \ < 0) {\n            $prod *= -1;\n            $sum += -$num;\n        } else\
    \ {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @array = @_;\n  \
    \  my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@array) {\n        if\
    \ ($num > 0) {\n            $sum += $num;\n            $prod *= 1;\n        }\
    \ elsif ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    return $sum *\
    \ $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    if ($prod == 0)\
    \ {\n        return 0;\n    } else {\n        return $sum * $prod;\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless defined $arr;\n    return 0 unless @$arr;\n    my $prod\
    \ = 1;\n    my $sum = 0;\n    for my $num (@$arr) {\n        $prod *= $num <=>\
    \ 0;\n        $sum += abs $num;\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs $num;\n  \
    \  }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sum = 0;\n    my $prod = 1;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $sum += $num;\n            $prod *= 1;\n        } elsif\
    \ ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n            $sum += $num;\n        }\
    \ elsif ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $prod\
    \ * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $i (@arr) {\n        if ($i > 0)\
    \ {\n            $prod *= 1;\n            $sum += $i;\n        } elsif ($i < 0)\
    \ {\n            $prod *= -1;\n            $sum += $i * -1;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  my $sign = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sign *= 1;\n        } elsif ($num < 0) {\n      \
    \      $sign *= -1;\n        } else {\n            $sign *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $sign;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $prod = 1;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $prod *= 1;\n        } elsif ($num < 0) {\n      \
    \      $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n  \
    \      $sum += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    foreach\
    \ my $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum += abs($num);\n\
    \    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sign = 1;\n    my $sum = 0;\n    for my\
    \ $num (@$arr) {\n        if ($num == 0) {\n            $sign = 0;\n        }\
    \ else {\n            $sign *= $num / abs($num);\n            $sum += abs($num);\n\
    \        }\n    }\n    return $sign * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += $num * -1;\n   \
    \     } else {\n            $prod *= 0;\n        }\n    }\n    return $prod *\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ > 0) {\n            $prod *= 1;\n            $sum += $num;\n        } elsif\
    \ ($num < 0) {\n            $prod *= -1;\n            $sum += -$num;\n       \
    \ } else {\n            $prod *= 0;\n        }\n    }\n    return $prod * $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
    \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227709
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my ($arr) = @_;\n  \
    \  return undef unless @$arr;\n    my $prod = 1;\n    my $sum = 0;\n    for my\
    \ $elem (@$arr) {\n        if ($elem > 0) {\n            $prod *= 1;\n       \
    \     $sum += $elem;\n        } elsif ($elem < 0) {\n            $prod *= -1;\n\
    \            $sum += abs($elem);\n        } else {\n            $prod *= 0;\n\
    \        }\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sign = 1;\n    my $sum = 0;\n    for (@$arr)\
    \ {\n        $sign *= $_ <=> 0;\n        $sum += abs($_);\n    }\n    return $sum\
    \ * $sign;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   my $sum = 0;\n    my $prod = 1;\n    foreach my $num (@$arr) {\n        if\
    \ ($num > 0) {\n            $sum += $num;\n            $prod *= 1;\n        }\
    \ elsif ($num < 0) {\n            $sum += -$num;\n            $prod *= -1;\n \
    \       } else {\n            $prod *= 0;\n        }\n    }\n    return $sum *\
    \ $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $sign = 1;\n    my $sum = 0;\n    foreach (@arr) {\n        if ($_ > 0) {\n\
    \            $sign *= 1;\n        } elsif ($_ < 0) {\n            $sign *= -1;\n\
    \        } else {\n            $sign *= 0;\n        }\n        $sum += abs($_);\n\
    \    }\n    return $sign * $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2,\
    \ 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 0
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my $arr = shift;\n \
    \   return undef unless @$arr;\n    my $sum = 0;\n    my $prod = 1;\n    for my\
    \ $n (@$arr) {\n        $sum += abs($n);\n        $prod *= $n <=> 0;\n    }\n\
    \    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $signs = 1;\n    my $magnitudes = 0;\n    foreach my $num (@arr) {\n       \
    \ $signs *= $num <=> 0;\n        $magnitudes += abs($num);\n    }\n    return\
    \ $signs * $magnitudes;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&prod_signs;\n        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
    \ 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
    \  if(eq_deeply($candidate->([1, 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),undef))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 4, 1, 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1,\
    \ 1, 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
- exit_code: 1
  program: "# You are given an array arr of integers and you need to return\n# sum\
    \ of magnitudes of integers multiplied by product of all signs\n# of each number\
    \ in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n\
    # Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n#\
    \ 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my @arr = @_;\n    my\
    \ $prod = 1;\n    my $sum = 0;\n    foreach my $num (@arr) {\n        if ($num\
    \ < 0) {\n            $prod *= -1;\n        } elsif ($num > 0) {\n           \
    \ $prod *= 1;\n        } else {\n            $prod *= 0;\n        }\n        $sum\
    \ += abs($num);\n    }\n    return $sum * $prod;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&prod_signs;\n        if(eq_deeply($candidate->([1,\
    \ 2, 2, -4]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([0, 1]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3,\
    \ -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 2, -1,\
    \ -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
    \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233000
