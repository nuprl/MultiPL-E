name: HumanEval_112_reverse_delete
language: pl
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return an array containing the result string and 1/'' for\
  \ the check.\n# Example\n# >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\
  \"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"\
  abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n\
  \        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"\
  abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my\
    \ %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n\
    \        if (!$c_hash{$char}) {\n            $result .= $char;\n        }\n  \
    \  }\n    my $len = length $result;\n    for (my $i = 0; $i < $len; $i++) {\n\
    \        if (substr($result, $i, 1) ne substr($result, $len - $i - 1, 1)) {\n\
    \            $check = '';\n            last;\n        }\n        $check = 1;\n\
    \    }\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n\
    \    $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    my $result = '';\n    for my $i (0 .. length($s) - 1) {\n     \
    \   next if $c{substr($s, $i, 1)};\n        $result .= substr($s, $i, 1);\n  \
    \  }\n    return [$result, $result eq $r ? 1 : ''];\n}", "my ($s, $c) = @_;\n\
    \    my $result = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!$c{$char}) {\n    \
    \        $result .= $char;\n        }\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        $result .= $char unless\
    \ $hash{$char};\n    }\n    $check = $result eq reverse $result ? 1 : '';\n  \
    \  return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $s_copy = $s;\n\
    \    $s_copy =~ s/[$c]//g;\n    my $check = $s_copy eq reverse $s_copy ? 1 : '';\n\
    \    return [$s_copy, $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    for my $i (0 .. length($s) - 1) {\n        my $char = substr($s, $i, 1);\n\
    \        $result .= $char unless index($c, $char) >= 0;\n    }\n    return [$result,\
    \ $result eq reverse($result) ? 1 : ''];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n\
    \    $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my $res = '';\n    for my $i (0 .. length($s) - 1)\
    \ {\n        my $char = substr($s, $i, 1);\n        $res .= $char unless index($c,\
    \ $char) >= 0;\n    }\n    my $check = $res eq reverse($res) ? 1 : '';\n    return\
    \ [$res, $check];\n}", "my ($s, $c) = @_;\n    my $result = \"\";\n    my $check\
    \ = \"\";\n    my %hash = map { $_ => 1 } split //, $c;\n    foreach my $char\
    \ (split //, $s) {\n        if (!exists $hash{$char}) {\n            $result .=\
    \ $char;\n        }\n    }\n    my $reverse = reverse $result;\n    if ($result\
    \ eq $reverse) {\n        $check = 1;\n    }\n    return [$result, $check];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c_hash =\
    \ map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        if\
    \ (!$c_hash{$char}) {\n            $result .= $char;\n        }\n    }\n    $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %hash;\n \
    \   for my $char (split //, $c) {\n        $hash{$char} = 1;\n    }\n    for my\
    \ $char (split //, $s) {\n        if (!exists $hash{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    my $reverse = reverse $result;\n    if ($result\
    \ eq $reverse) {\n        $check = 1;\n    }\n    return [$result, $check];\n}",
  "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %hash = map\
    \ { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $hash{$char};\n    }\n    $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r\
    \ = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n  \
    \  my $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n  \
    \  $s = join '', grep { !$c{$_} } split //, $s;\n    return [$s, $s eq reverse\
    \ $s];\n}", "my ($s, $c) = @_;\n    my $regex = join '|', split //, $c;\n    $s\
    \ =~ s/$regex//g;\n    my $check = $s eq reverse $s ? 1 : '';\n    return [$s,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my $t = $s;\n\
    \    $t =~ s/[$c]//g;\n    return [$t, $t eq $r];\n}", "my ($s, $c) = @_;\n  \
    \  my $result = '';\n    my $check = '';\n    my %c_hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        $result .= $char unless\
    \ $c_hash{$char};\n    }\n    $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check\
    \ = 1 if $result eq reverse $result;\n    return [$result, $check];\n}", "my ($s,\
    \ $c) = @_;\n    my %hash = map { $_ => 1 } split //, $c;\n    my $result = join\
    \ '', grep { !$hash{$_} } split //, $s;\n    return [$result, $result eq reverse\
    \ $result ? 1 : ''];\n}", "my ($s, $c) = @_;\n    my $res = '';\n    my $check\
    \ = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char (split //,\
    \ $s) {\n        $res .= $char unless $c{$char};\n    }\n    $check = $res eq\
    \ reverse $res ? 1 : '';\n    return [$res, $check];\n}", "my ($s, $c) = @_;\n\
    \    my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!exists $hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    $check = $result eq\
    \ reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) =\
    \ @_;\n    my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1\
    \ } split //, $c;\n    for my $char (split //, $s) {\n        if (!exists $hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    $check = $result eq\
    \ reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) =\
    \ @_;\n    my %hash = map { $_ => 1 } split //, $c;\n    my $result = join '',\
    \ grep { !$hash{$_} } split //, $s;\n    my $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split //, $c;\n \
    \   for my $char (split //, $s) {\n        $result .= $char unless $hash{$char};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my $t = $s;\n\
    \    $t =~ s/[$c]//g;\n    return [$t, $t eq $r];\n}", "my ($s, $c) = @_;\n  \
    \  my $res = $s;\n    $res =~ s/[$c]//g;\n    my $check = $res eq reverse $res\
    \ ? 1 : '';\n    return [$res, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split //, $c;\n \
    \   for my $i (0 .. length($s) - 1) {\n        my $char = substr($s, $i, 1);\n\
    \        if (!exists $hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    if ($result eq reverse $result) {\n        $check = 1;\n    }\n  \
    \  return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $result = '';\n    for my $char (split //, $s) {\n  \
    \      $result .= $char unless $c =~ /$char/;\n    }\n    my $check = $result\
    \ eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c)\
    \ = @_;\n    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n   \
    \ return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    my $check = '';\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c_hash{$char};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    my $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n  \
    \  my $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n  \
    \  my %c = map { $_ => 1 } split //, $c;\n    for my $i (split //, $s) {\n   \
    \     $result .= $i unless $c{$i};\n    }\n    $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r\
    \ = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "my ($s, $c) = @_;\n    my $re = join '', map { quotemeta } split\
    \ //, $c;\n    $s =~ s/$re//g;\n    return [$s, $s eq reverse $s];\n}", "my ($s,\
    \ $c) = @_;\n    my $r = reverse $s;\n    my $p = $s eq $r ? 1 : '';\n    $s =~\
    \ s/[$c]//g;\n    return [$s, $p];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    my $check = '';\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c_hash{$char};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n\
    \    my %hash = map {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n\
    \        $result .= $char unless $hash{$char};\n    }\n    $check = 1 if $result\
    \ eq reverse $result;\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n\
    \    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my %h = map {$_ => 1} split //,\
    \ $c;\n    my $i = 0;\n    my $j = 0;\n    while ($i < length $s and $j < length\
    \ $r) {\n        if ($h{substr $s, $i, 1} or $h{substr $r, $j, 1}) {\n       \
    \     $i++ if $h{substr $s, $i, 1};\n            $j++ if $h{substr $r, $j, 1};\n\
    \        } else {\n            return [substr($s, $i, length $s - $i - $j), 0]\
    \ if substr($s, $i, 1) ne substr($r, $j, 1);\n            $i++;\n            $j++;\n\
    \        }\n    }\n    return [substr($s, $i, length $s - $i - $j), 1];\n}", "my\
    \ ($s, $c) = @_;\n    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n\
    \    return [$t, $t eq $r];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c = map {\
    \ $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c{$char};\n    }\n    $check = $result eq reverse $result ?\
    \ 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %c =\
    \ map { $_ => 1 } split //, $c;\n    my $r = join '', grep { not $c{$_} } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my\
    \ $result = '';\n    my $check = '';\n    my %hash = map {$_ => 1} split //, $c;\n\
    \    for my $char (split //, $s) {\n        $result .= $char unless $hash{$char};\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r =\
    \ join '', grep { not $c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n\
    \    return [$t, $t eq $r];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1\
    \ } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my\
    \ $check = '';\n    my %hash = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        $result .= $char unless $hash{$char};\n    }\n   \
    \ $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n}",
  "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "my ($s, $c) = @_;\n    my %hash = map { $_ => 1 } split //,\
    \ $c;\n    my $res = join '', grep { !exists $hash{$_} } split //, $s;\n    my\
    \ $check = $res eq reverse $res ? 1 : '';\n    return [$res, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $r = join '', reverse split //, $s;\n    my $p = $s eq\
    \ $r ? 1 : '';\n    $s =~ s/[$c]//g;\n    return [$s, $p];\n}", "my ($s, $c) =\
    \ @_;\n    my $r = reverse $s;\n    my $r_c = reverse $c;\n    my $res = '';\n\
    \    my $check = '';\n    my $i = 0;\n    my $j = 0;\n    while ($i < length $s\
    \ && $j < length $c) {\n        if (substr($s, $i, 1) eq substr($c, $j, 1)) {\n\
    \            $i++;\n            $j++;\n        } elsif (substr($s, $i, 1) eq substr($r_c,\
    \ $j, 1)) {\n            $i++;\n            $j++;\n        } elsif (substr($s,\
    \ $i, 1) lt substr($c, $j, 1)) {\n            $res .= substr($s, $i, 1);\n   \
    \         $i++;\n        } else {\n            $j++;\n        }\n    }\n    $res\
    \ .= substr($s, $i) if $i < length $s;\n    $check = 1 if $res eq $r;\n    return\
    \ [$res, $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check\
    \ = '';\n    for my $char (split //, $s) {\n        if (index($c, $char) == -1)\
    \ {\n            $result .= $char;\n        }\n    }\n    if ($result eq reverse\
    \ $result) {\n        $check = 1;\n    }\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %hash = map\
    \ { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $hash{$char};\n    }\n    $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r\
    \ = reverse $s;\n    my $r_c = reverse $c;\n    my $result = '';\n    my $check\
    \ = '';\n    my $i = 0;\n    while ($i < length $s) {\n        my $j = 0;\n  \
    \      my $found = 0;\n        while ($j < length $c) {\n            if (substr($s,\
    \ $i, 1) eq substr($c, $j, 1)) {\n                $found = 1;\n              \
    \  last;\n            }\n            $j++;\n        }\n        if ($found == 0)\
    \ {\n            $result .= substr($s, $i, 1);\n        }\n        $i++;\n   \
    \ }\n    if ($result eq $r) {\n        $check = 1;\n    }\n    return [$result,\
    \ $check];\n}", "my ($str, $chars) = @_;\n    my $result = '';\n    my $is_palindrome\
    \ = 1;\n    my %chars = map { $_ => 1 } split //, $chars;\n    for my $char (split\
    \ //, $str) {\n        if (!exists $chars{$char}) {\n            $result .= $char;\n\
    \        }\n    }\n    my $len = length $result;\n    for my $i (0 .. $len / 2\
    \ - 1) {\n        if (substr($result, $i, 1) ne substr($result, $len - $i - 1,\
    \ 1)) {\n            $is_palindrome = '';\n            last;\n        }\n    }\n\
    \    return [$result, $is_palindrome];\n}", "my ($s, $c) = @_;\n    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c) =\
    \ @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep {\
    \ !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n\
    }", "my ($s, $c) = @_;\n    my %hash;\n    my $result = '';\n    for my $char\
    \ (split //, $c) {\n        $hash{$char} = 1;\n    }\n    for my $char (split\
    \ //, $s) {\n        $result .= $char unless $hash{$char};\n    }\n    return\
    \ [$result, $result eq reverse $result ? 1 : ''];\n}", "my ($s, $c) = @_;\n  \
    \  my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse\
    \ $r;\n    return [$r, $p];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1\
    \ } split //, $c;\n    $s =~ s/[$c]//g;\n    return [$s, $s eq reverse $s ? 1\
    \ : ''];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n\
    \    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        $result .= $char unless $c_hash{$char};\n    }\n    $check = $result\
    \ eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c)\
    \ = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s,\
    \ $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    for my $char (split //, $s) {\n        if (!exists $c{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    $check = $result eq\
    \ reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) =\
    \ @_;\n    my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1\
    \ } split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $hash{$char};\n    }\n    $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $res = '';\n    my $check = 1;\n    my %c = map { $_\
    \ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        if (!$c{$char})\
    \ {\n            $res .= $char;\n        }\n    }\n    my $rev = reverse $res;\n\
    \    if ($res ne $rev) {\n        $check = '';\n    }\n    return [$res, $check];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    for my $char (split //, $s)\
    \ {\n        $result .= $char unless $c =~ /$char/;\n    }\n    return [$result,\
    \ $result eq reverse $result ? 1 : ''];\n}", "my ($s, $c) = @_;\n    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n  \
    \  my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        $result .= $char unless $c_hash{$char};\n    }\n    $check = $result\
    \ eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c)\
    \ = @_;\n    my $result = '';\n    my $check = '';\n    my %c_hash = map { $_\
    \ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        if (!exists\
    \ $c_hash{$char}) {\n            $result .= $char;\n        }\n    }\n    $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c_hash =\
    \ map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless exists $c_hash{$char};\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!exists $hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    $check = $result eq\
    \ reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) =\
    \ @_;\n    my %hash;\n    my @s = split //, $s;\n    my @c = split //, $c;\n \
    \   for my $i (@c) {\n        $hash{$i} = 1;\n    }\n    my @result;\n    for\
    \ my $i (@s) {\n        if (!exists $hash{$i}) {\n            push @result, $i;\n\
    \        }\n    }\n    my $result = join '', @result;\n    my $check = '';\n \
    \   if ($result eq reverse $result) {\n        $check = 1;\n    }\n    return\
    \ [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s,\
    \ $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s,\
    \ $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $c{$char};\n    }\n    $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c = map {\
    \ $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c{$char};\n    }\n    $check = $result eq reverse $result ?\
    \ 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r =\
    \ join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my $t = $s;\n   \
    \ $t =~ s/$c//g;\n    return [$t, $t eq $r];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split //, $c;\n \
    \   for my $char (split //, $s) {\n        $result .= $char unless $hash{$char};\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r,\
    \ $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check\
    \ = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $i (0 .. length($s)\
    \ - 1) {\n        my $char = substr($s, $i, 1);\n        if (!exists $c{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    for my $i (0 .. length($result)\
    \ - 1) {\n        my $char = substr($result, $i, 1);\n        my $rev_char = substr($result,\
    \ length($result) - 1 - $i, 1);\n        if ($char ne $rev_char) {\n         \
    \   $check = '';\n            last;\n        }\n        $check = 1;\n    }\n \
    \   return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n\
    \    my $r = reverse $s;\n    my $p = $s eq $r ? 1 : '';\n    $s =~ s/[$c]//g;\n\
    \    return [$s, $p];\n}", "my ($s, $c) = @_;\n    my $res = '';\n    my $check\
    \ = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $ch (split //,\
    \ $s) {\n        $res .= $ch unless $c{$ch};\n    }\n    $check = $res eq reverse\
    \ $res ? 1 : '';\n    return [$res, $check];\n}", "my ($s, $c) = @_;\n    my $r\
    \ = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq\
    \ reverse $r];\n}", "my ($s, $c) = @_;\n    my $res = '';\n    for my $char (split\
    \ //, $s) {\n        $res .= $char unless $c =~ /$char/;\n    }\n    return [$res,\
    \ $res eq reverse $res];\n}", "my ($s, $c) = @_;\n    my $r = reverse $s;\n  \
    \  my $t = $s;\n    $t =~ s/[$c]//g;\n    my $p = $t eq $r ? 1 : '';\n    return\
    \ [$t, $p];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n\
    \    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!exists $c_hash{$char}) {\n            $result .= $char;\n  \
    \      }\n    }\n    if ($result eq reverse $result) {\n        $check = 1;\n\
    \    }\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %c = map\
    \ { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $result =\
    \ '';\n    my $check = '';\n    my %c_hash = map { $_ => 1 } split //, $c;\n \
    \   for my $char (split //, $s) {\n        $result .= $char unless $c_hash{$char};\n\
    \    }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r =\
    \ join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "my ($s, $c) = @_;\n    my %h;\n    for my $i (0 .. length($c) - 1) {\n  \
    \      $h{substr($c, $i, 1)} = 1;\n    }\n    my $res = '';\n    for my $i (0\
    \ .. length($s) - 1) {\n        $res .= substr($s, $i, 1) unless $h{substr($s,\
    \ $i, 1)};\n    }\n    return [$res, $res eq reverse($res) ? 1 : ''];\n}", "my\
    \ ($s, $c) = @_;\n    my $r = reverse $s;\n    my %c = map { $_ => 1 } split //,\
    \ $c;\n    for my $i (0 .. length($s) - 1) {\n        my $ch = substr $s, $i,\
    \ 1;\n        if ($c{$ch}) {\n            substr $s, $i, 1, '';\n            substr\
    \ $r, $i, 1, '';\n        }\n    }\n    return [$s, $s eq $r ? 1 : ''];\n}", "my\
    \ ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c_hash =\
    \ map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c_hash{$char};\n    }\n    $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split //, $c;\n \
    \   for my $char (split //, $s) {\n        if (!$hash{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    if ($result eq reverse $result) {\n       \
    \ $check = 1;\n    }\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n\
    \    my $result = '';\n    my $check = '';\n    for my $i (0 .. length($s) - 1)\
    \ {\n        my $char = substr($s, $i, 1);\n        if (index($c, $char) == -1)\
    \ {\n            $result .= $char;\n        }\n    }\n    if ($result eq reverse($result))\
    \ {\n        $check = 1;\n    }\n    return [$result, $check];\n}", "my ($s, $c)\
    \ = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s,\
    \ $c) = @_;\n    my $r = reverse $s;\n    my $result = '';\n    my $check = '';\n\
    \    my %c = map {$_ => 1} split //, $c;\n    for my $i (0..length($s)-1) {\n\
    \        if (!$c{substr($s, $i, 1)}) {\n            $result .= substr($s, $i,\
    \ 1);\n        }\n        if (!$c{substr($r, $i, 1)}) {\n            $check .=\
    \ substr($r, $i, 1);\n        }\n    }\n    return [$result, $result eq $check];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %hash\
    \ = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n       \
    \ $result .= $char unless $hash{$char};\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $result = '';\n    my $is_palindrome = 1;\n    my %c_hash = map { $_ =>\
    \ 1 } split //, $c;\n    for my $char (split //, $s) {\n        if (!exists $c_hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    my $len = length $result;\n\
    \    for (my $i = 0; $i < $len / 2; $i++) {\n        if (substr($result, $i, 1)\
    \ ne substr($result, $len - $i - 1, 1)) {\n            $is_palindrome = '';\n\
    \            last;\n        }\n    }\n    return [$result, $is_palindrome];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %hash = map\
    \ { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $hash{$char};\n    }\n    $check = $result eq reverse $result\
    \ ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %c_hash = map { $_ => 1 } split //, $c;\n\
    \    for my $char (split //, $s) {\n        if (!exists $c_hash{$char}) {\n  \
    \          $result .= $char;\n        }\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!exists $hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    $check = $result eq\
    \ reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) =\
    \ @_;\n    my $result = '';\n    my $check = '';\n    my %c = map { $_ => 1 }\
    \ split //, $c;\n    for my $char (split //, $s) {\n        if (!$c{$char}) {\n\
    \            $result .= $char;\n        }\n    }\n    if ($result eq reverse $result)\
    \ {\n        $check = 1;\n    }\n    return [$result, $check];\n}", "my ($s, $c)\
    \ = @_;\n    $s =~ s/[$c]//g;\n    return [$s, $s eq reverse $s];\n}", "my ($s,\
    \ $c) = @_;\n    my $res = '';\n    my $check = '';\n    my %c = map { $_ => 1\
    \ } split //, $c;\n    for my $char (split //, $s) {\n        $res .= $char unless\
    \ $c{$char};\n    }\n    $check = 1 if $res eq reverse $res;\n    return [$res,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my $t = $s;\n\
    \    $t =~ s/[$c]//g;\n    my $p = $t eq $r ? 1 : '';\n    return [$t, $p];\n}",
  "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n    my $check\
    \ = $s_copy eq reverse $s_copy ? 1 : '';\n    return [$s_copy, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $r = join '', grep { index($c, $_) == -1 } split //,\
    \ $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $r =\
    \ reverse $s;\n    my $res = '';\n    my $check = 1;\n    for my $i (0..length($s)-1)\
    \ {\n        if (index($c, substr($s, $i, 1)) == -1) {\n            $res .= substr($s,\
    \ $i, 1);\n            if (substr($s, $i, 1) ne substr($r, $i, 1)) {\n       \
    \         $check = '';\n            }\n        }\n    }\n    return [$res, $check];\n\
    }", "my ($s, $c) = @_;\n    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my\
    \ $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r\
    \ eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check\
    \ = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for my $char (split //,\
    \ $s) {\n        $result .= $char unless $c{$char};\n    }\n    $check = $result\
    \ eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c)\
    \ = @_;\n    my $r = reverse $s;\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    my @s = split //, $s;\n    my @r = split //, $r;\n    my $i = 0;\n    while\
    \ ($i < @s) {\n        if ($c{$s[$i]} || $c{$r[$i]}) {\n            splice @s,\
    \ $i, 1;\n            splice @r, $i, 1;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return [join('', @s), join('', @s) eq join('', @r) ? 1\
    \ : ''];\n}", "my ($s, $c) = @_;\n    my $d = join '', split //, $c;\n    $s =~\
    \ s/[$d]//g;\n    return [$s, $s eq reverse $s];\n}", "my ($s, $c) = @_;\n   \
    \ my $result = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //,\
    \ $c;\n    for my $i (0 .. length($s) - 1) {\n        my $char = substr($s, $i,\
    \ 1);\n        if (!$c{$char}) {\n            $result .= $char;\n        }\n \
    \   }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c)\
    \ = @_;\n    my %hash = map { $_ => 1 } split //, $c;\n    my $res = join '',\
    \ grep { !$hash{$_} } split //, $s;\n    return [$res, $res eq reverse $res];\n\
    }", "my ($s, $c) = @_;\n    my %c = map {$_ => 1} split //, $c;\n    my $r = join\
    \ '', grep {!$c{$_}} split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my\
    \ ($s, $c) = @_;\n    my $r = reverse $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n\
    \    return [$t, $t eq $r];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c = map {\
    \ $_ => 1 } split //, $c;\n    for my $i (0 .. length($s) - 1) {\n        my $char\
    \ = substr($s, $i, 1);\n        if (!exists $c{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %hash = map { $_\
    \ => 1 } split //, $c;\n    my $res = join '', grep { !$hash{$_} } split //, $s;\n\
    \    return [$res, $res eq reverse $res];\n}", "my ($s, $c) = @_;\n    my $r =\
    \ reverse $s;\n    my $res = '';\n    my $check = 1;\n    for my $i (0..length($s)-1)\
    \ {\n        if (index($c, substr($s, $i, 1)) == -1) {\n            $res .= substr($s,\
    \ $i, 1);\n            if (substr($s, $i, 1) ne substr($r, $i, 1)) {\n       \
    \         $check = '';\n            }\n        }\n    }\n    return [$res, $check];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c =\
    \ map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c{$char};\n    }\n    $check = $result eq reverse $result ?\
    \ 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %hash = map {$_ => 1} split //, $c;\n   \
    \ for my $char (split //, $s) {\n        $result .= $char unless $hash{$char};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep { index($c, $_)\
    \ == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c)\
    \ = @_;\n    my $res = '';\n    my $check = 1;\n    for my $i (0..length($s)-1)\
    \ {\n        my $char = substr($s, $i, 1);\n        if (index($c, $char) == -1)\
    \ {\n            $res .= $char;\n        }\n    }\n    for my $i (0..length($res)-1)\
    \ {\n        my $char = substr($res, $i, 1);\n        my $char2 = substr($res,\
    \ length($res)-1-$i, 1);\n        if ($char ne $char2) {\n            $check =\
    \ '';\n            last;\n        }\n    }\n    return [$res, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my $hash = {};\n\
    \    for my $i (0 .. length($c) - 1) {\n        $hash->{substr($c, $i, 1)} = 1;\n\
    \    }\n    for my $i (0 .. length($s) - 1) {\n        my $char = substr($s, $i,\
    \ 1);\n        if (!exists $hash->{$char}) {\n            $result .= $char;\n\
    \        }\n    }\n    for my $i (0 .. length($result) - 1) {\n        my $char\
    \ = substr($result, $i, 1);\n        if ($char ne substr($result, -$i - 1, 1))\
    \ {\n            $check = '';\n            last;\n        }\n        $check =\
    \ 1;\n    }\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r\
    \ = reverse $s;\n    my $result = '';\n    my $check = '';\n    my %c = map {\
    \ $_ => 1 } split //, $c;\n    for my $i (0 .. length($s) - 1) {\n        if (!exists\
    \ $c{substr($s, $i, 1)}) {\n            $result .= substr($s, $i, 1);\n      \
    \  }\n        if (!exists $c{substr($r, $i, 1)}) {\n            $check .= substr($r,\
    \ $i, 1);\n        }\n    }\n    return [$result, $result eq $check ? 1 : ''];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c =\
    \ map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        if\
    \ (!$c{$char}) {\n            $result .= $char;\n        }\n    }\n    $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my $res = '';\n    my $check = '';\n    my %c = map { $_\
    \ => 1 } split //, $c;\n    for my $i (split //, $s) {\n        $res .= $i unless\
    \ $c{$i};\n    }\n    $check = $res eq reverse $res ? 1 : '';\n    return [$res,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    for my $char (split\
    \ //, $s) {\n        $result .= $char unless $c =~ /$char/;\n    }\n    my $check\
    \ = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n}", "my\
    \ ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my $s_copy =\
    \ $s;\n    for my $char (split //, $c) {\n        $s_copy =~ s/$char//g;\n   \
    \ }\n    my $result = $s_copy eq $r ? 1 : '';\n    return [$s_copy, $result];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c =\
    \ map { $_ => 1 } split //, $c;\n    for my $ch (split //, $s) {\n        $result\
    \ .= $ch unless $c{$ch};\n    }\n    $check = $result eq reverse $result ? 1 :\
    \ '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r = reverse\
    \ $s;\n    my $result = '';\n    my $check = '';\n    for my $i (0 .. length($s)\
    \ - 1) {\n        my $char = substr($s, $i, 1);\n        if (index($c, $char)\
    \ == -1) {\n            $result .= $char;\n        }\n    }\n    if ($result eq\
    \ $r) {\n        $check = 1;\n    }\n    return [$result, $check];\n}", "my ($s,\
    \ $c) = @_;\n    my $res = '';\n    my $check = '';\n    my @s = split //, $s;\n\
    \    my @c = split //, $c;\n    for my $i (@s) {\n        if (grep {$i eq $_}\
    \ @c) {\n            next;\n        }\n        $res .= $i;\n    }\n    my @res\
    \ = split //, $res;\n    for my $i (0..$#res) {\n        if ($res[$i] ne $res[$#res\
    \ - $i]) {\n            $check = '';\n            last;\n        }\n        $check\
    \ = 1;\n    }\n    return [$res, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n\
    \    $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    my @s = split //, $s;\n    my @r = split //, $r;\n    my @res;\n\
    \    for my $i (0 .. $#s) {\n        if (!exists $c{$s[$i]}) {\n            push\
    \ @res, $s[$i];\n        }\n        if (!exists $c{$r[$i]}) {\n            push\
    \ @res, $r[$i];\n        }\n    }\n    my $res = join '', @res;\n    return [$res,\
    \ $res eq reverse $res];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep {\
    \ index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my %c = map {$_ => 1} split //, $c;\n    my @s = split //,\
    \ $s;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless\
    \ $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    return [$r, $r eq reverse\
    \ $r];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep { index($c, $_) == -1\
    \ } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n\
    \    my $result = '';\n    my $check = '';\n    my %hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!$hash{$char}) {\n \
    \           $result .= $char;\n        }\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "my ($s, $c) = @_;\n    my %c = map {$_ => 1} split //, $c;\n    my $r = join '',\
    \ grep {!$c{$_}} split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s,\
    \ $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s,\
    \ $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c_hash\
    \ = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n       \
    \ $result .= $char unless $c_hash{$char};\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $re = join '', map { quotemeta } split //, $c;\n    $s =~ s/$re//g;\n \
    \   return [$s, $s eq reverse $s];\n}", "my ($s, $c) = @_;\n    my $r = '';\n\
    \    my $p = 1;\n    my %c = map { $_ => 1 } split //, $c;\n    for my $i (0 ..\
    \ length($s) - 1) {\n        my $ch = substr($s, $i, 1);\n        if (!$c{$ch})\
    \ {\n            $r .= $ch;\n        }\n    }\n    for my $i (0 .. length($r)\
    \ - 1) {\n        my $ch1 = substr($r, $i, 1);\n        my $ch2 = substr($r, length($r)\
    \ - 1 - $i, 1);\n        if ($ch1 ne $ch2) {\n            $p = '';\n         \
    \   last;\n        }\n    }\n    return [$r, $p];\n}", "my ($s, $c) = @_;\n  \
    \  my $r = reverse $s;\n    my %c = map { $_ => 1 } split //, $c;\n    my $i =\
    \ 0;\n    my $j = 0;\n    while ($i < length $s && $j < length $r) {\n       \
    \ if ($c{substr $s, $i, 1}) {\n            $i++;\n        } elsif ($c{substr $r,\
    \ $j, 1}) {\n            $j++;\n        } else {\n            last if substr($s,\
    \ $i, 1) ne substr($r, $j, 1);\n            $i++;\n            $j++;\n       \
    \ }\n    }\n    my $result = substr $s, $i, length $s - $i - $j;\n    return [$result,\
    \ $result eq reverse $result];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    $s =~ s/[$c]//g;\n    return [$s, $s eq reverse $s];\n\
    }", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r =\
    \ join '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n   \
    \ return [$r, $p];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split\
    \ //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $re = join '', map { quotemeta\
    \ } split //, $c;\n    $s =~ s/$re//g;\n    return [$s, $s eq reverse $s];\n}",
  "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c = map {$_\
    \ => 1} split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $c{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n  \
    \  return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n \
    \   my $check = '';\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for my\
    \ $char (split //, $s) {\n        $result .= $char unless $c_hash{$char};\n  \
    \  }\n    $check = 1 if $result eq reverse $result;\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %c =\
    \ map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result\
    \ .= $char unless $c{$char};\n    }\n    $check = $result eq reverse $result ?\
    \ 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result\
    \ = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        $result .= $char unless $c{$char};\n    }\n\
    \    $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my @s =\
    \ split //, $s;\n    my @r;\n    while (@s) {\n        my $e = pop @s;\n     \
    \   push @r, $e unless $c{$e};\n    }\n    my $r = join '', @r;\n    my $p = join\
    \ '', reverse @r;\n    return [$r, $r eq $p];\n}", "my ($s, $c) = @_;\n    my\
    \ $res = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    for my $i (0 .. length($s) - 1) {\n        my $ch = substr($s, $i, 1);\n\
    \        if (!$c{$ch}) {\n            $res .= $ch;\n        }\n    }\n    my $len\
    \ = length($res);\n    for my $i (0 .. $len - 1) {\n        my $ch = substr($res,\
    \ $i, 1);\n        my $ch2 = substr($res, $len - $i - 1, 1);\n        if ($ch\
    \ ne $ch2) {\n            return [$res, ''];\n        }\n    }\n    return [$res,\
    \ 1];\n}", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n   \
    \ my %c = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n \
    \       $result .= $char unless $c{$char};\n    }\n    $check = $result eq reverse\
    \ $result ? 1 : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n \
    \   my $result = '';\n    my $check = '';\n    my %c = map { $_ => 1 } split //,\
    \ $c;\n    for my $ch (split //, $s) {\n        $result .= $ch unless $c{$ch};\n\
    \    }\n    $check = $result eq reverse $result ? 1 : '';\n    return [$result,\
    \ $check];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    my $r = join '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse\
    \ $r;\n    return [$r, $p];\n}", "my ($str, $chars) = @_;\n    my %chars = map\
    \ { $_ => 1 } split //, $chars;\n    my $result = join '', grep { !$chars{$_}\
    \ } split //, $str;\n    my $check = $result eq reverse $result ? 1 : '';\n  \
    \  return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n \
    \   my $check = '';\n    my %hash = map { $_ => 1 } split //, $c;\n    for my\
    \ $char (split //, $s) {\n        $result .= $char unless $hash{$char};\n    }\n\
    \    $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my $res = $s;\n    $res =~ s/[$c]//g;\n    my $check\
    \ = $res eq reverse $res ? 1 : '';\n    return [$res, $check];\n}", "my ($s, $c)\
    \ = @_;\n    my $result = '';\n    my $check = '';\n    my %hash = map { $_ =>\
    \ 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $hash{$char};\n    }\n    $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my $result = '';\n\
    \    my $check = '';\n    my %hash = map { $_ => 1 } split //, $c;\n    for my\
    \ $char (split //, $s) {\n        if (!exists $hash{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    $check = $result eq reverse $result ? 1 : '';\n\
    \    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "my ($s, $c) = @_;\n    my $result = '';\n    my $check = '';\n    my %hash\
    \ = map { $_ => 1 } split //, $c;\n    for my $i (split //, $s) {\n        $result\
    \ .= $i unless $hash{$i};\n    }\n    $check = $result eq reverse $result ? 1\
    \ : '';\n    return [$result, $check];\n}", "my ($s, $c) = @_;\n    my %c = map\
    \ { $_ => 1 } split //, $c;\n    my @s = split //, $s;\n    my @new_s;\n    for\
    \ my $i (0 .. $#s) {\n        push @new_s, $s[$i] unless $c{$s[$i]};\n    }\n\
    \    my $new_s = join '', @new_s;\n    return [$new_s, $new_s eq reverse $new_s];\n\
    }", "my ($s, $c) = @_;\n    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s, $c) = @_;\n    my\
    \ %hash = map { $_ => 1 } split //, $c;\n    my $result = join '', grep { !$hash{$_}\
    \ } split //, $s;\n    my $check = $result eq reverse $result ? 1 : '';\n    return\
    \ [$result, $check];\n}", "my ($s, $c) = @_;\n    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "my ($s,\
    \ $c) = @_;\n    my $regex = join '|', split //, $c;\n    $s =~ s/$regex//g;\n\
    \    return [$s, $s eq reverse $s];\n}", "my ($s, $c) = @_;\n    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "my ($s, $c) = @_;\n    my $result = $s;\n    $result =~ s/[$c]//g;\n\
    \    my $check = $result eq reverse $result ? 1 : '';\n    return [$result, $check];\n\
    }", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r =\
    \ join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "my ($s, $c) = @_;\n    my %c = map { $_ => 1 } split //, $c;\n    my $r =\
    \ join '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n   \
    \ return [$r, $p];\n}", "my ($s, $c) = @_;\n    my $r = reverse $s;\n    my $r_c\
    \ = reverse $c;\n    my $r_s = $s;\n    $r_s =~ s/[$c]//g;\n    my $r_r_s = $r_s;\n\
    \    $r_r_s =~ s/[$r_c]//g;\n    return [$r_s, $r_r_s eq $r_s ? 1 : ''];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
