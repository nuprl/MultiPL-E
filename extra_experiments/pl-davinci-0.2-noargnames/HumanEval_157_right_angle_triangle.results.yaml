language: pl
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    return\
    \ 1 if $a ** 2 + $b ** 2 == $c ** 2;\n    return 1 if $a ** 2 + $c ** 2 == $b\
    \ ** 2;\n    return 1 if $b ** 2 + $c ** 2 == $a ** 2;\n    return \"\";\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $ret = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        my $max = max($a,\
    \ $b, $c);\n        my $min = min($a, $b, $c);\n        my $mid = $a + $b + $c\
    \ - $max - $min;\n        if ($max * $max == $min * $min + $mid * $mid) {\n  \
    \          $ret = 1;\n        }\n    }\n    return $ret;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmphcdh6bl3.pl line 14.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max * $max) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp64_40kdr.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81msvhlv.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max * $max) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp64_40kdr.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return ($max * $max == $min * $min + $mid * $mid)\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmprjiwqbw8.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a ** 2\
    \ + $b ** 2 == $c ** 2 || $a ** 2 + $c ** 2 == $b ** 2 || $b ** 2 + $c ** 2 ==\
    \ $a ** 2) {\n            $result = 1;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if (($a ** 2 + $b ** 2 == $c ** 2) || ($a ** 2 + $c **\
    \ 2 == $b ** 2) || ($b ** 2 + $c ** 2 == $a ** 2)) {\n        $result = 1;\n \
    \   }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp054byna6.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    if ($max * $max == $sum - $max - $min) {\n        return 1;\n\
    \    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpnt1b70xj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp44wo77x2.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ @sides = sort {$a <=> $b} ($a, $b, $c);\n    return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp054byna6.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    return $max == sqrt($a**2 + $b**2 + $c**2 - $max**2)\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp9kgrfs6n.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8nybbcr2.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $hypotenuse = max($a, $b, $c);\n    my $side1 = min($a, $b, $c);\n    my $side2\
    \ = ($a + $b + $c) - $hypotenuse - $side1;\n    if ($hypotenuse**2 == $side1**2\
    \ + $side2**2) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpqu31311z.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    return $max * $max == $sum - $max - $min ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpdg_a95t6.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $rest = $sum -\
    \ $max;\n    if ($max * $max == $rest * $rest) {\n        return 1;\n    }\n \
    \   return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpofvh06zj.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2 ? 1 :\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpmt_siclt.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2 ? 1 :\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpa8wfou62.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    if ($max * $max == $min * $min + ($sum - $max - $min) * ($sum\
    \ - $max - $min)) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpr8wqja_g.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    return\
    \ 1 if $a**2 + $b**2 == $c**2;\n    return 1 if $a**2 + $c**2 == $b**2;\n    return\
    \ 1 if $b**2 + $c**2 == $a**2;\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    if ($max * $max == $min * $min + ($sum - $max - $min) * ($sum\
    \ - $max - $min)) {\n        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpskri9agg.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $diff = $sum -\
    \ $max;\n    return $max * $max == $diff * $diff ? 1 : '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmptw6mot1n.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2) {\n            $result = 1;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2) {\n            $result = 1;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2 ? 1 :\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpa8wfou62.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2) {\n            $result = 1;\n        }\n        elsif ($a**2\
    \ + $c**2 == $b**2) {\n            $result = 1;\n        }\n        elsif ($b**2\
    \ + $c**2 == $a**2) {\n            $result = 1;\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ @sides = sort {$a <=> $b} ($a, $b, $c);\n    return $sides[2]**2 == $sides[0]**2\
    \ + $sides[1]**2 ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $r = '';\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 ==\
    \ $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n            $r\
    \ = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    #\
    \ TODO: Write your code here\n    # Hint: You can use the Pythagorean theorem\
    \ to check if the triangle is\n    # right-angled.\n    # https://en.wikipedia.org/wiki/Pythagorean_theorem\n\
    \    if (($a**2 + $b**2) == $c**2) {\n        return 1;\n    }\n    else {\n \
    \       return \"\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $r = '';\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 ==\
    \ $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n            $r\
    \ = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    if ($max ** 2 == $min ** 2 + ($sum - $max - $min) ** 2) {\n  \
    \      return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp0uvq82hp.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ @sides = sort {$a <=> $b} ($a, $b, $c);\n    return ($sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8nybbcr2.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    if\
    \ ($a > $b && $a > $c) {\n        return $a * $a == $b * $b + $c * $c;\n    }\n\
    \    elsif ($b > $a && $b > $c) {\n        return $b * $b == $a * $a + $c * $c;\n\
    \    }\n    else {\n        return $c * $c == $a * $a + $b * $b;\n    }\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpnvoagvob.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpkvggq0ej.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp44wo77x2.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $r = \"\";\n    # Write your code here\n    if ($a**2 + $b**2 == $c**2) {\n\
    \        $r = 1;\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ @sides = sort {$a <=> $b} ($a, $b, $c);\n    if ($sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2\
    \ + $c**2) || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2\
    \ + $c**2) || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2) {\n            $result = 1;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2 ? 1 :\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpa8wfou62.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp054byna6.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $r = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2\
    \ == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n          \
    \  $r = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $r = '';\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2 ==\
    \ $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n            $r\
    \ = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        my $max = max($a,\
    \ $b, $c);\n        my $sum = $a + $b + $c;\n        if ($max == $a) {\n     \
    \       if ($a * $a == $b * $b + $c * $c) {\n                $result = 1;\n  \
    \          }\n        } elsif ($max == $b) {\n            if ($b * $b == $a *\
    \ $a + $c * $c) {\n                $result = 1;\n            }\n        } elsif\
    \ ($max == $c) {\n            if ($c * $c == $a * $a + $b * $b) {\n          \
    \      $result = 1;\n            }\n        }\n    }\n    return $result;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmplho7ct3i.pl line 14.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return ($max * $max == $min * $min + $mid * $mid)\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmprjiwqbw8.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpk67r9mn8.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $diff = $sum -\
    \ 2 * $max;\n    return $max * $max == $diff * $diff;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpi9xe2uh7.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp054byna6.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp44wo77x2.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    my $mid = $sum - $max - $min;\n    if ($max * $max == $mid * $mid\
    \ + $min * $min) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp249rj0sc.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    return\
    \ 1 if $a**2 + $b**2 == $c**2;\n    return 1 if $a**2 + $c**2 == $b**2;\n    return\
    \ 1 if $b**2 + $c**2 == $a**2;\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp9ftv2f5v.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max == $a) {\n\
    \        return $b**2 + $c**2 == $a**2;\n    } elsif ($max == $b) {\n        return\
    \ $a**2 + $c**2 == $b**2;\n    } else {\n        return $a**2 + $b**2 == $c**2;\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzuwa5eik.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp44wo77x2.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    my $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n\
    \    my $mid = $a + $b + $c - $max - $min;\n    if ($max * $max == $min * $min\
    \ + $mid * $mid) {\n        $result = 1;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpt8d9moyw.pl line 13.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    return\
    \ $a * $a + $b * $b == $c * $c ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max * $max) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp64_40kdr.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $hypotenuse = max($a, $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n    my\
    \ $cathetus2 = ($a + $b + $c) - $hypotenuse - $cathetus1;\n    return ($hypotenuse\
    \ ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2) ? 1 : '';\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpcrexv4zf.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    return\
    \ 1 if $a**2 + $b**2 == $c**2;\n    return 1 if $a**2 + $c**2 == $b**2;\n    return\
    \ 1 if $b**2 + $c**2 == $a**2;\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    if ($max * $max == $min * $min + ($sum - $max - $min) * ($sum\
    \ - $max - $min)) {\n        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpskri9agg.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpkvggq0ej.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2)\
    \ || ($b**2 + $c**2 == $a**2)) {\n        $result = 1;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8nybbcr2.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max * $max) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp64_40kdr.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2) {\n            $result = 1;\n        }\n        elsif ($a**2\
    \ + $c**2 == $b**2) {\n            $result = 1;\n        }\n        elsif ($b**2\
    \ + $c**2 == $a**2) {\n            $result = 1;\n        }\n    }\n    return\
    \ $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    return $max == sqrt($a**2 + $b**2 + $c**2 - $max**2)\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp9kgrfs6n.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp3fib9dod.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if (($a * $a\
    \ + $b * $b == $c * $c) || ($a * $a + $c * $c == $b * $b) || ($b * $b + $c * $c\
    \ == $a * $a)) {\n            $result = 1;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $hypotenuse = max($a, $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n    my\
    \ $cathetus2 = ($a + $b + $c) - $hypotenuse - $cathetus1;\n    return ($hypotenuse**2\
    \ == $cathetus1**2 + $cathetus2**2) ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpl5qxs2ct.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpkvggq0ej.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($min > 0 && $mid > 0 && $max > 0) {\n      \
    \  if ($max * $max == $min * $min + $mid * $mid) {\n            return 1;\n  \
    \      }\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpxw5zm8d3.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2 ? 1 :\
    \ '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpa8wfou62.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return ($max * $max == $min * $min + $mid * $mid)\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpsnoha7au.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt($b**2\
    \ + $c**2) || $b == sqrt($a**2 + $c**2) || $c == sqrt($a**2 + $b**2)) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpprahv4_r.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if (($a**2 +\
    \ $b**2 == $c**2) || ($a**2 + $c**2 == $b**2) || ($b**2 + $c**2 == $a**2)) {\n\
    \            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return ($max * $max\
    \ == $sum - $max * $max) ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp1p1n_o4d.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpk67r9mn8.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    my $mid = $sum - $max - $min;\n    if ($max * $max == $mid * $mid\
    \ + $min * $min) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp249rj0sc.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max**2 == $min**2 + $mid**2) {\n        return\
    \ 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpie61b8_v.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    if\
    \ ($a**2 + $b**2 == $c**2) {\n        return 1;\n    }\n    elsif ($a**2 + $c**2\
    \ == $b**2) {\n        return 1;\n    }\n    elsif ($b**2 + $c**2 == $a**2) {\n\
    \        return 1;\n    }\n    else {\n        return '';\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    return $max ** 2 == $a ** 2 + $b ** 2 + $c ** 2\
    \ - $max ** 2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpyiga9d38.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8nybbcr2.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max**2 == $min**2 + $mid**2) {\n        return\
    \ 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp9qvwbz5v.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    return $max**2 == $a**2 + $b**2 + $c**2 - $max**2;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp85j91zr7.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8nybbcr2.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $sum_without_max\
    \ = $sum - $max;\n    return $max * $max == $sum_without_max * $sum_without_max\
    \ ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpx711_5g0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return ($max**2 == $min**2 + $mid**2) ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpp3kzy6ii.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpkvggq0ej.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2)\
    \ || ($b**2 + $c**2 == $a**2)) {\n        $result = 1;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if (($a**2 + $b**2 == $c**2) || ($a**2 + $c**2 == $b**2)\
    \ || ($b**2 + $c**2 == $a**2)) {\n        $result = 1;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81msvhlv.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    if\
    \ ($a > $b && $a > $c) {\n        return $b**2 + $c**2 == $a**2;\n    }\n    elsif\
    \ ($b > $a && $b > $c) {\n        return $a**2 + $c**2 == $b**2;\n    }\n    else\
    \ {\n        return $a**2 + $b**2 == $c**2;\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $hypotenuse = 0;\n    my $side1 = 0;\n    my $side2 = 0;\n    if ($a > $b &&\
    \ $a > $c) {\n        $hypotenuse = $a;\n        $side1 = $b;\n        $side2\
    \ = $c;\n    } elsif ($b > $a && $b > $c) {\n        $hypotenuse = $b;\n     \
    \   $side1 = $a;\n        $side2 = $c;\n    } else {\n        $hypotenuse = $c;\n\
    \        $side1 = $a;\n        $side2 = $b;\n    }\n    if ($hypotenuse**2 ==\
    \ $side1**2 + $side2**2) {\n        return 1;\n    } else {\n        return \"\
    \";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    return\
    \ 1 if ($a ** 2 + $b ** 2 == $c ** 2);\n    return 1 if ($a ** 2 + $c ** 2 ==\
    \ $b ** 2);\n    return 1 if ($b ** 2 + $c ** 2 == $a ** 2);\n    return \"\"\
    ;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max ** 2 == $min ** 2 + $mid ** 2) {\n   \
    \     return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmphtqdmhvg.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    my @sides = sort {$a <=> $b} ($a, $b, $c);\n    if ($sides[0]**2\
    \ + $sides[1]**2 == $sides[2]**2) {\n        $result = 1;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8nybbcr2.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp054byna6.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $diff = $sum -\
    \ $max;\n    if ($max * $max == $diff * $diff) {\n        return 1;\n    }\n \
    \   return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp3t_qorzj.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0 && $a + $b > $c && $a +\
    \ $c > $b && $b + $c > $a) {\n        if ($a**2 + $b**2 == $c**2 || $a**2 + $c**2\
    \ == $b**2 || $b**2 + $c**2 == $a**2) {\n            $result = 1;\n        }\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $hypotenuse = max($a, $b, $c);\n    my $sum_of_squares = $a**2 + $b**2 + $c**2\
    \ - $hypotenuse**2;\n    return $sum_of_squares == $hypotenuse**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5b24j8hq.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpaic3umsz.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max ** 2 == $min ** 2 + $mid ** 2) {\n    \
    \    return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpsyv76y3h.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    if ($max * $max == $min * $min + ($sum - $max - $min) * ($sum\
    \ - $max - $min)) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpr8wqja_g.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return ($max ** 2 == $min ** 2 + $mid ** 2) ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpkvggq0ej.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmppoz8xwi4.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $r = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 + $b**2\
    \ == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n          \
    \  $r = 1;\n        }\n    }\n    return $r;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = $a > $b ? $a : $b;\n    $max = $max > $c ? $max : $c;\n    my $min =\
    \ $a < $b ? $a : $b;\n    $min = $min < $c ? $min : $c;\n    my $mid = $a + $b\
    \ + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid ? 1\
    \ : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a == sqrt($b**2 + $c**2) || $b == sqrt($a**2 + $c**2)\
    \ || $c == sqrt($a**2 + $b**2)) {\n        $result = 1;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    my $mid = $sum - $max - $min;\n    if ($max ** 2 == $mid ** 2\
    \ + $min ** 2) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp8rr7ik8w.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp054byna6.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp5xqrnxi0.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max * $max) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp64_40kdr.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max ** 2 == $min ** 2 + $mid ** 2;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpnvoagvob.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max * $max) {\n        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmprai8z8as.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my $min = min($a,\
    \ $b, $c);\n    if ($max * $max == $min * $min + ($sum - $max - $min) * ($sum\
    \ - $max - $min)) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpr8wqja_g.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max ** 2 == $min ** 2 + $mid ** 2) {\n   \
    \     return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmphtqdmhvg.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if (($a ** 2 + $b ** 2 == $c ** 2) || ($a ** 2 + $c **\
    \ 2 == $b ** 2) || ($b ** 2 + $c ** 2 == $a ** 2)) {\n        $result = 1;\n \
    \   }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    if ($max * $max ==\
    \ $sum - $max * $max) {\n        return 1;\n    }\n    return '';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp64_40kdr.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpprahv4_r.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2 ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpzea4ehcc.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    return ($max**2 == $min**2 + $mid**2) ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpmyrd9m9h.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max * $max == $min * $min + $mid * $mid;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpseq7zfjd.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    return $max * $max\
    \ == $sum - $max * $max ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmpj6fqrzoj.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = $a;\n    $max = $b if $b > $max;\n    $max = $c if $c > $max;\n    my\
    \ $sum = $a + $b + $c - $max;\n    return $max * $max == $sum * $sum ? 1 : '';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
    \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234530
- exit_code: 1
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ @sides = sort {$a <=> $b} ($a, $b, $c);\n    return $sides[0]**2 + $sides[1]**2\
    \ == $sides[2]**2;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3, 4, 5),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 2, 3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(10, 6, 8),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 2),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7,\
    \ 24, 25),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(10, 5, 7),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 12, 13),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15,\
    \ 8, 17),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(48, 55, 73),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = ($a +\
    \ $b + $c) - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n\
    \        return 1;\n    }\n    return \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp81msvhlv.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $hypotenuse = max($a, $b, $c);\n    my $cathetus1 = min($a, $b, $c);\n    my\
    \ $cathetus2 = ($a + $b + $c) - $hypotenuse - $cathetus1;\n    return $hypotenuse**2\
    \ == $cathetus1**2 + $cathetus2**2 ? 1 : '';\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&right_angle_triangle;\n        if(eq_deeply($candidate->(3,\
    \ 4, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 6, 8),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
    \ 2, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(7, 24, 25),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5, 7),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5,\
    \ 12, 13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(15, 8, 17),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(48, 55, 73),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
    \ 1, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(2, 2, 10),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmp49f5yszn.pl line 12.

    '
  stdout: ''
  timestamp: 1660234530
- exit_code: 0
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $result = \"\";\n    if ($a > 0 && $b > 0 && $c > 0) {\n        if ($a**2 +\
    \ $b**2 == $c**2 || $a**2 + $c**2 == $b**2 || $b**2 + $c**2 == $a**2) {\n    \
    \        $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1660234530
- exit_code: 255
  program: "# Given the lengths of the three sides of a triangle. Return 1 if the\
    \ three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n\
    # Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1,\
    \ 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my ($a, $b, $c) = @_;\n    my\
    \ $max = max($a, $b, $c);\n    my $min = min($a, $b, $c);\n    my $mid = $a +\
    \ $b + $c - $max - $min;\n    return $max**2 == $min**2 + $mid**2;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n      \
    \  if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
    \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
    \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::max called at /tmp/tmps_1nwekp.pl line 12.

    '
  stdout: ''
  timestamp: 1660227799
