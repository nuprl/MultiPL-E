language: pl
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    } else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac < 0.5) {\n        return $int;\n    }\n    else\
    \ {\n        return $int + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac >= 0.5) {\n        $int += 1;\n    }\n    return\
    \ $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        $int++;\n\
    \    } elsif ($frac < -0.5) {\n        $int--;\n    }\n    return $int;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int + ($num - $int >= 0.5 ? 1 : 0);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    if ($num\
    \ =~ /\\.5$/) {\n        return $num > 0 ? int($num) + 1 : int($num) - 1;\n  \
    \  }\n    return int($num);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"\
    ),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        $int++;\n\
    \    } elsif ($frac < -0.5) {\n        $int--;\n    }\n    return $int;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac == 0.5) {\n       \
    \ return $int + 1;\n    }\n    elsif ($frac < 0.5) {\n        return $int;\n \
    \   }\n    else {\n        return $int + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $number = shift;\n    my $int\
    \ = int($number);\n    return $int if $number == $int;\n    return $int + 1 if\
    \ $number > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    } else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + ($num <=> 0) * 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac >= 0.5) {\n        $int += 1;\n    }\n    return\
    \ $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    if ($num - $int >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $number = shift;\n    my $int\
    \ = int($number);\n    my $frac = $number - $int;\n    if ($frac > 0.5) {\n  \
    \      return $int + 1;\n    }\n    elsif ($frac < -0.5) {\n        return $int\
    \ - 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ $int++;\n    }\n    return $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    } else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $n = shift;\n    return int($n\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233928
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $number = shift;\n    my $int\
    \ = int($number);\n    my $frac = $number - $int;\n    if ($frac > 0.5) {\n  \
    \      return $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n\
    \    } else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac < 0.5) {\n        return $int;\n    } else {\n\
    \        return $int + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    if ($num - $int >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($number) = @_;\n    return\
    \ int($number + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    if ($num - $int >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    elsif ($frac <= -0.5) {\n        return $int -\
    \ 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    if ($num - $int > 0.5) {\n        return $int + 1;\n    }\
    \ else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($number) = @_;\n    return\
    \ int($number + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac < 0.5) {\n        return $int;\n    }\n    else\
    \ {\n        return $int + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $number = shift;\n    if ($number\
    \ =~ /^-?\\d+$/) {\n        return $number;\n    }\n    my $int = int($number);\n\
    \    my $dec = $number - $int;\n    if ($dec >= 0.5) {\n        return $int +\
    \ 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $dec = $num - $int;\n    if ($dec >= 0.5) {\n        return\
    \ $int + 1;\n    } else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac >= 0.5) {\n        $int++;\n    }\n    return\
    \ $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + ($num <=> 0) * 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    my $int\
    \ = int($num);\n    if ($num - $int >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    if ($num - $int >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    }\n    elsif ($frac < -0.5) {\n        return $int - 1;\n   \
    \ }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    if ($num - $int >= 0.5) {\n        return $int + 1;\n    }\
    \ else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    return int($num\
    \ + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    if ($num\
    \ =~ /^-?\\d+\\.5$/) {\n        return $num > 0 ? int($num) + 1 : int($num) -\
    \ 1;\n    }\n    return int($num);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ $int++;\n    }\n    return $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $number = shift;\n    my $int\
    \ = int($number);\n    my $frac = $number - $int;\n    if ($frac < 0) {\n    \
    \    $frac = -$frac;\n    }\n    if ($frac < 0.5) {\n        return $int;\n  \
    \  }\n    else {\n        return $int + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ $int++;\n    }\n    return $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac >= 0.5) {\n        return $int + 1;\n    }\n\
    \    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    if ($num - $int >= 0.5) {\n        return $int + 1;\n    }\n\
    \    return $int;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac < 0.5) {\n        return $int;\n    } else {\n\
    \        return $int + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $number = shift;\n    my $int\
    \ = int($number);\n    if ($number - $int >= 0.5) {\n        return $int + 1;\n\
    \    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    } else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    } else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac > 0.5) {\n        return\
    \ $int + 1;\n    } elsif ($frac < -0.5) {\n        return $int - 1;\n    } else\
    \ {\n        return $int;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my ($num) = @_;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac >= 0.5) {\n       \
    \ return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int + 0.5;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1660227772
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    return $int if $num == $int;\n    return $int + 1 if $num\
    \ > $int;\n    return $int - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $number = shift;\n    my $int\
    \ = int($number);\n    my $frac = $number - $int;\n    if ($frac >= 0.5) {\n \
    \       return $int + 1;\n    }\n    else {\n        return $int;\n    }\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
    \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233927
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ *= -1;\n    }\n    if ($frac < 0.5) {\n        return $int;\n    } else {\n\
    \        return $int + 1;\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660233928
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
- exit_code: 0
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    my $int\
    \ = int($num);\n    my $frac = $num - $int;\n    if ($frac < 0) {\n        $frac\
    \ = -$frac;\n    }\n    if ($frac < 0.5) {\n        return $int;\n    }\n    else\
    \ {\n        if ($num < 0) {\n            return $int - 1;\n        }\n      \
    \  else {\n            return $int + 1;\n        }\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n        if(eq_deeply($candidate->(\"\
    10\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"14.5\"),15)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"-15.5\"),-16))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    15.3\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"0\"),0)) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!
  timestamp: 1660233928
- exit_code: 1
  program: "# Create a function that takes a value (string) representing a number\n\
    # and returns the closest integer to it. If the number is equidistant\n# from\
    \ two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"\
    10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from\
    \ zero means that if the given number is equidistant\n# from two integers, the\
    \ one you should return is the one that is the\n# farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\nsub closest_integer {\n    my $num = shift;\n    return\
    \ int($num + 0.5);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&closest_integer;\n        if(eq_deeply($candidate->(\"10\"),10)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    14.5\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"-15.5\"),-16)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.3\"),15))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    0\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660227773
