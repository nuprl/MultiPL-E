name: HumanEval_65_circular_shift
language: pl
prompt: "# Circular shift the digits of the integer x, shift the digits right by shift\n\
  # and return the result as a string.\n# If shift > number of digits, return digits\
  \ reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n\
  # \"12\"\nsub circular_shift {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&circular_shift;\n\
  \        if(eq_deeply($candidate->(100, 2),\"001\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(12, 2),\"12\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97,\
  \ 8),\"79\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(12, 1),\"21\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(11, 101),\"11\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my ($x, $shift) = @_;\n    my $digits = length($x);\n    $shift %=\
    \ $digits;\n    return reverse($x) if $shift == 0;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $right\
    \ = substr($x, 0, $digits - $shift);\n    my $left = substr($x, $digits - $shift);\n\
    \    return $left . $right;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first\
    \ = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n\
    \    return $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length\
    \ $x;\n    return reverse $x if $shift > $digits;\n    my $left = substr $x, 0,\
    \ $digits - $shift;\n    my $right = substr $x, $digits - $shift;\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $len = length($x);\n    return\
    \ $x if $shift == $len;\n    return reverse($x) if $shift > $len;\n    my $left\
    \ = substr($x, 0, $len - $shift);\n    my $right = substr($x, $len - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $first =\
    \ substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n\
    \    return $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    my $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($x);\n\
    \    } else {\n        my $left = substr($x, 0, $shift);\n        my $right =\
    \ substr($x, $shift);\n        $result = $right . $left;\n    }\n    return $result;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    my $result = $x;\n   \
    \ if ($shift > $digits) {\n        $result = reverse($x);\n    }\n    else {\n\
    \        my $left = substr($x, 0, $shift);\n        my $right = substr($x, $shift);\n\
    \        $result = $right . $left;\n    }\n    return $result;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    my $right = substr($x, $shift, $digits - $shift);\n\
    \    my $left = substr($x, 0, $shift);\n    return $right . $left;\n}", "my ($x,\
    \ $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return reverse($x);\n    }\n    my $first = substr($x, 0, $digits - $shift);\n\
    \    my $last = substr($x, $digits - $shift);\n    return $last . $first;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length $x;\n    if ($shift > $digits) {\n\
    \        return reverse $x;\n    }\n    my $left = substr $x, 0, $shift;\n   \
    \ my $right = substr $x, $shift;\n    return $right . $left;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right\
    \ = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse $x;\n    }\n    my $first = substr($x, 0, $digits - $shift);\n    my\
    \ $last = substr($x, $digits - $shift);\n    return $last . $first;\n}", "my ($x,\
    \ $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length $x;\n    return\
    \ reverse $x if $shift > $digits;\n    my $y = $x % 10**$shift;\n    return $y\
    \ * 10**($digits - $shift) + int($x / 10**$shift);\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length $x;\n    return scalar reverse $x if $shift > $digits;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    else {\n        return substr($x, $shift, $digits -\
    \ $shift) . substr($x, 0, $shift);\n    }\n}", "my ($x, $shift) = @_;\n    my\
    \ $digits = length($x);\n    return reverse($x) if $shift > $digits;\n    return\
    \ substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "my ($x,\
    \ $shift) = @_;\n    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, $shift, $digits - $shift);\n    my $right\
    \ = substr($x, 0, $shift);\n    return $left . $right;\n}", "my ($x, $shift) =\
    \ @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    return scalar reverse\
    \ $x if $shift > $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift >= $digits)\
    \ {\n        return reverse $x;\n    }\n    my $right = substr($x, 0, $digits\
    \ - $shift);\n    my $left = substr($x, $digits - $shift);\n    return $left .\
    \ $right;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "my ($x, $shift) = @_;\n    my $len = length($x);\n   \
    \ if ($shift >= $len) {\n        return reverse($x);\n    } else {\n        return\
    \ substr($x, $shift, $len - $shift) . substr($x, 0, $shift);\n    }\n}", "my ($x,\
    \ $shift) = @_;\n    my $digits = length($x);\n    return reverse($x) if $shift\
    \ > $digits;\n    my $left = substr($x, $shift);\n    my $right = substr($x, 0,\
    \ $shift);\n    return $left . $right;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n \
    \   my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x,\
    \ $digits - $shift);\n    return $last . $first;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return scalar reverse $x if $shift > $digits;\n\
    \    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return scalar reverse $x;\n\
    \    }\n    else {\n        return substr($x, $shift, $digits) . substr($x, 0,\
    \ $shift);\n    }\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse $x;\n   \
    \ }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    $shift %= $digits;\n    return reverse($x)\
    \ if $shift == 0;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    my\
    \ $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($x);\n\
    \    } else {\n        $result = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    }\n    return $result;\n}", "my ($x, $shift) = @_;\n    my $len = length($x);\n\
    \    return reverse($x) if $shift > $len;\n    my $first = substr($x, 0, $len\
    \ - $shift);\n    my $last = substr($x, $len - $shift);\n    return $last . $first;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $right = substr($x, $shift, $digits);\n\
    \    my $left = substr($x, 0, $shift);\n    return $right . $left;\n}", "my ($x,\
    \ $shift) = @_;\n    my $digits = length($x);\n    $shift %= $digits;\n    return\
    \ reverse($x) if $shift == 0;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    return substr($x, $shift, $digits)\
    \ . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse $x;\n    }\n    my $left = substr($x, 0,\
    \ $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $y =\
    \ $x % 10**$shift;\n    my $z = $x / 10**$shift;\n    return $y . $z;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right\
    \ = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n\
    \    my $y = $x % 10**$shift;\n    return $y . ($x - $y) / 10**$shift;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $right = substr($x, $shift, $digits\
    \ - $shift);\n    my $left = substr($x, 0, $shift);\n    return $right . $left;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    $shift %= $digits;\n\
    \    return reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length $x;\n    return reverse $x if $shift > $digits;\n    my $left = substr\
    \ $x, 0, $digits - $shift;\n    my $right = substr $x, $digits - $shift;\n   \
    \ return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $len = length($x);\n\
    \    return reverse($x) if $shift > $len;\n    return substr($x, $len - $shift)\
    \ . substr($x, 0, $len - $shift);\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my $x = shift;\n    my\
    \ $shift = shift;\n    my $digits = length($x);\n    my $result = \"\";\n    if\
    \ ($shift > $digits) {\n        $result = reverse($x);\n    } else {\n       \
    \ $result = substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n  \
    \  }\n    return $result;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    my $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($x);\n\
    \    } else {\n        my $left = substr($x, 0, $shift);\n        my $right =\
    \ substr($x, $shift);\n        $result = $right . $left;\n    }\n    return $result;\n\
    }", "my ($x, $shift) = @_;\n    my $n = length($x);\n    return reverse($x) if\
    \ $shift > $n;\n    my $y = $x % 10**$shift;\n    return $y . substr($x, 0, $n\
    \ - $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $result = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    return $result;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x,\
    \ $digits - $shift);\n    return $last . $first;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    if ($shift >= $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    my $result = $x;\n    if ($shift > $digits) {\n        $result = reverse($result);\n\
    \    } else {\n        $result = substr($result, $shift) . substr($result, 0,\
    \ $shift);\n    }\n    return $result;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse $x;\n   \
    \ }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n \
    \   my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits\
    \ - $shift);\n    return $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n \
    \   my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x,\
    \ $digits - $shift);\n    return $last . $first;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n \
    \   my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x,\
    \ $digits - $shift);\n    return $last . $first;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    if ($shift >= $digits) {\n        return reverse($x);\n\
    \    }\n    my $right = substr($x, 0, $digits - $shift);\n    my $left = substr($x,\
    \ $digits - $shift);\n    return $left . $right;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length $x;\n    return reverse $x if $shift > $digits;\n   \
    \ my $y = $x;\n    $y =~ s/(\\d{$shift})(\\d*)/$2$1/;\n    return $y;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $x_str = sprintf(\"\
    %d\", $x);\n    my $len = length($x_str);\n    if ($shift > $len) {\n        return\
    \ reverse($x_str);\n    }\n    my $first = substr($x_str, 0, $len - $shift);\n\
    \    my $last = substr($x_str, $len - $shift);\n    return $last . $first;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length $x;\n    return reverse $x if $shift\
    \ > $digits;\n    return substr($x, $shift) . substr($x, 0, $shift);\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ >= $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $shift);\n    my $right = substr($x, $shift);\n    return $right . $left;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    my $result = $x;\n\
    \    if ($shift > $digits) {\n        $result = reverse($x);\n    } else {\n \
    \       my $left = substr($x, 0, $shift);\n        my $right = substr($x, $shift);\n\
    \        $result = $right . $left;\n    }\n    return $result;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    return substr($x, $shift, $digits - $shift)\
    \ . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse $x;\n    }\n    my $left = substr($x, 0, $digits -\
    \ $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right .\
    \ $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    my $shift_digits = $shift % $digits;\n    my $left = substr($x, 0, $shift_digits);\n\
    \    my $right = substr($x, $shift_digits);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse $x;\n    }\n    my $left = substr($x, 0, $digits -\
    \ $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right .\
    \ $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length $x;\n \
    \   return reverse $x if $shift > $digits;\n    my $left = substr $x, 0, $digits\
    \ - $shift;\n    my $right = substr $x, $digits - $shift;\n    return $right .\
    \ $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse $x;\n    }\n    return substr($x, $shift,\
    \ $digits - $shift) . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n   \
    \ my $len = length($x);\n    return reverse($x) if $shift > $len;\n    my $first\
    \ = substr($x, 0, $len - $shift);\n    my $last = substr($x, $len - $shift);\n\
    \    return $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return reverse $x;\n    }\n    my $y =\
    \ $x % (10 ** $shift);\n    return $y . substr($x, 0, $digits - $shift);\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift >= $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $shift);\n\
    \    my $right = substr($x, $shift);\n    return $right . $left;\n}", "my ($x,\
    \ $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n \
    \       return reverse($x);\n    }\n    return substr($x, $shift, $digits - $shift)\
    \ . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    return substr($x,\
    \ $shift, $digits) . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my\
    \ $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length $x;\n    return reverse $x if $shift > $digits;\n   \
    \ my $first = substr $x, 0, $digits - $shift;\n    my $last = substr $x, $digits\
    \ - $shift;\n    return $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse $x;\n   \
    \ }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n \
    \   my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x,\
    \ $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n \
    \   return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse $x;\n    }\n    my $left = substr($x, 0, $digits -\
    \ $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right .\
    \ $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    my $result\
    \ = $x;\n    if ($shift > $digits) {\n        $result = reverse($x);\n    } else\
    \ {\n        my $right = substr($x, $shift);\n        my $left = substr($x, 0,\
    \ $shift);\n        $result = $right . $left;\n    }\n    return $result;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift >= $digits)\
    \ {\n        return reverse($x);\n    }\n    my $first = substr($x, 0, $digits\
    \ - $shift);\n    my $last = substr($x, $digits - $shift);\n    return $last .\
    \ $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $first = substr($x, 0, $digits\
    \ - $shift);\n    my $last = substr($x, $digits - $shift);\n    return $last .\
    \ $first;\n}", "my ($x, $shift) = @_;\n    my $digits = int(log($x) / log(10))\
    \ + 1;\n    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n\
    \    my $left = int($x / 10**$shift);\n    my $right = $x % 10**$shift;\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse $x if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $right = substr($x, $shift);\n    my $left = substr($x, 0, $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    my $shift_digits = $shift % $digits;\n    return reverse($x) if $shift_digits\
    \ == 0;\n    return substr($x, $shift_digits) . substr($x, 0, $shift_digits);\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $x_str = $x;\n    my $x_len\
    \ = length($x_str);\n    if ($shift > $x_len) {\n        return reverse($x_str);\n\
    \    }\n    my $x_shift = substr($x_str, $x_len - $shift, $shift);\n    $x_str\
    \ = substr($x_str, 0, $x_len - $shift);\n    return $x_shift . $x_str;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $right = substr($x,\
    \ $shift, $digits - $shift);\n    my $left = substr($x, 0, $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $end\
    \ = substr($x, $digits - $shift, $shift);\n    my $begin = substr($x, 0, $digits\
    \ - $shift);\n    return $end . $begin;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n  \
    \  }\n    my $right = substr($x, $shift, $digits - $shift);\n    my $left = substr($x,\
    \ 0, $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my\
    \ $digits = length($x);\n    my $result = $x;\n    if ($shift > $digits) {\n \
    \       $result = reverse($x);\n    } else {\n        my $right = substr($x, $shift);\n\
    \        my $left = substr($x, 0, $shift);\n        $result = $right . $left;\n\
    \    }\n    return $result;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first\
    \ = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n\
    \    return $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $right\
    \ = substr($x, $shift, $digits - $shift);\n    my $left = substr($x, 0, $shift);\n\
    \    return $right . $left;\n}", "my $x = shift;\n    my $shift = shift;\n   \
    \ my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $first = substr($x, 0, $digits - $shift);\n    my $last = substr($x,\
    \ $digits - $shift);\n    return $last . $first;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    return reverse($x) if $shift > $digits;\n \
    \   my $result = substr($x, $shift) . substr($x, 0, $shift);\n    return $result;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return reverse($x)\
    \ if $shift > $digits;\n    return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length $x;\n \
    \   return reverse $x if $shift > $digits;\n    my $result = substr $x, $shift,\
    \ $digits - $shift;\n    $result .= substr $x, 0, $shift;\n    return $result;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift >= $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    else {\n        my $left =\
    \ substr($x, 0, $digits - $shift);\n        my $right = substr($x, $digits - $shift);\n\
    \        return $right . $left;\n    }\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    my $result = $x;\n    if ($shift > $digits) {\n        $result\
    \ = reverse($x);\n    } else {\n        my $right = substr($x, $shift);\n    \
    \    my $left = substr($x, 0, $shift);\n        $result = $right . $left;\n  \
    \  }\n    return $result;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $shift);\n    my $right = substr($x, $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length $x;\n    return reverse $x if $shift\
    \ > $digits;\n    my $left = substr $x, 0, $digits - $shift;\n    my $right =\
    \ substr $x, $digits - $shift;\n    return $right . $left;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ scalar reverse $x;\n    }\n    my $first = substr($x, 0, $digits - $shift);\n\
    \    my $last = substr($x, $digits - $shift);\n    return $last . $first;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    my $result = $x;\n   \
    \ if ($shift > $digits) {\n        $result = reverse($x);\n    } else {\n    \
    \    $result = substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n\
    \    }\n    return $result;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $len = length($x);\n\
    \    return reverse($x) if $shift > $len;\n    my $y = $x;\n    $y =~ s/(\\d{$shift})(\\\
    d+)/$2$1/;\n    return $y;\n}", "my ($x, $shift) = @_;\n    my $digits = length\
    \ $x;\n    return reverse $x if $shift > $digits;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $x_str = \"$x\"\
    ;\n    my $len = length($x_str);\n    if ($shift > $len) {\n        return reverse($x_str);\n\
    \    }\n    my $first = substr($x_str, 0, $len - $shift);\n    my $second = substr($x_str,\
    \ $len - $shift);\n    return $second . $first;\n}", "my ($x, $shift) = @_;\n\
    \    my $str = $x;\n    my $len = length($str);\n    if ($shift > $len) {\n  \
    \      return reverse($str);\n    }\n    my $left = substr($str, 0, $len - $shift);\n\
    \    my $right = substr($str, $len - $shift);\n    return $right . $left;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    $shift %= $digits;\n    my $left = substr($x, 0, $digits - $shift);\n   \
    \ my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $right = substr($x, 0, $digits\
    \ - $shift);\n    my $left = substr($x, $digits - $shift);\n    return $left .\
    \ $right;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return\
    \ scalar reverse $x if $shift > $digits;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $right = substr($x, $shift);\n    my $left = substr($x, 0, $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $right = substr($x,\
    \ $shift, $digits - $shift);\n    my $left = substr($x, 0, $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = int(log($x) / log(10)) + 1;\n    if ($shift > $digits) {\n        return reverse($x);\n\
    \    }\n    my $pow = 10 ** $shift;\n    my $remainder = $x % $pow;\n    my $divisor\
    \ = $x / $pow;\n    return $remainder . $divisor;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    if ($shift > $digits) {\n        return reverse\
    \ $x;\n    }\n    my $first = substr($x, 0, $digits - $shift);\n    my $last =\
    \ substr($x, $digits - $shift);\n    return $last . $first;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse($x);\n    }\n    my $first = substr($x,\
    \ 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n    return\
    \ $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first\
    \ = substr($x, 0, $digits - $shift);\n    my $last = substr($x, $digits - $shift);\n\
    \    return $last . $first;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return\
    \ reverse($x) if $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    return reverse($x) if\
    \ $shift > $digits;\n    my $left = substr($x, 0, $digits - $shift);\n    my $right\
    \ = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my ($x, $shift)\
    \ = @_;\n    my $digits = length($x);\n    if ($shift > $digits) {\n        return\
    \ reverse($x);\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $len = length($x);\n    return reverse($x) if $shift\
    \ > $len;\n    return substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse $x;\n    }\n    my $left = substr($x, 0,\
    \ $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my $x = shift;\n    my $shift = shift;\n    my $digits\
    \ = length($x);\n    if ($shift > $digits) {\n        return scalar reverse $x;\n\
    \    }\n    return substr($x, $shift, $digits - $shift) . substr($x, 0, $shift);\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $right = substr($x, $shift);\n\
    \    my $left = substr($x, 0, $shift);\n    return $right . $left;\n}", "my ($x,\
    \ $shift) = @_;\n    my $digits = length($x);\n    if ($shift >= $digits) {\n\
    \        return reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n\
    \    my $right = substr($x, $digits - $shift);\n    return $right . $left;\n}",
  "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return scalar reverse $x;\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ >= $digits) {\n        return reverse($x);\n    }\n    my $left = substr($x,\
    \ 0, $shift);\n    my $right = substr($x, $shift);\n    return $right . $left;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse $x;\n    }\n    return substr($x, $shift, $digits\
    \ - $shift) . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    return substr($x,\
    \ $shift, $digits - $shift) . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    if ($shift >= $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    my $left = substr($x, 0, $shift);\n    my $right = substr($x,\
    \ $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length($x);\n    return reverse($x) if $shift > $digits;\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my\
    \ $left = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits\
    \ - $shift);\n    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits\
    \ = length $x;\n    return scalar reverse $x if $shift > $digits;\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n  \
    \  my $digits = length($x);\n    if ($shift > $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return reverse $x;\n    }\n    my $left = substr($x, 0,\
    \ $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    return reverse($x) if $shift > $digits;\n    my $right = substr($x, $digits\
    \ - $shift);\n    my $left = substr($x, 0, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $left = substr($x,\
    \ 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n    return\
    \ $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift >= $digits) {\n        return reverse($x);\n    }\n    my $right\
    \ = substr($x, 0, $digits - $shift);\n    my $left = substr($x, $digits - $shift);\n\
    \    return $left . $right;\n}", "my ($x, $shift) = @_;\n    my $digits = length\
    \ $x;\n    return reverse $x if $shift > $digits;\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse($x);\n    }\n    my $first_part\
    \ = substr($x, $shift, $digits - $shift);\n    my $second_part = substr($x, 0,\
    \ $shift);\n    return $first_part . $second_part;\n}", "my ($x, $shift) = @_;\n\
    \    my $digits = length($x);\n    if ($shift >= $digits) {\n        return scalar\
    \ reverse $x;\n    }\n    my $left = substr($x, 0, $digits - $shift);\n    my\
    \ $right = substr($x, $digits - $shift);\n    return $right . $left;\n}", "my\
    \ ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift > $digits)\
    \ {\n        return reverse($x);\n    }\n    my $left = substr($x, 0, $digits\
    \ - $shift);\n    my $right = substr($x, $digits - $shift);\n    return $right\
    \ . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if ($shift\
    \ > $digits) {\n        return scalar reverse $x;\n    }\n    my $right = substr($x,\
    \ $shift);\n    my $left = substr($x, 0, $shift);\n    return $right . $left;\n\
    }", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    $shift %= $digits;\n\
    \    return reverse($x) if $shift == 0;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n    if\
    \ ($shift > $digits) {\n        return scalar reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}", "my ($x, $shift) = @_;\n    my $digits = length($x);\n\
    \    if ($shift > $digits) {\n        return reverse $x;\n    }\n    my $left\
    \ = substr($x, 0, $digits - $shift);\n    my $right = substr($x, $digits - $shift);\n\
    \    return $right . $left;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
