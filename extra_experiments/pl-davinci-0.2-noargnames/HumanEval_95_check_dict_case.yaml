name: HumanEval_95_check_dict_case
language: pl
prompt: "# Given a hash, return 1 if all keys are strings in lower \n# case or all\
  \ keys are strings in upper case, else return ''.\n# The function should return\
  \ '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"\
  apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\",\
  \ \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>>\
  \ check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case\
  \ {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n\
  \        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"\
  }),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"\
  STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"\
  Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $upper = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$hash)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n      \
    \  if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n    }\n    if ($upper\
    \ > 0 && $lower > 0) {\n        $result = '';\n    }\n    return $result;\n}",
  "my $dict = shift;\n    return '' if !$dict;\n    return '' if !%$dict;\n    my\
    \ $lower = 1;\n    my $upper = 1;\n    foreach my $key (keys %$dict) {\n     \
    \   $lower = 0 if $key !~ /^[a-z]+$/;\n        $upper = 0 if $key !~ /^[A-Z]+$/;\n\
    \    }\n    return $lower || $upper;\n}", "my $dict = shift;\n    my $result =\
    \ 1;\n    my $key;\n    my $value;\n    my $upper_count = 0;\n    my $lower_count\
    \ = 0;\n    my $total_count = 0;\n    while (($key, $value) = each %$dict) {\n\
    \        if ($key =~ /^[A-Z]+$/) {\n            $upper_count++;\n        } elsif\
    \ ($key =~ /^[a-z]+$/) {\n            $lower_count++;\n        }\n        $total_count++;\n\
    \    }\n    if ($upper_count == $total_count || $lower_count == $total_count)\
    \ {\n        $result = 1;\n    } else {\n        $result = '';\n    }\n    return\
    \ $result;\n}", "my $hash = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $case;\n    my $case_prev;\n    my $is_empty = 1;", "my ($hash) = @_;\n\
    \    my $result = 1;\n    my $key;\n    my $value;\n    my $key_type;\n    my\
    \ $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n    my $key_type_prev_flag\
    \ = 0;\n    my $value_type_prev_flag = 0;\n    while (($key, $value) = each %$hash)\
    \ {\n        $key_type = ref $key;\n        $value_type = ref $value;\n      \
    \  if ($key_type_prev_flag == 0) {\n            $key_type_prev = $key_type;\n\
    \            $key_type_prev_flag = 1;\n        }\n        if ($value_type_prev_flag\
    \ == 0) {\n            $value_type_prev = $value_type;\n            $value_type_prev_flag\
    \ = 1;\n        }\n        if ($key_type ne $key_type_prev) {\n            $result\
    \ = '';\n            last;\n        }\n        if ($value_type ne $value_type_prev)\
    \ {\n            $result = '';\n            last;\n        }\n        if ($key_type\
    \ eq 'SCALAR') {\n            if ($key =~ /[A-Z]/) {\n                if ($key_type_prev_flag\
    \ == 1) {\n                    $key_type_prev = 'UPPER';\n                   \
    \ $key_type_prev_flag = 2;\n                }\n                if ($key_type_prev\
    \ ne 'UPPER') {\n                    $result = '';\n                    last;\n\
    \                }\n            }\n            else {\n                if ($key_type_prev_flag\
    \ == 1) {\n                    $key_type_prev = 'LOWER';\n                   \
    \ $key_type_prev_flag = 2;\n                }\n                if ($key_type_prev\
    \ ne 'LOWER') {\n                    $result = '';\n                    last;\n\
    \                }\n            }\n        }\n        if ($value_type eq 'SCALAR')\
    \ {\n            if ($value =~ /[A-Z]/) {\n                if ($value_type_prev_flag\
    \ == 1", "my $dict = shift;\n    my $key;\n    my $value;\n    my $upper = 0;\n\
    \    my $lower = 0;\n    my $result = 1;\n    while (($key, $value) = each %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n      \
    \  if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n    }\n    if ($upper\
    \ > 0 && $lower > 0) {\n        $result = '';\n    }\n    return $result;\n}",
  "my $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $key_type;\n\
    \    my $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n    my\
    \ $key_type_prev_prev;\n    my $value_type_prev_prev;\n    my $key_type_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev;\n \
    \   my $value_type_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev", "my\
    \ $hash = shift;\n    my $case = \"\";\n    my $result = 1;\n    foreach my $key\
    \ (keys %$hash) {\n        if ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = \"upper\";\n            } else {\n              \
    \  $result = \"\";\n                last;\n            }\n        } else {\n \
    \           if ($case eq \"lower\" && $key =~ /^[A-Z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            } elsif ($case eq \"upper\" && $key\
    \ =~ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n \
    \           }\n        }\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $result = 1;\n    my $count = 0;\n    my $upper = 0;\n    my $lower =\
    \ 0;\n    foreach my $key (keys %$hash) {\n        $count++;\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $upper++;\n        }\n        elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $lower++;\n        }\n        else {\n            $result = '';\n\
    \        }\n    }\n    if ($count == $upper || $count == $lower) {\n        return\
    \ $result;\n    }\n    else {\n        return '';\n    }\n}", "my $hash = shift;\n\
    \    my @keys = keys %$hash;\n    return '' if scalar @keys == 0;\n    my $case\
    \ = 0;\n    for my $key (@keys) {\n        if ($case == 0) {\n            $case\
    \ = ($key =~ /^[a-z]+$/) ? 1 : 2;\n        }\n        else {\n            if ($case\
    \ == 1) {\n                return '' if $key !~ /^[a-z]+$/;\n            }\n \
    \           else {\n                return '' if $key !~ /^[A-Z]+$/;\n       \
    \     }\n        }\n    }\n    return 1;\n}", "my $hash = shift;\n    my @keys\
    \ = keys %$hash;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2 = 0;\n\
    \    foreach my $key (@keys) {\n        if ($key =~ /[A-Z]/) {\n            $flag1\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $flag2 = 1;\n \
    \       }\n    }\n    if ($flag1 == 1 && $flag2 == 1) {\n        $flag = '';\n\
    \    }\n    else {\n        $flag = 1;\n    }\n    return $flag;\n}", "my ($hash)\
    \ = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $first_key;\n  \
    \  my $first_val;\n    my $first_key_case;\n    my $first_val_case;\n    my $key_case;\n\
    \    my $val_case;\n    my $key_case_match;\n    my $val_case_match;\n    my $key_val_case_match;\n\
    \    my $key_val_case_mismatch;\n    my $key_val_case_match_count;\n    my $key_val_case_mismatch_count;\n\
    \    my $key_val_case_match_percent;\n    my $key_val_case_mismatch_percent;\n\
    \    my $key_val_case_match_threshold = 0.5;\n    my $key_val_case_mismatch_threshold\
    \ = 0.5;\n    my $key_val_case_match_threshold_exceeded;\n    my $key_val_case_mismatch_threshold_exceeded;\n\
    \    my $key_val_case_match_threshold_exceeded_count;\n    my $key_val_case_mismatch_threshold_exceeded_count;\n\
    \    my $key_val_case_match_threshold_exceeded_percent;\n    my $key_val_case_mismatch_threshold_exceeded_percent;\n\
    \    my $key_val_case_match_threshold_exceeded_percent_threshold = 0.5;\n    my\
    \ $key_val_case_mismatch_threshold_exceeded_percent_threshold = 0.5;\n    my $key_val_case_match_threshold_exceeded_percent_threshold_exceeded;\n\
    \    my $key_val_case_mismatch_threshold_exceeded_percent_threshold_exceeded;\n\
    \    my $key_val_case_match_threshold_exceeded_percent_threshold_exceeded_count;\n\
    \    my $key_val_case_m", "my $hash = shift;\n    return '' if !%$hash;\n    my\
    \ $flag = 1;\n    my $key_case = '';\n    foreach my $key (keys %$hash) {\n  \
    \      if ($key_case eq '') {\n            if ($key =~ /[a-z]/) {\n          \
    \      $key_case = 'lower';\n            }\n            elsif ($key =~ /[A-Z]/)\
    \ {\n                $key_case = 'upper';\n            }\n            else {\n\
    \                $flag = 0;\n                last;\n            }\n        }\n\
    \        elsif ($key_case eq 'lower') {\n            if ($key =~ /[A-Z]/) {\n\
    \                $flag = 0;\n                last;\n            }\n        }\n\
    \        elsif ($key_case eq 'upper') {\n            if ($key =~ /[a-z]/) {\n\
    \                $flag = 0;\n                last;\n            }\n        }\n\
    \    }\n    return $flag;\n}", "my $hash = shift;\n    my $flag = 1;\n    my $key;\n\
    \    my $value;\n    my $key_type;\n    my $value_type;\n    my $key_case;\n \
    \   my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n    my\
    \ $key_type_prev;\n    my $value_type_prev;\n    my $key_type_flag = 0;\n    my\
    \ $value_type_flag = 0;\n    my $key_case_flag = 0;\n    my $value_case_flag =\
    \ 0;\n    my $key_type_prev_flag = 0;\n    my $value_type_prev_flag = 0;\n   \
    \ my $key_case_prev_flag = 0;\n    my $value_case_prev_flag = 0;\n    my $key_type_flag_prev\
    \ = 0;\n    my $value_type_flag_prev = 0;\n    my $key_case_flag_prev = 0;\n \
    \   my $value_case_flag_prev = 0;\n    my $key_type_prev_flag_prev = 0;\n    my\
    \ $value_type_prev_flag_prev = 0;\n    my $key_case_prev_flag_prev = 0;\n    my\
    \ $value_case_prev_flag_prev = 0;\n    my $key_type_flag_prev_prev = 0;\n    my\
    \ $value_type_flag_prev_prev = 0;\n    my $key_case_flag_prev_prev = 0;\n    my\
    \ $value_case_flag_prev_prev = 0;\n    my $key_type_prev_flag_prev_prev = 0;\n\
    \    my $value_type_prev_flag_prev_prev = 0;\n    my $key_case_prev_flag_prev_prev\
    \ = 0;\n    my $value_case_prev_flag_prev_prev = 0;\n    my $key_type_flag_prev_prev_prev\
    \ = 0;\n    my $value_type_flag_prev_prev_prev = 0;\n    my $key_case_flag_prev_prev_prev\
    \ = 0", "my ($hash) = @_;\n    my $result = 1;\n    my $case = \"\";\n    my $key;\n\
    \    my $value;\n    while (($key, $value) = each %$hash) {\n        if ($case\
    \ eq \"\") {\n            if ($key =~ /[A-Z]/) {\n                $case = \"upper\"\
    ;\n            } elsif ($key =~ /[a-z]/) {\n                $case = \"lower\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } else {\n            if ($case eq \"upper\" && $key =~\
    \ /[a-z]/) {\n                $result = \"\";\n                last;\n       \
    \     } elsif ($case eq \"lower\" && $key =~ /[A-Z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n    }\n    return\
    \ $result;\n}", "my $hash = shift;\n    my $flag = 0;\n    my $key;\n    my $value;\n\
    \    my $count = 0;\n    my $count1 = 0;\n    my $count2 = 0;\n    my $count3\
    \ = 0;\n    my $count4 = 0;\n    my $count5 = 0;\n    my $count6 = 0;\n    my\
    \ $count7 = 0;\n    my $count8 = 0;\n    my $count9 = 0;\n    my $count10 = 0;\n\
    \    my $count11 = 0;\n    my $count12 = 0;\n    my $count13 = 0;\n    my $count14\
    \ = 0;\n    my $count15 = 0;\n    my $count16 = 0;\n    my $count17 = 0;\n   \
    \ my $count18 = 0;\n    my $count19 = 0;\n    my $count20 = 0;\n    my $count21\
    \ = 0;\n    my $count22 = 0;\n    my $count23 = 0;\n    my $count24 = 0;\n   \
    \ my $count25 = 0;\n    my $count26 = 0;\n    my $count27 = 0;\n    my $count28\
    \ = 0;\n    my $count29 = 0;\n    my $count30 = 0;\n    my $count31 = 0;\n   \
    \ my $count32 = 0;\n    my $count33 = 0;\n    my $count34 = 0;\n    my $count35\
    \ = 0;\n    my $count36 = 0;\n    my $count37 = 0;\n    my $count38 = 0;\n   \
    \ my $count39 = 0;\n    my $count40 = 0;\n    my $count41 = 0;\n    my $count42\
    \ = 0;\n    my $count43 = 0;\n    my $count44 = 0;\n    my $count45 = 0;\n   \
    \ my $count46 = 0;\n    my $count47 = 0;\n    my $count48 = 0;\n    my $count49\
    \ = 0;\n    my $count50 = 0;\n    my $count51 = 0;\n    my $count52 = 0;\n   \
    \ my $count53 = 0;", "my %dict = @_;\n    my $lower = 1;\n    my $upper = 1;\n\
    \    foreach my $key (keys %dict) {\n        if ($key =~ /[a-z]/) {\n        \
    \    $upper = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $lower\
    \ = 0;\n        }\n    }\n    if ($lower == 1 || $upper == 1) {\n        return\
    \ 1;\n    }\n    else {\n        return '';\n    }\n}", "my $dict = shift;\n \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $key_case = \"\";\n\
    \    my $value_case = \"\";\n    my $key_case_prev = \"\";\n    my $value_case_prev\
    \ = \"\";\n    my $key_case_first = \"\";\n    my $value_case_first = \"\";\n\
    \    my $key_case_last = \"\";\n    my $value_case_last = \"\";\n    my $key_case_count\
    \ = 0;\n    my $value_case_count = 0;\n    my $key_case_count_upper = 0;\n   \
    \ my $value_case_count_upper = 0;\n    my $key_case_count_lower = 0;\n    my $value_case_count_lower\
    \ = 0;\n    my $key_case_count_mixed = 0;\n    my $value_case_count_mixed = 0;\n\
    \    my $key_case_count_upper_prev = 0;\n    my $value_case_count_upper_prev =\
    \ 0;\n    my $key_case_count_lower_prev = 0;\n    my $value_case_count_lower_prev\
    \ = 0;\n    my $key_case_count_mixed_prev = 0;\n    my $value_case_count_mixed_prev\
    \ = 0;\n    my $key_case_count_upper_first = 0;\n    my $value_case_count_upper_first\
    \ = 0;\n    my $key_case_count_lower_first = 0;\n    my $value_case_count_lower_first\
    \ = 0;\n    my $key_case_count_mixed_first = 0;\n    my $value_case_count_mixed_first\
    \ = 0;\n    my $key_case_count_upper_last = 0;\n    my $value_case_count_upper_last\
    \ = 0;\n    my $key_case_count_lower_last = 0;\n    my $value_case_count_lower_last\
    \ = 0;\n    my $key_case_count_mixed_last = 0;\n    my $value_", "my ($dict) =\
    \ @_;\n    my $ret = 1;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    if ($is_lower == 0 && $is_upper == 0) {\n        $ret =\
    \ '';\n    }\n    return $ret;\n}", "my $hash = shift;\n    my $ret = 1;\n   \
    \ my $key;\n    my $key_type;\n    my $key_type_prev;\n    my $key_type_curr;\n\
    \    my $key_type_count = 0;\n    my $key_type_count_prev = 0;\n    my $key_type_count_curr\
    \ = 0;\n    my $key_type_count_max = 0;\n    my $key_type_count_max_prev = 0;\n\
    \    my $key_type_count_max_curr = 0;\n    my $key_type_count_max_prev_prev =\
    \ 0;\n    my $key_type_count_max_curr_curr = 0;\n    my $key_type_count_max_prev_curr\
    \ = 0;\n    my $key_type_count_max_curr_prev = 0;\n    my $key_type_count_max_prev_prev_prev\
    \ = 0;\n    my $key_type_count_max_curr_curr_curr = 0;\n    my $key_type_count_max_prev_prev_curr\
    \ = 0;\n    my $key_type_count_max_prev_curr_curr = 0;\n    my $key_type_count_max_curr_prev_prev\
    \ = 0;\n    my $key_type_count_max_curr_prev_curr = 0;\n    my $key_type_count_max_curr_curr_prev\
    \ = 0;\n    my $key_type_count_max_prev_prev_prev_prev = 0;\n    my $key_type_count_max_curr_curr_curr_curr\
    \ = 0;\n    my $key_type_count_max_prev_prev_prev_curr = 0;\n    my $key_type_count_max_prev_prev_curr_curr\
    \ = 0;\n    my $key_type_count_max_prev_curr_prev_prev = 0;\n    my $key_type_count_max_prev_curr_prev_curr\
    \ = 0;\n    my $key", "my $hash = shift;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $lower_case = 0;\n    my $upper_case = 0;\n    while (($key,\
    \ $value) = each %$hash) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case++;\n        }\
    \ else {\n            $result = '';\n            last;\n        }\n    }\n   \
    \ if ($lower_case && $upper_case) {\n        $result = '';\n    }\n    return\
    \ $result;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $count = 0;\n    while (($key, $value) = each %$hash) {\n\
    \        if ($count == 0) {\n            $case = ($key =~ /[a-z]/) ? \"lower\"\
    \ : \"upper\";\n        }\n        if ($case eq \"lower\" && $key =~ /[A-Z]/)\
    \ {\n            $result = \"\";\n            last;\n        }\n        if ($case\
    \ eq \"upper\" && $key =~ /[a-z]/) {\n            $result = \"\";\n          \
    \  last;\n        }\n        $count++;\n    }\n    return $result;\n}", "my $hash\
    \ = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $upper_case\
    \ = 0;\n    my $lower_case = 0;\n    while (($key, $value) = each %$hash) {\n\
    \        if ($key =~ /[A-Z]/) {\n            $upper_case = 1;\n        }\n   \
    \     if ($key =~ /[a-z]/) {\n            $lower_case = 1;\n        }\n    }\n\
    \    if ($upper_case && $lower_case) {\n        $result = '';\n    }\n    return\
    \ $result;\n}", "my $hash = shift;\n    my $flag = 0;\n    my $flag1 = 0;\n  \
    \  my $flag2 = 0;\n    foreach my $key (keys %$hash) {\n        if ($key =~ /[a-z]/)\
    \ {\n            $flag1 = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n    \
    \        $flag2 = 1;\n        }\n    }\n    if ($flag1 == 1 && $flag2 == 1) {\n\
    \        $flag = '';\n    }\n    elsif ($flag1 == 1) {\n        $flag = 1;\n \
    \   }\n    elsif ($flag2 == 1) {\n        $flag = 1;\n    }\n    return $flag;\n\
    }", "my $hash = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $str;\n\
    \    my $str_upper;\n    my $str_lower;\n    my $str_upper_count = 0;\n    my\
    \ $str_lower_count = 0;\n    my $str_count = 0;\n    my $non_str_count = 0;\n\
    \    my $non_str_val_count = 0;\n    my $str_val_count = 0;\n    my $str_upper_val_count\
    \ = 0;\n    my $str_lower_val_count = 0;\n    my $str_upper_val_count = 0;\n \
    \   my $str_lower_val_count = 0;\n    my $str_upper_val_count = 0;\n    my $str_lower_val_count\
    \ = 0;\n    my $str_upper_val_count = 0;\n    my $str_lower_val_count = 0;\n \
    \   my $str_upper_val_count = 0;\n    my $str_lower_val_count = 0;\n    my $str_upper_val_count\
    \ = 0;\n    my $str_lower_val_count = 0;\n    my $str_upper_val_count = 0;\n \
    \   my $str_lower_val_count = 0;\n    my $str_upper_val_count = 0;\n    my $str_lower_val_count\
    \ = 0;\n    my $str_upper_val_count = 0;\n    my $str_lower_val_count = 0;\n \
    \   my $str_upper_val_count = 0;\n    my $str_lower_val_count = 0;\n    my $str_upper_val_count\
    \ = 0;\n    my $str_lower_val_count = 0;\n    my $str_upper_val_count = 0;\n \
    \   my $str_lower_val_count = 0;\n    my $str_upper_val_count = 0;\n    my $str_lower_val_count\
    \ = 0;\n    my $str_upper_val_count = 0;\n    my $str_lower_val_count = 0", "my\
    \ $dict = shift;\n    return '' if (scalar(keys %$dict) == 0);\n    my $is_lower\
    \ = 1;\n    my $is_upper = 1;\n    foreach my $key (keys %$dict) {\n        $is_lower\
    \ = 0 if ($key !~ /^[a-z]+$/);\n        $is_upper = 0 if ($key !~ /^[A-Z]+$/);\n\
    \    }\n    return 1 if ($is_lower || $is_upper);\n    return '';\n}", "my ($hash)\
    \ = @_;\n    my $result = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n\
    \    foreach my $key (keys %$hash) {\n        if ($key =~ /[a-z]/) {\n       \
    \     $all_upper = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n           \
    \ $all_lower = 0;\n        }\n    }\n    if ($all_lower == 0 && $all_upper ==\
    \ 0) {\n        $result = '';\n    }\n    return $result;\n}", "my $dict = shift;\n\
    \    my $result = 1;\n    my $lower = 1;\n    my $upper = 1;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower = 0;\n \
    \       }\n        if ($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n\
    \    }\n    if ($lower == 0 && $upper == 0) {\n        $result = '';\n    }\n\
    \    return $result;\n}", "my $hash = shift;\n    my $case = '';\n    my $result\
    \ = 1;\n    foreach my $key (keys %$hash) {\n        if ($case eq '') {\n    \
    \        if ($key =~ /^[a-z]+$/) {\n                $case = 'lower';\n       \
    \     } elsif ($key =~ /^[A-Z]+$/) {\n                $case = 'upper';\n     \
    \       } else {\n                $result = '';\n                last;\n     \
    \       }\n        } else {\n            if ($case eq 'lower' && $key =~ /^[A-Z]+$/)\
    \ {\n                $result = '';\n                last;\n            } elsif\
    \ ($case eq 'upper' && $key =~ /^[a-z]+$/) {\n                $result = '';\n\
    \                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n   \
    \ my $upper_case = 0;\n    my $lower_case = 0;\n    while (($key, $value) = each\
    \ %$hash) {\n        if ($key =~ /^[A-Z]+$/) {\n            $upper_case++;\n \
    \       } elsif ($key =~ /^[a-z]+$/) {\n            $lower_case++;\n        }\
    \ else {\n            $result = '';\n            last;\n        }\n    }\n   \
    \ if ($result && $upper_case && $lower_case) {\n        $result = '';\n    }\n\
    \    return $result;\n}", "my ($hash) = @_;\n    my $key;\n    my $value;\n  \
    \  my $result = 1;\n    my $upper = 0;\n    my $lower = 0;\n    while (($key,\
    \ $value) = each %$hash) {\n        if ($key =~ /[A-Z]/) {\n            $upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $lower = 1;\n \
    \       }\n    }\n    if ($upper && $lower) {\n        $result = '';\n    }\n\
    \    return $result;\n}", "my %dict = @_;\n    my $result = 1;\n    my $case =\
    \ \"\";\n    foreach my $key (keys %dict) {\n        if ($case eq \"\") {\n  \
    \          if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n   \
    \         } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n\
    \            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($case eq \"lower\") {\n            if ($key !~\
    \ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "my $hash = shift;\n    my $result\
    \ = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$hash) {\n      \
    \  if ($key_type eq \"\") {\n            if ($key =~ /[a-z]/) {\n            \
    \    $key_type = \"lower\";\n            } elsif ($key =~ /[A-Z]/) {\n       \
    \         $key_type = \"upper\";\n            } else {\n                $result\
    \ = \"\";\n                last;\n            }\n        } else {\n          \
    \  if ($key_type eq \"lower\" && $key =~ /[A-Z]/) {\n                $result =\
    \ \"\";\n                last;\n            } elsif ($key_type eq \"upper\" &&\
    \ $key =~ /[a-z]/) {\n                $result = \"\";\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $result = 1;\n    my $key;\n    my $value;\n    my $key_type;\n    my\
    \ $value_type;\n    my $key_case;\n    my $value_case;\n    my $key_case_type;\n\
    \    my $value_case_type;\n    my $key_case_type_count = 0;\n    my $value_case_type_count\
    \ = 0;\n    my $key_case_type_count_lower = 0;\n    my $key_case_type_count_upper\
    \ = 0;\n    my $value_case_type_count_lower = 0;\n    my $value_case_type_count_upper\
    \ = 0;\n    my $key_case_type_count_mixed = 0;\n    my $value_case_type_count_mixed\
    \ = 0;\n    my $key_case_type_count_other = 0;\n    my $value_case_type_count_other\
    \ = 0;\n    my $key_case_type_count_total = 0;\n    my $value_case_type_count_total\
    \ = 0;\n    my $key_case_type_count_total_lower = 0;\n    my $key_case_type_count_total_upper\
    \ = 0;\n    my $value_case_type_count_total_lower = 0;\n    my $value_case_type_count_total_upper\
    \ = 0;\n    my $key_case_type_count_total_mixed = 0;\n    my $value_case_type_count_total_mixed\
    \ = 0;\n    my $key_case_type_count_total_other = 0;\n    my $value_case_type_count_total_other\
    \ = 0;\n    my $key_case_type_count_total_total = 0;\n    my $value_case_type_count_total_total\
    \ = 0;\n    my $key_case_type_count_total_total_lower = 0;\n    my $key_case_type_count_total_total_upper\
    \ = 0;\n    my $value_case_type_count_total_total_lower = 0;\n", "my $hash = shift;\n\
    \    my $flag = 1;\n    my $key;\n    my $value;\n    my $key_type;\n    my $value_type;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_type;\n    my $value_case_type;\n\
    \    my $key_case_flag = 1;\n    my $value_case_flag = 1;\n    my $key_type_flag\
    \ = 1;\n    my $value_type_flag = 1;\n    my $key_case_type_flag = 1;\n    my\
    \ $value_case_type_flag = 1;\n    my $key_case_type_flag_flag = 1;\n    my $value_case_type_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag_flag = 1;\n    my\
    \ $value_case_type_flag_flag_flag_flag_flag_flag_flag = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag_flag_flag\
    \ = 1;\n    my $value_case_type_flag_flag_flag_flag_flag_flag_flag_flag = 1;\n\
    \    my $key_case_type_flag_flag_flag_flag_flag_flag_flag_flag_flag = 1;\n   \
    \ my $value_case_type_flag_flag_flag_flag_flag", "my ($hash) = @_;\n    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $is_upper = 1;\n    my $is_lower\
    \ = 1;\n    while (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n \
    \           $is_upper = 0;\n        }\n    }\n    if ($is_upper == 0 && $is_lower\
    \ == 0) {\n        $result = '';\n    }\n    return $result;\n}", "my $hash =\
    \ shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $key_type;\n\
    \    my $value_type;\n    my $key_case;\n    my $value_case;\n    my $key_case_type;\n\
    \    my $value_case_type;\n    my $key_case_type_count = 0;\n    my $value_case_type_count\
    \ = 0;\n    my $key_case_type_count_lower = 0;\n    my $key_case_type_count_upper\
    \ = 0;\n    my $value_case_type_count_lower = 0;\n    my $value_case_type_count_upper\
    \ = 0;\n    my $key_case_type_count_mixed = 0;\n    my $value_case_type_count_mixed\
    \ = 0;\n    my $key_case_type_count_mixed_lower = 0;\n    my $key_case_type_count_mixed_upper\
    \ = 0;\n    my $value_case_type_count_mixed_lower = 0;\n    my $value_case_type_count_mixed_upper\
    \ = 0;\n    my $key_case_type_count_mixed_lower_upper = 0;\n    my $value_case_type_count_mixed_lower_upper\
    \ = 0;\n    my $key_case_type_count_mixed_upper_lower = 0;\n    my $value_case_type_count_mixed_upper_lower\
    \ = 0;\n    my $key_case_type_count_mixed_upper_lower_lower = 0;\n    my $value_case_type_count_mixed_upper_lower_lower\
    \ = 0;\n    my $key_case_type_count_mixed_upper_lower_upper = 0;\n    my $value_case_type_count_mixed_upper_lower_upper\
    \ = 0;\n    my $key_case_type_count_mixed_upper_lower_lower_lower = 0;\n    my\
    \ $value_case_type_count_mixed_upper_lower_lower_lower = 0;\n    my $key", "my\
    \ $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n\
    \    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n    my\
    \ $key_case_prev_flag = 0;\n    my $value_case_prev_flag = 0;\n    my $key_case_prev_flag_set\
    \ = 0;\n    my $value_case_prev_flag_set = 0;\n    while (($key, $value) = each\
    \ %$hash) {\n        $key_case = check_case($key);\n        $value_case = check_case($value);\n\
    \        if ($key_case_prev_flag_set == 0) {\n            $key_case_prev = $key_case;\n\
    \            $key_case_prev_flag_set = 1;\n        }\n        if ($value_case_prev_flag_set\
    \ == 0) {\n            $value_case_prev = $value_case;\n            $value_case_prev_flag_set\
    \ = 1;\n        }\n        if ($key_case_prev != $key_case) {\n            $key_case_prev_flag\
    \ = 1;\n        }\n        if ($value_case_prev != $value_case) {\n          \
    \  $value_case_prev_flag = 1;\n        }\n    }\n    if ($key_case_prev_flag ==\
    \ 1 && $value_case_prev_flag == 1) {\n        $result = '';\n    }\n    return\
    \ $result;\n}", "my $dict = shift;\n    my $case = '';\n    my $key;\n    my $value;\n\
    \    my $result = 1;\n    while (($key, $value) = each %$dict) {\n        if ($case\
    \ eq '') {\n            if ($key =~ /^[a-z]+$/) {\n                $case = 'lower';\n\
    \            } elsif ($key =~ /^[A-Z]+$/) {\n                $case = 'upper';\n\
    \            } else {\n                $result = '';\n                last;\n\
    \            }\n        } elsif ($case eq 'lower' && $key =~ /^[A-Z]+$/) {\n \
    \           $result = '';\n            last;\n        } elsif ($case eq 'upper'\
    \ && $key =~ /^[a-z]+$/) {\n            $result = '';\n            last;\n   \
    \     }\n    }\n    return $result;\n}", "my %dict = @_;\n    my $flag = 1;\n\
    \    my $key;\n    my $value;\n    while (($key, $value) = each %dict) {\n   \
    \     if ($key =~ /[A-Z]/) {\n            $flag = 0;\n        }\n    }\n    return\
    \ $flag;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower_case = 0;\n    my $upper_case = 0;\n    while (($key, $value) =\
    \ each %$hash) {\n        if ($key =~ /[a-z]/) {\n            $lower_case = 1;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $upper_case = 1;\n   \
    \     }\n    }\n    if ($lower_case && $upper_case) {\n        $result = '';\n\
    \    }\n    return $result;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my\
    \ $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n\
    \    my $value_case_prev;\n    my $key_case_first;\n    my $value_case_first;\n\
    \    my $key_case_last;\n    my $value_case_last;\n    my $key_case_count = 0;\n\
    \    my $value_case_count = 0;\n    my $key_case_count_prev = 0;\n    my $value_case_count_prev\
    \ = 0;\n    my $key_case_count_first = 0;\n    my $value_case_count_first = 0;\n\
    \    my $key_case_count_last = 0;\n    my $value_case_count_last = 0;\n    my\
    \ $key_case_count_all = 0;\n    my $value_case_count_all = 0;\n    my $key_case_count_all_prev\
    \ = 0;\n    my $value_case_count_all_prev = 0;\n    my $key_case_count_all_first\
    \ = 0;\n    my $value_case_count_all_first = 0;\n    my $key_case_count_all_last\
    \ = 0;\n    my $value_case_count_all_last = 0;\n    my $key_case_count_all_prev_first\
    \ = 0;\n    my $value_case_count_all_prev_first = 0;\n    my $key_case_count_all_prev_last\
    \ = 0;\n    my $value_case_count_all_prev_last = 0;\n    my $key_case_count_all_first_last\
    \ = 0;\n    my $value_case_count_all_first_last = 0;\n    my $key_case_count_all_prev_first_last\
    \ = 0;\n    my $value_case_count_all_prev_first_last = 0;\n    my $key_case_count_all_prev_first_last_all\
    \ = 0;\n    my $value", "my $hash = shift;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    my $is_mixed = 0;\n    my $is_empty = 0;\n    my $is_valid = 0;\n\
    \    my $key;\n    my $value;", "my $hash = shift;\n    my $ret = 1;\n    my $key;\n\
    \    my $val;\n    my $key_type;\n    my $val_type;\n    my $key_type_prev;\n\
    \    my $val_type_prev;\n    my $key_type_prev_prev;\n    my $val_type_prev_prev;\n\
    \    my $key_type_prev_prev_prev;\n    my $val_type_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev", "my $hash\
    \ = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $lower_case\
    \ = 0;\n    my $upper_case = 0;\n    while (($key, $value) = each %$hash) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n        } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        } else {\n   \
    \         $result = '';\n            last;\n        }\n    }\n    if ($lower_case\
    \ && $upper_case) {\n        $result = '';\n    }\n    return $result;\n}", "my\
    \ $hash = shift;\n    my $flag = 1;\n    my $key;\n    my $value;\n    my $key_type;\n\
    \    my $value_type;\n    my $key_type_prev;\n    my $value_type_prev;\n    my\
    \ $key_type_prev_prev;\n    my $value_type_prev_prev;\n    my $key_type_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev;\n \
    \   my $value_type_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev", "my\
    \ $dict = shift;\n    my $flag = 1;\n    my $key;\n    my $value;\n    my $key_case;\n\
    \    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n    my\
    \ $key_case_prev_flag = 0;\n    my $value_case_prev_flag = 0;\n    my $key_case_flag\
    \ = 0;\n    my $value_case_flag = 0;\n    my $key_case_count = 0;\n    my $value_case_count\
    \ = 0;\n    my $key_case_count_prev = 0;\n    my $value_case_count_prev = 0;\n\
    \    my $key_case_count_flag = 0;\n    my $value_case_count_flag = 0;\n    my\
    \ $key_case_count_prev_flag = 0;\n    my $value_case_count_prev_flag = 0;\n  \
    \  my $key_case_count_flag_prev = 0;\n    my $value_case_count_flag_prev = 0;\n\
    \    my $key_case_count_flag_prev_flag = 0;\n    my $value_case_count_flag_prev_flag\
    \ = 0;\n    my $key_case_count_flag_prev_flag_flag = 0;\n    my $value_case_count_flag_prev_flag_flag\
    \ = 0;\n    my $key_case_count_flag_prev_flag_flag_flag = 0;\n    my $value_case_count_flag_prev_flag_flag_flag\
    \ = 0;\n    my $key_case_count_flag_prev_flag_flag_flag_flag = 0;\n    my $value_case_count_flag_prev_flag_flag_flag_flag\
    \ = 0;\n    my $key_case_count_flag_prev_flag_flag_flag_flag_flag = 0;\n    my\
    \ $value_case_count_flag_prev_flag_flag_flag_flag_flag = 0;\n    my $key_case_count_flag_prev_flag_flag_flag_flag_flag_flag\
    \ = 0;\n    my $value", "my $dict = shift;\n    my $all_lower = 1;\n    my $all_upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $all_lower = 0 if $key =~\
    \ /[A-Z]/;\n        $all_upper = 0 if $key =~ /[a-z]/;\n    }\n    return $all_lower\
    \ || $all_upper;\n}", "my %dict = @_;\n    my $result = 1;\n    my $is_lower =\
    \ 1;\n    my $is_upper = 1;\n    foreach my $key (keys %dict) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $is_upper = 0;\n        }\n    }\n    if ($is_lower == 0 && $is_upper\
    \ == 0) {\n        $result = '';\n    }\n    return $result;\n}", "my ($hash)\
    \ = @_;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach my $key (keys\
    \ %$hash) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n \
    \       }\n        if ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n   \
    \     }\n    }\n    if ($is_lower && $is_upper) {\n        return '';\n    }\n\
    \    return 1;\n}", "my $hash = shift;\n    my $case = '';\n    my $result = 1;\n\
    \    foreach my $key (keys %$hash) {\n        if ($case eq '') {\n           \
    \ if ($key =~ /^[a-z]+$/) {\n                $case = 'lower';\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $case = 'upper';\n            } else\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     } else {\n            if ($case eq 'lower' && $key =~ /^[A-Z]+$/) {\n  \
    \              $result = '';\n                last;\n            } elsif ($case\
    \ eq 'upper' && $key =~ /^[a-z]+$/) {\n                $result = '';\n       \
    \         last;\n            }\n        }\n    }\n    return $result;\n}", "my\
    \ ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $lower_case\
    \ = 1;\n    my $upper_case = 1;\n    while (($key, $value) = each %$hash) {\n\
    \        if ($key =~ /[a-z]/) {\n            $upper_case = 0;\n        }\n   \
    \     if ($key =~ /[A-Z]/) {\n            $lower_case = 0;\n        }\n    }\n\
    \    if ($lower_case == 0 && $upper_case == 0) {\n        $result = '';\n    }\n\
    \    return $result;\n}", "my $hash = shift;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$hash) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $upper = 0;\n        }\n    }\n    return $lower || $upper;\n}", "my $dict\
    \ = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    while (($key, $value) = each(%$dict)) {\n \
    \       if (uc($key) eq $key) {\n            $is_upper = 1;\n        }\n     \
    \   if (lc($key) eq $key) {\n            $is_lower = 1;\n        }\n    }\n  \
    \  if ($is_upper && $is_lower) {\n        $result = '';\n    }\n    return $result;\n\
    }", "my $hash = shift;\n    my $flag = 1;\n    my $key;\n    my $value;\n    my\
    \ $key_type;\n    my $value_type;\n    my $key_case;\n    my $value_case;\n  \
    \  my $key_case_type;\n    my $value_case_type;\n    my $key_case_flag = 1;\n\
    \    my $value_case_flag = 1;\n    my $key_type_flag = 1;\n    my $value_type_flag\
    \ = 1;\n    my $key_case_type_flag = 1;\n    my $value_case_type_flag = 1;\n \
    \   my $key_case_type_flag_flag = 1;\n    my $value_case_type_flag_flag = 1;\n\
    \    my $key_case_type_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag_flag = 1;\n    my\
    \ $value_case_type_flag_flag_flag_flag_flag_flag_flag = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag_flag_flag\
    \ = 1;\n    my $value_case_type_flag_flag_flag_flag_flag_flag_flag_flag = 1;\n\
    \    my $key_case_type_flag_flag_flag_flag_flag_flag_flag_flag_flag = 1;\n   \
    \ my $value_case_type_flag_flag_flag_flag_flag", "my ($hash) = @_;\n    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n\
    \    my $key_case_prev;\n    my $value_case_prev;\n    my $key_case_prev_set =\
    \ 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_match = 0;\n   \
    \ my $value_case_prev_match = 0;\n    my $key_case_prev_mismatch = 0;\n    my\
    \ $value_case_prev_mismatch = 0;\n    my $key_case_prev_mismatch_count = 0;\n\
    \    my $value_case_prev_mismatch_count = 0;\n    my $key_case_prev_mismatch_count_max\
    \ = 0;\n    my $value_case_prev_mismatch_count_max = 0;\n    my $key_case_prev_mismatch_count_max_set\
    \ = 0;\n    my $value_case_prev_mismatch_count_max_set = 0;\n    my $key_case_prev_mismatch_count_max_match\
    \ = 0;\n    my $value_case_prev_mismatch_count_max_match = 0;\n    my $key_case_prev_mismatch_count_max_mismatch\
    \ = 0;\n    my $value_case_prev_mismatch_count_max_mismatch = 0;\n    my $key_case_prev_mismatch_count_max_mismatch_count\
    \ = 0;\n    my $value_case_prev_mismatch_count_max_mismatch_count = 0;\n    my\
    \ $key_case_prev_mismatch_count_max_mismatch_count_max = 0;\n    my $value_case_prev_mismatch_count_max_mismatch_count_max\
    \ = 0;\n    my $key_case_prev_mismatch_count_max_mismatch_count_max_set = 0;\n\
    \    my $value_case_prev", "my ($hash) = @_;\n    my $result = 1;\n    my $case\
    \ = \"\";\n    foreach my $key (keys %$hash) {\n        if ($case eq \"\") {\n\
    \            if ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n \
    \           } elsif ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } elsif ($case eq \"lower\") {\n            if ($key !~\
    \ /^[a-z]+$/) {\n                $result = \"\";\n                last;\n    \
    \        }\n        } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/)\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \       }\n    }\n    return $result;\n}", "my $hash = shift;\n    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $key_type = \"\";\n    my $value_type\
    \ = \"\";\n    my $key_type_count = 0;\n    my $value_type_count = 0;\n    my\
    \ $key_type_count_max = 0;\n    my $value_type_count_max = 0;\n    my $key_type_count_min\
    \ = 0;\n    my $value_type_count_min = 0;\n    my $key_type_count_avg = 0;\n \
    \   my $value_type_count_avg = 0;\n    my $key_type_count_sum = 0;\n    my $value_type_count_sum\
    \ = 0;\n    my $key_type_count_sum_sq = 0;\n    my $value_type_count_sum_sq =\
    \ 0;\n    my $key_type_count_std_dev = 0;\n    my $value_type_count_std_dev =\
    \ 0;\n    my $key_type_count_std_dev_pct = 0;\n    my $value_type_count_std_dev_pct\
    \ = 0;\n    my $key_type_count_variance = 0;\n    my $value_type_count_variance\
    \ = 0;\n    my $key_type_count_variance_pct = 0;\n    my $value_type_count_variance_pct\
    \ = 0;\n    my $key_type_count_median = 0;\n    my $value_type_count_median =\
    \ 0;\n    my $key_type_count_mode = 0;\n    my $value_type_count_mode = 0;\n \
    \   my $key_type_count_range = 0;\n    my $value_type_count_range = 0;\n    my\
    \ $key_type_count_min_length = 0;\n    my $value_type_count_min_length = 0;\n\
    \    my $key_type_count_max_length = 0;\n    my $value_type_count_max_length =\
    \ 0;\n    my $key_type_count", "my ($dict) = @_;\n    my $ret = 1;\n    my $key;\n\
    \    my $val;\n    my $is_lower = 1;\n    my $is_upper = 1;\n    while (($key,\
    \ $val) = each %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_upper = 0;\n\
    \        }\n    }\n    if (!($is_lower || $is_upper)) {\n        $ret = '';\n\
    \    }\n    return $ret;\n}", "my $hash = shift;\n    return '' if !%$hash;\n\
    \    my $flag = 0;\n    foreach my $key (keys %$hash) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $flag = 1;\n        }\n        else {\n            $flag = 0;\n\
    \            last;\n        }\n    }\n    return $flag;\n}", "my ($hash) = @_;\n\
    \    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_case;\n    my $val_case;\n\
    \    my $key_case_prev;\n    my $val_case_prev;\n    my $key_case_prev_set = 0;\n\
    \    my $val_case_prev_set = 0;\n    while (($key, $val) = each %$hash) {\n  \
    \      $key_case = check_case($key);\n        $val_case = check_case($val);\n\
    \        if ($key_case_prev_set) {\n            if ($key_case_prev != $key_case)\
    \ {\n                $ret = '';\n                last;\n            }\n      \
    \  }\n        else {\n            $key_case_prev = $key_case;\n            $key_case_prev_set\
    \ = 1;\n        }\n        if ($val_case_prev_set) {\n            if ($val_case_prev\
    \ != $val_case) {\n                $ret = '';\n                last;\n       \
    \     }\n        }\n        else {\n            $val_case_prev = $val_case;\n\
    \            $val_case_prev_set = 1;\n        }\n    }\n    return $ret;\n}",
  "my ($hash) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach my\
    \ $key (keys %$hash) {\n        if ($key_type eq \"\") {\n            $key_type\
    \ = ($key =~ /^[a-z]+$/) ? \"lower\" : \"upper\";\n        }\n        if ($key_type\
    \ eq \"lower\" && $key !~ /^[a-z]+$/) {\n            $result = \"\";\n       \
    \     last;\n        }\n        if ($key_type eq \"upper\" && $key !~ /^[A-Z]+$/)\
    \ {\n            $result = \"\";\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "my $dict = shift;\n    my $result = 1;\n    my $lower = 1;\n\
    \    my $upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $upper = 0;\n        }\n    }\n    if ($lower == 0 && $upper\
    \ == 0) {\n        $result = '';\n    }\n    return $result;\n}", "my $hash =\
    \ shift;\n    my $flag = 0;\n    my $ret = 1;\n    foreach my $key (keys %$hash)\
    \ {\n        if ($flag == 0) {\n            if ($key =~ /^[a-z]+$/) {\n      \
    \          $flag = 1;\n            } elsif ($key =~ /^[A-Z]+$/) {\n          \
    \      $flag = 2;\n            } else {\n                $ret = '';\n        \
    \        last;\n            }\n        } else {\n            if ($flag == 1) {\n\
    \                if ($key =~ /^[A-Z]+$/) {\n                    $ret = '';\n \
    \                   last;\n                }\n            } else {\n         \
    \       if ($key =~ /^[a-z]+$/) {\n                    $ret = '';\n          \
    \          last;\n                }\n            }\n        }\n    }\n    return\
    \ $ret;\n}", "my $hash = shift;\n    my $flag = 1;\n    foreach my $key (keys\
    \ %$hash) {\n        if ($key =~ /[A-Z]/) {\n            if ($flag == 1) {\n \
    \               $flag = 2;\n            }\n            elsif ($flag == 3) {\n\
    \                return '';\n            }\n        }\n        elsif ($key =~\
    \ /[a-z]/) {\n            if ($flag == 2) {\n                return '';\n    \
    \        }\n            elsif ($flag == 1) {\n                $flag = 3;\n   \
    \         }\n        }\n        else {\n            return '';\n        }\n  \
    \  }\n    return $flag;\n}", "my %dict = @_;\n    my $ret = 1;\n    my $key;\n\
    \    my $val;\n    my $key_case;\n    my $val_case;\n    my $key_case_prev;\n\
    \    my $val_case_prev;\n    my $key_case_prev_set = 0;\n    my $val_case_prev_set\
    \ = 0;\n    my $key_case_prev_set_val = 0;\n    my $val_case_prev_set_val = 0;\n\
    \    my $key_case_prev_set_val_prev = 0;\n    my $val_case_prev_set_val_prev =\
    \ 0;\n    my $key_case_prev_set_val_prev_set = 0;\n    my $val_case_prev_set_val_prev_set\
    \ = 0;\n    my $key_case_prev_set_val_prev_set_val = 0;\n    my $val_case_prev_set_val_prev_set_val\
    \ = 0;\n    my $key_case_prev_set_val_prev_set_val_prev = 0;\n    my $val_case_prev_set_val_prev_set_val_prev\
    \ = 0;\n    my $key_case_prev_set_val_prev_set_val_prev_set = 0;\n    my $val_case_prev_set_val_prev_set_val_prev_set\
    \ = 0;\n    my $key_case_prev_set_val_prev_set_val_prev_set_val = 0;\n    my $val_case_prev_set_val_prev_set_val_prev_set_val\
    \ = 0;\n    my $key_case_prev_set_val_prev_set_val_prev_set_val_prev = 0;\n  \
    \  my $val_case_prev_set_val_prev_set_val_prev_set_val_prev = 0;\n    my $key_case_prev_set_val_prev_set_val_prev_set_val_prev_set\
    \ = 0;\n    my $val_case_prev_set_val_prev_set_val_", "my $hash = shift;\n   \
    \ my $flag = 0;\n    my $flag1 = 0;\n    my $flag2 = 0;\n    foreach my $key (keys\
    \ %$hash) {\n        if ($key =~ /^[a-z]+$/) {\n            $flag1 = 1;\n    \
    \    }\n        if ($key =~ /^[A-Z]+$/) {\n            $flag2 = 1;\n        }\n\
    \    }\n    if ($flag1 == 1 && $flag2 == 0) {\n        $flag = 1;\n    }\n   \
    \ if ($flag1 == 0 && $flag2 == 1) {\n        $flag = 1;\n    }\n    return $flag;\n\
    }", "my $dict = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $cnt\
    \ = 0;\n    my $upper = 0;\n    my $lower = 0;\n    while (($key, $val) = each\
    \ %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n\
    \        if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n        $cnt++;\n\
    \    }\n    if ($cnt == 0) {\n        $ret = '';\n    } elsif ($upper && $lower)\
    \ {\n        $ret = '';\n    }\n    return $ret;\n}", "my $hash = shift;\n   \
    \ my $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n\
    \    my $key_case_type;\n    my $value_case_type;\n    my $key_case_type_prev;\n\
    \    my $value_case_type_prev;\n    my $key_case_type_first;\n    my $value_case_type_first;\n\
    \    my $key_case_type_first_set = 0;\n    my $value_case_type_first_set = 0;\n\
    \    my $key_case_type_prev_set = 0;\n    my $value_case_type_prev_set = 0;\n\
    \    my $key_case_type_set = 0;\n    my $value_case_type_set = 0;\n    my $key_case_type_mismatch\
    \ = 0;\n    my $value_case_type_mismatch = 0;\n    my $key_case_type_mismatch_prev\
    \ = 0;\n    my $value_case_type_mismatch_prev = 0;\n    my $key_case_type_mismatch_first\
    \ = 0;\n    my $value_case_type_mismatch_first = 0;\n    my $key_case_type_mismatch_first_set\
    \ = 0;\n    my $value_case_type_mismatch_first_set = 0;\n    my $key_case_type_mismatch_prev_set\
    \ = 0;\n    my $value_case_type_mismatch_prev_set = 0;\n    my $key_case_type_mismatch_set\
    \ = 0;\n    my $value_case_type_mismatch_set = 0;\n    my $key_case_type_mismatch_count\
    \ = 0;\n    my $value_case_type_mismatch_count = 0;\n    my $key_case_type_mismatch_count_prev\
    \ = 0;\n    my $value_case_type_mismatch_count_prev = 0;\n    my $key_case_type_mismatch",
  "my $dict = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    my $is_empty = 1;", "my $hash = shift;\n  \
    \  my $case = 0;\n    my $ret = 1;\n    foreach my $key (keys %$hash) {\n    \
    \    if ($case == 0) {\n            if ($key =~ /^[a-z]+$/) {\n              \
    \  $case = 1;\n            } elsif ($key =~ /^[A-Z]+$/) {\n                $case\
    \ = 2;\n            } else {\n                $ret = '';\n                last;\n\
    \            }\n        } else {\n            if ($case == 1 && $key =~ /^[A-Z]+$/)\
    \ {\n                $ret = '';\n                last;\n            } elsif ($case\
    \ == 2 && $key =~ /^[a-z]+$/) {\n                $ret = '';\n                last;\n\
    \            }\n        }\n    }\n    return $ret;\n}", "my %hash = @_;\n    my\
    \ $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n\
    \    my $key_case_prev;\n    my $value_case_prev;\n    my $key_case_prev_set =\
    \ 0;\n    my $value_case_prev_set = 0;\n    while (($key, $value) = each %hash)\
    \ {\n        $key_case = check_case($key);\n        $value_case = check_case($value);\n\
    \        if ($key_case_prev_set == 0) {\n            $key_case_prev = $key_case;\n\
    \            $key_case_prev_set = 1;\n        }\n        if ($value_case_prev_set\
    \ == 0) {\n            $value_case_prev = $value_case;\n            $value_case_prev_set\
    \ = 1;\n        }\n        if ($key_case_prev != $key_case || $value_case_prev\
    \ != $value_case) {\n            $result = '';\n            last;\n        }\n\
    \    }\n    return $result;\n}", "my $hash = shift;\n    my $flag = 1;\n    foreach\
    \ my $key (keys %$hash) {\n        if (ref($key) eq 'HASH') {\n            $flag\
    \ = check_dict_case($key);\n        }\n        else {\n            if ($key =~\
    \ /[A-Z]/) {\n                if ($key =~ /[a-z]/) {\n                    $flag\
    \ = '';\n                    last;\n                }\n            }\n       \
    \     else {\n                if ($key =~ /[A-Z]/) {\n                    $flag\
    \ = '';\n                    last;\n                }\n            }\n       \
    \ }\n    }\n    return $flag;\n}", "my %hash = @_;\n    my $result = 1;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %hash) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n  \
    \      elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n \
    \       else {\n            $result = '';\n            last;\n        }\n    }\n\
    \    if ($is_lower && $is_upper) {\n        $result = '';\n    }\n    return $result;\n\
    }", "my $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $all_lower = 1;\n    my $all_upper = 1;\n    while (($key, $value) = each\
    \ %$hash) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n   \
    \     }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n       \
    \ }\n    }\n    if ($all_lower == 0 && $all_upper == 0) {\n        $result = '';\n\
    \    }\n    return $result;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my\
    \ $key;\n    my $value;\n    my $lower_case = 0;\n    my $upper_case = 0;\n  \
    \  while (($key, $value) = each %$hash) {\n        if ($key =~ /^[a-z]+$/) {\n\
    \            $lower_case = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $upper_case = 1;\n        }\n        else {\n            $result\
    \ = '';\n            last;\n        }\n    }\n    if ($lower_case && $upper_case)\
    \ {\n        $result = '';\n    }\n    return $result;\n}", "my ($dict) = @_;\n\
    \    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    while (($key, $val) = each %$dict) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n \
    \           $is_lower = 1;\n        }\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        $ret = '';\n    }\n    return $ret;\n}", "my %dict = @_;\n    my\
    \ $result = 1;\n    my $first_key = (keys %dict)[0];\n    my $first_key_case =\
    \ uc($first_key) eq $first_key ? 'upper' : 'lower';\n    foreach my $key (keys\
    \ %dict) {\n        if ($first_key_case eq 'upper') {\n            if (uc($key)\
    \ ne $key) {\n                $result = '';\n                last;\n         \
    \   }\n        } else {\n            if (lc($key) ne $key) {\n               \
    \ $result = '';\n                last;\n            }\n        }\n    }\n    return\
    \ $result;\n}", "my %dict = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $case;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n\
    \    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n\
    \    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n\
    \    my $B = 0;\n    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n\
    \    my $G = 0;\n    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n\
    \    my $L = 0;\n    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n\
    \    my $Q = 0;\n    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n\
    \    my $V = 0;\n    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    my $other = 0;\n    my $length =\
    \ 0;\n    my $total = 0;\n    my $percent = 0;\n    my $string = \"\";\n    my\
    \ $char = \"\";\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n\
    \    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p =", "my $hash = shift;\n\
    \    my $result = 1;\n    foreach my $key (keys %$hash) {\n        if ($key =~\
    \ /[A-Z]/) {\n            if ($key =~ /[a-z]/) {\n                $result = '';\n\
    \                last;\n            }\n        }\n        else {\n           \
    \ if ($key =~ /[A-Z]/) {\n                $result = '';\n                last;\n\
    \            }\n        }\n    }\n    return $result;\n}", "my $dict = shift;\n\
    \    my $result = 1;\n    my $case = \"\";\n    foreach my $key (keys %$dict)\
    \ {\n        if ($case eq \"\") {\n            $case = $key =~ /^[a-z]+$/ ? \"\
    lower\" : \"upper\";\n        }\n        if ($key =~ /^[a-z]+$/ && $case ne \"\
    lower\") {\n            $result = \"\";\n            last;\n        }\n      \
    \  if ($key =~ /^[A-Z]+$/ && $case ne \"upper\") {\n            $result = \"\"\
    ;\n            last;\n        }\n    }\n    return $result;\n}", "my ($hash) =\
    \ @_;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n\
    \    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n    my\
    \ $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_is_upper\
    \ = 0;\n    my $value_case_prev_is_upper = 0;\n    my $key_case_prev_is_lower\
    \ = 0;\n    my $value_case_prev_is_lower = 0;\n    my $key_case_prev_is_mixed\
    \ = 0;\n    my $value_case_prev_is_mixed = 0;\n    my $key_case_prev_is_mixed_upper\
    \ = 0;\n    my $value_case_prev_is_mixed_upper = 0;\n    my $key_case_prev_is_mixed_lower\
    \ = 0;\n    my $value_case_prev_is_mixed_lower = 0;\n    my $key_case_prev_is_mixed_upper_lower\
    \ = 0;\n    my $value_case_prev_is_mixed_upper_lower = 0;\n    my $key_case_prev_is_mixed_lower_upper\
    \ = 0;\n    my $value_case_prev_is_mixed_lower_upper = 0;\n    my $key_case_prev_is_mixed_upper_lower_upper\
    \ = 0;\n    my $value_case_prev_is_mixed_upper_lower_upper = 0;\n    my $key_case_prev_is_mixed_lower_upper_lower\
    \ = 0;\n    my $value_case_prev_is_mixed_lower_upper_lower = 0;\n    my $key_case_prev_is_mixed_upper_lower_upper_lower\
    \ = 0;\n    my $value_case_prev_is_mixed_upper_lower_upper_lower = 0;\n    my\
    \ $key_case_prev_is_mixed_lower_upper_", "my $dict = shift;\n    my $result =\
    \ 1;\n    my $key;\n    my $value;\n    my $case;\n    my $i = 0;\n    foreach\
    \ $key (keys %$dict) {\n        if ($i == 0) {\n            $case = $key;\n  \
    \          $i++;\n        }\n        if ($case eq uc($key)) {\n            $case\
    \ = uc($key);\n        }\n        elsif ($case eq lc($key)) {\n            $case\
    \ = lc($key);\n        }\n        else {\n            $result = '';\n        \
    \    last;\n        }\n    }\n    return $result;\n}", "my $hash = shift;\n  \
    \  my $lower = 0;\n    my $upper = 0;\n    foreach my $key (keys %$hash) {\n \
    \       if ($key =~ /^[a-z]+$/) {\n            $lower = 1;\n        }\n      \
    \  elsif ($key =~ /^[A-Z]+$/) {\n            $upper = 1;\n        }\n        else\
    \ {\n            return '';\n        }\n    }\n    if ($lower == 1 && $upper ==\
    \ 1) {\n        return '';\n    }\n    else {\n        return 1;\n    }\n}", "my\
    \ $hash = shift;\n    my $flag = 1;\n    my $key;\n    my $value;\n    my $key_type;\n\
    \    my $value_type;\n    my $key_case;\n    my $value_case;\n    my $key_case_type;\n\
    \    my $value_case_type;\n    my $key_case_flag = 1;\n    my $value_case_flag\
    \ = 1;\n    my $key_type_flag = 1;\n    my $value_type_flag = 1;\n    my $key_case_type_flag\
    \ = 1;\n    my $value_case_type_flag = 1;\n    my $key_case_type_flag_flag = 1;\n\
    \    my $value_case_type_flag_flag = 1;\n    my $key_case_type_flag_flag_flag\
    \ = 1;\n    my $value_case_type_flag_flag_flag = 1;\n    my $key_case_type_flag_flag_flag_flag\
    \ = 1;\n    my $value_case_type_flag_flag_flag_flag = 1;\n    my $key_case_type_flag_flag_flag_flag_flag\
    \ = 1;\n    my $value_case_type_flag_flag_flag_flag_flag = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag\
    \ = 1;\n    my $value_case_type_flag_flag_flag_flag_flag_flag = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag_flag\
    \ = 1;\n    my $value_case_type_flag_flag_flag_flag_flag_flag_flag = 1;\n    my\
    \ $key_case_type_flag_flag_flag_flag_flag_flag_flag_flag = 1;\n    my $value_case_type_flag_flag_flag_flag_flag_flag_flag_flag\
    \ = 1;\n    my $key_case_type_flag_flag_flag_flag_flag_flag_flag_flag_flag = 1;\n\
    \    my $value_case_type_flag_flag_flag_flag_flag", "my $dict = shift;\n    my\
    \ $res = 1;\n    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    my $is_empty = 1;\n    while (($key, $val) = each %$dict) {\n    \
    \    $is_empty = 0;\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n     \
    \   }\n    }\n    if ($is_empty) {\n        $res = '';\n    }\n    elsif ($is_upper\
    \ && $is_lower) {\n        $res = '';\n    }\n    return $res;\n}", "my $hash\
    \ = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $lc = 0;\n  \
    \  my $uc = 0;\n    my $lc_key = 0;\n    my $uc_key = 0;\n    my $lc_val = 0;\n\
    \    my $uc_val = 0;\n    my $lc_key_val = 0;\n    my $uc_key_val = 0;\n    my\
    \ $lc_val_key = 0;\n    my $uc_val_key = 0;\n    my $lc_key_val_key = 0;\n   \
    \ my $uc_key_val_key = 0;\n    my $lc_val_key_val = 0;\n    my $uc_val_key_val\
    \ = 0;\n    my $lc_key_key_val = 0;\n    my $uc_key_key_val = 0;\n    my $lc_val_val_key\
    \ = 0;\n    my $uc_val_val_key = 0;\n    my $lc_key_val_val = 0;\n    my $uc_key_val_val\
    \ = 0;\n    my $lc_val_key_key = 0;\n    my $uc_val_key_key = 0;\n    my $lc_key_key_key\
    \ = 0;\n    my $uc_key_key_key = 0;\n    my $lc_val_val_val = 0;\n    my $uc_val_val_val\
    \ = 0;\n    my $lc_key_val_key_val = 0;\n    my $uc_key_val_key_val = 0;\n   \
    \ my $lc_val_key_val_key = 0;\n    my $uc_val_key_val_key = 0;\n    my $lc_key_key_val_key\
    \ = 0;\n    my $uc_key_key_val_key = 0;\n    my $lc_val_val_key_val = 0;\n   \
    \ my $uc_val_val_key_val = 0;\n    my $lc_key_val_val_key = 0;\n    my $uc_key_val_val_key",
  "my $hash = shift;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach my\
    \ $key (keys %$hash) {\n        if ($key_type eq \"\") {\n            $key_type\
    \ = \"lower\" if ($key =~ /^[a-z]+$/);\n            $key_type = \"upper\" if ($key\
    \ =~ /^[A-Z]+$/);\n        }\n        if ($key_type eq \"lower\") {\n        \
    \    $result = \"\" if ($key =~ /^[A-Z]+$/);\n        }\n        if ($key_type\
    \ eq \"upper\") {\n            $result = \"\" if ($key =~ /^[a-z]+$/);\n     \
    \   }\n    }\n    return $result;\n}", "my ($hash) = @_;\n    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $key_case;\n    my $value_case;\n    my\
    \ $key_case_prev;\n    my $value_case_prev;\n    my $key_case_prev_set = 0;\n\
    \    my $value_case_prev_set = 0;\n    while (($key, $value) = each %$hash) {\n\
    \        $key_case = check_case($key);\n        $value_case = check_case($value);\n\
    \        if ($key_case_prev_set) {\n            if ($key_case_prev != $key_case)\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     }\n        else {\n            $key_case_prev = $key_case;\n           \
    \ $key_case_prev_set = 1;\n        }\n        if ($value_case_prev_set) {\n  \
    \          if ($value_case_prev != $value_case) {\n                $result = '';\n\
    \                last;\n            }\n        }\n        else {\n           \
    \ $value_case_prev = $value_case;\n            $value_case_prev_set = 1;\n   \
    \     }\n    }\n    return $result;\n}", "my $dict = shift;\n    my $result =\
    \ 1;\n    my $key;\n    my $value;\n    my $key_type;\n    my $value_type;\n \
    \   my $key_type_prev;\n    my $value_type_prev;\n    my $key_type_first;\n  \
    \  my $value_type_first;\n    my $key_type_second;\n    my $value_type_second;\n\
    \    my $key_type_third;\n    my $value_type_third;\n    my $key_type_fourth;\n\
    \    my $value_type_fourth;\n    my $key_type_fifth;\n    my $value_type_fifth;\n\
    \    my $key_type_sixth;\n    my $value_type_sixth;\n    my $key_type_seventh;\n\
    \    my $value_type_seventh;\n    my $key_type_eighth;\n    my $value_type_eighth;\n\
    \    my $key_type_ninth;\n    my $value_type_ninth;\n    my $key_type_tenth;\n\
    \    my $value_type_tenth;\n    my $key_type_eleventh;\n    my $value_type_eleventh;\n\
    \    my $key_type_twelfth;\n    my $value_type_twelfth;\n    my $key_type_thirteenth;\n\
    \    my $value_type_thirteenth;\n    my $key_type_fourteenth;\n    my $value_type_fourteenth;\n\
    \    my $key_type_fifteenth;\n    my $value_type_fifteenth;\n    my $key_type_sixteenth;\n\
    \    my $value_type_sixteenth;\n    my $key_type_seventeenth;\n    my $value_type_seventeenth;\n\
    \    my $key_type_eighteenth;\n    my $value_type_eighteenth;\n    my $key_type_nineteenth;\n\
    \    my $value_type_nineteenth;\n    my $key_type_twentieth;\n    my $value_type_twentieth;\n\
    \    my $key_type_twentyfirst;\n", "my $hash = shift;\n    my $result = 1;\n \
    \   my $key;\n    my $value;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $flag1 = 1;\n        }\n        if ($key =~ /[a-z]/) {\n    \
    \        $flag2 = 1;\n        }\n        if ($flag1 == 1 && $flag2 == 1) {\n \
    \           $result = '';\n            last;\n        }\n    }\n    return $result;\n\
    }", "my ($hash) = @_;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_case\
    \ = \"\";\n    while (($key, $val) = each %$hash) {\n        if ($key_case eq\
    \ \"\") {\n            if ($key =~ /[A-Z]/) {\n                $key_case = \"\
    upper\";\n            } else {\n                $key_case = \"lower\";\n     \
    \       }\n        }\n        if ($key_case eq \"upper\" && $key =~ /[a-z]/) {\n\
    \            $ret = \"\";\n            last;\n        }\n        if ($key_case\
    \ eq \"lower\" && $key =~ /[A-Z]/) {\n            $ret = \"\";\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "my $dict = shift;\n    my $result =\
    \ 1;\n    my $key;\n    my $value;\n    my $case;\n    my $is_lower;\n    my $is_upper;\n\
    \    my $is_mixed;\n    my $is_digit;\n    my $is_alpha;\n    my $is_alnum;\n\
    \    my $is_space;\n    my $is_cntrl;\n    my $is_graph;\n    my $is_print;\n\
    \    my $is_punct;\n    my $is_xdigit;\n    my $is_blank;\n    my $is_ascii;\n\
    \    my $is_utf8;\n    my $is_utf8_cntrl;\n    my $is_utf8_mark;\n    my $is_utf8_space;\n\
    \    my $is_utf8_xdigit;\n    my $is_utf8_alnum;\n    my $is_utf8_graph;\n   \
    \ my $is_utf8_print;\n    my $is_utf8_punct;\n    my $is_utf8_alpha;\n    my $is_utf8_blank;\n\
    \    my $is_utf8_digit;\n    my $is_utf8_upper;\n    my $is_utf8_lower;\n    my\
    \ $is_utf8_title;\n    my $is_utf8_idfirst;\n    my $is_utf8_idcont;\n    my $is_utf8_idstart;\n\
    \    my $is_utf8_idcont;\n    my $is_utf8_idcont;\n    my $is_utf8_idcont;\n \
    \   my $is_utf8_idcont;\n    my $is_utf8_idcont;\n    my $is_utf8_idcont;\n  \
    \  my $is_utf8_idcont;\n    my $is_utf8_idcont;\n    my $is_utf8_idcont;\n   \
    \ my $is_utf8_idcont;\n    my $is_utf8_idcont;\n    my $is_utf8_idcont;\n    my\
    \ $is_utf8_idcont", "my %dict = @_;\n    my $lower = 1;\n    my $upper = 1;\n\
    \    foreach my $key (keys %dict) {\n        if ($key =~ /[A-Z]/) {\n        \
    \    $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $upper\
    \ = 0;\n        }\n    }\n    return $lower || $upper;\n}", "my $dict = shift;\n\
    \    my $result = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $all_upper\
    \ = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n\
    \        }\n    }\n    if (!$all_lower && !$all_upper) {\n        $result = '';\n\
    \    }\n    return $result;\n}", "my $hash = shift;\n    my $lower = 1;\n    my\
    \ $upper = 1;\n    foreach my $key (keys %$hash) {\n        $lower = 0 if $key\
    \ =~ /[A-Z]/;\n        $upper = 0 if $key =~ /[a-z]/;\n    }\n    return $lower\
    \ || $upper;\n}", "my $hash = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n\
    \    my $key_type;\n    my $val_type;\n    my $key_type_prev;\n    my $val_type_prev;\n\
    \    my $key_type_prev_prev;\n    my $val_type_prev_prev;\n    my $key_type_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev;\n   \
    \ my $val_type_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev", "my ($hash)\
    \ = @_;\n    my $result = 1;\n    my $case = \"\";\n    foreach my $key (keys\
    \ %$hash) {\n        if ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = \"upper\";\n            } else {\n              \
    \  $result = \"\";\n                last;\n            }\n        } elsif ($case\
    \ eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        } elsif ($case eq \"\
    upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n                $result = \"\
    \";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "my $hash = shift;\n    my $flag = 1;\n    my $key;\n    my $value;\n    my\
    \ $key_type = \"\";\n    my $value_type = \"\";\n    my $key_case = \"\";\n  \
    \  my $value_case = \"\";\n    my $key_case_flag = 0;\n    my $value_case_flag\
    \ = 0;\n    my $key_type_flag = 0;\n    my $value_type_flag = 0;\n    my $key_type_flag_count\
    \ = 0;\n    my $value_type_flag_count = 0;\n    my $key_case_flag_count = 0;\n\
    \    my $value_case_flag_count = 0;\n    my $key_case_flag_count_lower = 0;\n\
    \    my $key_case_flag_count_upper = 0;\n    my $value_case_flag_count_lower =\
    \ 0;\n    my $value_case_flag_count_upper = 0;\n    my $key_type_flag_count_string\
    \ = 0;\n    my $key_type_flag_count_number = 0;\n    my $value_type_flag_count_string\
    \ = 0;\n    my $value_type_flag_count_number = 0;\n    my $key_type_flag_count_string_lower\
    \ = 0;\n    my $key_type_flag_count_string_upper = 0;\n    my $value_type_flag_count_string_lower\
    \ = 0;\n    my $value_type_flag_count_string_upper = 0;\n    my $key_type_flag_count_number_lower\
    \ = 0;\n    my $key_type_flag_count_number_upper = 0;\n    my $value_type_flag_count_number_lower\
    \ = 0;\n    my $value_type_flag_count_number_upper = 0;\n    my $key_type_flag_count_string_lower_count\
    \ = 0;\n    my $key_type_flag_count_string_upper_count = 0;\n    my $value_type_flag_count_string_lower_count\
    \ = 0;\n    my $value_type_flag", "my ($hash) = @_;\n    my $result = 1;\n   \
    \ my $key;\n    my $value;\n    my $upper = 1;\n    my $lower = 1;\n    while\
    \ (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $upper\
    \ = 0;\n        }\n    }\n    if ($upper == 0 && $lower == 0) {\n        $result\
    \ = '';\n    }\n    return $result;\n}", "my $hash = shift;\n    my $result =\
    \ 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n    my $is_upper =\
    \ 0;\n    my $is_empty = 1;\n    while (($key, $value) = each %$hash) {\n    \
    \    $is_empty = 0;\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n     \
    \   }\n    }\n    if ($is_empty) {\n        $result = '';\n    } elsif ($is_lower\
    \ && $is_upper) {\n        $result = '';\n    }\n    return $result;\n}", "my\
    \ $hash = shift;\n    my $ret = 1;\n    my $key;\n    my $value;\n    my $key_type\
    \ = \"\";\n    my $value_type = \"\";\n    my $key_type_count = 0;\n    my $value_type_count\
    \ = 0;\n    my $key_type_count_upper = 0;\n    my $key_type_count_lower = 0;\n\
    \    my $value_type_count_upper = 0;\n    my $value_type_count_lower = 0;\n  \
    \  my $key_type_count_string = 0;\n    my $value_type_count_string = 0;\n    my\
    \ $key_type_count_number = 0;\n    my $value_type_count_number = 0;\n    my $key_type_count_other\
    \ = 0;\n    my $value_type_count_other = 0;\n    my $key_type_count_mixed = 0;\n\
    \    my $value_type_count_mixed = 0;\n    my $key_type_count_mixed_upper = 0;\n\
    \    my $key_type_count_mixed_lower = 0;\n    my $value_type_count_mixed_upper\
    \ = 0;\n    my $value_type_count_mixed_lower = 0;\n    my $key_type_count_mixed_string\
    \ = 0;\n    my $value_type_count_mixed_string = 0;\n    my $key_type_count_mixed_number\
    \ = 0;\n    my $value_type_count_mixed_number = 0;\n    my $key_type_count_mixed_other\
    \ = 0;\n    my $value_type_count_mixed_other = 0;\n    my $key_type_count_mixed_upper_string\
    \ = 0;\n    my $key_type_count_mixed_lower_string = 0;\n    my $value_type_count_mixed_upper_string\
    \ = 0;\n    my $value_type_count_mixed_lower_string = 0;\n    my $key_type_count_mixed_upper_number\
    \ = 0;\n    my $key_", "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n\
    \    my $value_case_prev;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n   \
    \ my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set\
    \ = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n   \
    \ my $value_case_prev_set = 0;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0", "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $lower_case = 0;\n    my $upper_case = 0;\n    while (($key, $value) =\
    \ each %$hash) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case++;\n\
    \        } elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case++;\n        }\
    \ else {\n            $result = '';\n            last;\n        }\n    }\n   \
    \ if ($lower_case && $upper_case) {\n        $result = '';\n    }\n    return\
    \ $result;\n}", "my $dict = shift;\n    my $lower = 1;\n    my $upper = 1;\n \
    \   foreach my $key (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n        \
    \    $upper = 0;\n        }\n        if ($key =~ /[A-Z]/) {\n            $lower\
    \ = 0;\n        }\n    }\n    if ($lower == 1 || $upper == 1) {\n        return\
    \ 1;\n    }\n    return '';\n}", "my $hash = shift;\n    my $flag = 1;\n    my\
    \ $key;\n    my $value;\n    my $lower_case = 0;\n    my $upper_case = 0;\n  \
    \  my $other_case = 0;\n    my $empty_hash = 0;\n    if (scalar(keys %$hash) ==\
    \ 0) {\n        $empty_hash = 1;\n    }\n    while (($key, $value) = each %$hash)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n       \
    \ }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n    \
    \    }\n        else {\n            $other_case = 1;\n        }\n    }\n    if\
    \ ($lower_case == 1 && $upper_case == 1) {\n        $flag = '';\n    }\n    elsif\
    \ ($lower_case == 1 && $upper_case == 0 && $other_case == 0) {\n        $flag\
    \ = 1;\n    }\n    elsif ($lower_case == 0 && $upper_case == 1 && $other_case\
    \ == 0) {\n        $flag = 1;\n    }\n    elsif ($lower_case == 0 && $upper_case\
    \ == 0 && $other_case == 1) {\n        $flag = '';\n    }\n    elsif ($empty_hash\
    \ == 1) {\n        $flag = '';\n    }\n    return $flag;\n}", "my $hash = shift;\n\
    \    my $result = 1;\n    my $key;\n    foreach $key (keys %$hash) {\n       \
    \ if ($key =~ /[A-Z]/) {\n            if ($key =~ /[a-z]/) {\n               \
    \ $result = '';\n                last;\n            }\n        }\n        else\
    \ {\n            if ($key =~ /[A-Z]/) {\n                $result = '';\n     \
    \           last;\n            }\n        }\n    }\n    return $result;\n}", "my\
    \ ($hash) = @_;\n    my $result = 1;\n    my $key;\n    foreach $key (keys %$hash)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $result = '';\n            last;\n\
    \        }\n    }\n    return $result;\n}", "my $hash = shift;\n    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        }\n        else {\n            $result\
    \ = '';\n            last;\n        }\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        $result = '';\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $ret = 1;\n    my $key;\n    my $value;\n    my $key_type;\n    my $value_type;\n\
    \    my $key_type_prev;\n    my $value_type_prev;\n    my $key_type_first;\n \
    \   my $value_type_first;\n    my $key_type_second;\n    my $value_type_second;\n\
    \    my $key_type_third;\n    my $value_type_third;\n    my $key_type_fourth;\n\
    \    my $value_type_fourth;\n    my $key_type_fifth;\n    my $value_type_fifth;\n\
    \    my $key_type_sixth;\n    my $value_type_sixth;\n    my $key_type_seventh;\n\
    \    my $value_type_seventh;\n    my $key_type_eighth;\n    my $value_type_eighth;\n\
    \    my $key_type_ninth;\n    my $value_type_ninth;\n    my $key_type_tenth;\n\
    \    my $value_type_tenth;\n    my $key_type_eleventh;\n    my $value_type_eleventh;\n\
    \    my $key_type_twelfth;\n    my $value_type_twelfth;\n    my $key_type_thirteenth;\n\
    \    my $value_type_thirteenth;\n    my $key_type_fourteenth;\n    my $value_type_fourteenth;\n\
    \    my $key_type_fifteenth;\n    my $value_type_fifteenth;\n    my $key_type_sixteenth;\n\
    \    my $value_type_sixteenth;\n    my $key_type_seventeenth;\n    my $value_type_seventeenth;\n\
    \    my $key_type_eighteenth;\n    my $value_type_eighteenth;\n    my $key_type_nineteenth;\n\
    \    my $value_type_nineteenth;\n    my $key_type_twentieth;\n    my $value_type_twentieth;\n\
    \    my $key_type_twentyfirst;\n", "my ($hash) = @_;\n    my $result = 1;\n  \
    \  my $key;\n    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    while\
    \ (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $upper++;\n        }\n        if ($key =~ /[a-z]/) {\n            $lower++;\n\
    \        }\n    }\n    if ($upper > 0 && $lower > 0) {\n        $result = '';\n\
    \    }\n    return $result;\n}", "my $dict = shift;\n    my @keys = keys %$dict;\n\
    \    my $lower = 1;\n    my $upper = 1;\n    foreach my $key (@keys) {\n     \
    \   $lower = 0 if $key =~ /[A-Z]/;\n        $upper = 0 if $key =~ /[a-z]/;\n \
    \   }\n    return $lower || $upper;\n}", "my ($dict) = @_;\n    return '' if keys\
    \ %$dict == 0;\n    my $case = '';\n    foreach my $key (keys %$dict) {\n    \
    \    if ($case eq '') {\n            $case = ($key =~ /^[a-z]+$/) ? 'lower' :\
    \ 'upper';\n        }\n        else {\n            return '' if ($key =~ /^[a-z]+$/)\
    \ ? $case ne 'lower' : $case ne 'upper';\n        }\n    }\n    return 1;\n}",
  "my $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n\
    \    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n    my\
    \ $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    while (($key,\
    \ $value) = each %$hash) {\n        $key_case = check_case($key);\n        $value_case\
    \ = check_case($value);\n        if ($key_case_prev_set == 0) {\n            $key_case_prev\
    \ = $key_case;\n            $key_case_prev_set = 1;\n        }\n        if ($value_case_prev_set\
    \ == 0) {\n            $value_case_prev = $value_case;\n            $value_case_prev_set\
    \ = 1;\n        }\n        if ($key_case != $key_case_prev) {\n            $result\
    \ = '';\n            last;\n        }\n        if ($value_case != $value_case_prev)\
    \ {\n            $result = '';\n            last;\n        }\n    }\n    return\
    \ $result;\n}", "my $hash = shift;\n    my $flag = 1;\n    my $key;\n    my $value;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_prev;\n    my $value_case_prev_prev;\n    my $key_case_prev_prev_prev;\n\
    \    my $value_case_prev_prev_prev;\n    my $key_case_prev_prev_prev_prev;\n \
    \   my $value_case_prev_prev_prev_prev;\n    my $key_case_prev_prev_prev_prev_prev;\n\
    \    my $value_case_prev_prev_prev_prev_prev;\n    my $key_case_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_case_prev_prev_prev_prev_prev_prev;\n    my $key_case_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_case_prev_prev_prev_prev_prev_prev_prev;\n    my $key_case_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_case_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_case_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_case_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $key_case_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $value_case_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_case_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_case_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_case_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev", "my\
    \ $dict = shift;\n    my $ret = 1;\n    my $key;\n    foreach $key (keys %$dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $ret = '';\n            last;\n\
    \        }\n    }\n    return $ret;\n}", "my ($hash) = @_;\n    my $result = 1;\n\
    \    my $key;\n    my $value;\n    my $lower_case_count = 0;\n    my $upper_case_count\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key =~ /^[a-z]+$/)\
    \ {\n            $lower_case_count++;\n        } elsif ($key =~ /^[A-Z]+$/) {\n\
    \            $upper_case_count++;\n        } else {\n            $result = '';\n\
    \            last;\n        }\n    }\n    if ($lower_case_count > 0 && $upper_case_count\
    \ > 0) {\n        $result = '';\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $flag = 1;\n    my $key;\n    my $value;\n    my $key_type;\n    my $value_type;\n\
    \    my $key_case;\n    my $value_case;\n    my $key_case_type;\n    my $value_case_type;\n\
    \    my $key_case_flag = 1;\n    my $value_case_flag = 1;\n    my $key_type_flag\
    \ = 1;\n    my $value_type_flag = 1;\n    my $key_type_type;\n    my $value_type_type;\n\
    \    my $key_type_case;\n    my $value_type_case;\n    my $key_type_case_flag\
    \ = 1;\n    my $value_type_case_flag = 1;\n    my $key_type_case_type;\n    my\
    \ $value_type_case_type;\n    my $key_type_case_type_flag = 1;\n    my $value_type_case_type_flag\
    \ = 1;\n    my $key_type_case_type_type;\n    my $value_type_case_type_type;\n\
    \    my $key_type_case_type_type_flag = 1;\n    my $value_type_case_type_type_flag\
    \ = 1;\n    my $key_type_case_type_type_type;\n    my $value_type_case_type_type_type;\n\
    \    my $key_type_case_type_type_type_flag = 1;\n    my $value_type_case_type_type_type_flag\
    \ = 1;\n    my $key_type_case_type_type_type_type;\n    my $value_type_case_type_type_type_type;\n\
    \    my $key_type_case_type_type_type_type_flag = 1;\n    my $value_type_case_type_type_type_type_flag\
    \ = 1;\n    my $key_type_case_type_type_type_type_type;\n    my $value_type_case_type_type_type_type_type;\n\
    \    my $key", "my ($hash) = @_;\n    my $result = 1;\n    my $key_type = '';\n\
    \    foreach my $key (keys %$hash) {\n        if ($key_type eq '') {\n       \
    \     if ($key =~ /[a-z]/) {\n                $key_type = 'lower';\n         \
    \   } elsif ($key =~ /[A-Z]/) {\n                $key_type = 'upper';\n      \
    \      } else {\n                $result = '';\n                last;\n      \
    \      }\n        } elsif ($key_type eq 'lower') {\n            if ($key =~ /[A-Z]/)\
    \ {\n                $result = '';\n                last;\n            }\n   \
    \     } elsif ($key_type eq 'upper') {\n            if ($key =~ /[a-z]/) {\n \
    \               $result = '';\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my\
    \ $key;\n    my $value;\n    my $key_type;\n    my $value_type;\n    my $key_type_prev;\n\
    \    my $value_type_prev;\n    my $key_type_first;\n    my $value_type_first;\n\
    \    my $key_type_second;\n    my $value_type_second;\n    my $key_type_third;\n\
    \    my $value_type_third;\n    my $key_type_fourth;\n    my $value_type_fourth;\n\
    \    my $key_type_fifth;\n    my $value_type_fifth;\n    my $key_type_sixth;\n\
    \    my $value_type_sixth;\n    my $key_type_seventh;\n    my $value_type_seventh;\n\
    \    my $key_type_eighth;\n    my $value_type_eighth;\n    my $key_type_ninth;\n\
    \    my $value_type_ninth;\n    my $key_type_tenth;\n    my $value_type_tenth;\n\
    \    my $key_type_eleventh;\n    my $value_type_eleventh;\n    my $key_type_twelfth;\n\
    \    my $value_type_twelfth;\n    my $key_type_thirteenth;\n    my $value_type_thirteenth;\n\
    \    my $key_type_fourteenth;\n    my $value_type_fourteenth;\n    my $key_type_fifteenth;\n\
    \    my $value_type_fifteenth;\n    my $key_type_sixteenth;\n    my $value_type_sixteenth;\n\
    \    my $key_type_seventeenth;\n    my $value_type_seventeenth;\n    my $key_type_eighteenth;\n\
    \    my $value_type_eighteenth;\n    my $key_type_nineteenth;\n    my $value_type_nineteenth;\n\
    \    my $key_type_twentieth;\n    my $value_type_twentieth;\n    my $key_type_twenty_",
  "my $dict = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $lower\
    \ = 0;\n    my $upper = 0;\n    while (($key, $value) = each %$dict) {\n     \
    \   if ($key =~ /[a-z]/) {\n            $lower++;\n        }\n        if ($key\
    \ =~ /[A-Z]/) {\n            $upper++;\n        }\n    }\n    if ($lower > 0 &&\
    \ $upper > 0) {\n        $result = '';\n    }\n    return $result;\n}", "my $dict\
    \ = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $case;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    foreach $key\
    \ (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $i = 1;\n     \
    \   }\n        if ($key =~ /[A-Z]/) {\n            $j = 1;\n        }\n      \
    \  if ($key =~ /[0-9]/) {\n            $k = 1;\n        }\n        if ($key =~\
    \ /[\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\-\\=\\{\\}\\[\\", "my ($hash) = @_;\n\
    \    my $result = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n  \
    \  my $is_lower = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        } else {\n            $result = '';\n\
    \            last;\n        }\n    }\n    if ($is_upper && $is_lower) {\n    \
    \    $result = '';\n    }\n    return $result;\n}", "my ($hash) = @_;\n    my\
    \ $ret = 1;\n    my $key;\n    my $val;\n    my $uc = 0;\n    my $lc = 0;\n  \
    \  my $other = 0;\n    while (($key, $val) = each %$hash) {\n        if ($key\
    \ =~ /^[A-Z]+$/) {\n            $uc++;\n        } elsif ($key =~ /^[a-z]+$/) {\n\
    \            $lc++;\n        } else {\n            $other++;\n        }\n    }\n\
    \    if ($uc > 0 && $lc > 0) {\n        $ret = '';\n    }\n    return $ret;\n}",
  "my $hash = shift;\n    my $is_lower = 0;\n    my $is_upper = 0;\n    foreach my\
    \ $key (keys %$hash) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower\
    \ = 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper\
    \ = 1;\n        }\n        else {\n            return '';\n        }\n    }\n\
    \    if ($is_lower == 1 && $is_upper == 1) {\n        return '';\n    }\n    else\
    \ {\n        return 1;\n    }\n}", "my $hash = shift;\n    my $flag = 1;\n   \
    \ my $key;\n    foreach $key (keys %$hash) {\n        if ($key =~ /[A-Z]/) {\n\
    \            if ($flag == 1) {\n                $flag = 2;\n            }\n  \
    \          elsif ($flag == 3) {\n                return '';\n            }\n \
    \       }\n        elsif ($key =~ /[a-z]/) {\n            if ($flag == 2) {\n\
    \                return '';\n            }\n            elsif ($flag == 1) {\n\
    \                $flag = 3;\n            }\n        }\n        else {\n      \
    \      return '';\n        }\n    }\n    return 1;\n}", "my %dict = @_;\n    my\
    \ $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower = 0;\n    my $is_upper\
    \ = 0;\n    my $is_empty = 1;", "my %dict = @_;\n    my $key;\n    my $val;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    my $result = 1;\n    while (($key,\
    \ $val) = each %dict) {\n        if ($key =~ /[a-z]/) {\n            $lower++;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n\
    \    }\n    if ($lower != 0 && $upper != 0) {\n        $result = '';\n    }\n\
    \    return $result;\n}", "my $dict = shift;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $lower = 0;\n        }\n        if ($key =~ /[a-z]/) {\n        \
    \    $upper = 0;\n        }\n    }\n    if ($lower || $upper) {\n        return\
    \ 1;\n    }\n    return '';\n}", "my $hash = shift;\n    my $result = 1;\n   \
    \ my $key;\n    my $value;\n    my $lower_case = 0;\n    my $upper_case = 0;\n\
    \    if (scalar(keys %$hash) == 0) {\n        return '';\n    }\n    while (($key,\
    \ $value) = each %$hash) {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case\
    \ = 1;\n        }\n        if ($key =~ /^[A-Z]+$/) {\n            $upper_case\
    \ = 1;\n        }\n    }\n    if ($lower_case == 1 && $upper_case == 1) {\n  \
    \      $result = '';\n    }\n    return $result;\n}", "my $dict = shift;\n   \
    \ my $ret = 1;\n    my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    my $is_empty = 1;", "my $dict = shift;\n    my $all_lower = 1;\n \
    \   my $all_upper = 1;\n    foreach my $key (keys %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $all_upper = 0;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $all_lower = 0;\n        }\n    }\n    return $all_lower || $all_upper;\n\
    }", "my $hash = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_case;\n\
    \    my $val_case;\n    my $key_case_prev;\n    my $val_case_prev;\n    my $key_case_prev_set\
    \ = 0;\n    my $val_case_prev_set = 0;\n    my $key_case_prev_val = 0;\n    my\
    \ $val_case_prev_val = 0;\n    my $key_case_prev_val_set = 0;\n    my $val_case_prev_val_set\
    \ = 0;\n    my $key_case_prev_val_set_val = 0;\n    my $val_case_prev_val_set_val\
    \ = 0;\n    my $key_case_prev_val_set_val_set = 0;\n    my $val_case_prev_val_set_val_set\
    \ = 0;\n    my $key_case_prev_val_set_val_set_val = 0;\n    my $val_case_prev_val_set_val_set_val\
    \ = 0;\n    my $key_case_prev_val_set_val_set_val_set = 0;\n    my $val_case_prev_val_set_val_set_val_set\
    \ = 0;\n    my $key_case_prev_val_set_val_set_val_set_val = 0;\n    my $val_case_prev_val_set_val_set_val_set_val\
    \ = 0;\n    my $key_case_prev_val_set_val_set_val_set_val_set = 0;\n    my $val_case_prev_val_set_val_set_val_set_val_set\
    \ = 0;\n    my $key_case_prev_val_set_val_set_val_set_val_set_val = 0;\n    my\
    \ $val_case_prev_val_set_val_set_val_set_val_set_val = 0;\n    my $key_case_prev_val_set_val_set_val_set_val_set",
  "my $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $count\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($count == 0) {\n\
    \            if ($key =~ /[A-Z]/) {\n                $result = 0;\n          \
    \  }\n        }\n        if ($key =~ /[A-Z]/) {\n            if ($result == 0)\
    \ {\n                $result = 1;\n            } else {\n                $result\
    \ = 0;\n            }\n        }\n        $count++;\n    }\n    return $result;\n\
    }", "my $hash = shift;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$hash) {\n        if ($case eq \"\") {\n            $case = $key\
    \ =~ /^[a-z]+$/ ? \"lower\" : \"upper\";\n        }\n        if ($key =~ /^[a-z]+$/\
    \ && $case ne \"lower\") {\n            $result = \"\";\n            last;\n \
    \       }\n        if ($key =~ /^[A-Z]+$/ && $case ne \"upper\") {\n         \
    \   $result = \"\";\n            last;\n        }\n    }\n    return $result;\n\
    }", "my $hash = shift;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2 =\
    \ 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6\
    \ = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10\
    \ = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my\
    \ $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n\
    \    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21\
    \ = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my\
    \ $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n\
    \    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32\
    \ = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my\
    \ $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n\
    \    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43\
    \ = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my\
    \ $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n\
    \    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54\
    \ = 0;\n    my $flag55 = 0;\n   ", "my $hash = shift;\n    my $result = 1;\n \
    \   my $key;\n    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    while\
    \ (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $upper++;\n        }\n        if ($key =~ /[a-z]/) {\n            $lower++;\n\
    \        }\n    }\n    if ($upper && $lower) {\n        $result = '';\n    }\n\
    \    return $result;\n}", "my %dict = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $case;\n    my $i = 0;\n    while (($key, $value) = each\
    \ %dict) {\n        if ($i == 0) {\n            $case = $key =~ /^[a-z]+$/ ? 'lower'\
    \ : 'upper';\n        }\n        if ($key =~ /^[a-z]+$/ && $case eq 'upper') {\n\
    \            $result = '';\n            last;\n        }\n        if ($key =~\
    \ /^[A-Z]+$/ && $case eq 'lower') {\n            $result = '';\n            last;\n\
    \        }\n        $i++;\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $result = 1;\n    my $key;\n    my $value;\n    my $upper = 0;\n    my\
    \ $lower = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key =~\
    \ /[A-Z]/) {\n            $upper++;\n        }\n        if ($key =~ /[a-z]/) {\n\
    \            $lower++;\n        }\n    }\n    if ($upper > 0 && $lower > 0) {\n\
    \        $result = '';\n    }\n    return $result;\n}", "my ($hash) = @_;\n  \
    \  my $result = 1;\n    my $key;\n    my $value;\n    my $lower_case = 0;\n  \
    \  my $upper_case = 0;\n    while (($key, $value) = each %$hash) {\n        if\
    \ ($key =~ /[a-z]/) {\n            $lower_case++;\n        }\n        if ($key\
    \ =~ /[A-Z]/) {\n            $upper_case++;\n        }\n    }\n    if ($lower_case\
    \ > 0 && $upper_case > 0) {\n        $result = '';\n    }\n    return $result;\n\
    }", "my %dict = @_;\n    my $flag = 1;\n    my $key;\n    foreach $key (keys %dict)\
    \ {\n        if ($key =~ /[A-Z]/) {\n            $flag = 0;\n        }\n    }\n\
    \    if ($flag == 1) {\n        return 1;\n    }\n    $flag = 1;\n    foreach\
    \ $key (keys %dict) {\n        if ($key =~ /[a-z]/) {\n            $flag = 0;\n\
    \        }\n    }\n    if ($flag == 1) {\n        return 1;\n    }\n    return\
    \ '';\n}", "my %dict = @_;\n    my $ret = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %dict) {\n        if ($case eq \"\") {\n            $case = $key\
    \ =~ /^[a-z]+$/ ? \"lower\" : \"upper\";\n        }\n        if ($key =~ /^[a-z]+$/\
    \ && $case ne \"lower\") {\n            $ret = \"\";\n            last;\n    \
    \    }\n        if ($key =~ /^[A-Z]+$/ && $case ne \"upper\") {\n            $ret\
    \ = \"\";\n            last;\n        }\n    }\n    return $ret;\n}", "my ($hash)\
    \ = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n\
    \    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n    my\
    \ $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count = 0;\n    my $key_case_prev_set_count_prev\
    \ = 0;\n    my $value_case_prev_set_count_prev = 0;\n    my $key_case_prev_set_count_prev_set\
    \ = 0;\n    my $value_case_prev_set_count_prev_set = 0;\n    my $key_case_prev_set_count_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count_prev_set_count = 0;\n    my $key_case_prev_set_count_prev_set_count_prev\
    \ = 0;\n    my $value_case_prev_set_count_prev_set_count_prev = 0;\n    my $key_case_prev_set_count_prev_set_count_prev_set\
    \ = 0;\n    my $value_case_prev_set_count_prev_set_count_prev_set = 0;\n    my\
    \ $key_case_prev_set_count_prev_set_count_prev_set_count = 0;\n    my $value_case_prev_set_count_prev_set_count_prev_set_count\
    \ = 0;\n    my $key_case_prev_set_count_prev_set_count_prev_set_count_prev = 0;\n\
    \    my $value_case_prev_set_count_prev_set_count_prev_set_count_prev = 0;\n \
    \   my $key_case_prev_set_count_prev_set_count_prev_set_count_prev_set = 0;\n\
    \    my $value_case_prev_set_count_prev_set_count", "my $dict = shift;\n    my\
    \ $ret = 1;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $all_lower = 0;\n    \
    \    }\n    }\n    if ($all_lower == 0 && $all_upper == 0) {\n        $ret = '';\n\
    \    }\n    return $ret;\n}", "my $dict = shift;\n    my $lower = 1;\n    my $upper\
    \ = 1;\n    foreach my $key (keys %$dict) {\n        $lower = 0 if $key =~ /[A-Z]/;\n\
    \        $upper = 0 if $key =~ /[a-z]/;\n    }\n    return $lower || $upper;\n\
    }", "my $dict = shift;\n    my $lower = 1;\n    my $upper = 1;\n    foreach my\
    \ $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower = 0;\n\
    \        }\n        if ($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n\
    \    }\n    if ($lower || $upper) {\n        return 1;\n    }\n    return '';\n\
    }", "my $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count = 0;\n    my $key_case_prev_set_count_max\
    \ = 0;\n    my $value_case_prev_set_count_max = 0;\n    my $key_case_prev_set_count_max_prev\
    \ = 0;\n    my $value_case_prev_set_count_max_prev = 0;\n    my $key_case_prev_set_count_max_prev_set\
    \ = 0;\n    my $value_case_prev_set_count_max_prev_set = 0;\n    my $key_case_prev_set_count_max_prev_set_count\
    \ = 0;\n    my $value_case_prev_set_count_max_prev_set_count = 0;\n    my $key_case_prev_set_count_max_prev_set_count_max\
    \ = 0;\n    my $value_case_prev_set_count_max_prev_set_count_max = 0;\n    my\
    \ $key_case_prev_set_count_max_prev_set_count_max_prev = 0;\n    my $value_case_prev_set_count_max_prev_set_count_max_prev\
    \ = 0;\n    my $key_case_prev_set_count_max_prev_set_count_max_prev_set = 0;\n\
    \    my $value_case_prev_set_count_max_prev_set_count_max_prev_set = 0;\n    my\
    \ $key_case_prev_set_count_max_prev_set_count_max_prev_set_count = 0;\n    my\
    \ $value_case_prev_set_count_max_prev_set_count", "my ($hash) = @_;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$hash) {\n        if\
    \ ($key =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n        if ($key\
    \ =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        return '';\n    }\n    return 1;\n}", "my $hash = shift;\n\
    \    my $flag = 1;\n    my $key;\n    my $value;\n    while (($key, $value) =\
    \ each %$hash) {\n        if ($key =~ /[A-Z]/) {\n            $flag = 0;\n   \
    \     }\n    }\n    if ($flag == 1) {\n        return 1;\n    }\n    $flag = 1;\n\
    \    while (($key, $value) = each %$hash) {\n        if ($key =~ /[a-z]/) {\n\
    \            $flag = 0;\n        }\n    }\n    if ($flag == 1) {\n        return\
    \ 1;\n    }\n    return '';\n}", "my $hash = shift;\n    my $result = 1;\n   \
    \ my $key;\n    my $value;\n    my $count = 0;\n    my $lower_case = 0;\n    my\
    \ $upper_case = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key\
    \ =~ /^[a-z]+$/) {\n            $lower_case++;\n        } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n            $upper_case++;\n        } else {\n            $result = '';\n\
    \            last;\n        }\n        $count++;\n    }\n    if ($count == 0)\
    \ {\n        $result = '';\n    } elsif ($lower_case > 0 && $upper_case > 0) {\n\
    \        $result = '';\n    }\n    return $result;\n}", "my $hash = shift;\n \
    \   my $result = 1;\n    my $key;\n    my $value;\n    my $upper = 0;\n    my\
    \ $lower = 0;\n    my $other = 0;\n    while (($key, $value) = each %$hash) {\n\
    \        if ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        } elsif ($key\
    \ =~ /^[a-z]+$/) {\n            $lower++;\n        } else {\n            $other++;\n\
    \        }\n    }\n    if ($upper > 0 && $lower > 0) {\n        $result = '';\n\
    \    }\n    return $result;\n}", "my $dict = shift;\n    my $result = 1;\n   \
    \ my $lower_case = 0;\n    my $upper_case = 0;\n    foreach my $key (keys %$dict)\
    \ {\n        if ($key =~ /^[a-z]+$/) {\n            $lower_case = 1;\n       \
    \ } elsif ($key =~ /^[A-Z]+$/) {\n            $upper_case = 1;\n        } else\
    \ {\n            $result = '';\n            last;\n        }\n    }\n    if ($lower_case\
    \ && $upper_case) {\n        $result = '';\n    }\n    return $result;\n}", "my\
    \ ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $upper\
    \ = 0;\n    my $lower = 0;\n    while (($key, $value) = each %$hash) {\n     \
    \   if ($key =~ /[A-Z]/) {\n            $upper++;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $lower++;\n        }\n    }\n    if ($upper > 0 &&\
    \ $lower > 0) {\n        $result = '';\n    }\n    return $result;\n}", "my $hash\
    \ = shift;\n    my $case = \"\";\n    my $result = 1;\n    foreach my $key (keys\
    \ %$hash) {\n        if ($case eq \"\") {\n            if ($key =~ /^[a-z]+$/)\
    \ {\n                $case = \"lower\";\n            } elsif ($key =~ /^[A-Z]+$/)\
    \ {\n                $case = \"upper\";\n            } else {\n              \
    \  $result = \"\";\n                last;\n            }\n        } elsif ($case\
    \ eq \"lower\") {\n            if ($key =~ /^[A-Z]+$/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        } elsif ($case eq \"\
    upper\") {\n            if ($key =~ /^[a-z]+$/) {\n                $result = \"\
    \";\n                last;\n            }\n        }\n    }\n    return $result;\n\
    }", "my $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n  \
    \  my $key_type = \"\";\n    my $value_type = \"\";\n    my $key_type_prev = \"\
    \";\n    my $value_type_prev = \"\";\n    my $key_type_count = 0;\n    my $value_type_count\
    \ = 0;\n    my $key_type_count_prev = 0;\n    my $value_type_count_prev = 0;\n\
    \    my $key_type_count_max = 0;\n    my $value_type_count_max = 0;\n    my $key_type_count_max_prev\
    \ = 0;\n    my $value_type_count_max_prev = 0;\n    my $key_type_count_max_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev_prev_prev = 0;\n    my $key_type_count_max_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $value_type_count_max_prev_prev_prev_prev_prev_prev = 0;\n    my\
    \ $key_type_count_max_prev_prev_prev_prev_prev_prev_prev = 0;\n    my $value_type_count_max_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    my $key_type_count_max_prev_prev_prev_prev_prev_prev_prev_prev = 0;\n\
    \    my $value_type_count_max_prev_prev_prev_prev_prev_prev", "my ($hash) = @_;\n\
    \    my $result = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n  \
    \  my $is_lower = 0;\n    my $is_empty = 1;\n    while (($key, $value) = each\
    \ %$hash) {\n        $is_empty = 0;\n        if ($key =~ /[A-Z]/) {\n        \
    \    $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower\
    \ = 1;\n        }\n    }\n    if ($is_empty) {\n        $result = '';\n    }\n\
    \    elsif ($is_upper && $is_lower) {\n        $result = '';\n    }\n    return\
    \ $result;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my $all_lower = 1;\n\
    \    my $all_upper = 1;\n    foreach my $key (keys %$hash) {\n        if ($key\
    \ =~ /[A-Z]/) {\n            $all_lower = 0;\n        }\n        if ($key =~ /[a-z]/)\
    \ {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower == 0 &&\
    \ $all_upper == 0) {\n        $result = '';\n    }\n    return $result;\n}", "my\
    \ ($hash) = @_;\n    my $result = 1;\n    my $key_type = \"\";\n    foreach my\
    \ $key (keys %$hash) {\n        if ($key_type eq \"\") {\n            if ($key\
    \ =~ /[a-z]/) {\n                $key_type = \"lower\";\n            } elsif ($key\
    \ =~ /[A-Z]/) {\n                $key_type = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } else {\n            if ($key_type eq \"lower\" && $key =~ /[A-Z]/) {\n \
    \               $result = \"\";\n                last;\n            } elsif ($key_type\
    \ eq \"upper\" && $key =~ /[a-z]/) {\n                $result = \"\";\n      \
    \          last;\n            }\n        }\n    }\n    return $result;\n}", "my\
    \ $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $case;\n\
    \    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n\
    \    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n\
    \    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n\
    \    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $A = 0;\n    my $B = 0;\n\
    \    my $C = 0;\n    my $D = 0;\n    my $E = 0;\n    my $F = 0;\n    my $G = 0;\n\
    \    my $H = 0;\n    my $I = 0;\n    my $J = 0;\n    my $K = 0;\n    my $L = 0;\n\
    \    my $M = 0;\n    my $N = 0;\n    my $O = 0;\n    my $P = 0;\n    my $Q = 0;\n\
    \    my $R = 0;\n    my $S = 0;\n    my $T = 0;\n    my $U = 0;\n    my $V = 0;\n\
    \    my $W = 0;\n    my $X = 0;\n    my $Y = 0;\n    my $Z = 0;\n    while (($key,\
    \ $value) = each %$hash) {\n        if ($key =~ /[a-z]/) {\n            $i = 1;\n\
    \        }\n        if ($key =~ /[A-Z]/) {\n            $j = 1;\n        }\n \
    \       if ($key =~ /[0-9]/) {\n            $k = 1;\n        }\n        if ($key\
    \ =~ /[\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\_\\+\\-\\=\\", "my $hash = shift;\n   \
    \ my $result = 1;\n    my $key;\n    my $value;\n    my $case;\n    my $count\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($count == 0) {\n\
    \            if ($key =~ /[a-z]/) {\n                $case = \"lower\";\n    \
    \        } else {\n                $case = \"upper\";\n            }\n       \
    \ }\n        if ($case eq \"lower\") {\n            if ($key !~ /[a-z]/) {\n \
    \               $result = \"\";\n                last;\n            }\n      \
    \  } else {\n            if ($key !~ /[A-Z]/) {\n                $result = \"\"\
    ;\n                last;\n            }\n        }\n        $count++;\n    }\n\
    \    return $result;\n}", "my %hash = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $key_case;\n    my $value_case;\n    my $key_case_prev;\n\
    \    my $value_case_prev;\n    my $key_case_prev_set = 0;\n    my $value_case_prev_set\
    \ = 0;\n    my $key_case_prev_set_count = 0;\n    my $value_case_prev_set_count\
    \ = 0;\n    my $key_case_prev_set_count_max = 0;\n    my $value_case_prev_set_count_max\
    \ = 0;\n    my $key_case_prev_set_count_max_prev = 0;\n    my $value_case_prev_set_count_max_prev\
    \ = 0;\n    my $key_case_prev_set_count_max_prev_set = 0;\n    my $value_case_prev_set_count_max_prev_set\
    \ = 0;\n    my $key_case_prev_set_count_max_prev_set_count = 0;\n    my $value_case_prev_set_count_max_prev_set_count\
    \ = 0;\n    my $key_case_prev_set_count_max_prev_set_count_max = 0;\n    my $value_case_prev_set_count_max_prev_set_count_max\
    \ = 0;\n    my $key_case_prev_set_count_max_prev_set_count_max_prev = 0;\n   \
    \ my $value_case_prev_set_count_max_prev_set_count_max_prev = 0;\n    my $key_case_prev_set_count_max_prev_set_count_max_prev_set\
    \ = 0;\n    my $value_case_prev_set_count_max_prev_set_count_max_prev_set = 0;\n\
    \    my $key_case_prev_set_count_max_prev_set_count_max_prev_set_count = 0;\n\
    \    my $value_case_prev_set_count_max_prev_set_", "my ($hash) = @_;\n    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        }\n        else {\n            $result\
    \ = '';\n            last;\n        }\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        $result = '';\n    }\n    return $result;\n}", "my $dict = shift;\n\
    \    my $result = 1;\n    my $key;\n    my $value;\n    my $is_lower = 0;\n  \
    \  my $is_upper = 0;\n    while (($key, $value) = each %$dict) {\n        if ($key\
    \ =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n        if ($key =~ /[A-Z]/)\
    \ {\n            $is_upper = 1;\n        }\n    }\n    if ($is_lower && $is_upper)\
    \ {\n        $result = '';\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $lower = 0;\n    my $upper = 0;\n    foreach my $key (keys %$hash) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $lower++;\n        }\n       \
    \ elsif ($key =~ /^[A-Z]+$/) {\n            $upper++;\n        }\n        else\
    \ {\n            return '';\n        }\n    }\n    if ($lower == 0 || $upper ==\
    \ 0) {\n        return 1;\n    }\n    else {\n        return '';\n    }\n}", "my\
    \ ($hash) = @_;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2 = 0;\n \
    \   foreach my $key (keys %$hash) {\n        if ($key =~ /[a-z]/) {\n        \
    \    $flag1 = 1;\n        }\n        if ($key =~ /[A-Z]/) {\n            $flag2\
    \ = 1;\n        }\n    }\n    if ($flag1 == 1 && $flag2 == 1) {\n        $flag\
    \ = '';\n    }\n    else {\n        $flag = 1;\n    }\n    return $flag;\n}",
  "my $dict = shift;\n    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach\
    \ my $key (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $all_lower\
    \ = 0;\n        }\n        if ($key =~ /[a-z]/) {\n            $all_upper = 0;\n\
    \        }\n    }\n    if ($all_lower || $all_upper) {\n        return 1;\n  \
    \  }\n    return '';\n}", "my ($dict) = @_;\n    my $result = 1;\n    my $is_upper\
    \ = 0;\n    my $is_lower = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /[A-Z]/) {\n            $is_upper = 1;\n        }\n        if ($key\
    \ =~ /[a-z]/) {\n            $is_lower = 1;\n        }\n    }\n    if ($is_upper\
    \ && $is_lower) {\n        $result = '';\n    }\n    return $result;\n}", "my\
    \ $dict = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    my $is_empty = 0;", "my ($hash) = @_;\n   \
    \ my $result = 1;\n    my $key;\n    my $value;\n    my $upper = 0;\n    my $lower\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/)\
    \ {\n            $upper++;\n        }\n        if ($key =~ /[a-z]/) {\n      \
    \      $lower++;\n        }\n    }\n    if ($upper > 0 && $lower > 0) {\n    \
    \    $result = '';\n    }\n    return $result;\n}", "my $hash = shift;\n    my\
    \ $is_lower = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$hash) {\n\
    \        if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n  \
    \      elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n \
    \       else {\n            return '';\n        }\n    }\n    if ($is_lower &&\
    \ $is_upper) {\n        return '';\n    }\n    else {\n        return 1;\n   \
    \ }\n}", "my $hash = shift;\n    my @keys = keys %$hash;\n    if (scalar @keys\
    \ == 0) {\n        return '';\n    }\n    my $is_lower = $keys[0] =~ /^[a-z]+$/;\n\
    \    foreach my $key (@keys) {\n        if ($is_lower) {\n            if ($key\
    \ !~ /^[a-z]+$/) {\n                return '';\n            }\n        } else\
    \ {\n            if ($key !~ /^[A-Z]+$/) {\n                return '';\n     \
    \       }\n        }\n    }\n    return 1;\n}", "my $hash = shift;\n    my $result\
    \ = 1;\n    my $key;\n    my $value;\n    my $case;\n    my $flag = 0;\n    while\
    \ (($key, $value) = each %$hash) {\n        if ($flag == 0) {\n            if\
    \ ($key =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif\
    \ ($key =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else\
    \ {\n                $result = \"\";\n                last;\n            }\n \
    \           $flag = 1;\n        }\n        if ($case eq \"lower\") {\n       \
    \     if ($key !~ /^[a-z]+$/) {\n                $result = \"\";\n           \
    \     last;\n            }\n        } elsif ($case eq \"upper\") {\n         \
    \   if ($key !~ /^[A-Z]+$/) {\n                $result = \"\";\n             \
    \   last;\n            }\n        }\n    }\n    return $result;\n}", "my $hash\
    \ = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $key_type;\n\
    \    my $val_type;\n    my $key_type_prev;\n    my $val_type_prev;\n    my $key_type_prev_prev;\n\
    \    my $val_type_prev_prev;\n    my $key_type_prev_prev_prev;\n    my $val_type_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $val_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev", "my ($hash)\
    \ = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $count = 0;\n\
    \    my $lower_count = 0;\n    my $upper_count = 0;\n    while (($key, $value)\
    \ = each %$hash) {\n        $count++;\n        if ($key =~ /[a-z]/) {\n      \
    \      $lower_count++;\n        }\n        if ($key =~ /[A-Z]/) {\n          \
    \  $upper_count++;\n        }\n    }\n    if ($count == 0) {\n        $result\
    \ = '';\n    }\n    elsif ($lower_count == $count) {\n        $result = 1;\n \
    \   }\n    elsif ($upper_count == $count) {\n        $result = 1;\n    }\n   \
    \ else {\n        $result = '';\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $key;\n    my $value;\n    my $flag = 0;\n    my $flag1 = 0;\n    my $flag2\
    \ = 0;\n    my $flag3 = 0;\n    my $flag4 = 0;\n    my $flag5 = 0;\n    my $flag6\
    \ = 0;\n    my $flag7 = 0;\n    my $flag8 = 0;\n    my $flag9 = 0;\n    my $flag10\
    \ = 0;\n    my $flag11 = 0;\n    my $flag12 = 0;\n    my $flag13 = 0;\n    my\
    \ $flag14 = 0;\n    my $flag15 = 0;\n    my $flag16 = 0;\n    my $flag17 = 0;\n\
    \    my $flag18 = 0;\n    my $flag19 = 0;\n    my $flag20 = 0;\n    my $flag21\
    \ = 0;\n    my $flag22 = 0;\n    my $flag23 = 0;\n    my $flag24 = 0;\n    my\
    \ $flag25 = 0;\n    my $flag26 = 0;\n    my $flag27 = 0;\n    my $flag28 = 0;\n\
    \    my $flag29 = 0;\n    my $flag30 = 0;\n    my $flag31 = 0;\n    my $flag32\
    \ = 0;\n    my $flag33 = 0;\n    my $flag34 = 0;\n    my $flag35 = 0;\n    my\
    \ $flag36 = 0;\n    my $flag37 = 0;\n    my $flag38 = 0;\n    my $flag39 = 0;\n\
    \    my $flag40 = 0;\n    my $flag41 = 0;\n    my $flag42 = 0;\n    my $flag43\
    \ = 0;\n    my $flag44 = 0;\n    my $flag45 = 0;\n    my $flag46 = 0;\n    my\
    \ $flag47 = 0;\n    my $flag48 = 0;\n    my $flag49 = 0;\n    my $flag50 = 0;\n\
    \    my $flag51 = 0;\n    my $flag52 = 0;\n    my $flag53 = 0;\n    my $flag54\
    \ = 0", "my $hash = shift;\n    my $result = 1;\n    my $key;\n    my $value;\n\
    \    my $key_type = \"\";\n    my $value_type = \"\";\n    while (($key, $value)\
    \ = each %$hash) {\n        if ($key_type eq \"\") {\n            $key_type =\
    \ ref($key);\n        }\n        if ($value_type eq \"\") {\n            $value_type\
    \ = ref($value);\n        }\n        if ($key_type ne ref($key) || $value_type\
    \ ne ref($value)) {\n            $result = \"\";\n            last;\n        }\n\
    \        if ($key_type eq \"\") {\n            if ($key =~ /[A-Z]/) {\n      \
    \          $key_type = \"upper\";\n            }\n            else {\n       \
    \         $key_type = \"lower\";\n            }\n        }\n        if ($key_type\
    \ eq \"upper\") {\n            if ($key =~ /[a-z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n        if ($key_type\
    \ eq \"lower\") {\n            if ($key =~ /[A-Z]/) {\n                $result\
    \ = \"\";\n                last;\n            }\n        }\n    }\n    return\
    \ $result;\n}", "my $dict = shift;\n    my $result = 1;\n    my $key;\n    my\
    \ $value;\n    my $key_type;\n    my $value_type;\n    my $key_type_prev;\n  \
    \  my $value_type_prev;\n    my $key_type_first;\n    my $value_type_first;\n\
    \    my $key_type_second;\n    my $value_type_second;\n    my $key_type_third;\n\
    \    my $value_type_third;\n    my $key_type_fourth;\n    my $value_type_fourth;\n\
    \    my $key_type_fifth;\n    my $value_type_fifth;\n    my $key_type_sixth;\n\
    \    my $value_type_sixth;\n    my $key_type_seventh;\n    my $value_type_seventh;\n\
    \    my $key_type_eighth;\n    my $value_type_eighth;\n    my $key_type_ninth;\n\
    \    my $value_type_ninth;\n    my $key_type_tenth;\n    my $value_type_tenth;\n\
    \    my $key_type_eleventh;\n    my $value_type_eleventh;\n    my $key_type_twelfth;\n\
    \    my $value_type_twelfth;\n    my $key_type_thirteenth;\n    my $value_type_thirteenth;\n\
    \    my $key_type_fourteenth;\n    my $value_type_fourteenth;\n    my $key_type_fifteenth;\n\
    \    my $value_type_fifteenth;\n    my $key_type_sixteenth;\n    my $value_type_sixteenth;\n\
    \    my $key_type_seventeenth;\n    my $value_type_seventeenth;\n    my $key_type_eighteenth;\n\
    \    my $value_type_eighteenth;\n    my $key_type_nineteenth;\n    my $value_type_nineteenth;\n\
    \    my $key_type_twentieth;\n    my $value_type_twentieth;\n    my $key_type_twenty_first;",
  "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $lc_key;\n\
    \    my $uc_key;\n    my $lc_hash = {};\n    my $uc_hash = {};\n    while (($key,\
    \ $value) = each %$hash) {\n        $lc_key = lc($key);\n        $uc_key = uc($key);\n\
    \        if (exists $lc_hash->{$lc_key} || exists $uc_hash->{$uc_key}) {\n   \
    \         $result = '';\n            last;\n        }\n        $lc_hash->{$lc_key}\
    \ = $value;\n        $uc_hash->{$uc_key} = $value;\n    }\n    return $result;\n\
    }", "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n   \
    \ my $key_case;\n    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n\
    \    my $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    my $key_case_prev_mismatch\
    \ = 0;\n    my $value_case_prev_mismatch = 0;\n    my $key_case_prev_mismatch_set\
    \ = 0;\n    my $value_case_prev_mismatch_set = 0;\n    my $key_case_prev_mismatch_prev\
    \ = 0;\n    my $value_case_prev_mismatch_prev = 0;\n    my $key_case_prev_mismatch_prev_set\
    \ = 0;\n    my $value_case_prev_mismatch_prev_set = 0;\n    my $key_case_prev_mismatch_prev_mismatch\
    \ = 0;\n    my $value_case_prev_mismatch_prev_mismatch = 0;\n    my $key_case_prev_mismatch_prev_mismatch_set\
    \ = 0;\n    my $value_case_prev_mismatch_prev_mismatch_set = 0;\n    my $key_case_prev_mismatch_prev_mismatch_prev\
    \ = 0;\n    my $value_case_prev_mismatch_prev_mismatch_prev = 0;\n    my $key_case_prev_mismatch_prev_mismatch_prev_set\
    \ = 0;\n    my $value_case_prev_mismatch_prev_mismatch_prev_set = 0;\n    my $key_case_prev_mismatch_prev_mismatch_prev_mismatch\
    \ = 0;\n    my $value_case_prev_mismatch_prev_mismatch_prev_mismatch = 0;\n  \
    \  my $key_case_prev_mismatch_prev_mismatch_prev_mismatch_set", "my $dict = shift;\n\
    \    my $result = 1;\n    my $lower = 1;\n    my $upper = 1;\n    foreach my $key\
    \ (keys %$dict) {\n        if ($key =~ /[A-Z]/) {\n            $lower = 0;\n \
    \       }\n        if ($key =~ /[a-z]/) {\n            $upper = 0;\n        }\n\
    \    }\n    if ($lower == 0 && $upper == 0) {\n        $result = '';\n    }\n\
    \    return $result;\n}", "my $dict = shift;\n    my $result = 1;\n    my $count\
    \ = 0;\n    my $key;\n    foreach $key (keys %$dict) {\n        if (uc($key) eq\
    \ $key) {\n            $count++;\n        }\n    }\n    if ($count == 0 || $count\
    \ == scalar keys %$dict) {\n        $result = 1;\n    } else {\n        $result\
    \ = '';\n    }\n    return $result;\n}", "my $hash = shift;\n    my $ret = 1;\n\
    \    my $key;\n    my $value;\n    my $lower_flag = 0;\n    my $upper_flag = 0;\n\
    \    my $key_count = 0;\n    my $value_count = 0;\n    my $key_value_count = 0;\n\
    \    my $key_value_match_count = 0;\n    my $key_value_mismatch_count = 0;\n \
    \   my $key_value_match_flag = 0;\n    my $key_value_mismatch_flag = 0;\n    my\
    \ $key_value_match_flag_count = 0;\n    my $key_value_mismatch_flag_count = 0;\n\
    \    my $key_value_match_flag_count_1 = 0;\n    my $key_value_mismatch_flag_count_1\
    \ = 0;\n    my $key_value_match_flag_count_2 = 0;\n    my $key_value_mismatch_flag_count_2\
    \ = 0;\n    my $key_value_match_flag_count_3 = 0;\n    my $key_value_mismatch_flag_count_3\
    \ = 0;\n    my $key_value_match_flag_count_4 = 0;\n    my $key_value_mismatch_flag_count_4\
    \ = 0;\n    my $key_value_match_flag_count_5 = 0;\n    my $key_value_mismatch_flag_count_5\
    \ = 0;\n    my $key_value_match_flag_count_6 = 0;\n    my $key_value_mismatch_flag_count_6\
    \ = 0;\n    my $key_value_match_flag_count_7 = 0;\n    my $key_value_mismatch_flag_count_7\
    \ = 0;\n    my $key_value_match_flag_count_8 = 0;\n    my $key_value_mismatch_flag_count_8\
    \ = 0;\n    my $key_value_match_flag_count_9 = 0;\n    my $key_value_mismatch_flag_count_9",
  "my $hash = shift;\n    return '' if (scalar keys %$hash == 0);\n    my $key = (keys\
    \ %$hash)[0];\n    my $case = ($key =~ /^[a-z]+$/) ? 'lower' : 'upper';\n    foreach\
    \ my $k (keys %$hash) {\n        return '' if ($k =~ /^[a-z]+$/ && $case eq 'upper');\n\
    \        return '' if ($k =~ /^[A-Z]+$/ && $case eq 'lower');\n    }\n    return\
    \ 1;\n}", "my $hash = shift;\n    my $result = 1;\n    my $key_type = \"\";\n\
    \    foreach my $key (keys %$hash) {\n        if ($key_type eq \"\") {\n     \
    \       if ($key =~ /^[a-z]+$/) {\n                $key_type = \"lower\";\n  \
    \          } elsif ($key =~ /^[A-Z]+$/) {\n                $key_type = \"upper\"\
    ;\n            } else {\n                $result = \"\";\n                last;\n\
    \            }\n        } else {\n            if ($key_type eq \"lower\" && $key\
    \ =~ /^[A-Z]+$/) {\n                $result = \"\";\n                last;\n \
    \           } elsif ($key_type eq \"upper\" && $key =~ /^[a-z]+$/) {\n       \
    \         $result = \"\";\n                last;\n            }\n        }\n \
    \   }\n    return $result;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my\
    \ $key;\n    my $value;\n    my $key_type;\n    my $value_type;\n    my $key_type_prev;\n\
    \    my $value_type_prev;\n    my $key_type_prev_prev;\n    my $value_type_prev_prev;\n\
    \    my $key_type_prev_prev_prev;\n    my $value_type_prev_prev_prev;\n    my\
    \ $key_type_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev;\n  \
    \  my $key_type_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n    my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $value_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n  \
    \  my $key_type_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev", "my $hash\
    \ = shift;\n    my $flag = 1;\n    my $key;\n    my $value;\n    my $regex = qr/^[a-z]+$/;\n\
    \    my $regex1 = qr/^[A-Z]+$/;\n    while (($key, $value) = each %$hash) {\n\
    \        if ($key =~ $regex) {\n            $flag = 1;\n        }\n        elsif\
    \ ($key =~ $regex1) {\n            $flag = 1;\n        }\n        else {\n   \
    \         $flag = 0;\n            last;\n        }\n    }\n    return $flag;\n\
    }", "my $dict = shift;\n    my $result = 1;\n    my $case = \"\";\n    foreach\
    \ my $key (keys %$dict) {\n        if ($case eq \"\") {\n            if ($key\
    \ =~ /^[a-z]+$/) {\n                $case = \"lower\";\n            } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n                $case = \"upper\";\n            } else {\n\
    \                $result = \"\";\n                last;\n            }\n     \
    \   } elsif ($case eq \"lower\") {\n            if ($key !~ /^[a-z]+$/) {\n  \
    \              $result = \"\";\n                last;\n            }\n       \
    \ } elsif ($case eq \"upper\") {\n            if ($key !~ /^[A-Z]+$/) {\n    \
    \            $result = \"\";\n                last;\n            }\n        }\n\
    \    }\n    return $result;\n}", "my $hash = shift;\n    my $result = 1;\n   \
    \ my $key;\n    my $value;\n    my $case;\n    if (scalar keys %$hash == 0) {\n\
    \        return '';\n    }\n    while (($key, $value) = each %$hash) {\n     \
    \   if ($case eq '') {\n            if ($key =~ /^[a-z]+$/) {\n              \
    \  $case = 'lower';\n            } elsif ($key =~ /^[A-Z]+$/) {\n            \
    \    $case = 'upper';\n            } else {\n                return '';\n    \
    \        }\n        } else {\n            if ($case eq 'lower' && $key =~ /^[A-Z]+$/)\
    \ {\n                return '';\n            } elsif ($case eq 'upper' && $key\
    \ =~ /^[a-z]+$/) {\n                return '';\n            }\n        }\n   \
    \ }\n    return $result;\n}", "my $hash = shift;\n    my $result = 1;\n    my\
    \ $key;\n    my $value;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while\
    \ (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/) {\n         \
    \   $is_upper = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower\
    \ = 1;\n        }\n    }\n    if ($is_upper && $is_lower) {\n        $result =\
    \ '';\n    }\n    return $result;\n}", "my %dict = @_;\n    my $ret = 1;\n   \
    \ my $key;\n    my $val;\n    my $is_upper = 0;\n    my $is_lower = 0;\n    while\
    \ (($key, $val) = each %dict) {\n        if ($key =~ /[A-Z]/) {\n            $is_upper\
    \ = 1;\n        }\n        if ($key =~ /[a-z]/) {\n            $is_lower = 1;\n\
    \        }\n    }\n    if ($is_upper && $is_lower) {\n        $ret = '';\n   \
    \ }\n    return $ret;\n}", "my ($dict) = @_;\n    my $result = 1;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    foreach my $key (keys %$dict) {\n        if\
    \ ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        }\n        elsif\
    \ ($key =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        }\n        else\
    \ {\n            $result = '';\n            last;\n        }\n    }\n    if ($is_lower\
    \ && $is_upper) {\n        $result = '';\n    }\n    return $result;\n}", "my\
    \ $dict = shift;\n    my $ret = 1;\n    my $key;\n    my $val;\n    my $is_lower\
    \ = 0;\n    my $is_upper = 0;\n    while (($key, $val) = each %$dict) {\n    \
    \    if ($key =~ /^[a-z]+$/) {\n            $is_lower = 1;\n        } elsif ($key\
    \ =~ /^[A-Z]+$/) {\n            $is_upper = 1;\n        } else {\n           \
    \ $ret = '';\n            last;\n        }\n    }\n    if ($is_lower && $is_upper)\
    \ {\n        $ret = '';\n    }\n    return $ret;\n}", "my ($hash) = @_;\n    my\
    \ $result = 1;\n    my $key;\n    my $value;\n    my $is_upper = 0;\n    my $is_lower\
    \ = 0;\n    while (($key, $value) = each %$hash) {\n        if ($key =~ /^[A-Z]+$/)\
    \ {\n            $is_upper = 1;\n        }\n        elsif ($key =~ /^[a-z]+$/)\
    \ {\n            $is_lower = 1;\n        }\n        else {\n            $result\
    \ = '';\n            last;\n        }\n    }\n    if ($is_upper && $is_lower)\
    \ {\n        $result = '';\n    }\n    return $result;\n}", "my $dict = shift;\n\
    \    my $is_lower = 0;\n    my $is_upper = 0;\n    my $key;\n    foreach $key\
    \ (keys %$dict) {\n        if ($key =~ /^[a-z]+$/) {\n            $is_lower =\
    \ 1;\n        }\n        elsif ($key =~ /^[A-Z]+$/) {\n            $is_upper =\
    \ 1;\n        }\n        else {\n            return '';\n        }\n    }\n  \
    \  if ($is_lower && $is_upper) {\n        return '';\n    }\n    else {\n    \
    \    return 1;\n    }\n}", "my %dict = @_;\n    my $result = 1;\n    my $case\
    \ = 0;\n    foreach my $key (keys %dict) {\n        if (ref($key) eq \"\") {\n\
    \            if ($case == 0) {\n                if ($key =~ /[A-Z]/) {\n     \
    \               $case = 1;\n                } else {\n                    $case\
    \ = 2;\n                }\n            } else {\n                if ($case ==\
    \ 1) {\n                    if ($key =~ /[a-z]/) {\n                        $result\
    \ = \"\";\n                        last;\n                    }\n            \
    \    } else {\n                    if ($key =~ /[A-Z]/) {\n                  \
    \      $result = \"\";\n                        last;\n                    }\n\
    \                }\n            }\n        } else {\n            $result = \"\"\
    ;\n            last;\n        }\n    }\n    return $result;\n}", "my $hash = shift;\n\
    \    my $ret = 1;\n    my $key;\n    my $val;\n    my $case;\n    my $case_prev;\n\
    \    my $case_curr;\n    my $case_prev_set = 0;\n    my $case_curr_set = 0;\n\
    \    if (scalar(keys %$hash) == 0) {\n        return '';\n    }\n    while (($key,\
    \ $val) = each %$hash) {\n        $case_curr = check_case($key);\n        if ($case_curr\
    \ ne '') {\n            $case_curr_set = 1;\n        }\n        if ($case_prev_set\
    \ == 1 && $case_curr_set == 1) {\n            if ($case_curr ne $case_prev) {\n\
    \                $ret = '';\n                last;\n            }\n        }\n\
    \        $case_prev = $case_curr;\n        $case_prev_set = $case_curr_set;\n\
    \    }\n    return $ret;\n}", "my ($hash) = @_;\n    my $result = 1;\n    my $key;\n\
    \    my $value;\n    my $upper = 0;\n    my $lower = 0;\n    my $count = 0;\n\
    \    while (($key, $value) = each %$hash) {\n        if ($key =~ /[A-Z]/) {\n\
    \            $upper++;\n        }\n        if ($key =~ /[a-z]/) {\n          \
    \  $lower++;\n        }\n        $count++;\n    }\n    if ($count == 0) {\n  \
    \      $result = '';\n    }\n    if ($upper > 0 && $lower > 0) {\n        $result\
    \ = '';\n    }\n    return $result;\n}", "my $hash = shift;\n    my $ret = 1;\n\
    \    my $key;\n    foreach $key (keys %$hash) {\n        if (ref($key) eq 'HASH')\
    \ {\n            $ret = check_dict_case($key);\n        }\n        else {\n  \
    \          if ($key =~ /[A-Z]/) {\n                if ($key =~ /[a-z]/) {\n  \
    \                  $ret = '';\n                    last;\n                }\n\
    \            }\n            else {\n                if ($key =~ /[A-Z]/) {\n \
    \                   $ret = '';\n                    last;\n                }\n\
    \            }\n        }\n    }\n    return $ret;\n}", "my $hash = shift;\n \
    \   my $result = 1;\n    my $key_type = \"\";\n    foreach my $key (keys %$hash)\
    \ {\n        if ($key_type eq \"\") {\n            if ($key =~ /[a-z]/) {\n  \
    \              $key_type = \"lower\";\n            } elsif ($key =~ /[A-Z]/) {\n\
    \                $key_type = \"upper\";\n            } else {\n              \
    \  $result = \"\";\n                last;\n            }\n        } else {\n \
    \           if ($key_type eq \"lower\" && $key =~ /[A-Z]/) {\n               \
    \ $result = \"\";\n                last;\n            } elsif ($key_type eq \"\
    upper\" && $key =~ /[a-z]/) {\n                $result = \"\";\n             \
    \   last;\n            }\n        }\n    }\n    return $result;\n}", "my ($hash)\
    \ = @_;\n    my $result = 1;\n    my $key;\n    my $value;\n    my $key_case;\n\
    \    my $value_case;\n    my $key_case_prev;\n    my $value_case_prev;\n    my\
    \ $key_case_prev_set = 0;\n    my $value_case_prev_set = 0;\n    while (($key,\
    \ $value) = each %$hash) {\n        $key_case = check_case($key);\n        $value_case\
    \ = check_case($value);\n        if ($key_case_prev_set == 0) {\n            $key_case_prev\
    \ = $key_case;\n            $key_case_prev_set = 1;\n        }\n        if ($value_case_prev_set\
    \ == 0) {\n            $value_case_prev = $value_case;\n            $value_case_prev_set\
    \ = 1;\n        }\n        if ($key_case ne $key_case_prev) {\n            $result\
    \ = '';\n            last;\n        }\n        if ($value_case ne $value_case_prev)\
    \ {\n            $result = '';\n            last;\n        }\n    }\n    return\
    \ $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
