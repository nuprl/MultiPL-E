language: pl
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade;\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return 'A+'\
    \ if $gpa >= 4.0;\n    return 'A' if $gpa >= 3.7;\n    return 'A-' if $gpa >=\
    \ 3.3;\n    return 'B+' if $gpa >= 3.0;\n    return 'B' if $gpa >= 2.7;\n    return\
    \ 'B-' if $gpa >= 2.3;\n    return 'C+' if $gpa >= 2.0;\n    return 'C' if $gpa\
    \ >= 1.7;\n    return 'C-' if $gpa >= 1.3;\n    return 'D+' if $gpa >= 1.0;\n\
    \    return 'D' if $gpa >= 0.7;\n    return 'D-' if $gpa >= 0.0;\n    return 'E';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($grade >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($grade >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($grade >= 3.3)\
    \ {\n        $letter_grade = \"A-\";\n    } elsif ($grade >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($grade >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($grade >= 1.7) {\n\
    \        $letter_grade = \"C\";\n    } elsif ($grade >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($grade >= 1.0) {\n        $letter_grade = \"D+\";\n\
    \    } elsif ($grade >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($grade\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"E\"\
    \ if $gpa == 0;\n    return \"D-\" if $gpa <= 0.7;\n    return \"D\" if $gpa <=\
    \ 1.0;\n    return \"D+\" if $gpa <= 1.3;\n    return \"C-\" if $gpa <= 1.7;\n\
    \    return \"C\" if $gpa <= 2.0;\n    return \"C+\" if $gpa <= 2.3;\n    return\
    \ \"B-\" if $gpa <= 2.7;\n    return \"B\" if $gpa <= 3.0;\n    return \"B+\"\
    \ if $gpa <= 3.3;\n    return \"A-\" if $gpa <= 3.7;\n    return \"A\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ >= 4.0) {\n        return \"A+\";\n    } elsif ($grade >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade >= 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($grade >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade >= 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($grade >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade >= 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($grade >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"E\"\
    \ if $gpa == 0;\n    return \"D-\" if $gpa <= 0.7;\n    return \"D\" if $gpa <=\
    \ 1.0;\n    return \"D+\" if $gpa <= 1.3;\n    return \"C-\" if $gpa <= 1.7;\n\
    \    return \"C\" if $gpa <= 2.0;\n    return \"C+\" if $gpa <= 2.3;\n    return\
    \ \"B-\" if $gpa <= 2.7;\n    return \"B\" if $gpa <= 3.0;\n    return \"B+\"\
    \ if $gpa <= 3.3;\n    return \"A-\" if $gpa <= 3.7;\n    return \"A\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"E\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade;\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ >= 4.0) {\n        return \"A+\";\n    } elsif ($grade >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade >= 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($grade >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade >= 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($grade >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade >= 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($grade >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade;\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    }\n    elsif ($numerical_grade >= 3.7) {\n        $letter_grade\
    \ = \"A\";\n    }\n    elsif ($numerical_grade >= 3.3) {\n        $letter_grade\
    \ = \"A-\";\n    }\n    elsif ($numerical_grade >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    }\n    elsif ($numerical_grade >= 2.7) {\n        $letter_grade\
    \ = \"B\";\n    }\n    elsif ($numerical_grade >= 2.3) {\n        $letter_grade\
    \ = \"B-\";\n    }\n    elsif ($numerical_grade >= 2.0) {\n        $letter_grade\
    \ = \"C+\";\n    }\n    elsif ($numerical_grade >= 1.7) {\n        $letter_grade\
    \ = \"C\";\n    }\n    elsif ($numerical_grade >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    }\n    elsif ($numerical_grade >= 1.0) {\n        $letter_grade\
    \ = \"D+\";\n    }\n    elsif ($numerical_grade >= 0.7) {\n        $letter_grade\
    \ = \"D\";\n    }\n    elsif ($numerical_grade >= 0.0) {\n        $letter_grade\
    \ = \"D-\";\n    }\n    else {\n        $letter_grade = \"E\";\n    }\n    return\
    \ $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade;\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    }\n    elsif ($numerical_grade >= 3.7) {\n        $letter_grade\
    \ = \"A\";\n    }\n    elsif ($numerical_grade >= 3.3) {\n        $letter_grade\
    \ = \"A-\";\n    }\n    elsif ($numerical_grade >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    }\n    elsif ($numerical_grade >= 2.7) {\n        $letter_grade\
    \ = \"B\";\n    }\n    elsif ($numerical_grade >= 2.3) {\n        $letter_grade\
    \ = \"B-\";\n    }\n    elsif ($numerical_grade >= 2.0) {\n        $letter_grade\
    \ = \"C+\";\n    }\n    elsif ($numerical_grade >= 1.7) {\n        $letter_grade\
    \ = \"C\";\n    }\n    elsif ($numerical_grade >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    }\n    elsif ($numerical_grade >= 1.0) {\n        $letter_grade\
    \ = \"D+\";\n    }\n    elsif ($numerical_grade >= 0.7) {\n        $letter_grade\
    \ = \"D\";\n    }\n    elsif ($numerical_grade >= 0.0) {\n        $letter_grade\
    \ = \"D-\";\n    }\n    else {\n        $letter_grade = \"E\";\n    }\n    return\
    \ $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"E\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa\
    \ >= 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    }\n    return $grade;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my ($gpa) = @_;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa >= 4.0;\n    return \"A\" if $gpa >= 3.7;\n    return \"A-\" if $gpa\
    \ >= 3.3;\n    return \"B+\" if $gpa >= 3.0;\n    return \"B\" if $gpa >= 2.7;\n\
    \    return \"B-\" if $gpa >= 2.3;\n    return \"C+\" if $gpa >= 2.0;\n    return\
    \ \"C\" if $gpa >= 1.7;\n    return \"C-\" if $gpa >= 1.3;\n    return \"D+\"\
    \ if $gpa >= 1.0;\n    return \"D\" if $gpa >= 0.7;\n    return \"D-\" if $gpa\
    \ >= 0.0;\n    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa >= 4.0;\n    return \"A\" if $gpa >= 3.7;\n    return \"A-\" if $gpa\
    \ >= 3.3;\n    return \"B+\" if $gpa >= 3.0;\n    return \"B\" if $gpa >= 2.7;\n\
    \    return \"B-\" if $gpa >= 2.3;\n    return \"C+\" if $gpa >= 2.0;\n    return\
    \ \"C\" if $gpa >= 1.7;\n    return \"C-\" if $gpa >= 1.3;\n    return \"D+\"\
    \ if $gpa >= 1.0;\n    return \"D\" if $gpa >= 0.7;\n    return \"D-\" if $gpa\
    \ >= 0.0;\n    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"E\"\
    \ if $gpa == 0;\n    return \"D-\" if $gpa <= 0.7;\n    return \"D\" if $gpa <=\
    \ 1.0;\n    return \"D+\" if $gpa <= 1.3;\n    return \"C-\" if $gpa <= 1.7;\n\
    \    return \"C\" if $gpa <= 2.0;\n    return \"C+\" if $gpa <= 2.3;\n    return\
    \ \"B-\" if $gpa <= 2.7;\n    return \"B\" if $gpa <= 3.0;\n    return \"B+\"\
    \ if $gpa <= 3.3;\n    return \"A-\" if $gpa <= 3.7;\n    return \"A\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"E\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa\
    \ >= 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    }\n    return $grade;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa >=\
    \ 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    } else {\n        $grade = \"E\";\n\
    \    }\n    return $grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"E\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa\
    \ >= 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    }\n    return $grade;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"E\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    }\n    return $letter_grade;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade;\n\
    \    if ($gpa == 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa > 3.7) {\n\
    \        $grade = \"A\";\n    } elsif ($gpa > 3.3) {\n        $grade = \"A-\"\
    ;\n    } elsif ($gpa > 3.0) {\n        $grade = \"B+\";\n    } elsif ($gpa > 2.7)\
    \ {\n        $grade = \"B\";\n    } elsif ($gpa > 2.3) {\n        $grade = \"\
    B-\";\n    } elsif ($gpa > 2.0) {\n        $grade = \"C+\";\n    } elsif ($gpa\
    \ > 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa > 1.3) {\n        $grade\
    \ = \"C-\";\n    } elsif ($gpa > 1.0) {\n        $grade = \"D+\";\n    } elsif\
    \ ($gpa > 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa > 0.0) {\n      \
    \  $grade = \"D-\";\n    } else {\n        $grade = \"E\";\n    }\n    return\
    \ $grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n      \
    \  exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"E\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ '';\n    if ($gpa >= 4.0) {\n        $grade = 'A+';\n    } elsif ($gpa >= 3.7)\
    \ {\n        $grade = 'A';\n    } elsif ($gpa >= 3.3) {\n        $grade = 'A-';\n\
    \    } elsif ($gpa >= 3.0) {\n        $grade = 'B+';\n    } elsif ($gpa >= 2.7)\
    \ {\n        $grade = 'B';\n    } elsif ($gpa >= 2.3) {\n        $grade = 'B-';\n\
    \    } elsif ($gpa >= 2.0) {\n        $grade = 'C+';\n    } elsif ($gpa >= 1.7)\
    \ {\n        $grade = 'C';\n    } elsif ($gpa >= 1.3) {\n        $grade = 'C-';\n\
    \    } elsif ($gpa >= 1.0) {\n        $grade = 'D+';\n    } elsif ($gpa >= 0.7)\
    \ {\n        $grade = 'D';\n    } elsif ($gpa >= 0.0) {\n        $grade = 'D-';\n\
    \    } else {\n        $grade = 'E';\n    }\n    return $grade;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = '';\n    if ($gpa >= 4.0) {\n        $letter_grade = 'A+';\n    } elsif ($gpa\
    \ >= 3.7) {\n        $letter_grade = 'A';\n    } elsif ($gpa >= 3.3) {\n     \
    \   $letter_grade = 'A-';\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = 'B+';\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = 'B';\n    } elsif\
    \ ($gpa >= 2.3) {\n        $letter_grade = 'B-';\n    } elsif ($gpa >= 2.0) {\n\
    \        $letter_grade = 'C+';\n    } elsif ($gpa >= 1.7) {\n        $letter_grade\
    \ = 'C';\n    } elsif ($gpa >= 1.3) {\n        $letter_grade = 'C-';\n    } elsif\
    \ ($gpa >= 1.0) {\n        $letter_grade = 'D+';\n    } elsif ($gpa >= 0.7) {\n\
    \        $letter_grade = 'D';\n    } elsif ($gpa >= 0.0) {\n        $letter_grade\
    \ = 'D-';\n    } else {\n        $letter_grade = 'E';\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ >= 4.0) {\n        return \"A+\";\n    } elsif ($grade >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade >= 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($grade >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade >= 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($grade >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade >= 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($grade >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade;\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    return \"\
    A+\" if $grade == 4.0;\n    return \"A\" if $grade > 3.7;\n    return \"A-\" if\
    \ $grade > 3.3;\n    return \"B+\" if $grade > 3.0;\n    return \"B\" if $grade\
    \ > 2.7;\n    return \"B-\" if $grade > 2.3;\n    return \"C+\" if $grade > 2.0;\n\
    \    return \"C\" if $grade > 1.7;\n    return \"C-\" if $grade > 1.3;\n    return\
    \ \"D+\" if $grade > 1.0;\n    return \"D\" if $grade > 0.7;\n    return \"D-\"\
    \ if $grade > 0.0;\n    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"E\"\
    \ if $gpa == 0;\n    return \"D-\" if $gpa < 0.7;\n    return \"D\" if $gpa <\
    \ 1;\n    return \"D+\" if $gpa < 1.3;\n    return \"C-\" if $gpa < 1.7;\n   \
    \ return \"C\" if $gpa < 2;\n    return \"C+\" if $gpa < 2.3;\n    return \"B-\"\
    \ if $gpa < 2.7;\n    return \"B\" if $gpa < 3;\n    return \"B+\" if $gpa < 3.3;\n\
    \    return \"A-\" if $gpa < 3.7;\n    return \"A\" if $gpa < 4;\n    return \"\
    A+\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"E\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ == 4.0) {\n        return \"A+\";\n    } elsif ($grade > 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade > 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ > 3.0) {\n        return \"B+\";\n    } elsif ($grade > 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade > 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ > 2.0) {\n        return \"C+\";\n    } elsif ($grade > 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade > 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ > 1.0) {\n        return \"D+\";\n    } elsif ($grade > 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade > 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my ($gpa) = @_;\n    my $letter_grade\
    \ = \"E\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"E\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa\
    \ >= 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    }\n    return $grade;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa >= 4.0;\n    return \"A\" if $gpa >= 3.7;\n    return \"A-\" if $gpa\
    \ >= 3.3;\n    return \"B+\" if $gpa >= 3.0;\n    return \"B\" if $gpa >= 2.7;\n\
    \    return \"B-\" if $gpa >= 2.3;\n    return \"C+\" if $gpa >= 2.0;\n    return\
    \ \"C\" if $gpa >= 1.7;\n    return \"C-\" if $gpa >= 1.3;\n    return \"D+\"\
    \ if $gpa >= 1.0;\n    return \"D\" if $gpa >= 0.7;\n    return \"D-\" if $gpa\
    \ >= 0.0;\n    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"E\"\
    \ if $gpa == 0;\n    return \"D-\" if $gpa <= 0.7;\n    return \"D\" if $gpa <=\
    \ 1.0;\n    return \"D+\" if $gpa <= 1.3;\n    return \"C-\" if $gpa <= 1.7;\n\
    \    return \"C\" if $gpa <= 2.0;\n    return \"C+\" if $gpa <= 2.3;\n    return\
    \ \"B-\" if $gpa <= 2.7;\n    return \"B\" if $gpa <= 3.0;\n    return \"B+\"\
    \ if $gpa <= 3.3;\n    return \"A-\" if $gpa <= 3.7;\n    return \"A\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"E\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    }\n \
    \   elsif ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    }\n    elsif ($gpa\
    \ >= 3.3) {\n        $letter_grade = \"A-\";\n    }\n    elsif ($gpa >= 3.0) {\n\
    \        $letter_grade = \"B+\";\n    }\n    elsif ($gpa >= 2.7) {\n        $letter_grade\
    \ = \"B\";\n    }\n    elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n\
    \    }\n    elsif ($gpa >= 2.0) {\n        $letter_grade = \"C+\";\n    }\n  \
    \  elsif ($gpa >= 1.7) {\n        $letter_grade = \"C\";\n    }\n    elsif ($gpa\
    \ >= 1.3) {\n        $letter_grade = \"C-\";\n    }\n    elsif ($gpa >= 1.0) {\n\
    \        $letter_grade = \"D+\";\n    }\n    elsif ($gpa >= 0.7) {\n        $letter_grade\
    \ = \"D\";\n    }\n    elsif ($gpa >= 0.0) {\n        $letter_grade = \"D-\";\n\
    \    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa >= 4.0;\n    return \"A\" if $gpa >= 3.7;\n    return \"A-\" if $gpa\
    \ >= 3.3;\n    return \"B+\" if $gpa >= 3.0;\n    return \"B\" if $gpa >= 2.7;\n\
    \    return \"B-\" if $gpa >= 2.3;\n    return \"C+\" if $gpa >= 2.0;\n    return\
    \ \"C\" if $gpa >= 1.7;\n    return \"C-\" if $gpa >= 1.3;\n    return \"D+\"\
    \ if $gpa >= 1.0;\n    return \"D\" if $gpa >= 0.7;\n    return \"D-\" if $gpa\
    \ >= 0.0;\n    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my ($gpa) = @_;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"E\"\
    \ if $gpa == 0;\n    return \"D-\" if $gpa <= 0.7;\n    return \"D\" if $gpa <=\
    \ 1.0;\n    return \"D+\" if $gpa <= 1.3;\n    return \"C-\" if $gpa <= 1.7;\n\
    \    return \"C\" if $gpa <= 2.0;\n    return \"C+\" if $gpa <= 2.3;\n    return\
    \ \"B-\" if $gpa <= 2.7;\n    return \"B\" if $gpa <= 3.0;\n    return \"B+\"\
    \ if $gpa <= 3.3;\n    return \"A-\" if $gpa <= 3.7;\n    return \"A\";\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter = \"A+\";\n    } elsif ($gpa\
    \ >= 3.7) {\n        $letter = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $letter\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $letter = \"B\";\n    } elsif ($gpa >= 2.3) {\n   \
    \     $letter = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $letter = \"C+\"\
    ;\n    } elsif ($gpa >= 1.7) {\n        $letter = \"C\";\n    } elsif ($gpa >=\
    \ 1.3) {\n        $letter = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter\
    \ = \"D+\";\n    } elsif ($gpa >= 0.7) {\n        $letter = \"D\";\n    } elsif\
    \ ($gpa >= 0.0) {\n        $letter = \"D-\";\n    } else {\n        $letter =\
    \ \"E\";\n    }\n    return $letter;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade == 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade > 3.7) {\n        $letter_grade = \"\
    A\";\n    } elsif ($numerical_grade > 3.3) {\n        $letter_grade = \"A-\";\n\
    \    } elsif ($numerical_grade > 3.0) {\n        $letter_grade = \"B+\";\n   \
    \ } elsif ($numerical_grade > 2.7) {\n        $letter_grade = \"B\";\n    } elsif\
    \ ($numerical_grade > 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($numerical_grade\
    \ > 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($numerical_grade > 1.7)\
    \ {\n        $letter_grade = \"C\";\n    } elsif ($numerical_grade > 1.3) {\n\
    \        $letter_grade = \"C-\";\n    } elsif ($numerical_grade > 1.0) {\n   \
    \     $letter_grade = \"D+\";\n    } elsif ($numerical_grade > 0.7) {\n      \
    \  $letter_grade = \"D\";\n    } elsif ($numerical_grade > 0.0) {\n        $letter_grade\
    \ = \"D-\";\n    } else {\n        $letter_grade = \"E\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    return \"\
    A+\" if $grade == 4.0;\n    return \"A\" if $grade > 3.7;\n    return \"A-\" if\
    \ $grade > 3.3;\n    return \"B+\" if $grade > 3.0;\n    return \"B\" if $grade\
    \ > 2.7;\n    return \"B-\" if $grade > 2.3;\n    return \"C+\" if $grade > 2.0;\n\
    \    return \"C\" if $grade > 1.7;\n    return \"C-\" if $grade > 1.3;\n    return\
    \ \"D+\" if $grade > 1.0;\n    return \"D\" if $grade > 0.7;\n    return \"D-\"\
    \ if $grade > 0.0;\n    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my ($gpa) = @_;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa >=\
    \ 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    } else {\n        $grade = \"E\";\n\
    \    }\n    return $grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ >= 4.0) {\n        return \"A+\";\n    } elsif ($grade >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade >= 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($grade >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade >= 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($grade >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade >= 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($grade >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return 'A+'\
    \ if $gpa == 4.0;\n    return 'A' if $gpa > 3.7;\n    return 'A-' if $gpa > 3.3;\n\
    \    return 'B+' if $gpa > 3.0;\n    return 'B' if $gpa > 2.7;\n    return 'B-'\
    \ if $gpa > 2.3;\n    return 'C+' if $gpa > 2.0;\n    return 'C' if $gpa > 1.7;\n\
    \    return 'C-' if $gpa > 1.3;\n    return 'D+' if $gpa > 1.0;\n    return 'D'\
    \ if $gpa > 0.7;\n    return 'D-' if $gpa > 0.0;\n    return 'E';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    }\n    elsif ($gpa > 3.7) {\n        return\
    \ \"A\";\n    }\n    elsif ($gpa > 3.3) {\n        return \"A-\";\n    }\n   \
    \ elsif ($gpa > 3.0) {\n        return \"B+\";\n    }\n    elsif ($gpa > 2.7)\
    \ {\n        return \"B\";\n    }\n    elsif ($gpa > 2.3) {\n        return \"\
    B-\";\n    }\n    elsif ($gpa > 2.0) {\n        return \"C+\";\n    }\n    elsif\
    \ ($gpa > 1.7) {\n        return \"C\";\n    }\n    elsif ($gpa > 1.3) {\n   \
    \     return \"C-\";\n    }\n    elsif ($gpa > 1.0) {\n        return \"D+\";\n\
    \    }\n    elsif ($gpa > 0.7) {\n        return \"D\";\n    }\n    elsif ($gpa\
    \ > 0.0) {\n        return \"D-\";\n    }\n    else {\n        return \"E\";\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    }\n    elsif ($gpa > 3.7) {\n        return\
    \ \"A\";\n    }\n    elsif ($gpa > 3.3) {\n        return \"A-\";\n    }\n   \
    \ elsif ($gpa > 3.0) {\n        return \"B+\";\n    }\n    elsif ($gpa > 2.7)\
    \ {\n        return \"B\";\n    }\n    elsif ($gpa > 2.3) {\n        return \"\
    B-\";\n    }\n    elsif ($gpa > 2.0) {\n        return \"C+\";\n    }\n    elsif\
    \ ($gpa > 1.7) {\n        return \"C\";\n    }\n    elsif ($gpa > 1.3) {\n   \
    \     return \"C-\";\n    }\n    elsif ($gpa > 1.0) {\n        return \"D+\";\n\
    \    }\n    elsif ($gpa > 0.7) {\n        return \"D\";\n    }\n    elsif ($gpa\
    \ > 0.0) {\n        return \"D-\";\n    }\n    else {\n        return \"E\";\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade == 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade > 3.7) {\n        $letter_grade = \"\
    A\";\n    } elsif ($numerical_grade > 3.3) {\n        $letter_grade = \"A-\";\n\
    \    } elsif ($numerical_grade > 3.0) {\n        $letter_grade = \"B+\";\n   \
    \ } elsif ($numerical_grade > 2.7) {\n        $letter_grade = \"B\";\n    } elsif\
    \ ($numerical_grade > 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($numerical_grade\
    \ > 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($numerical_grade > 1.7)\
    \ {\n        $letter_grade = \"C\";\n    } elsif ($numerical_grade > 1.3) {\n\
    \        $letter_grade = \"C-\";\n    } elsif ($numerical_grade > 1.0) {\n   \
    \     $letter_grade = \"D+\";\n    } elsif ($numerical_grade > 0.7) {\n      \
    \  $letter_grade = \"D\";\n    } elsif ($numerical_grade > 0.0) {\n        $letter_grade\
    \ = \"D-\";\n    } else {\n        $letter_grade = \"E\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"E\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa\
    \ >= 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    }\n    return $grade;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa == 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa > 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa > 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa > 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa > 2.7) {\n        $letter_grade = \"B\";\n    }\
    \ elsif ($gpa > 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa > 2.0)\
    \ {\n        $letter_grade = \"C+\";\n    } elsif ($gpa > 1.7) {\n        $letter_grade\
    \ = \"C\";\n    } elsif ($gpa > 1.3) {\n        $letter_grade = \"C-\";\n    }\
    \ elsif ($gpa > 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($gpa > 0.7)\
    \ {\n        $letter_grade = \"D\";\n    } elsif ($gpa > 0.0) {\n        $letter_grade\
    \ = \"D-\";\n    } else {\n        $letter_grade = \"E\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa >=\
    \ 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    } else {\n        $grade = \"E\";\n\
    \    }\n    return $grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ >= 4.0) {\n        return \"A+\";\n    } elsif ($grade >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade >= 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($grade >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade >= 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($grade >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade >= 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($grade >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = \"B\";\n   \
    \ } elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($gpa >= 1.7) {\n  \
    \      $letter_grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $letter_grade = \"D+\";\n  \
    \  } elsif ($gpa >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ >= 4.0) {\n        return \"A+\";\n    } elsif ($grade >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade >= 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($grade >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade >= 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($grade >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade >= 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($grade >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"E\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa\
    \ >= 3.7) {\n        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade\
    \ = \"A-\";\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif\
    \ ($gpa >= 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n    \
    \    $grade = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n\
    \    } elsif ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3)\
    \ {\n        $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"\
    D+\";\n    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa\
    \ >= 0.0) {\n        $grade = \"D-\";\n    }\n    return $grade;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return 'A+'\
    \ if $gpa == 4.0;\n    return 'A' if $gpa > 3.7;\n    return 'A-' if $gpa > 3.3;\n\
    \    return 'B+' if $gpa > 3.0;\n    return 'B' if $gpa > 2.7;\n    return 'B-'\
    \ if $gpa > 2.3;\n    return 'C+' if $gpa > 2.0;\n    return 'C' if $gpa > 1.7;\n\
    \    return 'C-' if $gpa > 1.3;\n    return 'D+' if $gpa > 1.0;\n    return 'D'\
    \ if $gpa > 0.7;\n    return 'D-' if $gpa > 0.0;\n    return 'E';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  return 'E' if $numerical_grade == 0;\n    return 'D-' if $numerical_grade <\
    \ 0.7;\n    return 'D' if $numerical_grade < 1;\n    return 'D+' if $numerical_grade\
    \ < 1.3;\n    return 'C-' if $numerical_grade < 1.7;\n    return 'C' if $numerical_grade\
    \ < 2;\n    return 'C+' if $numerical_grade < 2.3;\n    return 'B-' if $numerical_grade\
    \ < 2.7;\n    return 'B' if $numerical_grade < 3;\n    return 'B+' if $numerical_grade\
    \ < 3.3;\n    return 'A-' if $numerical_grade < 3.7;\n    return 'A' if $numerical_grade\
    \ < 4;\n    return 'A+';\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"E\";\n    if ($gpa == 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($gpa > 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($gpa > 3.3) {\n\
    \        $letter_grade = \"A-\";\n    } elsif ($gpa > 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($gpa > 2.7) {\n        $letter_grade = \"B\";\n    }\
    \ elsif ($gpa > 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($gpa > 2.0)\
    \ {\n        $letter_grade = \"C+\";\n    } elsif ($gpa > 1.7) {\n        $letter_grade\
    \ = \"C\";\n    } elsif ($gpa > 1.3) {\n        $letter_grade = \"C-\";\n    }\
    \ elsif ($gpa > 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($gpa > 0.7)\
    \ {\n        $letter_grade = \"D\";\n    } elsif ($gpa > 0.0) {\n        $letter_grade\
    \ = \"D-\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade =\
    \ \"\";\n    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    }\n    elsif ($gpa\
    \ >= 3.7) {\n        $grade = \"A\";\n    }\n    elsif ($gpa >= 3.3) {\n     \
    \   $grade = \"A-\";\n    }\n    elsif ($gpa >= 3.0) {\n        $grade = \"B+\"\
    ;\n    }\n    elsif ($gpa >= 2.7) {\n        $grade = \"B\";\n    }\n    elsif\
    \ ($gpa >= 2.3) {\n        $grade = \"B-\";\n    }\n    elsif ($gpa >= 2.0) {\n\
    \        $grade = \"C+\";\n    }\n    elsif ($gpa >= 1.7) {\n        $grade =\
    \ \"C\";\n    }\n    elsif ($gpa >= 1.3) {\n        $grade = \"C-\";\n    }\n\
    \    elsif ($gpa >= 1.0) {\n        $grade = \"D+\";\n    }\n    elsif ($gpa >=\
    \ 0.7) {\n        $grade = \"D\";\n    }\n    elsif ($gpa >= 0.0) {\n        $grade\
    \ = \"D-\";\n    }\n    else {\n        $grade = \"E\";\n    }\n    return $grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return 'A+'\
    \ if $gpa >= 4.0;\n    return 'A' if $gpa >= 3.7;\n    return 'A-' if $gpa >=\
    \ 3.3;\n    return 'B+' if $gpa >= 3.0;\n    return 'B' if $gpa >= 2.7;\n    return\
    \ 'B-' if $gpa >= 2.3;\n    return 'C+' if $gpa >= 2.0;\n    return 'C' if $gpa\
    \ >= 1.7;\n    return 'C-' if $gpa >= 1.3;\n    return 'D+' if $gpa >= 1.0;\n\
    \    return 'D' if $gpa >= 0.7;\n    return 'D-' if $gpa >= 0.0;\n    return 'E';\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $grade;\n\
    \    if ($gpa >= 4.0) {\n        $grade = \"A+\";\n    } elsif ($gpa >= 3.7) {\n\
    \        $grade = \"A\";\n    } elsif ($gpa >= 3.3) {\n        $grade = \"A-\"\
    ;\n    } elsif ($gpa >= 3.0) {\n        $grade = \"B+\";\n    } elsif ($gpa >=\
    \ 2.7) {\n        $grade = \"B\";\n    } elsif ($gpa >= 2.3) {\n        $grade\
    \ = \"B-\";\n    } elsif ($gpa >= 2.0) {\n        $grade = \"C+\";\n    } elsif\
    \ ($gpa >= 1.7) {\n        $grade = \"C\";\n    } elsif ($gpa >= 1.3) {\n    \
    \    $grade = \"C-\";\n    } elsif ($gpa >= 1.0) {\n        $grade = \"D+\";\n\
    \    } elsif ($gpa >= 0.7) {\n        $grade = \"D\";\n    } elsif ($gpa >= 0.0)\
    \ {\n        $grade = \"D-\";\n    } else {\n        $grade = \"E\";\n    }\n\
    \    return $grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return 'A+'\
    \ if $gpa == 4.0;\n    return 'A' if $gpa > 3.7;\n    return 'A-' if $gpa > 3.3;\n\
    \    return 'B+' if $gpa > 3.0;\n    return 'B' if $gpa > 2.7;\n    return 'B-'\
    \ if $gpa > 2.3;\n    return 'C+' if $gpa > 2.0;\n    return 'C' if $gpa > 1.7;\n\
    \    return 'C-' if $gpa > 1.3;\n    return 'D+' if $gpa > 1.0;\n    return 'D'\
    \ if $gpa > 0.7;\n    return 'D-' if $gpa > 0.0;\n    return 'E';\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n    \
    \    if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\",\
    \ \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($grade >= 4.0) {\n        $letter_grade = \"A+\";\n    } elsif\
    \ ($grade >= 3.7) {\n        $letter_grade = \"A\";\n    } elsif ($grade >= 3.3)\
    \ {\n        $letter_grade = \"A-\";\n    } elsif ($grade >= 3.0) {\n        $letter_grade\
    \ = \"B+\";\n    } elsif ($grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($grade >= 2.3) {\n        $letter_grade = \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        $letter_grade = \"C+\";\n    } elsif ($grade >= 1.7) {\n\
    \        $letter_grade = \"C\";\n    } elsif ($grade >= 1.3) {\n        $letter_grade\
    \ = \"C-\";\n    } elsif ($grade >= 1.0) {\n        $letter_grade = \"D+\";\n\
    \    } elsif ($grade >= 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($grade\
    \ >= 0.0) {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade\
    \ = \"E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    my $letter_grade\
    \ = \"\";\n    if ($gpa >= 4.0) {\n        $letter_grade = \"A+\";\n    }\n  \
    \  elsif ($gpa >= 3.7) {\n        $letter_grade = \"A\";\n    }\n    elsif ($gpa\
    \ >= 3.3) {\n        $letter_grade = \"A-\";\n    }\n    elsif ($gpa >= 3.0) {\n\
    \        $letter_grade = \"B+\";\n    }\n    elsif ($gpa >= 2.7) {\n        $letter_grade\
    \ = \"B\";\n    }\n    elsif ($gpa >= 2.3) {\n        $letter_grade = \"B-\";\n\
    \    }\n    elsif ($gpa >= 2.0) {\n        $letter_grade = \"C+\";\n    }\n  \
    \  elsif ($gpa >= 1.7) {\n        $letter_grade = \"C\";\n    }\n    elsif ($gpa\
    \ >= 1.3) {\n        $letter_grade = \"C-\";\n    }\n    elsif ($gpa >= 1.0) {\n\
    \        $letter_grade = \"D+\";\n    }\n    elsif ($gpa >= 0.7) {\n        $letter_grade\
    \ = \"D\";\n    }\n    elsif ($gpa >= 0.0) {\n        $letter_grade = \"D-\";\n\
    \    }\n    else {\n        $letter_grade = \"E\";\n    }\n    return $letter_grade;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"E\"\
    \ if $gpa == 0;\n    return \"D-\" if $gpa < 0.7;\n    return \"D\" if $gpa <\
    \ 1;\n    return \"D+\" if $gpa < 1.3;\n    return \"C-\" if $gpa < 1.7;\n   \
    \ return \"C\" if $gpa < 2;\n    return \"C+\" if $gpa < 2.3;\n    return \"B-\"\
    \ if $gpa < 2.7;\n    return \"B\" if $gpa < 3;\n    return \"B+\" if $gpa < 3.3;\n\
    \    return \"A-\" if $gpa < 3.7;\n    return \"A\" if $gpa < 4;\n    return \"\
    A+\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade;\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    return \"A+\"\
    \ if $gpa == 4.0;\n    return \"A\" if $gpa > 3.7;\n    return \"A-\" if $gpa\
    \ > 3.3;\n    return \"B+\" if $gpa > 3.0;\n    return \"B\" if $gpa > 2.7;\n\
    \    return \"B-\" if $gpa > 2.3;\n    return \"C+\" if $gpa > 2.0;\n    return\
    \ \"C\" if $gpa > 1.7;\n    return \"C-\" if $gpa > 1.3;\n    return \"D+\" if\
    \ $gpa > 1.0;\n    return \"D\" if $gpa > 0.7;\n    return \"D-\" if $gpa > 0.0;\n\
    \    return \"E\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"E\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    }\n    return $letter_grade;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&numerical_letter_grade;\n\
    \        if(eq_deeply($candidate->([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1.2]),[\"D+\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa >=\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($gpa >= 3.3) {\n        return \"A-\";\n    } elsif ($gpa\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($gpa >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($gpa >= 2.3) {\n        return \"B-\";\n    } elsif ($gpa\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($gpa >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($gpa >= 1.3) {\n        return \"C-\";\n    } elsif ($gpa\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($gpa >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($gpa >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my ($gpa) = @_;\n    my $letter_grade\
    \ = 'E';\n    if ($gpa >= 4.0) {\n        $letter_grade = 'A+';\n    } elsif ($gpa\
    \ >= 3.7) {\n        $letter_grade = 'A';\n    } elsif ($gpa >= 3.3) {\n     \
    \   $letter_grade = 'A-';\n    } elsif ($gpa >= 3.0) {\n        $letter_grade\
    \ = 'B+';\n    } elsif ($gpa >= 2.7) {\n        $letter_grade = 'B';\n    } elsif\
    \ ($gpa >= 2.3) {\n        $letter_grade = 'B-';\n    } elsif ($gpa >= 2.0) {\n\
    \        $letter_grade = 'C+';\n    } elsif ($gpa >= 1.7) {\n        $letter_grade\
    \ = 'C';\n    } elsif ($gpa >= 1.3) {\n        $letter_grade = 'C-';\n    } elsif\
    \ ($gpa >= 1.0) {\n        $letter_grade = 'D+';\n    } elsif ($gpa >= 0.7) {\n\
    \        $letter_grade = 'D';\n    } elsif ($gpa >= 0.0) {\n        $letter_grade\
    \ = 'D-';\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $numerical_grade = shift;\n  \
    \  my $letter_grade = \"\";\n    if ($numerical_grade >= 4.0) {\n        $letter_grade\
    \ = \"A+\";\n    } elsif ($numerical_grade >= 3.7) {\n        $letter_grade =\
    \ \"A\";\n    } elsif ($numerical_grade >= 3.3) {\n        $letter_grade = \"\
    A-\";\n    } elsif ($numerical_grade >= 3.0) {\n        $letter_grade = \"B+\"\
    ;\n    } elsif ($numerical_grade >= 2.7) {\n        $letter_grade = \"B\";\n \
    \   } elsif ($numerical_grade >= 2.3) {\n        $letter_grade = \"B-\";\n   \
    \ } elsif ($numerical_grade >= 2.0) {\n        $letter_grade = \"C+\";\n    }\
    \ elsif ($numerical_grade >= 1.7) {\n        $letter_grade = \"C\";\n    } elsif\
    \ ($numerical_grade >= 1.3) {\n        $letter_grade = \"C-\";\n    } elsif ($numerical_grade\
    \ >= 1.0) {\n        $letter_grade = \"D+\";\n    } elsif ($numerical_grade >=\
    \ 0.7) {\n        $letter_grade = \"D\";\n    } elsif ($numerical_grade >= 0.0)\
    \ {\n        $letter_grade = \"D-\";\n    } else {\n        $letter_grade = \"\
    E\";\n    }\n    return $letter_grade;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $n = shift;\n    if ($n >= 4.0)\
    \ {\n        return \"A+\";\n    } elsif ($n >= 3.7) {\n        return \"A\";\n\
    \    } elsif ($n >= 3.3) {\n        return \"A-\";\n    } elsif ($n >= 3.0) {\n\
    \        return \"B+\";\n    } elsif ($n >= 2.7) {\n        return \"B\";\n  \
    \  } elsif ($n >= 2.3) {\n        return \"B-\";\n    } elsif ($n >= 2.0) {\n\
    \        return \"C+\";\n    } elsif ($n >= 1.7) {\n        return \"C\";\n  \
    \  } elsif ($n >= 1.3) {\n        return \"C-\";\n    } elsif ($n >= 1.0) {\n\
    \        return \"D+\";\n    } elsif ($n >= 0.7) {\n        return \"D\";\n  \
    \  } elsif ($n >= 0.0) {\n        return \"D-\";\n    } else {\n        return\
    \ \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"D+\"\
    ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $gpa = shift;\n    if ($gpa ==\
    \ 4.0) {\n        return \"A+\";\n    } elsif ($gpa > 3.7) {\n        return \"\
    A\";\n    } elsif ($gpa > 3.3) {\n        return \"A-\";\n    } elsif ($gpa >\
    \ 3.0) {\n        return \"B+\";\n    } elsif ($gpa > 2.7) {\n        return \"\
    B\";\n    } elsif ($gpa > 2.3) {\n        return \"B-\";\n    } elsif ($gpa >\
    \ 2.0) {\n        return \"C+\";\n    } elsif ($gpa > 1.7) {\n        return \"\
    C\";\n    } elsif ($gpa > 1.3) {\n        return \"C-\";\n    } elsif ($gpa >\
    \ 1.0) {\n        return \"D+\";\n    } elsif ($gpa > 0.7) {\n        return \"\
    D\";\n    } elsif ($gpa > 0.0) {\n        return \"D-\";\n    } else {\n     \
    \   return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227689
- exit_code: 1
  program: "# It is the last week of the semester and the teacher has to give the\
    \ grades\n# to students. The teacher has been making her own algorithm for grading.\n\
    # The only problem is, she has lost the code she used for grading.\n# She has\
    \ given you an array of GPAs for some students and you have to write \n# a function\
    \ that can output an array of letter grades using the following table:\n# GPA\
    \       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n\
    # > 3.3                A- \n# > 3.0                B+\n# > 2.7               \
    \ B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7          \
    \      C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7     \
    \           D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"]\nsub numerical_letter_grade {\n    my $grade = shift;\n    if ($grade\
    \ >= 4.0) {\n        return \"A+\";\n    } elsif ($grade >= 3.7) {\n        return\
    \ \"A\";\n    } elsif ($grade >= 3.3) {\n        return \"A-\";\n    } elsif ($grade\
    \ >= 3.0) {\n        return \"B+\";\n    } elsif ($grade >= 2.7) {\n        return\
    \ \"B\";\n    } elsif ($grade >= 2.3) {\n        return \"B-\";\n    } elsif ($grade\
    \ >= 2.0) {\n        return \"C+\";\n    } elsif ($grade >= 1.7) {\n        return\
    \ \"C\";\n    } elsif ($grade >= 1.3) {\n        return \"C-\";\n    } elsif ($grade\
    \ >= 1.0) {\n        return \"D+\";\n    } elsif ($grade >= 0.7) {\n        return\
    \ \"D\";\n    } elsif ($grade >= 0.0) {\n        return \"D-\";\n    } else {\n\
    \        return \"E\";\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&numerical_letter_grade;\n        if(eq_deeply($candidate->([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.2]),[\"\
    D+\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.5]),[\"\
    D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),[\"\
    E\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0,\
    \ 0.7]),[\"E\", \"D-\"])) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660232053
