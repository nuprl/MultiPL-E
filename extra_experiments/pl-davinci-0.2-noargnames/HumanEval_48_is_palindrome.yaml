name: HumanEval_48_is_palindrome
language: pl
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome(\"\")\n# 1\n\
  # >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"\
  zbcd\")\n# \"\"\nsub is_palindrome {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my $str = shift;\n    return 1 if length($str) == 0;\n    return 1\
    \ if length($str) == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str)\
    \ == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n \
    \   return $str eq reverse $str;\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my ($str) = @_;\n    my\
    \ $len = length($str);\n    my $half = int($len / 2);\n    my $i = 0;\n    while\
    \ ($i < $half) {\n        if (substr($str, $i, 1) ne substr($str, $len - $i -\
    \ 1, 1)) {\n            return \"\";\n        }\n        $i++;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return $str eq\
    \ reverse $str;\n}", "my $str = shift;\n    return 1 if length($str) <= 1;\n \
    \   return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return 0 if length($str)\
    \ == 0;\n    return 1 if length($str) == 1;\n    return 0 if substr($str, 0, 1)\
    \ ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return \"\" if (length($str) < 2);\n    return\
    \ 1 if (length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1));\n    return\
    \ 1 if (length($str) == 3 && substr($str, 0, 1) eq substr($str, 2, 1));\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2)) if (substr($str, 0, 1) eq substr($str,\
    \ length($str) - 1, 1));\n    return \"\";\n}", "my $str = shift;\n    my $len\
    \ = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j)\
    \ {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n            return\
    \ \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}", "my\
    \ $str = shift;\n    return 1 if (length($str) == 0);\n    return 1 if (length($str)\
    \ == 1);\n    return 1 if (length($str) == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1));\n    return \"\" if (substr($str, 0, 1) ne substr($str, -1, 1));\n \
    \   return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n\
    \    return 1 if (length($str) == 0);\n    return 1 if (length($str) == 1);\n\
    \    return 1 if (length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1));\n\
    \    return \"\" if (substr($str, 0, 1) ne substr($str, -1, 1));\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return \"\" if $str eq \"\
    \";\n    return 1 if length($str) == 1;\n    return 1 if length($str) == 2 &&\
    \ substr($str, 0, 1) eq substr($str, 1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2)) if substr($str, 0, 1) eq substr($str, length($str) - 1,\
    \ 1);\n    return \"\";\n}", "my $str = shift;\n    return 1 if length($str) ==\
    \ 0;\n    return 1 if length($str) == 1;\n    return 1 if length($str) == 2 &&\
    \ substr($str, 0, 1) eq substr($str, 1, 1);\n    return \"\" if substr($str, 0,\
    \ 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1)\
    \ ne substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return 1 if $str\
    \ eq \"\";\n    return $str if length($str) == 1;\n    my $len = length($str);\n\
    \    my $mid = int($len / 2);\n    my $left = substr($str, 0, $mid);\n    my $right\
    \ = substr($str, $mid + 1, $len - $mid - 1);\n    $right = reverse($right);\n\
    \    return $str if $left eq $right;\n    return \"\";\n}", "my $str = shift;\n\
    \    return 1 if length($str) <= 1;\n    return \"\" if substr($str, 0, 1) ne\
    \ substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if\
    \ $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n    return 1\
    \ if length($str) == 0;\n    return 1 if length($str) == 1;\n    return \"\" if\
    \ substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return 1 if length($str)\
    \ <= 1;\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n \
    \   my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while\
    \ ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n   \
    \         return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n   \
    \ my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne\
    \ substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my $m;\n    my $n;\n    my\
    \ $o;\n    my $p;\n    my $q;\n    my $r;\n    my $s;\n    my $t;\n    my $u;\n\
    \    my $v;\n    my $w;\n    my $x;\n    my $y;\n    my $z;\n    my $a;\n    my\
    \ $b;\n    my $c;\n    my $d;\n    my $e;\n    my $f;\n    my $g;\n    my $h;\n\
    \    my $i;\n    my $j;\n    my $k;\n    my $l;\n    my", "my $str = shift;\n\
    \    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n\
    \    my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while\
    \ ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n   \
    \         return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    return 1 if length($str) == 0;\n    return 1\
    \ if length($str) == 1;\n    return 1 if length($str) == 2 && substr($str, 0,\
    \ 1) eq substr($str, 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if $str eq reverse\
    \ $str;\n    return \"\";\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    my\
    \ $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n         \
    \   return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n\
    }", "my $str = shift;\n    return $str eq reverse $str;\n}", "my $str = shift;\n\
    \    return 1 if length($str) == 0;\n    return 1 if length($str) == 1;\n    return\
    \ 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1);\n    return\
    \ \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return 1 if $str eq reverse\
    \ $str;\n    return \"\";\n}", "my $str = shift;\n    return 1 if length($str)\
    \ == 0;\n    return 1 if length($str) == 1;\n    return \"\" if substr($str, 0,\
    \ 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1)\
    \ ne substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return 1 if $str\
    \ eq \"\";\n    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str\
    \ = shift;\n    return \"\" if (length($str) < 2);\n    my $len = length($str);\n\
    \    my $mid = int($len / 2);\n    my $i = 0;\n    while ($i < $mid) {\n     \
    \   if (substr($str, $i, 1) ne substr($str, $len - $i - 1, 1)) {\n           \
    \ return \"\";\n        }\n        $i++;\n    }\n    return 1;\n}", "my $str =\
    \ shift;\n    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str\
    \ = shift;\n    return 1 if length($str) <= 1;\n    return \"\" if substr($str,\
    \ 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq reverse $str;\n    return\
    \ \"\";\n}", "my $str = shift;\n    return 1 if (length($str) == 0);\n    return\
    \ 1 if (length($str) == 1);\n    return \"\" if (substr($str, 0, 1) ne substr($str,\
    \ -1, 1));\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}",
  "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j = $len\
    \ - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n  \
    \  my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if $str eq \"\";\n    return 1 if $str eq reverse $str;\n    return \"\";\n\
    }", "my $str = shift;\n    return $str eq reverse $str;\n}", "my $str = shift;\n\
    \    my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while\
    \ ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n   \
    \         return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n   \
    \ my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne\
    \ substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    return 1 if $len == 0;\n    return 1 if $len == 1;\n    return 1 if $len\
    \ == 2 && substr($str, 0, 1) eq substr($str, 1, 1);\n    return \"\" if substr($str,\
    \ 0, 1) ne substr($str, $len - 1, 1);\n    return is_palindrome(substr($str, 1,\
    \ $len - 2));\n}", "my $str = shift;\n    return $str eq reverse $str;\n}", "my\
    \ $string = shift;\n    return 1 if $string eq reverse $string;\n    return \"\
    \";\n}", "my $str = shift;\n    return 1 if (length($str) == 0);\n    return 1\
    \ if (length($str) == 1);\n    return 1 if (length($str) == 2 && substr($str,\
    \ 0, 1) eq substr($str, 1, 1));\n    return \"\" if (substr($str, 0, 1) ne substr($str,\
    \ -1, 1));\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}",
  "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j = $len\
    \ - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    return 1 if length($str) ==\
    \ 0;\n    return 1 if length($str) == 1;\n    return 1 if length($str) == 2 &&\
    \ substr($str, 0, 1) eq substr($str, 1, 1);\n    return \"\" if substr($str, 0,\
    \ 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    my $len = length($str);\n    my $half = int($len\
    \ / 2);\n    for (my $i = 0; $i < $half; $i++) {\n        if (substr($str, $i,\
    \ 1) ne substr($str, $len - $i - 1, 1)) {\n            return \"\";\n        }\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    return 1 if length($str) ==\
    \ 0;\n    return 1 if length($str) == 1;\n    return 0 if substr($str, 0, 1) ne\
    \ substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if length($str) == 0;\n    return\
    \ 1 if length($str) == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $string = shift;\n    if (length($string) == 0) {\n        return 1;\n    }\n\
    \    if (substr($string, 0, 1) eq substr($string, -1, 1)) {\n        return is_palindrome(substr($string,\
    \ 1, -1));\n    }\n    return \"\";\n}", "my $string = shift;\n    my $len = length($string);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($string,\
    \ $i, 1) ne substr($string, $j, 1)) {\n            return \"\";\n        }\n \
    \       $i++;\n        $j--;\n    }\n    return 1;\n}", "my $string = shift;\n\
    \    return 1 if $string eq reverse $string;\n    return \"\";\n}", "my $str =\
    \ shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n\
    \    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1))\
    \ {\n            return \"\";\n        }\n        $i++;\n        $j--;\n    }\n\
    \    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n    my $i\
    \ = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n    my\
    \ $len = length($str);\n    my $half = int($len / 2);\n    my $i = 0;\n    while\
    \ ($i < $half) {\n        if (substr($str, $i, 1) ne substr($str, $len - $i -\
    \ 1, 1)) {\n            return \"\";\n        }\n        $i++;\n    }\n    return\
    \ 1;\n}", "my $string = shift;\n    return 1 if $string eq reverse $string;\n\
    \    return \"\";\n}", "my $string = shift;\n    return $string eq reverse $string;\n\
    }", "my $str = shift;\n    return \"\" if (length($str) < 2);\n    return 1 if\
    \ (length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1));\n    return\
    \ 1 if (length($str) == 3 && substr($str, 0, 1) eq substr($str, 2, 1));\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2)) if (substr($str, 0, 1) eq substr($str,\
    \ length($str) - 1, 1));\n    return \"\";\n}", "my $str = shift;\n    my $len\
    \ = length($str);\n    if ($len == 0) {\n        return 1;\n    }\n    my $i =\
    \ 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i,\
    \ 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return \"\" if\
    \ $str eq \"\";\n    return 1 if length($str) == 1;\n    return $str eq reverse($str);\n\
    }", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j\
    \ = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "my $string = shift;\n    return 1 if $string eq reverse\
    \ $string;\n    return \"\";\n}", "my $str = shift;\n    return 1 if length($str)\
    \ == 0;\n    return 1 if length($str) == 1;\n    return \"\" if substr($str, 0,\
    \ 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq reverse $str;\n    return\
    \ \"\";\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1)\
    \ ne substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return 1 if length($str)\
    \ == 0;\n    return 1 if length($str) == 1;\n    return 1 if length($str) == 2\
    \ && substr($str, 0, 1) eq substr($str, 1, 1);\n    return \"\" if substr($str,\
    \ 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return \"\"\
    \ if length($str) == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    my $len = length($str);\n    return 1 if $len == 0;\n   \
    \ return 1 if $len == 1;\n    return 1 if $len == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str, $len - 1, 1);\n\
    \    return is_palindrome(substr($str, 1, $len - 2));\n}", "my $str = shift;\n\
    \    return 1 if length($str) == 0;\n    return 1 if length($str) == 1;\n    return\
    \ 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1);\n    return\
    \ \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return $str eq reverse $str;\n\
    }", "my $str = shift;\n    return 1 if $str eq reverse $str;\n    return \"\"\
    ;\n}", "my $str = shift;\n    return 0 if (!$str);\n    return 1 if (length($str)\
    \ == 1);\n    return $str eq reverse($str);\n}", "my $str = shift;\n    return\
    \ 1 if length($str) == 0;\n    return 1 if length($str) == 1;\n    return \"\"\
    \ if substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my ($str) = @_;\n    my\
    \ $len = length($str);\n    my $half = int($len / 2);\n    my $i = 0;\n    while\
    \ ($i < $half) {\n        if (substr($str, $i, 1) ne substr($str, $len - $i -\
    \ 1, 1)) {\n            return \"\";\n        }\n        $i++;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n   \
    \ my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne\
    \ substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if length($str) == 0;\n    return 1 if length($str) == 1;\n    return 1 if\
    \ length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1);\n    return \"\
    \" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return \"\" if !defined $str;\n\
    \    return 1 if $str eq \"\";\n    return 1 if $str eq reverse $str;\n    return\
    \ \"\";\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1)\
    \ ne substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $string = shift;\n    my $len =\
    \ length($string);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j)\
    \ {\n        if (substr($string, $i, 1) ne substr($string, $j, 1)) {\n       \
    \     return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n   \
    \ my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne\
    \ substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    my\
    \ $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n         \
    \   return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n\
    }", "my $str = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str)\
    \ == 1;\n    return 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $string = shift;\n\
    \    my $length = length($string);\n    my $half = int($length / 2);\n    my $i\
    \ = 0;\n    while ($i < $half) {\n        if (substr($string, $i, 1) ne substr($string,\
    \ $length - $i - 1, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \    }\n    return 1;\n}", "my $string = shift;\n    my $length = length($string);\n\
    \    my $half_length = int($length / 2);\n    my $i = 0;\n    while ($i < $half_length)\
    \ {\n        if (substr($string, $i, 1) ne substr($string, $length - $i - 1, 1))\
    \ {\n            return \"\";\n        }\n        $i++;\n    }\n    return 1;\n\
    }", "my $str = shift;\n    return \"\" if (length($str) < 2);\n    return 1 if\
    \ (length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1));\n    return\
    \ 1 if (length($str) == 3 && substr($str, 0, 1) eq substr($str, 2, 1));\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2)) if (substr($str, 0, 1) eq substr($str,\
    \ length($str) - 1, 1));\n    return \"\";\n}", "my $str = shift;\n    return\
    \ 1 if $str eq \"\";\n    return 1 if $str eq reverse $str;\n    return \"\";\n\
    }", "my $str = shift;\n    my $len = length($str);\n    return 1 if $len == 0;\n\
    \    return 1 if $len == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ $len - 1, 1);\n    return is_palindrome(substr($str, 1, $len - 2));\n}", "my\
    \ $str = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str)\
    \ == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $half = int($len / 2);\n    for (my $i = 0; $i < $half; $i++) {\n    \
    \    if (substr($str, $i, 1) ne substr($str, $len - $i - 1, 1)) {\n          \
    \  return \"\";\n        }\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 0 if !$str;\n    return 1 if length($str) == 1;\n    return 0 if substr($str,\
    \ 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return $str\
    \ if length($str) == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $string = shift;\n    my $len = length($string);\n    my $i = 0;\n    my $j\
    \ = $len - 1;\n    while ($i < $j) {\n        if (substr($string, $i, 1) ne substr($string,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n  \
    \  my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if $str eq \"\";\n    return 1 if $str eq reverse $str;\n    return \"\";\n\
    }", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j\
    \ = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n  \
    \  my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    my\
    \ $len = length($str);\n    my $i;\n    for ($i = 0; $i < $len / 2; $i++) {\n\
    \        return \"\" if (substr($str, $i, 1) ne substr($str, $len - $i - 1, 1));\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n\
    \    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n\
    \    my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while\
    \ ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n   \
    \         return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    return 1 if (length($str) == 0);\n    return\
    \ 1 if (length($str) == 1);\n    return 1 if (length($str) == 2 && substr($str,\
    \ 0, 1) eq substr($str, 1, 1));\n    return \"\" if (substr($str, 0, 1) ne substr($str,\
    \ -1, 1));\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}",
  "my ($str) = @_;\n    my $len = length($str);\n    my $i = 0;\n    my $j = $len\
    \ - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n  \
    \  my $i;\n    my $j;\n    my $is_palindrome = 1;", "my $str = shift;\n    my\
    \ $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i <\
    \ $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n         \
    \   return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n\
    }", "my $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if $str eq\
    \ reverse $str;\n    return \"\";\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n    return\
    \ 1 if $str eq \"\";\n    return 1 if $str eq reverse $str;\n    return \"\";\n\
    }", "my $str = shift;\n    return \"\" if $str eq \"\";\n    return 1 if length($str)\
    \ == 1;\n    return 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $string = shift;\n\
    \    my $length = length($string);\n    my $half_length = int($length / 2);\n\
    \    my $is_palindrome = 1;\n    for (my $i = 0; $i < $half_length; $i++) {\n\
    \        my $first_char = substr($string, $i, 1);\n        my $last_char = substr($string,\
    \ $length - $i - 1, 1);\n        if ($first_char ne $last_char) {\n          \
    \  $is_palindrome = \"\";\n            last;\n        }\n    }\n    return $is_palindrome;\n\
    }", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j\
    \ = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str,\
    \ $j, 1)) {\n            return \"\";\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return 1;\n}", "my $str = shift;\n    return 1 if (length($str) <=\
    \ 1);\n    return \"\" if (substr($str, 0, 1) ne substr($str, -1, 1));\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n \
    \   my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while\
    \ ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n   \
    \         return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n   \
    \ my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1) ne\
    \ substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return 1 if $str\
    \ eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n    return \"\" if\
    \ length($str) < 2;\n    return 1 if length($str) == 2 && substr($str, 0, 1) eq\
    \ substr($str, 1, 1);\n    return 1 if length($str) == 3 && substr($str, 0, 1)\
    \ eq substr($str, 2, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2)) if substr($str, 0, 1) eq substr($str, length($str) - 1, 1);\n    return\
    \ \"\";\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if\
    \ $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n    return 0\
    \ if length($str) <= 1;\n    return 1 if length($str) == 2 && substr($str, 0,\
    \ 1) eq substr($str, 1, 1);\n    return 1 if length($str) == 3 && substr($str,\
    \ 0, 1) eq substr($str, 2, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2)) if substr($str, 0, 1) eq substr($str, length($str) - 1, 1);\n    return\
    \ \"\";\n}", "my $str = shift;\n    return 1 if $str eq reverse $str;\n    return\
    \ \"\";\n}", "my $str = shift;\n    return 0 if $str eq \"\";\n    return 1 if\
    \ length($str) == 1;\n    return 0 if substr($str, 0, 1) ne substr($str, -1, 1);\n\
    \    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str =\
    \ shift;\n    return \"\" if (length($str) == 0);\n    return 1 if (length($str)\
    \ == 1);\n    return \"\" if (substr($str, 0, 1) ne substr($str, -1, 1));\n  \
    \  return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n\
    \    return 1 if length($str) <= 1;\n    return \"\" if substr($str, 0, 1) ne\
    \ substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my ($str) = @_;\n    my $len = length($str);\n    my $i;\n    for\
    \ ($i = 0; $i < $len / 2; $i++) {\n        if (substr($str, $i, 1) ne substr($str,\
    \ $len - $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    return 1 if (length($str) <= 1);\n    return\
    \ \"\" if (substr($str, 0, 1) ne substr($str, -1, 1));\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return 1 if length($str)\
    \ == 0;\n    return 1 if length($str) == 1;\n    return \"\" if substr($str, 0,\
    \ 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 0 if length($str) == 0;\n    return\
    \ 1 if length($str) == 1;\n    return 0 if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    return $str eq reverse $str;\n}", "my $str = shift;\n   \
    \ my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i\
    \ < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n       \
    \     return \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return\
    \ 1;\n}", "my $str = shift;\n    return 1 if length($str) == 0;\n    return 1\
    \ if length($str) == 1;\n    return 1 if length($str) == 2 && substr($str, 0,\
    \ 1) eq substr($str, 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str)\
    \ == 1;\n    return 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $string = shift;\n\
    \    return 1 if $string eq reverse $string;\n    return \"\";\n}", "my $str =\
    \ shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n\
    \    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1))\
    \ {\n            return \"\";\n        }\n        $i++;\n        $j--;\n    }\n\
    \    return 1;\n}", "my $str = shift;\n    return 1 if $str eq reverse $str;\n\
    \    return \"\";\n}", "my $str = shift;\n    return $str eq reverse $str;\n}",
  "my $str = shift;\n    my $len = length($str);\n    my $half = int($len / 2);\n\
    \    for (my $i = 0; $i < $half; $i++) {\n        return \"\" if (substr($str,\
    \ $i, 1) ne substr($str, $len - $i - 1, 1));\n    }\n    return 1;\n}", "my $str\
    \ = shift;\n    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $string\
    \ = shift;\n    my $length = length($string);\n    my $half_length = int($length\
    \ / 2);\n    my $is_palindrome = 1;\n    for (my $i = 0; $i < $half_length; $i++)\
    \ {\n        if (substr($string, $i, 1) ne substr($string, $length - $i - 1, 1))\
    \ {\n            $is_palindrome = \"\";\n            last;\n        }\n    }\n\
    \    return $is_palindrome;\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if length($str) == 0;\n    return 1 if length($str) == 1;\n    return 1 if\
    \ length($str) == 2 && $str =~ /^(.)\\1$/;\n    return \"\" if length($str) ==\
    \ 2 && $str !~ /^(.)\\1$/;\n    return \"\" if length($str) == 3 && $str !~ /^(.)\\\
    1$/;\n    return 1 if length($str) == 3 && $str =~ /^(.)\\1$/;\n    return \"\"\
    \ if length($str) == 4 && $str !~ /^(.)\\1$/;\n    return \"\" if length($str)\
    \ == 4 && $str =~ /^(.)\\1$/;\n    return \"\" if length($str) == 5 && $str !~\
    \ /^(.)\\1$/;\n    return \"\" if length($str) == 5 && $str =~ /^(.)\\1$/;\n \
    \   return \"\" if length($str) == 6 && $str !~ /^(.)\\1$/;\n    return \"\" if\
    \ length($str) == 6 && $str =~ /^(.)\\1$/;\n    return \"\" if length($str) ==\
    \ 7 && $str !~ /^(.)\\1$/;\n    return \"\" if length($str) == 7 && $str =~ /^(.)\\\
    1$/;\n    return \"\" if length($str) == 8 && $str !~ /^(.)\\1$/;\n    return\
    \ \"\" if length($str) == 8 && $str =~ /^(.)\\1$/;\n    return \"\" if length($str)\
    \ == 9 && $str !~ /^(.)\\1$/;\n    return \"\" if length($str) == 9 && $str =~\
    \ /^(.)\\1$/;\n    return \"\" if length($str) == 10 && $str !~ /^(.)\\1$/;\n\
    \    return \"\" if length($str) == 10 && $str =~ /^(.)\\1$/;\n    return \"\"\
    \ if length($str) == 11 && $str !~ /^(.)\\1$/;\n    return \"\" if length", "my\
    \ $str = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str)\
    \ == 1;\n    return 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n \
    \   return 1 if (length($str) == 0);\n    return 1 if (length($str) == 1);\n \
    \   return 1 if (length($str) == 2 && substr($str, 0, 1) eq substr($str, 1, 1));\n\
    \    return \"\" if (substr($str, 0, 1) ne substr($str, -1, 1));\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return 1 if (length($str)\
    \ == 0);\n    return 1 if (length($str) == 1);\n    return 1 if (length($str)\
    \ == 2 && substr($str, 0, 1) eq substr($str, 1, 1));\n    return \"\" if (substr($str,\
    \ 0, 1) ne substr($str, -1, 1));\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if\
    \ $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n    return \"\
    \" if !$str;\n    return 1 if length($str) == 1;\n    return \"\" if substr($str,\
    \ 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    my $len = length($str);\n    my $i = 0;\n\
    \    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str, $i, 1)\
    \ ne substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return \"\" if\
    \ (length($str) == 0);\n    return 1 if (length($str) == 1);\n    return \"\"\
    \ if (substr($str, 0, 1) ne substr($str, -1, 1));\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $i;\n    my $j;\n    for ($i = 0, $j = $len - 1; $i < $len / 2; $i++,\
    \ $j--) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n       \
    \     return \"\";\n        }\n    }\n    return 1;\n}", "my $str = shift;\n \
    \   my $len = length($str);\n    my $i;\n    for ($i = 0; $i < $len/2; $i++) {\n\
    \        if (substr($str, $i, 1) ne substr($str, $len-$i-1, 1)) {\n          \
    \  return \"\";\n        }\n    }\n    return 1;\n}", "my $str = shift;\n    my\
    \ $len = length($str);\n    my $half = int($len / 2);\n    my $i = 0;\n    my\
    \ $j = $len - 1;\n    while ($i < $half) {\n        if (substr($str, $i, 1) ne\
    \ substr($str, $j, 1)) {\n            return \"\";\n        }\n        $i++;\n\
    \        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return 1 if $str\
    \ eq \"\";\n    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str\
    \ = shift;\n    return $str eq reverse $str;\n}", "my $str = shift;\n    my $len\
    \ = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i < $j)\
    \ {\n        if (substr($str, $i, 1) ne substr($str, $j, 1)) {\n            return\
    \ \"\";\n        }\n        $i++;\n        $j--;\n    }\n    return 1;\n}", "my\
    \ $s = shift;\n    my $len = length($s);\n    my $i = 0;\n    my $j = $len - 1;\n\
    \    while ($i < $j) {\n        if (substr($s, $i, 1) ne substr($s, $j, 1)) {\n\
    \            return \"\";\n        }\n        $i++;\n        $j--;\n    }\n  \
    \  return 1;\n}", "my $str = shift;\n    return 1 if length($str) <= 1;\n    return\
    \ \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    return 1 if $len == 0;\n    my $i = 0;\n    my $j = $len - 1;\n    while\
    \ ($i < $j) {\n        return \"\" if substr($str, $i, 1) ne substr($str, $j,\
    \ 1);\n        $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n\
    \    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $string = shift;\n\
    \    return \"\" unless $string;\n    return 1 if length($string) == 1;\n    return\
    \ \"\" unless substr($string, 0, 1) eq substr($string, -1, 1);\n    return is_palindrome(substr($string,\
    \ 1, -1));\n}", "my $string = shift;\n    my $length = length($string);\n    my\
    \ $half_length = int($length / 2);\n    my $i = 0;\n    while ($i < $half_length)\
    \ {\n        if (substr($string, $i, 1) ne substr($string, $length - $i - 1, 1))\
    \ {\n            return \"\";\n        }\n        $i++;\n    }\n    return 1;\n\
    }", "my $str = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str)\
    \ == 1;\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n \
    \   return 1 if $str eq \"\";\n    return 1 if $str eq reverse $str;\n    return\
    \ \"\";\n}", "my $str = shift;\n    return 0 if length($str) == 0;\n    return\
    \ 1 if length($str) == 1;\n    return 0 if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    return 0 if length($str) < 2;\n    return 1 if length($str)\
    \ == 2 && substr($str, 0, 1) eq substr($str, 1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2)) if substr($str, 0, 1) eq substr($str, length($str) - 1,\
    \ 1);\n    return 0;\n}", "my $str = shift;\n    return 1 if length($str) == 0;\n\
    \    return 1 if length($str) == 1;\n    return 1 if length($str) == 2 && substr($str,\
    \ 0, 1) eq substr($str, 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if $str eq reverse\
    \ $str;\n    return \"\";\n}", "my $str = shift;\n    return 1 if $str eq reverse\
    \ $str;\n    return \"\";\n}", "my $str = shift;\n    my $len = length($str);\n\
    \    my $half = int($len / 2);\n    my $i = 0;\n    while ($i < $half) {\n   \
    \     if (substr($str, $i, 1) ne substr($str, $len - $i - 1, 1)) {\n         \
    \   return \"\";\n        }\n        $i++;\n    }\n    return 1;\n}", "my $str\
    \ = shift;\n    return 1 if $str eq reverse $str;\n    return \"\";\n}", "my $str\
    \ = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str) ==\
    \ 1;\n    return 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n \
    \   my $len = length($str);\n    my $half = int($len / 2);\n    my $i = 0;\n \
    \   while ($i < $half) {\n        if (substr($str, $i, 1) ne substr($str, $len\
    \ - $i - 1, 1)) {\n            return \"\";\n        }\n        $i++;\n    }\n\
    \    return 1;\n}", "my $str = shift;\n    my $len = length($str);\n    my $i\
    \ = 0;\n    my $j = $len - 1;\n    while ($i < $j) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $j, 1)) {\n            return \"\";\n        }\n    \
    \    $i++;\n        $j--;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if $str eq \"\";\n    return 1 if $str eq reverse $str;\n    return \"\";\n\
    }", "my $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if $str eq\
    \ reverse $str;\n    return \"\";\n}", "my $str = shift;\n    return 1 if $str\
    \ eq '';\n    return 1 if $str eq reverse $str;\n    return '';\n}", "my $str\
    \ = shift;\n    my $len = length($str);\n    my $i;\n    for ($i = 0; $i < $len\
    \ / 2; $i++) {\n        if (substr($str, $i, 1) ne substr($str, $len - $i - 1,\
    \ 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n}", "my $str\
    \ = shift;\n    return 1 if length($str) == 0;\n    return 1 if length($str) ==\
    \ 1;\n    return 1 if length($str) == 2 && substr($str, 0, 1) eq substr($str,\
    \ 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return\
    \ is_palindrome(substr($str, 1, length($str) - 2));\n}", "my $str = shift;\n \
    \   return 1 if $str eq \"\";\n    return $str if length($str) == 1;\n    return\
    \ \"\" if substr($str, 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str,\
    \ 1, length($str) - 2));\n}", "my $str = shift;\n    return 1 if $str eq reverse\
    \ $str;\n    return \"\";\n}", "my $string = shift;\n    my $length = length($string);\n\
    \    my $half = int($length / 2);\n    my $result = 1;\n    for (my $i = 0; $i\
    \ < $half; $i++) {\n        if (substr($string, $i, 1) ne substr($string, $length\
    \ - $i - 1, 1)) {\n            $result = \"\";\n            last;\n        }\n\
    \    }\n    return $result;\n}", "my $str = shift;\n    return 1 if $str eq \"\
    \";\n    return \"\" if length($str) == 1;\n    return \"\" if substr($str, 0,\
    \ 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if\
    \ $str eq reverse $str;\n    return \"\";\n}", "my $str = shift;\n    my $len\
    \ = length($str);\n    my $i = 0;\n    while ($i < $len/2) {\n        if (substr($str,\
    \ $i, 1) ne substr($str, $len - $i - 1, 1)) {\n            return \"\";\n    \
    \    }\n        $i++;\n    }\n    return 1;\n}", "my $str = shift;\n    return\
    \ 1 if length($str) == 0;\n    return 1 if length($str) == 1;\n    return 1 if\
    \ substr($str, 0, 1) eq substr($str, -1, 1) && is_palindrome(substr($str, 1, -1));\n\
    \    return \"\";\n}", "my $str = shift;\n    my $len = length($str);\n    for\
    \ (my $i = 0; $i < $len / 2; $i++) {\n        return \"\" if (substr($str, $i,\
    \ 1) ne substr($str, $len - $i - 1, 1));\n    }\n    return 1;\n}", "my $str =\
    \ shift;\n    my $len = length($str);\n    my $i;\n    for ($i = 0; $i < $len\
    \ / 2; $i++) {\n        if (substr($str, $i, 1) ne substr($str, $len - $i - 1,\
    \ 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n}", "my $str\
    \ = shift;\n    my $len = length($str);\n    my $i = 0;\n    my $j = $len - 1;\n\
    \    while ($i < $j) {\n        if (substr($str, $i, 1) ne substr($str, $j, 1))\
    \ {\n            return \"\";\n        }\n        $i++;\n        $j--;\n    }\n\
    \    return 1;\n}", "my $str = shift;\n    return 1 if $str eq reverse $str;\n\
    \    return \"\";\n}", "my $str = shift;\n    return 1 if length($str) == 0;\n\
    \    return 1 if length($str) == 1;\n    return 1 if length($str) == 2 && substr($str,\
    \ 0, 1) eq substr($str, 1, 1);\n    return \"\" if substr($str, 0, 1) ne substr($str,\
    \ -1, 1);\n    return is_palindrome(substr($str, 1, length($str) - 2));\n}", "my\
    \ $str = shift;\n    my $len = length($str);\n    my $i;\n    for ($i = 0; $i\
    \ < $len / 2; $i++) {\n        if (substr($str, $i, 1) ne substr($str, $len -\
    \ $i - 1, 1)) {\n            return \"\";\n        }\n    }\n    return 1;\n}",
  "my $str = shift;\n    return 1 if length($str) <= 1;\n    return \"\" if substr($str,\
    \ 0, 1) ne substr($str, -1, 1);\n    return is_palindrome(substr($str, 1, length($str)\
    \ - 2));\n}", "my $str = shift;\n    return 1 if $str eq reverse $str;\n    return\
    \ \"\";\n}", "my $str = shift;\n    return 1 if $str eq \"\";\n    return 1 if\
    \ $str eq reverse $str;\n    return \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
