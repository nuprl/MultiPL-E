name: HumanEval_6_parse_nested_parens
language: pl
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parse_nested_parens;\n\
  \        if(eq_deeply($candidate->(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  () (()) ((())) (((())))\"),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()(())((())))\"),[4]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my $str = shift;\n    my @groups = split(/\\s+/, $str);\n    my @result;\n\
    \    for my $group (@groups) {\n        my $max_level = 0;\n        my $level\
    \ = 0;\n        for my $c (split(//, $group)) {\n            if ($c eq '(') {\n\
    \                $level++;\n                $max_level = $level if $level > $max_level;\n\
    \            } elsif ($c eq ')') {\n                $level--;\n            }\n\
    \        }\n        push @result, $max_level;\n    }\n    return @result;\n}",
  "my ($parens) = @_;\n    my @parens_list = split(/\\s+/, $parens);\n    my @max_nesting_list;\n\
    \    for my $parens (@parens_list) {\n        my $max_nesting = 0;\n        my\
    \ $nesting = 0;\n        for my $char (split(//, $parens)) {\n            if ($char\
    \ eq '(') {\n                $nesting++;\n                $max_nesting = $nesting\
    \ if $nesting > $max_nesting;\n            } elsif ($char eq ')') {\n        \
    \        $nesting--;\n            }\n        }\n        push @max_nesting_list,\
    \ $max_nesting;\n    }\n    return @max_nesting_list;\n}", "my $str = shift;\n\
    \    my @groups = split /\\s+/, $str;\n    my @max_levels;\n    foreach my $group\
    \ (@groups) {\n        my $level = 0;\n        my $max_level = 0;\n        foreach\
    \ my $char (split //, $group) {\n            if ($char eq '(') {\n           \
    \     $level++;\n                $max_level = $level if $level > $max_level;\n\
    \            }\n            elsif ($char eq ')') {\n                $level--;\n\
    \            }\n        }\n        push @max_levels, $max_level;\n    }\n    return\
    \ @max_levels;\n}", "my $str = shift;\n    my @parens = split /\\s+/, $str;\n\
    \    my @max_nesting;\n    foreach my $paren (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $char (split //, $paren)\
    \ {\n            if ($char eq '(') {\n                $nesting++;\n          \
    \      $max_nesting = $nesting if $nesting > $max_nesting;\n            }\n  \
    \          elsif ($char eq ')') {\n                $nesting--;\n            }\n\
    \        }\n        push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n\
    }", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @max_nesting;\n\
    \    foreach my $p (@parens) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        foreach my $c (split(//, $p)) {\n            if ($c eq '(') {\n\
    \                $nesting++;\n                $max_nesting = $nesting if $nesting\
    \ > $max_nesting;\n            } elsif ($c eq ')') {\n                $nesting--;\n\
    \            }\n        }\n        push @max_nesting, $max_nesting;\n    }\n \
    \   return @max_nesting;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_nesting;\n    foreach my $paren (@parens) {\n    \
    \    my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } elsif ($char eq \")\") {\n   \
    \             $nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "my ($parens) = @_;\n \
    \   my @parens_list = split(/\\s+/, $parens);\n    my @max_nesting_list;\n   \
    \ foreach my $parens (@parens_list) {\n        my $max_nesting = 0;\n        my\
    \ $current_nesting = 0;\n        my @parens_array = split(//, $parens);\n    \
    \    foreach my $paren (@parens_array) {\n            if ($paren eq \"(\") {\n\
    \                $current_nesting++;\n            }\n            elsif ($paren\
    \ eq \")\") {\n                $current_nesting--;\n            }\n          \
    \  if ($current_nesting > $max_nesting) {\n                $max_nesting = $current_nesting;\n\
    \            }\n        }\n        push(@max_nesting_list, $max_nesting);\n  \
    \  }\n    return @max_nesting_list;\n}", "my ($parens) = @_;\n    my @parens =\
    \ split(/\\s+/, $parens);\n    my @max_nesting;\n    foreach my $paren (@parens)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        for (my $i\
    \ = 0; $i < length($paren); $i++) {\n            if (substr($paren, $i, 1) eq\
    \ \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif (substr($paren, $i, 1) eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "my $str = shift;\n    my @groups = split /\\s+/,\
    \ $str;\n    my @max_levels;\n    foreach my $group (@groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $c (split //, $group) {\n\
    \            if ($c eq '(') {\n                $level++;\n                $max_level\
    \ = $level if $level > $max_level;\n            } elsif ($c eq ')') {\n      \
    \          $level--;\n            }\n        }\n        push @max_levels, $max_level;\n\
    \    }\n    return @max_levels;\n}", "my $parens = shift;\n    my @parens_list\
    \ = split(/\\s+/, $parens);\n    my @nested_parens;\n    foreach my $paren (@parens_list)\
    \ {\n        my $nested_paren = 0;\n        my $max_nested_paren = 0;\n      \
    \  foreach my $char (split(//, $paren)) {\n            if ($char eq \"(\") {\n\
    \                $nested_paren++;\n                if ($nested_paren > $max_nested_paren)\
    \ {\n                    $max_nested_paren = $nested_paren;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $nested_paren--;\n  \
    \          }\n        }\n        push @nested_parens, $max_nested_paren;\n   \
    \ }\n    return @nested_parens;\n}", "my ($parens) = @_;\n    my @parens_list\
    \ = split /\\s+/, $parens;\n    my @max_nesting_list;\n    for my $parens (@parens_list)\
    \ {\n        my $max_nesting = 0;\n        my $current_nesting = 0;\n        for\
    \ my $char (split //, $parens) {\n            if ($char eq '(') {\n          \
    \      $current_nesting++;\n                $max_nesting = $current_nesting if\
    \ $current_nesting > $max_nesting;\n            } elsif ($char eq ')') {\n   \
    \             $current_nesting--;\n            }\n        }\n        push @max_nesting_list,\
    \ $max_nesting;\n    }\n    return @max_nesting_list;\n}", "my $str = shift;\n\
    \    my @groups = split /\\s+/, $str;\n    my @ret;\n    for my $group (@groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        for my $char\
    \ (split //, $group) {\n            if ($char eq '(') {\n                $nesting++;\n\
    \                $max_nesting = $nesting if $nesting > $max_nesting;\n       \
    \     } elsif ($char eq ')') {\n                $nesting--;\n            }\n \
    \       }\n        push @ret, $max_nesting;\n    }\n    return @ret;\n}", "my\
    \ ($str) = @_;\n    my @groups = split /\\s+/, $str;\n    my @levels;\n    for\
    \ my $group (@groups) {\n        my $level = 0;\n        my $max_level = 0;\n\
    \        for my $c (split //, $group) {\n            if ($c eq '(') {\n      \
    \          $level++;\n            } elsif ($c eq ')') {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @levels, $max_level;\n    }\n    return @levels;\n}", "my\
    \ $string = shift;\n    my @parens = split /\\s+/, $string;\n    my @result;\n\
    \    for my $paren (@parens) {\n        my $max_level = 0;\n        my $level\
    \ = 0;\n        for my $char (split //, $paren) {\n            if ($char eq '(')\
    \ {\n                $level++;\n                $max_level = $level if $level\
    \ > $max_level;\n            } elsif ($char eq ')') {\n                $level--;\n\
    \            }\n        }\n        push @result, $max_level;\n    }\n    return\
    \ @result;\n}", "my ($parens) = @_;\n    my @parens = split /\\s+/, $parens;\n\
    \    my @max_nesting;\n    for my $paren (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        for my $char (split //, $paren) {\n\
    \            if ($char eq '(') {\n                $nesting++;\n              \
    \  $max_nesting = $nesting if $nesting > $max_nesting;\n            }\n      \
    \      elsif ($char eq ')') {\n                $nesting--;\n            }\n  \
    \      }\n        push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n\
    }", "my $parens = shift;\n    my @parens_list = split(/\\s+/, $parens);\n    my\
    \ @result;\n    foreach my $paren (@parens_list) {\n        my $max_level = 0;\n\
    \        my $level = 0;\n        foreach my $char (split(//, $paren)) {\n    \
    \        if ($char eq \"(\") {\n                $level++;\n            } elsif\
    \ ($char eq \")\") {\n                $level--;\n            }\n            $max_level\
    \ = $level if $level > $max_level;\n        }\n        push @result, $max_level;\n\
    \    }\n    return @result;\n}", "my $parens = shift;\n    my @parens_arr = split(/\\\
    s+/, $parens);\n    my @result;\n    foreach my $paren (@parens_arr) {\n     \
    \   my $max_depth = 0;\n        my $depth = 0;\n        foreach my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $depth++;\n \
    \               $max_depth = $depth if $depth > $max_depth;\n            } elsif\
    \ ($char eq \")\") {\n                $depth--;\n            }\n        }\n  \
    \      push @result, $max_depth;\n    }\n    return @result;\n}", "my $str = shift;\n\
    \    my @parens = split(/\\s+/, $str);\n    my @levels;\n    foreach my $paren\
    \ (@parens) {\n        my $level = 0;\n        my $max_level = 0;\n        foreach\
    \ my $char (split(//, $paren)) {\n            if ($char eq \"(\") {\n        \
    \        $level++;\n            } elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @levels, $max_level;\n    }\n    return @levels;\n}", "my\
    \ $str = shift;\n    my @parens = split /\\s+/, $str;\n    my @result;\n    for\
    \ my $paren (@parens) {\n        my $max_level = 0;\n        my $level = 0;\n\
    \        for my $c (split //, $paren) {\n            if ($c eq '(') {\n      \
    \          $level++;\n                $max_level = $level if $level > $max_level;\n\
    \            } elsif ($c eq ')') {\n                $level--;\n            }\n\
    \        }\n        push @result, $max_level;\n    }\n    return @result;\n}",
  "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @nested_parens;\n\
    \    foreach my $paren (@parens) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \        }\n        push(@nested_parens, $max_nesting);\n    }\n    return @nested_parens;\n\
    }", "my $line = shift;\n    my @parens = split / /, $line;\n    my @max_nesting;\n\
    \    foreach my $paren (@parens) {\n        my $max_nesting = 0;\n        my $curr_nesting\
    \ = 0;\n        foreach my $char (split //, $paren) {\n            if ($char eq\
    \ '(') {\n                $curr_nesting++;\n                $max_nesting = $curr_nesting\
    \ if $curr_nesting > $max_nesting;\n            }\n            elsif ($char eq\
    \ ')') {\n                $curr_nesting--;\n            }\n        }\n       \
    \ push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n}", "my $parens\
    \ = shift;\n    my @parens_list = split(/\\s+/, $parens);\n    my @max_depth;\n\
    \    for my $parens (@parens_list) {\n        my $depth = 0;\n        my $max_depth\
    \ = 0;\n        for my $char (split(//, $parens)) {\n            if ($char eq\
    \ '(') {\n                $depth++;\n                $max_depth = $depth if $depth\
    \ > $max_depth;\n            } elsif ($char eq ')') {\n                $depth--;\n\
    \            }\n        }\n        push @max_depth, $max_depth;\n    }\n    return\
    \ @max_depth;\n}", "my ($input) = @_;\n    my @output;\n    my @groups = split(/\
    \ /, $input);\n    foreach my $group (@groups) {\n        my $max_nesting = 0;\n\
    \        my $nesting = 0;\n        foreach my $char (split(//, $group)) {\n  \
    \          if ($char eq \"(\") {\n                $nesting++;\n              \
    \  if ($nesting > $max_nesting) {\n                    $max_nesting = $nesting;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@output, $max_nesting);\n    }\n    return\
    \ @output;\n}", "my ($parens) = @_;\n    my @parens = split /\\s+/, $parens;\n\
    \    my @levels;\n    for my $paren (@parens) {\n        my $level = 0;\n    \
    \    my $max_level = 0;\n        for my $char (split //, $paren) {\n         \
    \   if ($char eq '(') {\n                $level++;\n                $max_level\
    \ = $level if $level > $max_level;\n            }\n            elsif ($char eq\
    \ ')') {\n                $level--;\n            }\n        }\n        push @levels,\
    \ $max_level;\n    }\n    return @levels;\n}", "my ($parens) = @_;\n    my @parens\
    \ = split(/\\s+/, $parens);\n    my @levels;\n    for my $paren (@parens) {\n\
    \        my $level = 0;\n        my $max_level = 0;\n        for my $char (split(//,\
    \ $paren)) {\n            if ($char eq '(') {\n                $level++;\n   \
    \         }\n            elsif ($char eq ')') {\n                $level--;\n \
    \           }\n            $max_level = $level if $level > $max_level;\n     \
    \   }\n        push @levels, $max_level;\n    }\n    return @levels;\n}", "my\
    \ $parens = shift;\n    my @parens_groups = split(/\\s+/, $parens);\n    my @result;\n\
    \    for my $group (@parens_groups) {\n        my $max_nesting = 0;\n        my\
    \ $current_nesting = 0;\n        for my $char (split(//, $group)) {\n        \
    \    if ($char eq '(') {\n                $current_nesting++;\n              \
    \  $max_nesting = $current_nesting if $current_nesting > $max_nesting;\n     \
    \       } elsif ($char eq ')') {\n                $current_nesting--;\n      \
    \      }\n        }\n        push @result, $max_nesting;\n    }\n    return @result;\n\
    }", "my $str = shift;\n    my @groups = split(/\\s+/, $str);\n    my @result;\n\
    \    for my $group (@groups) {\n        my $max_depth = 0;\n        my $depth\
    \ = 0;\n        for my $c (split(//, $group)) {\n            if ($c eq '(') {\n\
    \                $depth++;\n                $max_depth = $depth if $depth > $max_depth;\n\
    \            } elsif ($c eq ')') {\n                $depth--;\n            }\n\
    \        }\n        push @result, $max_depth;\n    }\n    return @result;\n}",
  "my ($parens) = @_;\n    my @parens_list = split(/\\s+/, $parens);\n    my @nested_parens;\n\
    \    foreach my $paren (@parens_list) {\n        my $nested_paren = 0;\n     \
    \   my $paren_count = 0;\n        my @paren_chars = split(//, $paren);\n     \
    \   foreach my $paren_char (@paren_chars) {\n            if ($paren_char eq \"\
    (\") {\n                $paren_count++;\n                if ($paren_count > $nested_paren)\
    \ {\n                    $nested_paren = $paren_count;\n                }\n  \
    \          }\n            elsif ($paren_char eq \")\") {\n                $paren_count--;\n\
    \            }\n        }\n        push(@nested_parens, $nested_paren);\n    }\n\
    \    return @nested_parens;\n}", "my $str = shift;\n    my @parens = split(/\\\
    s+/, $str);\n    my @result;\n    foreach my $paren (@parens) {\n        my $max_depth\
    \ = 0;\n        my $depth = 0;\n        for (my $i = 0; $i < length($paren); $i++)\
    \ {\n            if (substr($paren, $i, 1) eq \"(\") {\n                $depth++;\n\
    \                $max_depth = $depth if $depth > $max_depth;\n            } elsif\
    \ (substr($paren, $i, 1) eq \")\") {\n                $depth--;\n            }\n\
    \        }\n        push @result, $max_depth;\n    }\n    return @result;\n}",
  "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @result;\n\
    \    foreach my $paren (@parens) {\n        my $max_level = 0;\n        my $level\
    \ = 0;\n        for (my $i = 0; $i < length($paren); $i++) {\n            if (substr($paren,\
    \ $i, 1) eq \"(\") {\n                $level++;\n                $max_level =\
    \ $level if $level > $max_level;\n            } elsif (substr($paren, $i, 1) eq\
    \ \")\") {\n                $level--;\n            }\n        }\n        push\
    \ @result, $max_level;\n    }\n    return @result;\n}", "my $str = shift;\n  \
    \  my @groups = split(/\\s+/, $str);\n    my @max_depth;\n    for my $group (@groups)\
    \ {\n        my $depth = 0;\n        my $max_depth = 0;\n        for my $ch (split(//,\
    \ $group)) {\n            if ($ch eq '(') {\n                $depth++;\n     \
    \           $max_depth = $depth if $depth > $max_depth;\n            }\n     \
    \       elsif ($ch eq ')') {\n                $depth--;\n            }\n     \
    \   }\n        push @max_depth, $max_depth;\n    }\n    return @max_depth;\n}",
  "my ($str) = @_;\n    my @parens_groups = split(/\\s+/, $str);\n    my @nested_parens;\n\
    \    foreach my $group (@parens_groups) {\n        my $max_nesting = 0;\n    \
    \    my $nesting = 0;\n        foreach my $char (split(//, $group)) {\n      \
    \      if ($char eq '(') {\n                $nesting++;\n            } elsif ($char\
    \ eq ')') {\n                $nesting--;\n            }\n            $max_nesting\
    \ = $nesting if $nesting > $max_nesting;\n        }\n        push @nested_parens,\
    \ $max_nesting;\n    }\n    return @nested_parens;\n}", "my $str = shift;\n  \
    \  my @result;\n    my @groups = split /\\s+/, $str;\n    for my $group (@groups)\
    \ {\n        my $max_nesting = 0;\n        my $current_nesting = 0;\n        for\
    \ my $ch (split //, $group) {\n            if ($ch eq '(') {\n               \
    \ $current_nesting++;\n                $max_nesting = $current_nesting if $current_nesting\
    \ > $max_nesting;\n            } elsif ($ch eq ')') {\n                $current_nesting--;\n\
    \            }\n        }\n        push @result, $max_nesting;\n    }\n    return\
    \ @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n\
    \    my @max_nesting;\n    for my $paren (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        for my $char (split(//, $paren)) {\n\
    \            if ($char eq '(') {\n                $nesting++;\n              \
    \  $max_nesting = $nesting if $nesting > $max_nesting;\n            } elsif ($char\
    \ eq ')') {\n                $nesting--;\n            }\n        }\n        push\
    \ @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n}", "my $parens\
    \ = shift;\n    my @parens_list = split(/\\s+/, $parens);\n    my @nested_parens_list;\n\
    \    foreach my $paren (@parens_list) {\n        my $nested_parens = 0;\n    \
    \    my $max_nested_parens = 0;\n        my @parens_stack;\n        foreach my\
    \ $char (split(//, $paren)) {\n            if ($char eq \"(\") {\n           \
    \     $nested_parens++;\n                push(@parens_stack, $char);\n       \
    \     } elsif ($char eq \")\") {\n                $nested_parens--;\n        \
    \        pop(@parens_stack);\n            }\n            if ($nested_parens >\
    \ $max_nested_parens) {\n                $max_nested_parens = $nested_parens;\n\
    \            }\n        }\n        push(@nested_parens_list, $max_nested_parens);\n\
    \    }\n    return @nested_parens_list;\n}", "my ($parens) = @_;\n    my @parens_list\
    \ = split(/\\s+/, $parens);\n    my @nested_parens;\n    foreach my $paren (@parens_list)\
    \ {\n        my $nested_paren = 0;\n        my $paren_count = 0;\n        for\
    \ (my $i = 0; $i < length($paren); $i++) {\n            if (substr($paren, $i,\
    \ 1) eq \"(\") {\n                $paren_count++;\n                if ($paren_count\
    \ > $nested_paren) {\n                    $nested_paren = $paren_count;\n    \
    \            }\n            } elsif (substr($paren, $i, 1) eq \")\") {\n     \
    \           $paren_count--;\n            }\n        }\n        push(@nested_parens,\
    \ $nested_paren);\n    }\n    return @nested_parens;\n}", "my ($input) = @_;\n\
    \    my @output;\n    my @input_groups = split(/ /, $input);\n    for my $input_group\
    \ (@input_groups) {\n        my $nesting_level = 0;\n        my $max_nesting_level\
    \ = 0;\n        for my $char (split(//, $input_group)) {\n            if ($char\
    \ eq \"(\") {\n                $nesting_level++;\n                if ($nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nesting_level--;\n\
    \            }\n        }\n        push @output, $max_nesting_level;\n    }\n\
    \    return @output;\n}", "my ($str) = @_;\n    my @parens_groups = split(/\\\
    s+/, $str);\n    my @max_nesting_levels;\n    for my $parens_group (@parens_groups)\
    \ {\n        my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n\
    \        for my $char (split(//, $parens_group)) {\n            if ($char eq '(')\
    \ {\n                $current_nesting_level++;\n                $max_nesting_level\
    \ = $current_nesting_level if $current_nesting_level > $max_nesting_level;\n \
    \           } elsif ($char eq ')') {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push @max_nesting_levels, $max_nesting_level;\n\
    \    }\n    return @max_nesting_levels;\n}", "my ($parens) = @_;\n    my @parens\
    \ = split /\\s+/, $parens;\n    my @levels;\n    for my $paren (@parens) {\n \
    \       my $level = 0;\n        my $max_level = 0;\n        for my $char (split\
    \ //, $paren) {\n            if ($char eq '(') {\n                $level++;\n\
    \                $max_level = $level if $level > $max_level;\n            }\n\
    \            elsif ($char eq ')') {\n                $level--;\n            }\n\
    \        }\n        push @levels, $max_level;\n    }\n    return @levels;\n}",
  "my $str = shift;\n    my @parens = split(/\\s+/, $str);\n    my @levels;\n    foreach\
    \ my $paren (@parens) {\n        my $level = 0;\n        my $max_level = 0;\n\
    \        foreach my $char (split(//, $paren)) {\n            if ($char eq \"(\"\
    ) {\n                $level++;\n            } elsif ($char eq \")\") {\n     \
    \           $level--;\n            }\n            $max_level = $level if $level\
    \ > $max_level;\n        }\n        push @levels, $max_level;\n    }\n    return\
    \ @levels;\n}", "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n\
    \    my @result;\n    foreach my $paren (@parens_array) {\n        my $count =\
    \ 0;\n        my $max_count = 0;\n        for (my $i = 0; $i < length($paren);\
    \ $i++) {\n            if (substr($paren, $i, 1) eq \"(\") {\n               \
    \ $count++;\n            } elsif (substr($paren, $i, 1) eq \")\") {\n        \
    \        $count--;\n            }\n            if ($count > $max_count) {\n  \
    \              $max_count = $count;\n            }\n        }\n        push(@result,\
    \ $max_count);\n    }\n    return @result;\n}", "my $parens = shift;\n    my @parens_list\
    \ = split(/\\s+/, $parens);\n    my @max_nesting_list;\n    foreach my $paren\
    \ (@parens_list) {\n        my $max_nesting = 0;\n        my $current_nesting\
    \ = 0;\n        for (my $i = 0; $i < length($paren); $i++) {\n            my $char\
    \ = substr($paren, $i, 1);\n            if ($char eq \"(\") {\n              \
    \  $current_nesting++;\n            } elsif ($char eq \")\") {\n             \
    \   $current_nesting--;\n            }\n            if ($current_nesting > $max_nesting)\
    \ {\n                $max_nesting = $current_nesting;\n            }\n       \
    \ }\n        push(@max_nesting_list, $max_nesting);\n    }\n    return @max_nesting_list;\n\
    }", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @result;\n\
    \    foreach my $paren (@parens) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $nesting++;\n                $max_nesting = $nesting\
    \ if $nesting > $max_nesting;\n            } elsif ($char eq \")\") {\n      \
    \          $nesting--;\n            }\n        }\n        push @result, $max_nesting;\n\
    \    }\n    return @result;\n}", "my $str = shift;\n    my @groups = split(/\\\
    s+/, $str);\n    my @result;\n    foreach my $group (@groups) {\n        my $max\
    \ = 0;\n        my $curr = 0;\n        foreach my $char (split(//, $group)) {\n\
    \            if ($char eq \"(\") {\n                $curr++;\n               \
    \ $max = $curr if $curr > $max;\n            } elsif ($char eq \")\") {\n    \
    \            $curr--;\n            }\n        }\n        push @result, $max;\n\
    \    }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens_array = split(/\
    \ /, $parens);\n    my @result;\n    foreach my $paren (@parens_array) {\n   \
    \     my $count = 0;\n        my $max_count = 0;\n        foreach my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $count++;\n \
    \           }\n            if ($char eq \")\") {\n                $count--;\n\
    \            }\n            if ($count > $max_count) {\n                $max_count\
    \ = $count;\n            }\n        }\n        push @result, $max_count;\n   \
    \ }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens = split /\\\
    s+/, $parens;\n    my @max_nesting;\n    for my $paren (@parens) {\n        my\
    \ $max_nesting = 0;\n        my $nesting = 0;\n        for my $char (split //,\
    \ $paren) {\n            if ($char eq '(') {\n                $nesting++;\n  \
    \              $max_nesting = $nesting if $nesting > $max_nesting;\n         \
    \   }\n            elsif ($char eq ')') {\n                $nesting--;\n     \
    \       }\n        }\n        push @max_nesting, $max_nesting;\n    }\n    return\
    \ @max_nesting;\n}", "my ($parens) = @_;\n    my @parens = split /\\s+/, $parens;\n\
    \    my @max_nesting;\n    for my $paren (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        for my $char (split //, $paren) {\n\
    \            if ($char eq '(') {\n                $nesting++;\n              \
    \  $max_nesting = $nesting if $nesting > $max_nesting;\n            }\n      \
    \      elsif ($char eq ')') {\n                $nesting--;\n            }\n  \
    \      }\n        push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n\
    }", "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n    my\
    \ @parens_levels;\n    foreach my $paren (@parens_array) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        if ($level > $max_level) {\n                $max_level = $level;\n  \
    \          }\n        }\n        push @parens_levels, $max_level;\n    }\n   \
    \ return @parens_levels;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @levels;\n    foreach my $paren (@parens) {\n        my\
    \ $level = 0;\n        my $max_level = 0;\n        foreach my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $level++;\n \
    \           } elsif ($char eq \")\") {\n                $level--;\n          \
    \  }\n            $max_level = $level if $level > $max_level;\n        }\n   \
    \     push @levels, $max_level;\n    }\n    return @levels;\n}", "my $parens =\
    \ shift;\n    my @parens_list = split(/\\s+/, $parens);\n    my @parens_depth;\n\
    \    foreach my $paren (@parens_list) {\n        my $depth = 0;\n        my $max_depth\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $depth++;\n            } elsif ($char eq \")\"\
    ) {\n                $depth--;\n            }\n            if ($depth > $max_depth)\
    \ {\n                $max_depth = $depth;\n            }\n        }\n        push(@parens_depth,\
    \ $max_depth);\n    }\n    return @parens_depth;\n}", "my ($str) = @_;\n    my\
    \ @result;\n    my @groups = split(/\\s+/, $str);\n    foreach my $group (@groups)\
    \ {\n        my $max_level = 0;\n        my $level = 0;\n        foreach my $c\
    \ (split(//, $group)) {\n            if ($c eq '(') {\n                $level++;\n\
    \                $max_level = $level if $level > $max_level;\n            } elsif\
    \ ($c eq ')') {\n                $level--;\n            }\n        }\n       \
    \ push @result, $max_level;\n    }\n    return @result;\n}", "my ($str) = @_;\n\
    \    my @result;\n    my @groups = split(/\\s+/, $str);\n    foreach my $group\
    \ (@groups) {\n        my $max_depth = 0;\n        my $depth = 0;\n        for\
    \ (my $i = 0; $i < length($group); $i++) {\n            if (substr($group, $i,\
    \ 1) eq \"(\") {\n                $depth++;\n            } elsif (substr($group,\
    \ $i, 1) eq \")\") {\n                $depth--;\n            }\n            $max_depth\
    \ = $depth if $depth > $max_depth;\n        }\n        push @result, $max_depth;\n\
    \    }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_nesting;\n    foreach my $paren (@parens) {\n    \
    \    my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } elsif ($char eq \")\") {\n   \
    \             $nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "my $str = shift;\n   \
    \ my @parens = split /\\s+/, $str;\n    my @levels;\n    foreach my $paren (@parens)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split //, $paren) {\n            if ($char eq '(') {\n                $level++;\n\
    \            }\n            elsif ($char eq ')') {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @levels, $max_level;\n    }\n    return @levels;\n}", "my\
    \ $str = shift;\n    my @result;\n    my @groups = split(/\\s+/, $str);\n    foreach\
    \ my $group (@groups) {\n        my $level = 0;\n        my $max_level = 0;\n\
    \        foreach my $char (split(//, $group)) {\n            if ($char eq \"(\"\
    ) {\n                $level++;\n                $max_level = $level if $level\
    \ > $max_level;\n            }\n            elsif ($char eq \")\") {\n       \
    \         $level--;\n            }\n        }\n        push @result, $max_level;\n\
    \    }\n    return @result;\n}", "my $parens = shift;\n    my @parens_list = split(/\\\
    s+/, $parens);\n    my @max_nested_parens;\n    foreach my $parens_group (@parens_list)\
    \ {\n        my $max_nested_parens = 0;\n        my $nested_parens = 0;\n    \
    \    my @chars = split(//, $parens_group);\n        foreach my $char (@chars)\
    \ {\n            if ($char eq \"(\") {\n                $nested_parens++;\n  \
    \              if ($nested_parens > $max_nested_parens) {\n                  \
    \  $max_nested_parens = $nested_parens;\n                }\n            } elsif\
    \ ($char eq \")\") {\n                $nested_parens--;\n            }\n     \
    \   }\n        push(@max_nested_parens, $max_nested_parens);\n    }\n    return\
    \ @max_nested_parens;\n}", "my $str = shift;\n    my @parens = split(/\\s+/, $str);\n\
    \    my @result;\n    foreach my $paren (@parens) {\n        my $max_depth = 0;\n\
    \        my $depth = 0;\n        foreach my $char (split(//, $paren)) {\n    \
    \        if ($char eq \"(\") {\n                $depth++;\n            } elsif\
    \ ($char eq \")\") {\n                $depth--;\n            }\n            $max_depth\
    \ = $depth if $depth > $max_depth;\n        }\n        push @result, $max_depth;\n\
    \    }\n    return @result;\n}", "my ($str) = @_;\n    my @result;\n    my @groups\
    \ = split(/\\s+/, $str);\n    foreach my $group (@groups) {\n        my $max_depth\
    \ = 0;\n        my $depth = 0;\n        foreach my $c (split(//, $group)) {\n\
    \            if ($c eq '(') {\n                $depth++;\n                $max_depth\
    \ = $depth if $depth > $max_depth;\n            } elsif ($c eq ')') {\n      \
    \          $depth--;\n            }\n        }\n        push @result, $max_depth;\n\
    \    }\n    return @result;\n}", "my $parens = shift;\n    my @parens_array =\
    \ split(/ /, $parens);\n    my @result;\n    foreach my $paren (@parens_array)\
    \ {\n        my $max_nesting = 0;\n        my $current_nesting = 0;\n        for\
    \ (my $i = 0; $i < length($paren); $i++) {\n            if (substr($paren, $i,\
    \ 1) eq \"(\") {\n                $current_nesting++;\n            } elsif (substr($paren,\
    \ $i, 1) eq \")\") {\n                $current_nesting--;\n            }\n   \
    \         if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        }\n        push(@result, $max_nesting);\n\
    \    }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens = split /\\\
    s+/, $parens;\n    my @max_nesting;\n    for my $paren (@parens) {\n        my\
    \ $max_nesting = 0;\n        my $nesting = 0;\n        for my $char (split //,\
    \ $paren) {\n            if ($char eq '(') {\n                $nesting++;\n  \
    \              $max_nesting = $nesting if $nesting > $max_nesting;\n         \
    \   } elsif ($char eq ')') {\n                $nesting--;\n            }\n   \
    \     }\n        push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n\
    }", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @levels;\n\
    \    foreach my $paren (@parens) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            $max_level = $level\
    \ if $level > $max_level;\n        }\n        push @levels, $max_level;\n    }\n\
    \    return @levels;\n}", "my $str = shift;\n    my @parens = split(/\\s+/, $str);\n\
    \    my @levels;\n    for my $paren (@parens) {\n        my $level = 0;\n    \
    \    my $max_level = 0;\n        for my $char (split(//, $paren)) {\n        \
    \    if ($char eq '(') {\n                $level++;\n            }\n         \
    \   elsif ($char eq ')') {\n                $level--;\n            }\n       \
    \     if ($level > $max_level) {\n                $max_level = $level;\n     \
    \       }\n        }\n        push @levels, $max_level;\n    }\n    return @levels;\n\
    }", "my $str = shift;\n    my @parens_groups = split(/\\s+/, $str);\n    my @max_nesting_levels;\n\
    \    foreach my $parens_group (@parens_groups) {\n        my $max_nesting_level\
    \ = 0;\n        my $current_nesting_level = 0;\n        foreach my $char (split(//,\
    \ $parens_group)) {\n            if ($char eq \"(\") {\n                $current_nesting_level++;\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n            if ($current_nesting_level > $max_nesting_level) {\n\
    \                $max_nesting_level = $current_nesting_level;\n            }\n\
    \        }\n        push @max_nesting_levels, $max_nesting_level;\n    }\n   \
    \ return @max_nesting_levels;\n}", "my $string = shift;\n    my @parens = split\
    \ /\\s+/, $string;\n    my @result;\n    foreach my $paren (@parens) {\n     \
    \   my $max_depth = 0;\n        my $depth = 0;\n        foreach my $char (split\
    \ //, $paren) {\n            if ($char eq '(') {\n                $depth++;\n\
    \                $max_depth = $depth if $depth > $max_depth;\n            } elsif\
    \ ($char eq ')') {\n                $depth--;\n            }\n        }\n    \
    \    push @result, $max_depth;\n    }\n    return @result;\n}", "my $parens =\
    \ shift;\n    my @parens_groups = split(/\\s+/, $parens);\n    my @max_nesting_levels;\n\
    \    foreach my $group (@parens_groups) {\n        my $nesting_level = 0;\n  \
    \      my $max_nesting_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $nesting_level++;\n  \
    \          }\n            elsif ($char eq \")\") {\n                $nesting_level--;\n\
    \            }\n            if ($nesting_level > $max_nesting_level) {\n     \
    \           $max_nesting_level = $nesting_level;\n            }\n        }\n \
    \       push(@max_nesting_levels, $max_nesting_level);\n    }\n    return @max_nesting_levels;\n\
    }", "my @groups = split(/\\s+/, $_[0]);\n    my @max_nesting_levels;\n    foreach\
    \ my $group (@groups) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "my $parens = shift;\n    my @parens_array\
    \ = split(/ /, $parens);\n    my @parens_levels;\n    foreach my $parens_group\
    \ (@parens_array) {\n        my $parens_level = 0;\n        my $parens_max_level\
    \ = 0;\n        foreach my $parens_char (split(//, $parens_group)) {\n       \
    \     if ($parens_char eq \"(\") {\n                $parens_level++;\n       \
    \     } elsif ($parens_char eq \")\") {\n                $parens_level--;\n  \
    \          }\n            if ($parens_level > $parens_max_level) {\n         \
    \       $parens_max_level = $parens_level;\n            }\n        }\n       \
    \ push(@parens_levels, $parens_max_level);\n    }\n    return @parens_levels;\n\
    }", "my ($input) = @_;\n    my @output;\n    my @input_groups = split(/ /, $input);\n\
    \    foreach my $input_group (@input_groups) {\n        my $max_depth = 0;\n \
    \       my $current_depth = 0;\n        foreach my $char (split(//, $input_group))\
    \ {\n            if ($char eq \"(\") {\n                $current_depth++;\n  \
    \              if ($current_depth > $max_depth) {\n                    $max_depth\
    \ = $current_depth;\n                }\n            } elsif ($char eq \")\") {\n\
    \                $current_depth--;\n            }\n        }\n        push(@output,\
    \ $max_depth);\n    }\n    return @output;\n}", "my $str = shift;\n    my @parens\
    \ = split(/\\s+/, $str);\n    my @levels;\n    foreach my $paren (@parens) {\n\
    \        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if $level > $max_level;\n        }\n  \
    \      push @levels, $max_level;\n    }\n    return @levels;\n}", "my $parens\
    \ = shift;\n    my @parens_array = split(/ /, $parens);\n    my @result;\n   \
    \ foreach my $paren (@parens_array) {\n        my $max_level = 0;\n        my\
    \ $level = 0;\n        my @chars = split(//, $paren);\n        foreach my $char\
    \ (@chars) {\n            if ($char eq \"(\") {\n                $level++;\n \
    \               if ($level > $max_level) {\n                    $max_level = $level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n        }\n        push(@result, $max_level);\n    }\n    return\
    \ @result;\n}", "my $parens = shift;\n    my @parens_array = split / /, $parens;\n\
    \    my @result;\n    foreach my $paren (@parens_array) {\n        my $max_level\
    \ = 0;\n        my $current_level = 0;\n        foreach my $char (split //, $paren)\
    \ {\n            if ($char eq '(') {\n                $current_level++;\n    \
    \            if ($current_level > $max_level) {\n                    $max_level\
    \ = $current_level;\n                }\n            } elsif ($char eq ')') {\n\
    \                $current_level--;\n            }\n        }\n        push @result,\
    \ $max_level;\n    }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens\
    \ = split(/\\s+/, $parens);\n    my @levels;\n    foreach my $paren (@parens)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            }\n            elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @levels, $max_level;\n    }\n    return @levels;\n}", "my\
    \ $string = shift;\n    my @parens = split(/\\s+/, $string);\n    my @max_levels;\n\
    \    foreach my $paren (@parens) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n            } elsif ($char eq \")\"\
    ) {\n                $level--;\n            }\n            if ($level > $max_level)\
    \ {\n                $max_level = $level;\n            }\n        }\n        push\
    \ @max_levels, $max_level;\n    }\n    return @max_levels;\n}", "my ($parens)\
    \ = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @max_nesting;\n    for\
    \ my $paren (@parens) {\n        my $nesting = 0;\n        my $max_nesting = 0;\n\
    \        for my $char (split(//, $paren)) {\n            if ($char eq '(') {\n\
    \                $nesting++;\n            }\n            elsif ($char eq ')')\
    \ {\n                $nesting--;\n            }\n            $max_nesting = $nesting\
    \ if $nesting > $max_nesting;\n        }\n        push @max_nesting, $max_nesting;\n\
    \    }\n    return @max_nesting;\n}", "my $parens = shift;\n    my @parens_array\
    \ = split / /, $parens;\n    my @max_nesting_array;\n    foreach my $paren (@parens_array)\
    \ {\n        my $max_nesting = 0;\n        my $current_nesting = 0;\n        my\
    \ @paren_array = split //, $paren;\n        foreach my $char (@paren_array) {\n\
    \            if ($char eq \"(\") {\n                $current_nesting++;\n    \
    \            if ($current_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $current_nesting;\n                }\n            } elsif ($char eq \")\"\
    ) {\n                $current_nesting--;\n            }\n        }\n        push\
    \ @max_nesting_array, $max_nesting;\n    }\n    return @max_nesting_array;\n}",
  "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n    my @result;\n\
    \    foreach my $paren (@parens_array) {\n        my $max_level = 0;\n       \
    \ my $level = 0;\n        foreach my $char (split(//, $paren)) {\n           \
    \ if ($char eq \"(\") {\n                $level++;\n                if ($level\
    \ > $max_level) {\n                    $max_level = $level;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n        }\n        push(@result, $max_level);\n    }\n    return @result;\n\
    }", "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n    my\
    \ @nested_parens;\n    foreach my $paren (@parens_array) {\n        my $nested_paren\
    \ = 0;\n        my $max_nested_paren = 0;\n        foreach my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $nested_paren++;\n\
    \            }\n            if ($char eq \")\") {\n                $nested_paren--;\n\
    \            }\n            if ($nested_paren > $max_nested_paren) {\n       \
    \         $max_nested_paren = $nested_paren;\n            }\n        }\n     \
    \   push(@nested_parens, $max_nested_paren);\n    }\n    return @nested_parens;\n\
    }", "my ($string) = @_;\n    my @result;\n    my @groups = split(/\\s+/, $string);\n\
    \    foreach my $group (@groups) {\n        my $count = 0;\n        my $max =\
    \ 0;\n        for (my $i = 0; $i < length($group); $i++) {\n            my $char\
    \ = substr($group, $i, 1);\n            if ($char eq \"(\") {\n              \
    \  $count++;\n            } elsif ($char eq \")\") {\n                $count--;\n\
    \            }\n            $max = $count if $count > $max;\n        }\n     \
    \   push @result, $max;\n    }\n    return @result;\n}", "my $parens = shift;\n\
    \    my @parens_array = split / /, $parens;\n    my @result;\n    foreach my $paren\
    \ (@parens_array) {\n        my $count = 0;\n        my $max_count = 0;\n    \
    \    foreach my $char (split //, $paren) {\n            if ($char eq \"(\") {\n\
    \                $count++;\n                if ($count > $max_count) {\n     \
    \               $max_count = $count;\n                }\n            } elsif ($char\
    \ eq \")\") {\n                $count--;\n            }\n        }\n        push\
    \ @result, $max_count;\n    }\n    return @result;\n}", "my $str = shift;\n  \
    \  my @parens = split(/\\s+/, $str);\n    my @max_levels;\n    foreach my $paren\
    \ (@parens) {\n        my $level = 0;\n        my $max_level = 0;\n        foreach\
    \ my $char (split(//, $paren)) {\n            if ($char eq \"(\") {\n        \
    \        $level++;\n            } elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @max_levels, $max_level;\n    }\n    return @max_levels;\n\
    }", "my $str = shift;\n    my @result;\n    my @groups = split(/\\s+/, $str);\n\
    \    foreach my $group (@groups) {\n        my $max_level = 0;\n        my $level\
    \ = 0;\n        my @chars = split(//, $group);\n        foreach my $char (@chars)\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \      if ($level > $max_level) {\n                    $max_level = $level;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n        }\n        push @result, $max_level;\n    }\n    return\
    \ @result;\n}", "my ($str) = @_;\n    my @result;\n    my @groups = split /\\\
    s+/, $str;\n    for my $group (@groups) {\n        my $max_level = 0;\n      \
    \  my $level = 0;\n        for my $char (split //, $group) {\n            if ($char\
    \ eq '(') {\n                $level++;\n                $max_level = $level if\
    \ $level > $max_level;\n            } elsif ($char eq ')') {\n               \
    \ $level--;\n            }\n        }\n        push @result, $max_level;\n   \
    \ }\n    return @result;\n}", "my $str = shift;\n    my @parens = split /\\s+/,\
    \ $str;\n    my @max_depth;\n    foreach my $paren (@parens) {\n        my $max_depth\
    \ = 0;\n        my $curr_depth = 0;\n        foreach my $char (split //, $paren)\
    \ {\n            if ($char eq '(') {\n                $curr_depth++;\n       \
    \         $max_depth = $curr_depth if $curr_depth > $max_depth;\n            }\n\
    \            elsif ($char eq ')') {\n                $curr_depth--;\n        \
    \    }\n        }\n        push @max_depth, $max_depth;\n    }\n    return @max_depth;\n\
    }", "my $str = shift;\n    my @parens = split(/\\s+/, $str);\n    my @max_nesting;\n\
    \    foreach my $paren (@parens) {\n        my $max_nesting = 0;\n        my $curr_nesting\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $curr_nesting++;\n                $max_nesting\
    \ = $curr_nesting if $curr_nesting > $max_nesting;\n            } elsif ($char\
    \ eq \")\") {\n                $curr_nesting--;\n            }\n        }\n  \
    \      push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n}",
  "my $str = shift;\n    my @parens = split /\\s+/, $str;\n    my @max_levels;\n \
    \   foreach my $paren (@parens) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $char (split //, $paren) {\n            if ($char eq\
    \ '(') {\n                $level++;\n                $max_level = $level if $level\
    \ > $max_level;\n            }\n            elsif ($char eq ')') {\n         \
    \       $level--;\n            }\n        }\n        push @max_levels, $max_level;\n\
    \    }\n    return @max_levels;\n}", "my $parens = shift;\n    my @parens_array\
    \ = split(/ /, $parens);\n    my @result;\n    for my $paren (@parens_array) {\n\
    \        my $max_depth = 0;\n        my $depth = 0;\n        for my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $depth++;\n \
    \               if ($depth > $max_depth) {\n                    $max_depth = $depth;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $depth--;\n\
    \            }\n        }\n        push @result, $max_depth;\n    }\n    return\
    \ @result;\n}", "my $parens = shift;\n    my @parens_list = split(/\\s+/, $parens);\n\
    \    my @max_depth_list;\n    foreach my $parens_group (@parens_list) {\n    \
    \    my $max_depth = 0;\n        my $current_depth = 0;\n        for (my $i =\
    \ 0; $i < length($parens_group); $i++) {\n            if (substr($parens_group,\
    \ $i, 1) eq \"(\") {\n                $current_depth++;\n            } elsif (substr($parens_group,\
    \ $i, 1) eq \")\") {\n                $current_depth--;\n            }\n     \
    \       if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        }\n        push(@max_depth_list, $max_depth);\n    }\n\
    \    return @max_depth_list;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_depth;\n    foreach my $paren (@parens) {\n      \
    \  my $depth = 0;\n        my $max_depth = 0;\n        foreach my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $depth++;\n \
    \               if ($depth > $max_depth) {\n                    $max_depth = $depth;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $depth--;\n\
    \            }\n        }\n        push(@max_depth, $max_depth);\n    }\n    return\
    \ @max_depth;\n}", "my $string = shift;\n    my @groups = split(/\\s+/, $string);\n\
    \    my @levels;\n    for my $group (@groups) {\n        my $level = 0;\n    \
    \    my $max_level = 0;\n        for my $char (split(//, $group)) {\n        \
    \    if ($char eq \"(\") {\n                $level++;\n            }\n       \
    \     elsif ($char eq \")\") {\n                $level--;\n            }\n   \
    \         $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @levels, $max_level;\n    }\n    return @levels;\n}", "my $str = shift;\n  \
    \  my @parens = split(/\\s+/, $str);\n    my @nested_parens;\n    foreach my $paren\
    \ (@parens) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n      \
    \  foreach my $char (split(//, $paren)) {\n            if ($char eq \"(\") {\n\
    \                $nesting++;\n                if ($nesting > $max_nesting) {\n\
    \                    $max_nesting = $nesting;\n                }\n           \
    \ } elsif ($char eq \")\") {\n                $nesting--;\n            }\n   \
    \     }\n        push(@nested_parens, $max_nesting);\n    }\n    return @nested_parens;\n\
    }", "my ($parens) = @_;\n    my @parens_list = split(/\\s+/, $parens);\n    my\
    \ @nested_parens;\n    foreach my $parens (@parens_list) {\n        my $nested_parens\
    \ = 0;\n        my $parens_count = 0;\n        foreach my $char (split(//, $parens))\
    \ {\n            if ($char eq \"(\") {\n                $parens_count++;\n   \
    \             $nested_parens = $parens_count if $parens_count > $nested_parens;\n\
    \            } elsif ($char eq \")\") {\n                $parens_count--;\n  \
    \          }\n        }\n        push @nested_parens, $nested_parens;\n    }\n\
    \    return @nested_parens;\n}", "my $parens = shift;\n    my @parens_array =\
    \ split(/ /, $parens);\n    my @result;\n    foreach my $paren (@parens_array)\
    \ {\n        my $count = 0;\n        my $max_count = 0;\n        for (my $i =\
    \ 0; $i < length($paren); $i++) {\n            if (substr($paren, $i, 1) eq \"\
    (\") {\n                $count++;\n            }\n            if (substr($paren,\
    \ $i, 1) eq \")\") {\n                $count--;\n            }\n            if\
    \ ($count > $max_count) {\n                $max_count = $count;\n            }\n\
    \        }\n        push @result, $max_count;\n    }\n    return @result;\n}",
  "my ($string) = @_;\n    my @result;\n    my @groups = split(/\\s+/, $string);\n\
    \    foreach my $group (@groups) {\n        my $count = 0;\n        my $max =\
    \ 0;\n        foreach my $char (split(//, $group)) {\n            if ($char eq\
    \ \"(\") {\n                $count++;\n                $max = $count if $count\
    \ > $max;\n            } elsif ($char eq \")\") {\n                $count--;\n\
    \            }\n        }\n        push @result, $max;\n    }\n    return @result;\n\
    }", "my $str = shift;\n    my @groups = split(/\\s+/, $str);\n    my @res;\n \
    \   foreach my $group (@groups) {\n        my $max_nesting = 0;\n        my $curr_nesting\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq \"(\") {\n                $curr_nesting++;\n                $max_nesting\
    \ = $curr_nesting if $curr_nesting > $max_nesting;\n            } elsif ($char\
    \ eq \")\") {\n                $curr_nesting--;\n            }\n        }\n  \
    \      push @res, $max_nesting;\n    }\n    return @res;\n}", "my ($parens) =\
    \ @_;\n    my @parens = split(/\\s+/, $parens);\n    my @nested_parens;\n    foreach\
    \ my $paren (@parens) {\n        my $nested_paren = 0;\n        my $max_nested_paren\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $nested_paren++;\n                if ($nested_paren\
    \ > $max_nested_paren) {\n                    $max_nested_paren = $nested_paren;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nested_paren--;\n\
    \            }\n        }\n        push(@nested_parens, $max_nested_paren);\n\
    \    }\n    return @nested_parens;\n}", "my $str = shift;\n    my @groups = split\
    \ /\\s+/, $str;\n    my @result;\n    foreach my $group (@groups) {\n        my\
    \ $max_level = 0;\n        my $level = 0;\n        foreach my $char (split //,\
    \ $group) {\n            if ($char eq '(') {\n                $level++;\n    \
    \            $max_level = $level if $level > $max_level;\n            } elsif\
    \ ($char eq ')') {\n                $level--;\n            }\n        }\n    \
    \    push @result, $max_level;\n    }\n    return @result;\n}", "my $str = shift;\n\
    \    my @groups = split /\\s+/, $str;\n    my @result;\n    foreach my $group\
    \ (@groups) {\n        my $max_depth = 0;\n        my $depth = 0;\n        foreach\
    \ my $char (split //, $group) {\n            if ($char eq '(') {\n           \
    \     $depth++;\n                $max_depth = $depth if $depth > $max_depth;\n\
    \            } elsif ($char eq ')') {\n                $depth--;\n           \
    \ }\n        }\n        push @result, $max_depth;\n    }\n    return @result;\n\
    }", "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n    my\
    \ @max_nesting;\n    foreach my $parens_group (@parens_array) {\n        my $max_nesting\
    \ = 0;\n        my $current_nesting = 0;\n        foreach my $char (split(//,\
    \ $parens_group)) {\n            if ($char eq \"(\") {\n                $current_nesting++;\n\
    \                if ($current_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $current_nesting;\n                }\n            } elsif ($char eq \")\"\
    ) {\n                $current_nesting--;\n            }\n        }\n        push\
    \ @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n}", "my $str =\
    \ shift;\n    my @groups = split /\\s+/, $str;\n    my @result;\n    for my $group\
    \ (@groups) {\n        my $max_level = 0;\n        my $level = 0;\n        for\
    \ my $char (split //, $group) {\n            if ($char eq '(') {\n           \
    \     $level++;\n                $max_level = $level if $level > $max_level;\n\
    \            }\n            elsif ($char eq ')') {\n                $level--;\n\
    \            }\n        }\n        push @result, $max_level;\n    }\n    return\
    \ @result;\n}", "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n\
    \    my @max_nesting;\n    for my $paren (@parens_array) {\n        my $max_nesting\
    \ = 0;\n        my $current_nesting = 0;\n        for my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $current_nesting++;\n\
    \                if ($current_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $current_nesting;\n                }\n            } elsif ($char eq \")\"\
    ) {\n                $current_nesting--;\n            }\n        }\n        push\
    \ @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n}", "my ($parens)\
    \ = @_;\n    my @parens = split /\\s+/, $parens;\n    my @levels;\n    foreach\
    \ my $p (@parens) {\n        my $level = 0;\n        my $max_level = 0;\n    \
    \    foreach my $c (split //, $p) {\n            if ($c eq '(') {\n          \
    \      $level++;\n            } elsif ($c eq ')') {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @levels, $max_level;\n    }\n    return @levels;\n}", "my\
    \ $parens = shift;\n    my @parens_array = split(/ /, $parens);\n    my @result;\n\
    \    foreach my $paren (@parens_array) {\n        my $max_nesting = 0;\n     \
    \   my $current_nesting = 0;\n        for (my $i = 0; $i < length($paren); $i++)\
    \ {\n            if (substr($paren, $i, 1) eq \"(\") {\n                $current_nesting++;\n\
    \            } elsif (substr($paren, $i, 1) eq \")\") {\n                $current_nesting--;\n\
    \            }\n            if ($current_nesting > $max_nesting) {\n         \
    \       $max_nesting = $current_nesting;\n            }\n        }\n        push(@result,\
    \ $max_nesting);\n    }\n    return @result;\n}", "my ($parens) = @_;\n    my\
    \ @parens = split /\\s+/, $parens;\n    my @max_depth;\n    for my $paren (@parens)\
    \ {\n        my $depth = 0;\n        my $max_depth = 0;\n        for my $char\
    \ (split //, $paren) {\n            if ($char eq '(') {\n                $depth++;\n\
    \                $max_depth = $depth if $depth > $max_depth;\n            }\n\
    \            elsif ($char eq ')') {\n                $depth--;\n            }\n\
    \        }\n        push @max_depth, $max_depth;\n    }\n    return @max_depth;\n\
    }", "my $str = shift;\n    my @groups = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $group (@groups) {\n        my $max_level = 0;\n        my $level\
    \ = 0;\n        foreach my $c (split(//, $group)) {\n            if ($c eq '(')\
    \ {\n                $level++;\n                $max_level = $level if $level\
    \ > $max_level;\n            } elsif ($c eq ')') {\n                $level--;\n\
    \            }\n        }\n        push @result, $max_level;\n    }\n    return\
    \ @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n\
    \    my @max_nesting;\n    foreach my $paren (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \        if ($nesting > $max_nesting) {\n                    $max_nesting = $nesting;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_nesting;\n    foreach my $paren (@parens) {\n    \
    \    my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting) {\n                    $max_nesting\
    \ = $nesting;\n                }\n            } elsif ($char eq \")\") {\n   \
    \             $nesting--;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "my $parens = shift;\n\
    \    my @parens_list = split(/\\s+/, $parens);\n    my @max_nesting_list;\n  \
    \  foreach my $parens_str (@parens_list) {\n        my $max_nesting = 0;\n   \
    \     my $curr_nesting = 0;\n        foreach my $char (split(//, $parens_str))\
    \ {\n            if ($char eq \"(\") {\n                $curr_nesting++;\n   \
    \             if ($curr_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $curr_nesting;\n                }\n            } elsif ($char eq \")\") {\n\
    \                $curr_nesting--;\n            }\n        }\n        push @max_nesting_list,\
    \ $max_nesting;\n    }\n    return @max_nesting_list;\n}", "my $parens = shift;\n\
    \    my @parens_list = split /\\s+/, $parens;\n    my @nested_parens;\n    foreach\
    \ my $paren (@parens_list) {\n        my $nested_paren = 0;\n        my $max_nested_paren\
    \ = 0;\n        foreach my $char (split //, $paren) {\n            if ($char eq\
    \ \"(\") {\n                $nested_paren++;\n            }\n            elsif\
    \ ($char eq \")\") {\n                $nested_paren--;\n            }\n      \
    \      if ($nested_paren > $max_nested_paren) {\n                $max_nested_paren\
    \ = $nested_paren;\n            }\n        }\n        push @nested_parens, $max_nested_paren;\n\
    \    }\n    return @nested_parens;\n}", "my $string = shift;\n    my @groups =\
    \ split /\\s+/, $string;\n    my @max_nesting;\n    foreach my $group (@groups)\
    \ {\n        my $max_nesting = 0;\n        my $nesting = 0;\n        foreach my\
    \ $char (split //, $group) {\n            if ($char eq '(') {\n              \
    \  $nesting++;\n                $max_nesting = $nesting if $nesting > $max_nesting;\n\
    \            }\n            elsif ($char eq ')') {\n                $nesting--;\n\
    \            }\n        }\n        push @max_nesting, $max_nesting;\n    }\n \
    \   return @max_nesting;\n}", "my $parens = shift;\n    my @parens_array = split(/\
    \ /, $parens);\n    my @result;\n    foreach my $paren (@parens_array) {\n   \
    \     my $count = 0;\n        my $max_count = 0;\n        foreach my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $count++;\n \
    \           } elsif ($char eq \")\") {\n                $count--;\n          \
    \  }\n            if ($count > $max_count) {\n                $max_count = $count;\n\
    \            }\n        }\n        push(@result, $max_count);\n    }\n    return\
    \ @result;\n}", "my $str = shift;\n    my @parens = split /\\s+/, $str;\n    my\
    \ @levels;\n    for my $paren (@parens) {\n        my $level = 0;\n        my\
    \ $max_level = 0;\n        for my $char (split //, $paren) {\n            if ($char\
    \ eq '(') {\n                $level++;\n                $max_level = $level if\
    \ $level > $max_level;\n            } elsif ($char eq ')') {\n               \
    \ $level--;\n            }\n        }\n        push @levels, $max_level;\n   \
    \ }\n    return @levels;\n}", "my $parens = shift;\n    my @parens_array = split(/\
    \ /, $parens);\n    my @nested_parens;\n    for my $paren_group (@parens_array)\
    \ {\n        my $nested_paren = 0;\n        my $max_nested_paren = 0;\n      \
    \  for my $char (split(//, $paren_group)) {\n            if ($char eq \"(\") {\n\
    \                $nested_paren++;\n            }\n            elsif ($char eq\
    \ \")\") {\n                $nested_paren--;\n            }\n            $max_nested_paren\
    \ = $nested_paren if $nested_paren > $max_nested_paren;\n        }\n        push\
    \ @nested_parens, $max_nested_paren;\n    }\n    return @nested_parens;\n}", "my\
    \ $str = shift;\n    my @nested_parens;\n    my @parens = split(/\\s+/, $str);\n\
    \    foreach my $paren (@parens) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        for (my $i = 0; $i < length($paren); $i++) {\n            if (substr($paren,\
    \ $i, 1) eq \"(\") {\n                $nesting++;\n            } elsif (substr($paren,\
    \ $i, 1) eq \")\") {\n                $nesting--;\n            }\n           \
    \ if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n \
    \           }\n        }\n        push(@nested_parens, $max_nesting);\n    }\n\
    \    return @nested_parens;\n}", "my $parens = shift;\n    my @parens_groups =\
    \ split(/\\s+/, $parens);\n    my @nested_parens;\n    foreach my $group (@parens_groups)\
    \ {\n        my $nested_parens = 0;\n        my $max_nested_parens = 0;\n    \
    \    foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $nested_parens++;\n            } elsif ($char eq \")\") {\n \
    \               $nested_parens--;\n            }\n            if ($nested_parens\
    \ > $max_nested_parens) {\n                $max_nested_parens = $nested_parens;\n\
    \            }\n        }\n        push(@nested_parens, $max_nested_parens);\n\
    \    }\n    return @nested_parens;\n}", "my $str = shift;\n    my @parens = split(/\\\
    s+/, $str);\n    my @levels;\n    foreach my $paren (@parens) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @levels, $max_level;\n    }\n    return @levels;\n}", "my $str = shift;\n  \
    \  my @groups = split(/\\s+/, $str);\n    my @levels;\n    foreach my $group (@groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $group)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if $level > $max_level;\n        }\n  \
    \      push @levels, $max_level;\n    }\n    return @levels;\n}", "my $str = shift;\n\
    \    my @groups = split(/\\s+/, $str);\n    my @nested_levels;\n    for my $group\
    \ (@groups) {\n        my $level = 0;\n        my $max_level = 0;\n        for\
    \ my $char (split(//, $group)) {\n            if ($char eq '(') {\n          \
    \      $level++;\n            } elsif ($char eq ')') {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @nested_levels, $max_level;\n    }\n    return @nested_levels;\n\
    }", "my $str = shift;\n    my @groups = split /\\s+/, $str;\n    my @result;\n\
    \    for my $group (@groups) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        for my $char (split //, $group) {\n            if ($char eq '(')\
    \ {\n                $nesting++;\n                $max_nesting = $nesting if $nesting\
    \ > $max_nesting;\n            } elsif ($char eq ')') {\n                $nesting--;\n\
    \            }\n        }\n        push @result, $max_nesting;\n    }\n    return\
    \ @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n\
    \    my @max_nesting;\n    foreach my $paren (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $nesting++;\n        \
    \        if ($nesting > $max_nesting) {\n                    $max_nesting = $nesting;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "my $parens = shift;\n    my @parens_arr = split(/\\\
    s+/, $parens);\n    my @max_nesting_arr;\n    foreach my $parens_str (@parens_arr)\
    \ {\n        my $max_nesting = 0;\n        my $curr_nesting = 0;\n        for\
    \ (my $i = 0; $i < length($parens_str); $i++) {\n            if (substr($parens_str,\
    \ $i, 1) eq \"(\") {\n                $curr_nesting++;\n            } elsif (substr($parens_str,\
    \ $i, 1) eq \")\") {\n                $curr_nesting--;\n            }\n      \
    \      if ($curr_nesting > $max_nesting) {\n                $max_nesting = $curr_nesting;\n\
    \            }\n        }\n        push(@max_nesting_arr, $max_nesting);\n   \
    \ }\n    return @max_nesting_arr;\n}", "my $parens = shift;\n    my @parens_array\
    \ = split(/ /, $parens);\n    my @max_depth;\n    for my $paren (@parens_array)\
    \ {\n        my $depth = 0;\n        my $max_depth = 0;\n        for my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $depth++;\n\
    \                if ($depth > $max_depth) {\n                    $max_depth =\
    \ $depth;\n                }\n            } elsif ($char eq \")\") {\n       \
    \         $depth--;\n            }\n        }\n        push @max_depth, $max_depth;\n\
    \    }\n    return @max_depth;\n}", "my $str = shift;\n    my @groups = split(/\\\
    s+/, $str);\n    my @max_nest_level = ();\n    foreach my $group (@groups) {\n\
    \        my $max_nest_level = 0;\n        my $curr_nest_level = 0;\n        foreach\
    \ my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n        \
    \        $curr_nest_level++;\n                $max_nest_level = $curr_nest_level\
    \ if $curr_nest_level > $max_nest_level;\n            }\n            elsif ($char\
    \ eq \")\") {\n                $curr_nest_level--;\n            }\n        }\n\
    \        push @max_nest_level, $max_nest_level;\n    }\n    return @max_nest_level;\n\
    }", "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n    my\
    \ @result;\n    foreach my $paren (@parens_array) {\n        my $max_nesting =\
    \ 0;\n        my $current_nesting = 0;\n        foreach my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $current_nesting++;\n\
    \                if ($current_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $current_nesting;\n                }\n            } elsif ($char eq \")\"\
    ) {\n                $current_nesting--;\n            }\n        }\n        push(@result,\
    \ $max_nesting);\n    }\n    return @result;\n}", "my ($parens) = @_;\n    my\
    \ @parens_list = split(/\\s+/, $parens);\n    my @max_nesting;\n    foreach my\
    \ $paren (@parens_list) {\n        my $max_nesting = 0;\n        my $nesting =\
    \ 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char eq\
    \ \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \        }\n        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n\
    }", "my $str = shift;\n    my @parens = split /\\s+/, $str;\n    my @levels;\n\
    \    for my $paren (@parens) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        for my $char (split //, $paren) {\n            if ($char eq '(')\
    \ {\n                $level++;\n                $max_level = $level if $level\
    \ > $max_level;\n            }\n            elsif ($char eq ')') {\n         \
    \       $level--;\n            }\n        }\n        push @levels, $max_level;\n\
    \    }\n    return @levels;\n}", "my $string = shift;\n    my @parens = split(/\\\
    s+/, $string);\n    my @levels;\n    for my $paren (@parens) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        for my $char (split(//, $paren)) {\n\
    \            if ($char eq \"(\") {\n                $level++;\n            } elsif\
    \ ($char eq \")\") {\n                $level--;\n            }\n            $max_level\
    \ = $level if $level > $max_level;\n        }\n        push @levels, $max_level;\n\
    \    }\n    return @levels;\n}", "my $parens = shift;\n    my @parens_array =\
    \ split(/ /, $parens);\n    my @result;\n    foreach my $paren (@parens_array)\
    \ {\n        my $count = 0;\n        my $max_count = 0;\n        for (my $i =\
    \ 0; $i < length($paren); $i++) {\n            if (substr($paren, $i, 1) eq \"\
    (\") {\n                $count++;\n            } elsif (substr($paren, $i, 1)\
    \ eq \")\") {\n                $count--;\n            }\n            if ($count\
    \ > $max_count) {\n                $max_count = $count;\n            }\n     \
    \   }\n        push(@result, $max_count);\n    }\n    return @result;\n}", "my\
    \ $parens = shift;\n    my @parens_array = split(/ /, $parens);\n    my @max_nesting_array;\n\
    \    foreach my $parens_group (@parens_array) {\n        my $max_nesting = 0;\n\
    \        my $current_nesting = 0;\n        foreach my $char (split(//, $parens_group))\
    \ {\n            if ($char eq \"(\") {\n                $current_nesting++;\n\
    \                if ($current_nesting > $max_nesting) {\n                    $max_nesting\
    \ = $current_nesting;\n                }\n            } elsif ($char eq \")\"\
    ) {\n                $current_nesting--;\n            }\n        }\n        push(@max_nesting_array,\
    \ $max_nesting);\n    }\n    return @max_nesting_array;\n}", "my ($parens) = @_;\n\
    \    my @parens_array = split(/ /, $parens);\n    my @max_nesting_levels;\n  \
    \  foreach my $parens_group (@parens_array) {\n        my $max_nesting_level =\
    \ 0;\n        my $current_nesting_level = 0;\n        foreach my $char (split(//,\
    \ $parens_group)) {\n            if ($char eq \"(\") {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "my $parens = shift;\n    my @parens_array\
    \ = split(/ /, $parens);\n    my @max_nesting_levels;\n    foreach my $parens_group\
    \ (@parens_array) {\n        my $max_nesting_level = 0;\n        my $current_nesting_level\
    \ = 0;\n        foreach my $char (split(//, $parens_group)) {\n            if\
    \ ($char eq \"(\") {\n                $current_nesting_level++;\n            \
    \    if ($current_nesting_level > $max_nesting_level) {\n                    $max_nesting_level\
    \ = $current_nesting_level;\n                }\n            } elsif ($char eq\
    \ \")\") {\n                $current_nesting_level--;\n            }\n       \
    \ }\n        push @max_nesting_levels, $max_nesting_level;\n    }\n    return\
    \ @max_nesting_levels;\n}", "my ($parens) = @_;\n    my @parens = split /\\s+/,\
    \ $parens;\n    my @max_nesting;\n    foreach my $p (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        foreach my $c (split //, $p) {\n   \
    \         if ($c eq '(') {\n                $nesting++;\n                $max_nesting\
    \ = $nesting if $nesting > $max_nesting;\n            } elsif ($c eq ')') {\n\
    \                $nesting--;\n            }\n        }\n        push @max_nesting,\
    \ $max_nesting;\n    }\n    return @max_nesting;\n}", "my $parens = shift;\n \
    \   my @parens_list = split /\\s+/, $parens;\n    my @nested_parens;\n    foreach\
    \ my $paren (@parens_list) {\n        my $nested_paren = 0;\n        my $max_nested_paren\
    \ = 0;\n        for (my $i = 0; $i < length($paren); $i++) {\n            if (substr($paren,\
    \ $i, 1) eq \"(\") {\n                $nested_paren++;\n            } elsif (substr($paren,\
    \ $i, 1) eq \")\") {\n                $nested_paren--;\n            }\n      \
    \      if ($nested_paren > $max_nested_paren) {\n                $max_nested_paren\
    \ = $nested_paren;\n            }\n        }\n        push @nested_parens, $max_nested_paren;\n\
    \    }\n    return @nested_parens;\n}", "my $str = shift;\n    my @parens = split(/\\\
    s+/, $str);\n    my @res;\n    foreach my $paren (@parens) {\n        my $max_level\
    \ = 0;\n        my $level = 0;\n        for (my $i = 0; $i < length($paren); $i++)\
    \ {\n            if (substr($paren, $i, 1) eq \"(\") {\n                $level++;\n\
    \                $max_level = $level if $level > $max_level;\n            } elsif\
    \ (substr($paren, $i, 1) eq \")\") {\n                $level--;\n            }\n\
    \        }\n        push @res, $max_level;\n    }\n    return @res;\n}", "my $string\
    \ = shift;\n    my @parens = split(/\\s+/, $string);\n    my @result;\n    foreach\
    \ my $paren (@parens) {\n        my $level = 0;\n        my $max_level = 0;\n\
    \        foreach my $char (split(//, $paren)) {\n            if ($char eq \"(\"\
    ) {\n                $level++;\n            } elsif ($char eq \")\") {\n     \
    \           $level--;\n            }\n            $max_level = $level if $level\
    \ > $max_level;\n        }\n        push @result, $max_level;\n    }\n    return\
    \ @result;\n}", "my ($str) = @_;\n    my @groups = split /\\s+/, $str;\n    my\
    \ @max_nest_levels;\n    for my $group (@groups) {\n        my $max_nest_level\
    \ = 0;\n        my $nest_level = 0;\n        for my $char (split //, $group) {\n\
    \            if ($char eq '(') {\n                $nest_level++;\n           \
    \     $max_nest_level = $nest_level if $nest_level > $max_nest_level;\n      \
    \      }\n            elsif ($char eq ')') {\n                $nest_level--;\n\
    \            }\n        }\n        push @max_nest_levels, $max_nest_level;\n \
    \   }\n    return @max_nest_levels;\n}", "my ($str) = @_;\n    my @groups = split\
    \ /\\s+/, $str;\n    my @nested_parens;\n    for my $group (@groups) {\n     \
    \   my $nested_parens = 0;\n        my $max_nested_parens = 0;\n        for my\
    \ $char (split //, $group) {\n            if ($char eq '(') {\n              \
    \  $nested_parens++;\n            } elsif ($char eq ')') {\n                $nested_parens--;\n\
    \            }\n            $max_nested_parens = $nested_parens if $nested_parens\
    \ > $max_nested_parens;\n        }\n        push @nested_parens, $max_nested_parens;\n\
    \    }\n    return @nested_parens;\n}", "my $str = shift;\n    my @parens = split\
    \ /\\s+/, $str;\n    my @max_depth;\n    foreach my $paren (@parens) {\n     \
    \   my $depth = 0;\n        my $max_depth = 0;\n        foreach my $char (split\
    \ //, $paren) {\n            if ($char eq '(') {\n                $depth++;\n\
    \                $max_depth = $depth if $depth > $max_depth;\n            }\n\
    \            elsif ($char eq ')') {\n                $depth--;\n            }\n\
    \        }\n        push @max_depth, $max_depth;\n    }\n    return @max_depth;\n\
    }", "my $str = shift;\n    my @parens = split(/\\s+/, $str);\n    my @max_depth;\n\
    \    foreach my $paren (@parens) {\n        my $depth = 0;\n        my $max_depth\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $depth++;\n            } elsif ($char eq \")\"\
    ) {\n                $depth--;\n            }\n            $max_depth = $depth\
    \ if $depth > $max_depth;\n        }\n        push @max_depth, $max_depth;\n \
    \   }\n    return @max_depth;\n}", "my $str = shift;\n    my @parens = split(/\\\
    s+/, $str);\n    my @max_nesting;\n    foreach my $paren (@parens) {\n       \
    \ my $max_nesting = 0;\n        my $nesting = 0;\n        for (my $i = 0; $i <\
    \ length($paren); $i++) {\n            if (substr($paren, $i, 1) eq \"(\") {\n\
    \                $nesting++;\n            } elsif (substr($paren, $i, 1) eq \"\
    )\") {\n                $nesting--;\n            }\n            if ($nesting >\
    \ $max_nesting) {\n                $max_nesting = $nesting;\n            }\n \
    \       }\n        push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n\
    }", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @max_nesting;\n\
    \    foreach my $paren (@parens) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \        }\n        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n\
    }", "my $parens = shift;\n    my @parens_list = split(/\\s+/, $parens);\n    my\
    \ @max_nesting;\n    foreach my $paren (@parens_list) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        for (my $i = 0; $i < length($paren);\
    \ $i++) {\n            if (substr($paren, $i, 1) eq \"(\") {\n               \
    \ $nesting++;\n                if ($nesting > $max_nesting) {\n              \
    \      $max_nesting = $nesting;\n                }\n            } elsif (substr($paren,\
    \ $i, 1) eq \")\") {\n                $nesting--;\n            }\n        }\n\
    \        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n}",
  "my $parens = shift;\n    my @parens_arr = split(/\\s+/, $parens);\n    my @result;\n\
    \    foreach my $paren (@parens_arr) {\n        my $max_nesting = 0;\n       \
    \ my $nesting = 0;\n        foreach my $char (split(//, $paren)) {\n         \
    \   if ($char eq \"(\") {\n                $nesting++;\n                $max_nesting\
    \ = $nesting if $nesting > $max_nesting;\n            } elsif ($char eq \")\"\
    ) {\n                $nesting--;\n            }\n        }\n        push @result,\
    \ $max_nesting;\n    }\n    return @result;\n}", "my ($str) = @_;\n    my @parens\
    \ = split(/\\s+/, $str);\n    my @levels;\n    foreach my $paren (@parens) {\n\
    \        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if $level > $max_level;\n        }\n  \
    \      push @levels, $max_level;\n    }\n    return @levels;\n}", "my $str = shift;\n\
    \    my @arr = split(/\\s+/, $str);\n    my @ret;\n    for my $s (@arr) {\n  \
    \      my $max = 0;\n        my $cur = 0;\n        for my $c (split(//, $s)) {\n\
    \            if ($c eq '(') {\n                $cur++;\n                $max =\
    \ $cur if $cur > $max;\n            } elsif ($c eq ')') {\n                $cur--;\n\
    \            }\n        }\n        push @ret, $max;\n    }\n    return @ret;\n\
    }", "my $parens = shift;\n    my @parens_list = split(/\\s+/, $parens);\n    my\
    \ @result;\n    for my $paren (@parens_list) {\n        my $max_nesting = 0;\n\
    \        my $nesting = 0;\n        for my $char (split(//, $paren)) {\n      \
    \      if ($char eq '(') {\n                $nesting++;\n                $max_nesting\
    \ = $nesting if $nesting > $max_nesting;\n            } elsif ($char eq ')') {\n\
    \                $nesting--;\n            }\n        }\n        push @result,\
    \ $max_nesting;\n    }\n    return @result;\n}", "my $string = shift;\n    my\
    \ @parens = split(/\\s+/, $string);\n    my @levels;\n    foreach my $paren (@parens)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $char\
    \ (split(//, $paren)) {\n            if ($char eq \"(\") {\n                $level++;\n\
    \            } elsif ($char eq \")\") {\n                $level--;\n         \
    \   }\n            $max_level = $level if $level > $max_level;\n        }\n  \
    \      push @levels, $max_level;\n    }\n    return @levels;\n}", "my $str = shift;\n\
    \    my @parens = split(/\\s+/, $str);\n    my @levels;\n    for my $paren (@parens)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        for my $char\
    \ (split(//, $paren)) {\n            if ($char eq '(') {\n                $level++;\n\
    \            } elsif ($char eq ')') {\n                $level--;\n           \
    \ }\n            $max_level = $level if $level > $max_level;\n        }\n    \
    \    push @levels, $max_level;\n    }\n    return @levels;\n}", "my $parens =\
    \ shift;\n    my @parens_array = split(/ /, $parens);\n    my @result;\n    foreach\
    \ my $paren (@parens_array) {\n        my $count = 0;\n        my $max_count =\
    \ 0;\n        for (my $i = 0; $i < length($paren); $i++) {\n            if (substr($paren,\
    \ $i, 1) eq \"(\") {\n                $count++;\n            }\n            if\
    \ (substr($paren, $i, 1) eq \")\") {\n                $count--;\n            }\n\
    \            if ($count > $max_count) {\n                $max_count = $count;\n\
    \            }\n        }\n        push(@result, $max_count);\n    }\n    return\
    \ @result;\n}", "my $parens = shift;\n    my @parens_list = split /\\s+/, $parens;\n\
    \    my @nested_parens;\n    for my $paren (@parens_list) {\n        my $nested_paren\
    \ = 0;\n        my $max_nested_paren = 0;\n        for my $char (split //, $paren)\
    \ {\n            if ($char eq '(') {\n                $nested_paren++;\n     \
    \       }\n            elsif ($char eq ')') {\n                $nested_paren--;\n\
    \            }\n            $max_nested_paren = $nested_paren if $nested_paren\
    \ > $max_nested_paren;\n        }\n        push @nested_parens, $max_nested_paren;\n\
    \    }\n    return @nested_parens;\n}", "my @parens = @_;\n    my @result;\n \
    \   for my $paren (@parens) {\n        my $max_level = 0;\n        my $level =\
    \ 0;\n        for my $char (split //, $paren) {\n            if ($char eq '(')\
    \ {\n                $level++;\n                $max_level = $level if $level\
    \ > $max_level;\n            } elsif ($char eq ')') {\n                $level--;\n\
    \            }\n        }\n        push @result, $max_level;\n    }\n    return\
    \ @result;\n}", "my $parens = shift;\n    my @parens_array = split(/ /, $parens);\n\
    \    my @nested_parens;\n    for my $paren (@parens_array) {\n        my $nested_paren\
    \ = 0;\n        my $max_nested_paren = 0;\n        for my $char (split(//, $paren))\
    \ {\n            if ($char eq \"(\") {\n                $nested_paren++;\n   \
    \         } elsif ($char eq \")\") {\n                $nested_paren--;\n     \
    \       }\n            if ($nested_paren > $max_nested_paren) {\n            \
    \    $max_nested_paren = $nested_paren;\n            }\n        }\n        push\
    \ @nested_parens, $max_nested_paren;\n    }\n    return @nested_parens;\n}", "my\
    \ $str = shift;\n    my @parens = split /\\s+/, $str;\n    my @max_nesting;\n\
    \    for my $paren (@parens) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        for my $char (split //, $paren) {\n            if ($char eq '(')\
    \ {\n                $nesting++;\n                $max_nesting = $nesting if $nesting\
    \ > $max_nesting;\n            }\n            elsif ($char eq ')') {\n       \
    \         $nesting--;\n            }\n        }\n        push @max_nesting, $max_nesting;\n\
    \    }\n    return @max_nesting;\n}", "my $str = shift;\n    my @groups = split(/\\\
    s+/, $str);\n    my @levels;\n    foreach my $group (@groups) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split(//, $group))\
    \ {\n            if ($char eq \"(\") {\n                $level++;\n          \
    \  } elsif ($char eq \")\") {\n                $level--;\n            }\n    \
    \        $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @levels, $max_level;\n    }\n    return @levels;\n}", "my ($parens) = @_;\n\
    \    my @parens = split(/\\s+/, $parens);\n    my @max_nesting;\n    foreach my\
    \ $paren (@parens) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n\
    \        foreach my $char (split(//, $paren)) {\n            if ($char eq \"(\"\
    ) {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \        }\n        push(@max_nesting, $max_nesting);\n    }\n    return @max_nesting;\n\
    }", "my $str = shift;\n    my @parens_groups = split /\\s+/, $str;\n    my @max_nesting_levels;\n\
    \    for my $parens_group (@parens_groups) {\n        my $max_nesting_level =\
    \ 0;\n        my $current_nesting_level = 0;\n        for my $char (split //,\
    \ $parens_group) {\n            if ($char eq '(') {\n                $current_nesting_level++;\n\
    \                $max_nesting_level = $current_nesting_level if $current_nesting_level\
    \ > $max_nesting_level;\n            }\n            elsif ($char eq ')') {\n \
    \               $current_nesting_level--;\n            }\n        }\n        push\
    \ @max_nesting_levels, $max_nesting_level;\n    }\n    return @max_nesting_levels;\n\
    }", "my $str = shift;\n    my @parens = split(/\\s+/, $str);\n    my @result;\n\
    \    foreach my $paren (@parens) {\n        my $max_level = 0;\n        my $level\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $level++;\n                $max_level = $level\
    \ if $level > $max_level;\n            } elsif ($char eq \")\") {\n          \
    \      $level--;\n            }\n        }\n        push @result, $max_level;\n\
    \    }\n    return @result;\n}", "my $parens = shift;\n    my @parens_array =\
    \ split(/ /, $parens);\n    my @max_nesting;\n    foreach my $parens_group (@parens_array)\
    \ {\n        my $max_nesting = 0;\n        my $current_nesting = 0;\n        foreach\
    \ my $char (split(//, $parens_group)) {\n            if ($char eq \"(\") {\n \
    \               $current_nesting++;\n                if ($current_nesting > $max_nesting)\
    \ {\n                    $max_nesting = $current_nesting;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $current_nesting--;\n\
    \            }\n        }\n        push(@max_nesting, $max_nesting);\n    }\n\
    \    return @max_nesting;\n}", "my $str = shift;\n    my @parens = split(/\\s+/,\
    \ $str);\n    my @result;\n    foreach my $paren (@parens) {\n        my $max_level\
    \ = 0;\n        my $level = 0;\n        for (my $i = 0; $i < length($paren); $i++)\
    \ {\n            if (substr($paren, $i, 1) eq \"(\") {\n                $level++;\n\
    \            } elsif (substr($paren, $i, 1) eq \")\") {\n                $level--;\n\
    \            }\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n            }\n        }\n        push @result, $max_level;\n   \
    \ }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_nesting;\n    for my $paren (@parens) {\n        my\
    \ $max_nesting = 0;\n        my $nesting = 0;\n        for my $char (split(//,\
    \ $paren)) {\n            if ($char eq '(') {\n                $nesting++;\n \
    \               $max_nesting = $nesting if $nesting > $max_nesting;\n        \
    \    } elsif ($char eq ')') {\n                $nesting--;\n            }\n  \
    \      }\n        push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n\
    }", "my $str = shift;\n    my @result;\n    my @groups = split(/\\s+/, $str);\n\
    \    foreach my $group (@groups) {\n        my $max_depth = 0;\n        my $depth\
    \ = 0;\n        foreach my $char (split(//, $group)) {\n            if ($char\
    \ eq '(') {\n                $depth++;\n                $max_depth = $depth if\
    \ $depth > $max_depth;\n            } elsif ($char eq ')') {\n               \
    \ $depth--;\n            }\n        }\n        push @result, $max_depth;\n   \
    \ }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_nesting;\n    for my $p (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        for my $c (split(//, $p)) {\n      \
    \      if ($c eq '(') {\n                $nesting++;\n                $max_nesting\
    \ = $nesting if $nesting > $max_nesting;\n            }\n            elsif ($c\
    \ eq ')') {\n                $nesting--;\n            }\n        }\n        push\
    \ @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n}", "my ($parens)\
    \ = @_;\n    my @parens_list = split(/\\s+/, $parens);\n    my @result;\n    foreach\
    \ my $parens (@parens_list) {\n        my $max_depth = 0;\n        my $depth =\
    \ 0;\n        for (my $i = 0; $i < length($parens); $i++) {\n            if (substr($parens,\
    \ $i, 1) eq \"(\") {\n                $depth++;\n            } elsif (substr($parens,\
    \ $i, 1) eq \")\") {\n                $depth--;\n            }\n            $max_depth\
    \ = $depth if $depth > $max_depth;\n        }\n        push @result, $max_depth;\n\
    \    }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_nesting;\n    foreach my $paren (@parens) {\n    \
    \    my $max_nesting = 0;\n        my $current_nesting = 0;\n        for (my $i\
    \ = 0; $i < length($paren); $i++) {\n            if (substr($paren, $i, 1) eq\
    \ \"(\") {\n                $current_nesting++;\n            } elsif (substr($paren,\
    \ $i, 1) eq \")\") {\n                $current_nesting--;\n            }\n   \
    \         if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "my $parens = shift;\n    my @parens_list\
    \ = split(/\\s+/, $parens);\n    my @nested_parens_list;\n    foreach my $paren\
    \ (@parens_list) {\n        my $nested_parens = 0;\n        my $nested_parens_max\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $nested_parens++;\n                if ($nested_parens\
    \ > $nested_parens_max) {\n                    $nested_parens_max = $nested_parens;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $nested_parens--;\n\
    \            }\n        }\n        push(@nested_parens_list, $nested_parens_max);\n\
    \    }\n    return @nested_parens_list;\n}", "my ($string) = @_;\n    my @parens\
    \ = split(/\\s+/, $string);\n    my @result;\n    foreach my $paren (@parens)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        foreach my $c\
    \ (split(//, $paren)) {\n            if ($c eq \"(\") {\n                $level++;\n\
    \            } elsif ($c eq \")\") {\n                $level--;\n            }\n\
    \            $max_level = $level if $level > $max_level;\n        }\n        push\
    \ @result, $max_level;\n    }\n    return @result;\n}", "my $str = shift;\n  \
    \  my @groups = split(/\\s+/, $str);\n    my @levels;\n    for my $group (@groups)\
    \ {\n        my $level = 0;\n        my $max_level = 0;\n        for my $char\
    \ (split(//, $group)) {\n            if ($char eq '(') {\n                $level++;\n\
    \            } elsif ($char eq ')') {\n                $level--;\n           \
    \ }\n            $max_level = $level if $level > $max_level;\n        }\n    \
    \    push @levels, $max_level;\n    }\n    return @levels;\n}", "my $str = shift;\n\
    \    my @parens = split(/\\s+/, $str);\n    my @result;\n    for my $paren (@parens)\
    \ {\n        my $max_level = 0;\n        my $level = 0;\n        for my $c (split(//,\
    \ $paren)) {\n            if ($c eq '(') {\n                $level++;\n      \
    \          $max_level = $level if $level > $max_level;\n            } elsif ($c\
    \ eq ')') {\n                $level--;\n            }\n        }\n        push\
    \ @result, $max_level;\n    }\n    return @result;\n}", "my $str = shift;\n  \
    \  my @groups = split /\\s+/, $str;\n    my @max_nesting;\n    foreach my $group\
    \ (@groups) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n      \
    \  foreach my $char (split //, $group) {\n            if ($char eq '(') {\n  \
    \              $nesting++;\n                $max_nesting = $nesting if $nesting\
    \ > $max_nesting;\n            } elsif ($char eq ')') {\n                $nesting--;\n\
    \            }\n        }\n        push @max_nesting, $max_nesting;\n    }\n \
    \   return @max_nesting;\n}", "my $parens = shift;\n    my @parens_arr = split(/\\\
    s+/, $parens);\n    my @parens_depth;\n    foreach my $p (@parens_arr) {\n   \
    \     my $depth = 0;\n        my $max_depth = 0;\n        foreach my $c (split(//,\
    \ $p)) {\n            if ($c eq \"(\") {\n                $depth++;\n        \
    \    } elsif ($c eq \")\") {\n                $depth--;\n            }\n     \
    \       if ($depth > $max_depth) {\n                $max_depth = $depth;\n   \
    \         }\n        }\n        push(@parens_depth, $max_depth);\n    }\n    return\
    \ @parens_depth;\n}", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n\
    \    my @max_nesting;\n    for my $paren (@parens) {\n        my $max_nesting\
    \ = 0;\n        my $nesting = 0;\n        for my $char (split(//, $paren)) {\n\
    \            if ($char eq '(') {\n                $nesting++;\n              \
    \  $max_nesting = $nesting if $nesting > $max_nesting;\n            } elsif ($char\
    \ eq ')') {\n                $nesting--;\n            }\n        }\n        push\
    \ @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n}", "my $str =\
    \ shift;\n    my @parens = split(/\\s+/, $str);\n    my @levels;\n    foreach\
    \ my $paren (@parens) {\n        my $level = 0;\n        my $max_level = 0;\n\
    \        foreach my $char (split(//, $paren)) {\n            if ($char eq \"(\"\
    ) {\n                $level++;\n            } elsif ($char eq \")\") {\n     \
    \           $level--;\n            }\n            $max_level = $level if $level\
    \ > $max_level;\n        }\n        push @levels, $max_level;\n    }\n    return\
    \ @levels;\n}", "my $str = shift;\n    my @groups = split /\\s+/, $str;\n    my\
    \ @result;\n    for my $group (@groups) {\n        my $max_level = 0;\n      \
    \  my $level = 0;\n        for my $c (split //, $group) {\n            if ($c\
    \ eq '(') {\n                $level++;\n                $max_level = $level if\
    \ $level > $max_level;\n            }\n            elsif ($c eq ')') {\n     \
    \           $level--;\n            }\n        }\n        push @result, $max_level;\n\
    \    }\n    return @result;\n}", "my ($str) = @_;\n    my @parens = split /\\\
    s+/, $str;\n    my @result;\n    foreach my $paren (@parens) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        foreach my $char (split //, $paren)\
    \ {\n            if ($char eq '(') {\n                $level++;\n            \
    \    $max_level = $level if $level > $max_level;\n            } elsif ($char eq\
    \ ')') {\n                $level--;\n            }\n        }\n        push @result,\
    \ $max_level;\n    }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens\
    \ = split(/\\s+/, $parens);\n    my @result;\n    foreach my $p (@parens) {\n\
    \        my $max_depth = 0;\n        my $cur_depth = 0;\n        for (my $i =\
    \ 0; $i < length($p); $i++) {\n            if (substr($p, $i, 1) eq \"(\") {\n\
    \                $cur_depth++;\n                $max_depth = $cur_depth if $cur_depth\
    \ > $max_depth;\n            } elsif (substr($p, $i, 1) eq \")\") {\n        \
    \        $cur_depth--;\n            }\n        }\n        push @result, $max_depth;\n\
    \    }\n    return @result;\n}", "my ($parens) = @_;\n    my @parens = split(/\\\
    s+/, $parens);\n    my @max_depth;\n    for my $paren (@parens) {\n        my\
    \ $depth = 0;\n        my $max_depth = 0;\n        for my $char (split(//, $paren))\
    \ {\n            if ($char eq '(') {\n                $depth++;\n            \
    \    $max_depth = $depth if $depth > $max_depth;\n            } elsif ($char eq\
    \ ')') {\n                $depth--;\n            }\n        }\n        push @max_depth,\
    \ $max_depth;\n    }\n    return @max_depth;\n}", "my ($parens) = @_;\n    my\
    \ @parens = split(/\\s+/, $parens);\n    my @max_nesting;\n    foreach my $paren\
    \ (@parens) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n      \
    \  for (my $i = 0; $i < length($paren); $i++) {\n            if (substr($paren,\
    \ $i, 1) eq \"(\") {\n                $nesting++;\n                if ($nesting\
    \ > $max_nesting) {\n                    $max_nesting = $nesting;\n          \
    \      }\n            } elsif (substr($paren, $i, 1) eq \")\") {\n           \
    \     $nesting--;\n            }\n        }\n        push(@max_nesting, $max_nesting);\n\
    \    }\n    return @max_nesting;\n}", "my $str = shift;\n    my @groups = split(/\\\
    s+/, $str);\n    my @max_depth;\n    foreach my $group (@groups) {\n        my\
    \ $depth = 0;\n        my $max_depth = 0;\n        foreach my $char (split(//,\
    \ $group)) {\n            if ($char eq \"(\") {\n                $depth++;\n \
    \               if ($depth > $max_depth) {\n                    $max_depth = $depth;\n\
    \                }\n            }\n            elsif ($char eq \")\") {\n    \
    \            $depth--;\n            }\n        }\n        push @max_depth, $max_depth;\n\
    \    }\n    return @max_depth;\n}", "my $parens = shift;\n    my @parens_array\
    \ = split(/ /, $parens);\n    my @max_nesting_array;\n    foreach my $parens_group\
    \ (@parens_array) {\n        my $max_nesting = 0;\n        my $current_nesting\
    \ = 0;\n        foreach my $char (split(//, $parens_group)) {\n            if\
    \ ($char eq \"(\") {\n                $current_nesting++;\n                if\
    \ ($current_nesting > $max_nesting) {\n                    $max_nesting = $current_nesting;\n\
    \                }\n            } elsif ($char eq \")\") {\n                $current_nesting--;\n\
    \            }\n        }\n        push(@max_nesting_array, $max_nesting);\n \
    \   }\n    return @max_nesting_array;\n}", "my $str = shift;\n    my @parens =\
    \ split /\\s+/, $str;\n    my @levels;\n    foreach my $paren (@parens) {\n  \
    \      my $level = 0;\n        my $max_level = 0;\n        foreach my $char (split\
    \ //, $paren) {\n            if ($char eq '(') {\n                $level++;\n\
    \            } elsif ($char eq ')') {\n                $level--;\n           \
    \ }\n            $max_level = $level if $level > $max_level;\n        }\n    \
    \    push @levels, $max_level;\n    }\n    return @levels;\n}", "my $str = shift;\n\
    \    my @parens = split(/\\s+/, $str);\n    my @max_nesting;\n    foreach my $paren\
    \ (@parens) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n      \
    \  for (my $i = 0; $i < length($paren); $i++) {\n            my $char = substr($paren,\
    \ $i, 1);\n            if ($char eq \"(\") {\n                $nesting++;\n  \
    \          } elsif ($char eq \")\") {\n                $nesting--;\n         \
    \   }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n        push @max_nesting, $max_nesting;\n\
    \    }\n    return @max_nesting;\n}", "my $paren_string = shift;\n    my @paren_groups\
    \ = split /\\s+/, $paren_string;\n    my @max_nesting_levels;\n    foreach my\
    \ $paren_group (@paren_groups) {\n        my $max_nesting_level = 0;\n       \
    \ my $current_nesting_level = 0;\n        foreach my $paren (split //, $paren_group)\
    \ {\n            if ($paren eq '(') {\n                $current_nesting_level++;\n\
    \                if ($current_nesting_level > $max_nesting_level) {\n        \
    \            $max_nesting_level = $current_nesting_level;\n                }\n\
    \            } elsif ($paren eq ')') {\n                $current_nesting_level--;\n\
    \            }\n        }\n        push @max_nesting_levels, $max_nesting_level;\n\
    \    }\n    return @max_nesting_levels;\n}", "my ($parens) = @_;\n    my @parens_list\
    \ = split(/\\s+/, $parens);\n    my @nested_parens;\n    foreach my $paren (@parens_list)\
    \ {\n        my $nested_paren = 0;\n        my $max_nested_paren = 0;\n      \
    \  for (my $i = 0; $i < length($paren); $i++) {\n            my $char = substr($paren,\
    \ $i, 1);\n            if ($char eq \"(\") {\n                $nested_paren++;\n\
    \            } elsif ($char eq \")\") {\n                $nested_paren--;\n  \
    \          }\n            if ($nested_paren > $max_nested_paren) {\n         \
    \       $max_nested_paren = $nested_paren;\n            }\n        }\n       \
    \ push(@nested_parens, $max_nested_paren);\n    }\n    return @nested_parens;\n\
    }", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @nested_parens;\n\
    \    foreach my $paren (@parens) {\n        my $nested_paren = 0;\n        my\
    \ $paren_count = 0;\n        for (my $i = 0; $i < length($paren); $i++) {\n  \
    \          if (substr($paren, $i, 1) eq \"(\") {\n                $paren_count++;\n\
    \                if ($paren_count > $nested_paren) {\n                    $nested_paren\
    \ = $paren_count;\n                }\n            } elsif (substr($paren, $i,\
    \ 1) eq \")\") {\n                $paren_count--;\n            }\n        }\n\
    \        push(@nested_parens, $nested_paren);\n    }\n    return @nested_parens;\n\
    }", "my ($parens) = @_;\n    my @parens = split(/\\s+/, $parens);\n    my @levels;\n\
    \    foreach my $p (@parens) {\n        my $level = 0;\n        my $max_level\
    \ = 0;\n        foreach my $c (split(//, $p)) {\n            if ($c eq '(') {\n\
    \                $level++;\n            } elsif ($c eq ')') {\n              \
    \  $level--;\n            }\n            $max_level = $level if $level > $max_level;\n\
    \        }\n        push @levels, $max_level;\n    }\n    return @levels;\n}",
  "my $string = shift;\n    my @parens = split(/\\s+/, $string);\n    my @result;\n\
    \    foreach my $paren (@parens) {\n        my $max_depth = 0;\n        my $depth\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $depth++;\n            } elsif ($char eq \")\"\
    ) {\n                $depth--;\n            }\n            $max_depth = $depth\
    \ if $depth > $max_depth;\n        }\n        push @result, $max_depth;\n    }\n\
    \    return @result;\n}", "my $parens = shift;\n    my @parens_list = split(/\\\
    s+/, $parens);\n    my @result;\n    foreach my $paren (@parens_list) {\n    \
    \    my $max_level = 0;\n        my $level = 0;\n        foreach my $char (split(//,\
    \ $paren)) {\n            if ($char eq \"(\") {\n                $level++;\n \
    \           }\n            elsif ($char eq \")\") {\n                $level--;\n\
    \            }\n            $max_level = $level if $level > $max_level;\n    \
    \    }\n        push @result, $max_level;\n    }\n    return @result;\n}", "my\
    \ $parens = shift;\n    my @parens_arr = split(/\\s+/, $parens);\n    my @max_nesting;\n\
    \    foreach my $paren (@parens_arr) {\n        my $max_nesting = 0;\n       \
    \ my $curr_nesting = 0;\n        for (my $i = 0; $i < length($paren); $i++) {\n\
    \            if (substr($paren, $i, 1) eq \"(\") {\n                $curr_nesting++;\n\
    \            } elsif (substr($paren, $i, 1) eq \")\") {\n                $curr_nesting--;\n\
    \            }\n            if ($curr_nesting > $max_nesting) {\n            \
    \    $max_nesting = $curr_nesting;\n            }\n        }\n        push(@max_nesting,\
    \ $max_nesting);\n    }\n    return @max_nesting;\n}", "my $input = shift;\n \
    \   my @groups = split(/\\s+/, $input);\n    my @output;\n    for my $group (@groups)\
    \ {\n        my $count = 0;\n        my $max = 0;\n        for my $char (split(//,\
    \ $group)) {\n            if ($char eq \"(\") {\n                $count++;\n \
    \               $max = $count if $count > $max;\n            }\n            elsif\
    \ ($char eq \")\") {\n                $count--;\n            }\n        }\n  \
    \      push @output, $max;\n    }\n    return @output;\n}", "my $string = shift;\n\
    \    my @parens = split /\\s+/, $string;\n    my @max_nesting;\n    for my $paren\
    \ (@parens) {\n        my $max_nesting = 0;\n        my $nesting = 0;\n      \
    \  for my $char (split //, $paren) {\n            if ($char eq '(') {\n      \
    \          $nesting++;\n                $max_nesting = $nesting if $nesting >\
    \ $max_nesting;\n            }\n            elsif ($char eq ')') {\n         \
    \       $nesting--;\n            }\n        }\n        push @max_nesting, $max_nesting;\n\
    \    }\n    return @max_nesting;\n}", "my $str = shift;\n    my @parens = split\
    \ /\\s+/, $str;\n    my @levels;\n    for my $paren (@parens) {\n        my $level\
    \ = 0;\n        my $max_level = 0;\n        for my $c (split //, $paren) {\n \
    \           if ($c eq '(') {\n                $level++;\n                $max_level\
    \ = $level if $level > $max_level;\n            }\n            elsif ($c eq ')')\
    \ {\n                $level--;\n            }\n        }\n        push @levels,\
    \ $max_level;\n    }\n    return @levels;\n}", "my ($parens) = @_;\n    my @parens_arr\
    \ = split(/\\s+/, $parens);\n    my @max_nesting_levels;\n    foreach my $paren\
    \ (@parens_arr) {\n        my $max_nesting_level = 0;\n        my $curr_nesting_level\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $curr_nesting_level++;\n            } elsif ($char\
    \ eq \")\") {\n                $curr_nesting_level--;\n            }\n       \
    \     if ($curr_nesting_level > $max_nesting_level) {\n                $max_nesting_level\
    \ = $curr_nesting_level;\n            }\n        }\n        push(@max_nesting_levels,\
    \ $max_nesting_level);\n    }\n    return @max_nesting_levels;\n}", "my $string\
    \ = shift;\n    my @parens = split(/\\s+/, $string);\n    my @max_nesting;\n \
    \   foreach my $paren (@parens) {\n        my $max_nesting = 0;\n        my $nesting\
    \ = 0;\n        foreach my $char (split(//, $paren)) {\n            if ($char\
    \ eq \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting)\
    \ {\n                    $max_nesting = $nesting;\n                }\n       \
    \     } elsif ($char eq \")\") {\n                $nesting--;\n            }\n\
    \        }\n        push @max_nesting, $max_nesting;\n    }\n    return @max_nesting;\n\
    }", "my $parens = shift;\n    my @parens_groups = split(/\\s+/, $parens);\n  \
    \  my @max_nesting_levels;\n    foreach my $group (@parens_groups) {\n       \
    \ my $max_nesting_level = 0;\n        my $current_nesting_level = 0;\n       \
    \ foreach my $char (split(//, $group)) {\n            if ($char eq \"(\") {\n\
    \                $current_nesting_level++;\n                if ($current_nesting_level\
    \ > $max_nesting_level) {\n                    $max_nesting_level = $current_nesting_level;\n\
    \                }\n            }\n            elsif ($char eq \")\") {\n    \
    \            $current_nesting_level--;\n            }\n        }\n        push(@max_nesting_levels,\
    \ $max_nesting_level);\n    }\n    return @max_nesting_levels;\n}", "my $str =\
    \ shift;\n    my @parens = split /\\s+/, $str;\n    my @nest_levels;\n    for\
    \ my $paren (@parens) {\n        my $level = 0;\n        my $max_level = 0;\n\
    \        for my $char (split //, $paren) {\n            if ($char eq '(') {\n\
    \                $level++;\n                $max_level = $level if $level > $max_level;\n\
    \            }\n            elsif ($char eq ')') {\n                $level--;\n\
    \            }\n        }\n        push @nest_levels, $max_level;\n    }\n   \
    \ return @nest_levels;\n}", "my ($parens) = @_;\n    my @parens_list = split(/\\\
    s+/, $parens);\n    my @nested_parens;\n    foreach my $paren (@parens_list) {\n\
    \        my $nested_paren = 0;\n        my $max_nested_paren = 0;\n        foreach\
    \ my $char (split(//, $paren)) {\n            if ($char eq \"(\") {\n        \
    \        $nested_paren++;\n                if ($nested_paren > $max_nested_paren)\
    \ {\n                    $max_nested_paren = $nested_paren;\n                }\n\
    \            } elsif ($char eq \")\") {\n                $nested_paren--;\n  \
    \          }\n        }\n        push(@nested_parens, $max_nested_paren);\n  \
    \  }\n    return @nested_parens;\n}", "my ($str) = @_;\n    my @parens = split\
    \ /\\s+/, $str;\n    my @result;\n    foreach my $paren (@parens) {\n        my\
    \ $max_nesting = 0;\n        my $curr_nesting = 0;\n        foreach my $char (split\
    \ //, $paren) {\n            if ($char eq '(') {\n                $curr_nesting++;\n\
    \                $max_nesting = $curr_nesting if $curr_nesting > $max_nesting;\n\
    \            } elsif ($char eq ')') {\n                $curr_nesting--;\n    \
    \        }\n        }\n        push @result, $max_nesting;\n    }\n    return\
    \ @result;\n}", "my ($parens) = @_;\n    my @parens_groups = split(/\\s+/, $parens);\n\
    \    my @max_nesting_levels;\n    foreach my $parens_group (@parens_groups) {\n\
    \        my $max_nesting_level = 0;\n        my $nesting_level = 0;\n        foreach\
    \ my $char (split(//, $parens_group)) {\n            if ($char eq \"(\") {\n \
    \               $nesting_level++;\n                if ($nesting_level > $max_nesting_level)\
    \ {\n                    $max_nesting_level = $nesting_level;\n              \
    \  }\n            }\n            elsif ($char eq \")\") {\n                $nesting_level--;\n\
    \            }\n        }\n        push(@max_nesting_levels, $max_nesting_level);\n\
    \    }\n    return @max_nesting_levels;\n}", "my $str = shift;\n    my @groups\
    \ = split(/\\s+/, $str);\n    my @result;\n    foreach my $group (@groups) {\n\
    \        my $max_level = 0;\n        my $level = 0;\n        my @chars = split(//,\
    \ $group);\n        foreach my $char (@chars) {\n            if ($char eq \"(\"\
    ) {\n                $level++;\n                if ($level > $max_level) {\n \
    \                   $max_level = $level;\n                }\n            } elsif\
    \ ($char eq \")\") {\n                $level--;\n            }\n        }\n  \
    \      push @result, $max_level;\n    }\n    return @result;\n}", "my ($input)\
    \ = @_;\n    my @output;\n    my @groups = split(/ /, $input);\n    foreach my\
    \ $group (@groups) {\n        my $max_depth = 0;\n        my $depth = 0;\n   \
    \     foreach my $char (split(//, $group)) {\n            if ($char eq \"(\")\
    \ {\n                $depth++;\n                if ($depth > $max_depth) {\n \
    \                   $max_depth = $depth;\n                }\n            } elsif\
    \ ($char eq \")\") {\n                $depth--;\n            }\n        }\n  \
    \      push(@output, $max_depth);\n    }\n    return @output;\n}", "my $parens\
    \ = shift;\n    my @parens_array = split(/ /, $parens);\n    my @max_nesting_array;\n\
    \    foreach my $parens_group (@parens_array) {\n        my $max_nesting = 0;\n\
    \        my $current_nesting = 0;\n        foreach my $parens_char (split(//,\
    \ $parens_group)) {\n            if ($parens_char eq \"(\") {\n              \
    \  $current_nesting++;\n            } elsif ($parens_char eq \")\") {\n      \
    \          $current_nesting--;\n            }\n            if ($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        }\n        push(@max_nesting_array, $max_nesting);\n    }\n\
    \    return @max_nesting_array;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
