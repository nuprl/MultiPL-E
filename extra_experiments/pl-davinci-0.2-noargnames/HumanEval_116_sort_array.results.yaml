language: pl
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n     \
    \   my $y_ones = 0;\n        while ($x) {\n            $x_ones++ if $x % 2;\n\
    \            $x /= 2;\n        }\n        while ($y) {\n            $y_ones++\
    \ if $y % 2;\n            $y /= 2;\n        }\n        if ($x_ones == $y_ones)\
    \ {\n            return $a <=> $b;\n        }\n        return $x_ones <=> $y_ones;\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        scalar(split(//, unpack(\"B*\", pack(\"\
    N\", $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, unpack(\"B*\", pack(\"N\", $a)));\n \
    \       my $b_ones = () = split(//, unpack(\"B*\", pack(\"N\", $b)));\n      \
    \  $a_ones <=> $b_ones || $a <=> $b;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $a_bin = sprintf(\"%b\", $a);\n        my $b_bin = sprintf(\"%b\", $b);\n\
    \        my $a_ones = $a_bin =~ tr/1//;\n        my $b_ones = $b_bin =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b;\n    } @a;\n    return @b;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map {\n    \
    \    my $x = $_;\n        my $y = sprintf(\"%b\", $x);\n        my $z = $y =~\
    \ tr/1//;\n        [$x, $z];\n    } @a;\n    my @c = sort { $a->[1] <=> $b->[1]\
    \ || $a->[0] <=> $b->[0] } @b;\n    return map { $_->[0] } @c;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        scalar(split(//, unpack(\"B*\", pack(\"\
    N\", $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        scalar(grep { $_ eq '1' } split //,\
    \ sprintf(\"%b\", $a)) <=> scalar(grep { $_ eq '1' } split //, sprintf(\"%b\"\
    , $b))\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted_array\
    \ = sort {\n        my $a_ones = count_ones($a);\n        my $b_ones = count_ones($b);\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @array;\n    return @sorted_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n     \
    \   my $y_ones = 0;\n        while ($x) {\n            $x_ones++ if $x % 2;\n\
    \            $x /= 2;\n        }\n        while ($y) {\n            $y_ones++\
    \ if $y % 2;\n            $y /= 2;\n        }\n        if ($x_ones == $y_ones)\
    \ {\n            return $a <=> $b;\n        }\n        return $x_ones <=> $y_ones;\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map {\n    \
    \    my $n = $_;\n        my $c = 0;\n        while ($n) {\n            $c++ if\
    \ $n % 2;\n            $n /= 2;\n        }\n        [$c, $_];\n    } @a;\n   \
    \ my @c = sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @b;\n    return\
    \ map { $_->[1] } @c;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        $x =~ s/[^1]//g;\n    \
    \    $y =~ s/[^1]//g;\n        length($x) <=> length($y) || $a <=> $b;\n    }\
    \ @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2,\
    \ 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $x = $a;\n        my $y = $b;\n        my $c = 0;\n        while ($x\
    \ > 0 || $y > 0) {\n            $c++ if $x % 2;\n            $c-- if $y % 2;\n\
    \            $x = int($x / 2);\n            $y = int($y / 2);\n        }\n   \
    \     $c || $a <=> $b;\n    } @a;\n    return @b;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b ||\n        scalar(split //, unpack(\"B*\", pack(\"N\"\
    , $a))) <=> scalar(split //, unpack(\"B*\", pack(\"N\", $b)))\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { [$_, sprintf(\"\
    %b\", $_)] } @a;\n    my @c = sort { $a->[1] cmp $b->[1] } @b;\n    my @d = sort\
    \ { $a->[1] <=> $b->[1] } @c;\n    return map { $_->[0] } @d;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf \"%b\", $a;\n        my $b_ones\
    \ = () = split //, sprintf \"%b\", $b;\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_bin = sprintf(\"%b\", $a);\n        my $b_bin = sprintf(\"\
    %b\", $b);\n        $a_bin =~ tr/1//;\n        $b_bin =~ tr/1//;\n        $a_bin\
    \ <=> $b_bin || $a <=> $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my ($array) = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones == $b_ones ? $a <=> $b\
    \ : $a_ones <=> $b_ones;\n    } @$array;\n    return \\@sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @arr;\n    return @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b ||\n        scalar(grep { $_ eq '1' } split //, sprintf(\"\
    %b\", $a)) <=>\n        scalar(grep { $_ eq '1' } split //, sprintf(\"%b\", $b))\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack(\"B*\", pack(\"N\", $a));\n        my $b_ones\
    \ = () = unpack(\"B*\", pack(\"N\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my $arr = shift;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @$arr;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $x = $a;\n        my $y = $b;\n        my $c = 0;\n        while ($x\
    \ > 0 || $y > 0) {\n            $c++ if $x % 2;\n            $c-- if $y % 2;\n\
    \            $x /= 2;\n            $y /= 2;\n        }\n        $c || $a <=> $b;\n\
    \    } @a;\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        scalar(split(//, unpack(\"B*\", pack(\"\
    N\", $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { [ $_,\
    \ sprintf(\"%b\", $_) =~ tr/1// ] } @a;\n    my @c = sort { $a->[1] <=> $b->[1]\
    \ || $a->[0] <=> $b->[0] } @b;\n    return map { $_->[0] } @c;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack('B*', pack('N', $a)) =~ /1/g;\n        my\
    \ $b_ones = () = unpack('B*', pack('N', $b)) =~ /1/g;\n        $a_ones <=> $b_ones\
    \ || $a <=> $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { [$_, unpack(\"\
    %32b*\", $_)] } @a;\n    my @c = sort { $a->[1] <=> $b->[1] || $a->[0] <=> $b->[0]\
    \ } @b;\n    return map { $_->[0] } @c;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones or $a <=> $b;\n    } @arr;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    return sort {\n\
    \        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n    \
    \    $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    return sort {\n\
    \        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b ||\n        scalar(split //, unpack 'B*', pack 'N', $a)\
    \ <=> scalar(split //, unpack 'B*', pack 'N', $b)\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        if ($a_ones == $b_ones) {\n\
    \            return $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    return sort {\n\
    \        my $a_ones = () = split(//, unpack(\"B*\", pack(\"N\", $a)));\n     \
    \   my $b_ones = () = split(//, unpack(\"B*\", pack(\"N\", $b)));\n        $a_ones\
    \ <=> $b_ones || $a <=> $b\n    } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $x = $a;\n        my $y = $b;\n        my $c = 0;\n        while ($x\
    \ > 0 || $y > 0) {\n            $c++ if $x % 2 != $y % 2;\n            $x /= 2;\n\
    \            $y /= 2;\n        }\n        $c == 0 ? $a <=> $b : $c;\n    } @a;\n\
    \    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones == $b_ones ? $a <=>\
    \ $b : $a_ones <=> $b_ones;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        scalar(split(//, unpack(\"B*\", pack(\"\
    N\", $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $x = $a;\n        my $y = $b;\n        my $c = 0;\n        while ($x\
    \ > 0 || $y > 0) {\n            $c++ if $x % 2;\n            $c-- if $y % 2;\n\
    \            $x /= 2;\n            $y /= 2;\n        }\n        $c || $a <=> $b;\n\
    \    } @a;\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @arr;\n    return @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        if ($a_ones == $b_ones) {\n\
    \            return $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b ||\n        scalar(split(//, unpack(\"B*\", pack(\"N\"\
    , $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n    } @arr;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    return sort {\n  \
    \      my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones =\
    \ () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, unpack(\"B*\", pack(\"N\", $a)));\n \
    \       my $b_ones = () = split(//, unpack(\"B*\", pack(\"N\", $b)));\n      \
    \  $a_ones <=> $b_ones || $a <=> $b;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_bin = sprintf(\"%b\", $a);\n        my $b_bin = sprintf(\"\
    %b\", $b);\n        $a_bin =~ tr/1//;\n        $b_bin =~ tr/1//;\n        $a_bin\
    \ <=> $b_bin || $a <=> $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        if ($a_ones == $b_ones) {\n\
    \            return $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack(\"B*\", pack(\"N\", $a)) =~ /1/g;\n    \
    \    my $b_ones = () = unpack(\"B*\", pack(\"N\", $b)) =~ /1/g;\n        $a_ones\
    \ <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = scalar(grep { $_ == 1 } split(//, sprintf(\"%b\", $a)));\n\
    \        my $b_ones = scalar(grep { $_ == 1 } split(//, sprintf(\"%b\", $b)));\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = scalar(grep { $_ eq '1' } split //, sprintf(\"%b\",\
    \ $a));\n        my $b_ones = scalar(grep { $_ eq '1' } split //, sprintf(\"%b\"\
    , $b));\n        $a_ones <=> $b_ones || $a <=> $b;\n    } @array;\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack('B*', pack('N', $a)) =~ /1/g;\n        my\
    \ $b_ones = () = unpack('B*', pack('N', $b)) =~ /1/g;\n        $a_ones <=> $b_ones\
    \ || $a <=> $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n     \
    \   my $y_ones = 0;\n        while ($x > 0) {\n            $x_ones++ if $x % 2;\n\
    \            $x /= 2;\n        }\n        while ($y > 0) {\n            $y_ones++\
    \ if $y % 2;\n            $y /= 2;\n        }\n        $x_ones <=> $y_ones ||\
    \ $a <=> $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $a_ones = () = unpack(\"B*\", pack(\"N\", $a));\n        my $b_ones =\
    \ () = unpack(\"B*\", pack(\"N\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @a;\n    return @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $x = $a;\n        my $y = $b;\n        my $c = 0;\n        while ($x\
    \ > 0) {\n            $c++ if $x % 2;\n            $x /= 2;\n        }\n     \
    \   my $d = 0;\n        while ($y > 0) {\n            $d++ if $y % 2;\n      \
    \      $y /= 2;\n        }\n        $c <=> $d || $a <=> $b;\n    } @a;\n    return\
    \ @b;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { [$_, sprintf(\"\
    %b\", $_)] } @a;\n    my @c = sort { $a->[1] cmp $b->[1] } @b;\n    my @d = sort\
    \ { $a->[1] <=> $b->[1] } @c;\n    my @e = map { $_->[0] } @d;\n    return @e;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $bin_a = sprintf(\"%b\", $a);\n        my $bin_b = sprintf(\"\
    %b\", $b);\n        $bin_a =~ tr/1//;\n        $bin_b =~ tr/1//;\n        $bin_a\
    \ <=> $bin_b || $a <=> $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_bin = sprintf(\"%b\", $a);\n        my $b_bin = sprintf(\"\
    %b\", $b);\n        my $a_ones = $a_bin =~ tr/1//;\n        my $b_ones = $b_bin\
    \ =~ tr/1//;\n        $a_ones <=> $b_ones || $a <=> $b;\n    } @array;\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf \"%b\", $a;\n        my $b_ones\
    \ = () = split //, sprintf \"%b\", $b;\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map {\n    \
    \    my $n = $_;\n        my $b = sprintf(\"%b\", $n);\n        my $c = $b =~\
    \ tr/1//;\n        [$c, $n];\n    } @a;\n    my @c = sort {\n        $a->[0] <=>\
    \ $b->[0] || $a->[1] <=> $b->[1]\n    } @b;\n    my @d = map { $_->[1] } @c;\n\
    \    return @d;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_bin = sprintf(\"%b\", $a);\n        my $b_bin = sprintf(\"\
    %b\", $b);\n        $a_bin =~ tr/1//;\n        $b_bin =~ tr/1//;\n        $a_bin\
    \ <=> $b_bin || $a <=> $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, unpack(\"B*\", pack(\"N\", $a)));\n \
    \       my $b_ones = () = split(//, unpack(\"B*\", pack(\"N\", $b)));\n      \
    \  $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my ($arr) = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @$arr;\n    return \\@sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $bin_a = sprintf(\"%b\", $a);\n        my $bin_b = sprintf(\"\
    %b\", $b);\n        $bin_a =~ tr/1//;\n        $bin_b =~ tr/1//;\n        $bin_a\
    \ <=> $bin_b || $a <=> $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $bin_a = sprintf(\"%b\", $a);\n        my $bin_b = sprintf(\"\
    %b\", $b);\n        $bin_a =~ tr/1//;\n        $bin_b =~ tr/1//;\n        $bin_a\
    \ <=> $bin_b || $a <=> $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack(\"B*\", pack(\"N\", $a)) =~ /1/g;\n    \
    \    my $b_ones = () = unpack(\"B*\", pack(\"N\", $b)) =~ /1/g;\n        $a_ones\
    \ <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map {\n    \
    \    my $n = $_;\n        my $b = sprintf(\"%b\", $n);\n        my $c = $b =~\
    \ tr/1//;\n        [$c, $n];\n    } @a;\n    my @c = sort { $a->[0] <=> $b->[0]\
    \ || $a->[1] <=> $b->[1] } @b;\n    return map { $_->[1] } @c;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted_array\
    \ = sort {\n        my $x_ones = ($x =~ tr/1//);\n        my $y_ones = ($y =~\
    \ tr/1//);\n        if ($x_ones == $y_ones) {\n            return $x <=> $y;\n\
    \        }\n        return $x_ones <=> $y_ones;\n    } @array;\n    return @sorted_array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n     \
    \   my $y_ones = 0;\n        while ($x > 0) {\n            $x_ones++ if $x % 2;\n\
    \            $x /= 2;\n        }\n        while ($y > 0) {\n            $y_ones++\
    \ if $y % 2;\n            $y /= 2;\n        }\n        if ($x_ones == $y_ones)\
    \ {\n            return $a <=> $b;\n        }\n        return $x_ones <=> $y_ones;\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    return sort {\n\
    \        my $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n        my\
    \ $y_ones = 0;\n        while ($x > 0) {\n            $x_ones++ if $x % 2 == 1;\n\
    \            $x /= 2;\n        }\n        while ($y > 0) {\n            $y_ones++\
    \ if $y % 2 == 1;\n            $y /= 2;\n        }\n        if ($x_ones == $y_ones)\
    \ {\n            return $a <=> $b;\n        }\n        else {\n            return\
    \ $x_ones <=> $y_ones;\n        }\n    } @array;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $count_a = () = split //, sprintf(\"%b\", $a);\n        my $count_b\
    \ = () = split //, sprintf(\"%b\", $b);\n        $count_a <=> $count_b || $a <=>\
    \ $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $ones_a = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $ones_b\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $ones_a <=> $ones_b || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    return sort {\n    \
    \    my $x = $a;\n        my $y = $b;\n        $x =~ s/[^1]//g;\n        $y =~\
    \ s/[^1]//g;\n        $x cmp $y || $a <=> $b\n    } @a;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack(\"B*\", pack(\"N\", $a));\n        my $b_ones\
    \ = () = unpack(\"B*\", pack(\"N\", $b));\n        $a_ones == $b_ones ? $a <=>\
    \ $b : $a_ones <=> $b_ones;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        if ($a_ones == $b_ones) {\n\
    \            return $a <=> $b;\n        }\n        return $a_ones <=> $b_ones;\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = scalar(grep { $_ eq '1' } split(//, sprintf(\"%b\",\
    \ $a)));\n        my $b_ones = scalar(grep { $_ eq '1' } split(//, sprintf(\"\
    %b\", $b)));\n        $a_ones <=> $b_ones || $a <=> $b;\n    } @array;\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { $_->[0]\
    \ }\n            sort { $a->[1] <=> $b->[1] || $a->[0] <=> $b->[0] }\n       \
    \     map { [ $_, unpack(\"%32b*\", pack(\"N\", $_)) ] } @a;\n    return @b;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_bin = sprintf(\"%b\", $a);\n        my $b_bin = sprintf(\"\
    %b\", $b);\n        $a_bin =~ tr/1//;\n        $b_bin =~ tr/1//;\n        $a_bin\
    \ <=> $b_bin || $a <=> $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    return sort {\n\
    \        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @array;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        else {\n            return $a_ones <=> $b_ones;\n        }\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        scalar(split(//, unpack(\"B*\", pack(\"N\", $a)))) <=> scalar(split(//,\
    \ unpack(\"B*\", pack(\"N\", $b))))\n        || $a <=> $b\n    } @arr;\n    return\
    \ @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3,\
    \ 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        my $x_ones = () = $x =~\
    \ /1/g;\n        my $y_ones = () = $y =~ /1/g;\n        if ($x_ones == $y_ones)\
    \ {\n            return $x <=> $y;\n        }\n        return $x_ones <=> $y_ones;\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b ||\n        scalar(grep { $_ == 1 } split //, sprintf \"\
    %b\", $a) <=>\n        scalar(grep { $_ == 1 } split //, sprintf \"%b\", $b)\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $bin_a = sprintf(\"%b\", $a);\n        my $bin_b = sprintf(\"\
    %b\", $b);\n        $bin_a =~ tr/1//;\n        $bin_b =~ tr/1//;\n        $bin_a\
    \ <=> $bin_b || $a <=> $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { [$_, sprintf(\"\
    %b\", $_)] } @a;\n    my @c = sort { $a->[1] cmp $b->[1] } @b;\n    my @d = sort\
    \ { $a->[1] <=> $b->[1] } @c;\n    my @e = map { $_->[0] } @d;\n    return @e;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, unpack(\"B*\", pack(\"N\", $a)));\n \
    \       my $b_ones = () = split(//, unpack(\"B*\", pack(\"N\", $b)));\n      \
    \  $a_ones <=> $b_ones || $a <=> $b;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack(\"B*\", pack(\"N\", $a)) =~ /1/g;\n    \
    \    my $b_ones = () = unpack(\"B*\", pack(\"N\", $b)) =~ /1/g;\n        $a_ones\
    \ <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    return sort {\n\
    \        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n    \
    \    $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b ||\n        scalar(grep { $_ eq '1' } split //, sprintf(\"\
    %b\", $a)) <=>\n        scalar(grep { $_ eq '1' } split //, sprintf(\"%b\", $b))\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { [$_, sprintf(\"\
    %b\", $_)] } @a;\n    my @c = sort { $a->[1] cmp $b->[1] || $a->[0] <=> $b->[0]\
    \ } @b;\n    return map { $_->[0] } @c;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map {\n    \
    \    my $x = $_;\n        my $y = sprintf \"%b\", $x;\n        $y =~ s/0//g;\n\
    \        [$x, length($y), $y]\n    } @a;\n    my @c = sort {\n        $a->[1]\
    \ <=> $b->[1] || $a->[0] <=> $b->[0]\n    } @b;\n    return map { $_->[0] } @c;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $x = $a;\n        my $y = $b;\n        $x =~ s/[^1]//g;\n        $y =~\
    \ s/[^1]//g;\n        $x cmp $y || $a <=> $b;\n    } @a;\n    return @b;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack(\"B*\", pack(\"N\", $a)) =~ /1/g;\n    \
    \    my $b_ones = () = unpack(\"B*\", pack(\"N\", $b)) =~ /1/g;\n        $a_ones\
    \ <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n     \
    \   my $y_ones = 0;\n        while ($x > 0) {\n            $x_ones++ if $x % 2;\n\
    \            $x /= 2;\n        }\n        while ($y > 0) {\n            $y_ones++\
    \ if $y % 2;\n            $y /= 2;\n        }\n        if ($x_ones == $y_ones)\
    \ {\n            $a <=> $b;\n        } else {\n            $x_ones <=> $y_ones;\n\
    \        }\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $x = $a;\n        my $y = $b;\n        my $x_ones = 0;\n     \
    \   my $y_ones = 0;\n        while ($x > 0) {\n            $x_ones++ if $x % 2;\n\
    \            $x /= 2;\n        }\n        while ($y > 0) {\n            $y_ones++\
    \ if $y % 2;\n            $y /= 2;\n        }\n        $x_ones <=> $y_ones ||\
    \ $a <=> $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        (unpack(\"B*\", pack(\"N\", $a)) =~\
    \ tr/1//) <=> (unpack(\"B*\", pack(\"N\", $b)) =~ tr/1//)\n    } @array;\n   \
    \ return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = unpack(\"B*\", pack(\"N\", $a)) =~ /1/g;\n    \
    \    my $b_ones = () = unpack(\"B*\", pack(\"N\", $b)) =~ /1/g;\n        $a_ones\
    \ <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, unpack(\"B*\", pack(\"N\", $a)));\n \
    \       my $b_ones = () = split(//, unpack(\"B*\", pack(\"N\", $b)));\n      \
    \  $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = sort {\n   \
    \     my $x = $a;\n        my $y = $b;\n        $x =~ s/[^1]//g;\n        $y =~\
    \ s/[^1]//g;\n        $x cmp $y || $a <=> $b;\n    } @a;\n    return @b;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b ||\n        $a =~ tr/1// <=> $b =~ tr/1//\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        else {\n            return $a_ones <=> $b_ones;\n        }\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, sprintf(\"%b\", $a));\n        my $b_ones\
    \ = () = split(//, sprintf(\"%b\", $b));\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = sprintf(\"%b\", $a) =~ /1/g;\n        my $b_ones\
    \ = () = sprintf(\"%b\", $b) =~ /1/g;\n        $a_ones <=> $b_ones || $a <=> $b\n\
    \    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b;\n    } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        scalar(split(//, unpack(\"B*\", pack(\"\
    N\", $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        return $a_ones <=> $b_ones;\n    } @arr;\n    return @sorted;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n \
    \       if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = scalar(grep { $_ eq '1' } split(//, sprintf(\"%b\",\
    \ $a)));\n        my $b_ones = scalar(grep { $_ eq '1' } split(//, sprintf(\"\
    %b\", $b)));\n        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n\
    \        }\n        return $a_ones <=> $b_ones;\n    } @arr;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split(//, unpack(\"B*\", pack(\"N\", $a)));\n \
    \       my $b_ones = () = split(//, unpack(\"B*\", pack(\"N\", $b)));\n      \
    \  $a_ones <=> $b_ones || $a <=> $b;\n    } @array;\n    return @sorted;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = ($a =~ tr/1//);\n        my $b_ones = ($b =~ tr/1//);\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_bin = sprintf(\"%b\", $a);\n        my $b_bin = sprintf(\"\
    %b\", $b);\n        $a_bin =~ s/0//g;\n        $b_bin =~ s/0//g;\n        length($a_bin)\
    \ <=> length($b_bin) || $a <=> $b;\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @a = @_;\n    my @b = map { {dec =>\
    \ $_, bin => sprintf(\"%b\", $_)} } @a;\n    my @c = sort { $a->{bin} cmp $b->{bin}\
    \ || $a->{dec} <=> $b->{dec} } @b;\n    return map { $_->{dec} } @c;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n            ||\n        scalar(split(//, unpack(\"B*\"\
    , pack(\"N\", $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n\
    \    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        $a <=> $b\n        ||\n        scalar(split(//, unpack(\"B*\", pack(\"\
    N\", $a)))) <=> scalar(split(//, unpack(\"B*\", pack(\"N\", $b))))\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        if ($a_ones == $b_ones) {\n            return $a <=> $b;\n        }\n\
    \        else {\n            return $a_ones <=> $b_ones;\n        }\n    } @array;\n\
    \    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&sort_array;\n        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2,\
    \ 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([]),[])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = map\
    \ { $_->[0] }\n        sort { $a->[1] <=> $b->[1] }\n        map { [ $_, sprintf(\"\
    %b\", $_) =~ tr/1// ] } @array;\n    return @sorted;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = () = split //, sprintf(\"%b\", $a);\n        my $b_ones\
    \ = () = split //, sprintf(\"%b\", $b);\n        $a_ones <=> $b_ones || $a <=>\
    \ $b\n    } @arr;\n    return @sorted;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&sort_array;\n        if(eq_deeply($candidate->([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235875
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @array = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @array;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227844
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n\
    # [0, 1, 2, 3, 4]\nsub sort_array {\n    my @arr = @_;\n    my @sorted = sort\
    \ {\n        my $a_ones = $a =~ tr/1//;\n        my $b_ones = $b =~ tr/1//;\n\
    \        $a_ones <=> $b_ones || $a <=> $b\n    } @arr;\n    return @sorted;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
    \        if(eq_deeply($candidate->([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3])) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2,\
    \ 4, 8, 16, 32])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660235876
