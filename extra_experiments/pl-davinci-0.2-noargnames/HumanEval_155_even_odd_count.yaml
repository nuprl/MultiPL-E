name: HumanEval_155_even_odd_count
language: pl
prompt: "# Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n\
  # [1, 2]\nsub even_odd_count {\n    "
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n\
  \        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["my $num = shift;\n    my @digits = split(//, abs($num));\n    my $even\
    \ = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}", "my ($num) = @_;\n    my @digits\
    \ = split //, $num;\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my ($num) = @_;\n    my @digits = split //, $num;\n    my\
    \ $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n\
    \        if ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n\
    \            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split //, $num;\n    my $even = 0;\n \
    \   my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n\
    \            $even_count++;\n        } else {\n            $odd_count++;\n   \
    \     }\n        $num = int($num / 10);\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $n = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($n) {\n \
    \       if ($n % 2 == 0) {\n            $even++;\n        } else {\n         \
    \   $odd++;\n        }\n        $n = int($n / 10);\n    }\n    return [$even,\
    \ $odd];\n}", "my $num = shift;\n    my @digits = split(//, abs($num));\n    my\
    \ $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n\
    \        if ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n\
    \            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even = 0;\n\
    \    my $odd = 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, $num;\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n  \
    \      } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, $num;\n    my\
    \ $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n\
    \        if ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n\
    \            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num !=\
    \ 0) {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //, $num;\n  \
    \  my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $number = shift;\n    my $even_count = 0;\n    my $odd_count = 0;\n  \
    \  while ($number != 0) {\n        my $digit = $number % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $number = int($number / 10);\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split(//, $num);\n   \
    \ my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split '', abs($num);\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n        \
    \    $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n}",
  "my $num = shift;\n    my @digits = split(//, abs($num));\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, $num;\n    my $even = 0;\n    my $odd = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even = 0;\n\
    \    my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split(//,\
    \ abs($num));\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split //, $num;\n    my $even_count = 0;\n    my\
    \ $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my @counts = (0, 0);\n    for my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $counts[0]++;\n   \
    \     } else {\n            $counts[1]++;\n        }\n    }\n    return @counts;\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my ($num) = @_;\n\
    \    my @digits = split(//, $num);\n    my $even = 0;\n    my $odd = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n        \
    \    $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n}",
  "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even_count = 0;\n\
    \    my $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit % 2\
    \ == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num != 0) {\n        if ($num\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}",
  "my $num = shift;\n    my @digits = split(//, abs($num));\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num != 0) {\n        my $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n \
    \   }\n    return [$even, $odd];\n}", "my $n = shift;\n    my @digits = split\
    \ //, abs $n;\n    my $even = 0;\n    my $odd = 0;\n    for my $d (@digits) {\n\
    \        if ($d % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my\
    \ $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n   \
    \     if ($num % 2 == 0) {\n            $even++;\n        } else {\n         \
    \   $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return [$even,\
    \ $odd];\n}", "my $number = shift;\n    my @digits = split //, abs $number;\n\
    \    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n    \
    \    if ($digit % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_count++;\n        } else {\n            $odd_count++;\n     \
    \   }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n \
    \   my $even = 0;\n    my $odd = 0;\n    while ($num > 0) {\n        my $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n \
    \   }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    while ($num) {\n        my $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n\
    \            $odd_count++;\n        }\n        $num = int($num / 10);\n    }\n\
    \    return [$even_count, $odd_count];\n}", "my $num = shift;\n    my @digits\
    \ = split //, $num;\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n \
    \   while ($num) {\n        if ($num % 2 == 0) {\n            $even++;\n     \
    \   } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    my @digits = split(//, abs($num));\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $n = shift;\n    my $even = 0;\n    my $odd = 0;\n   \
    \ while ($n != 0) {\n        my $digit = $n % 10;\n        if ($digit % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $n = int($n / 10);\n    }\n    return [$even, $odd];\n}", "my $num =\
    \ shift;\n    my @digits = split //, $num;\n    my @result = (0, 0);\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $result[0]++;\n\
    \        } else {\n            $result[1]++;\n        }\n    }\n    return @result;\n\
    }", "my $num = shift;\n    my @digits = split //, $num;\n    my $even = 0;\n \
    \   my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split //, abs($num);\n    my $even_count = 0;\n \
    \   my $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit % 2\
    \ == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, $num;\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_count++;\n        } else {\n            $odd_count++;\n     \
    \   }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n \
    \   my $even = 0;\n    my $odd = 0;\n    while ($num > 0) {\n        my $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n \
    \   }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, $num;\n    my @result = (0, 0);\n    foreach my $digit (@digits) {\n   \
    \     if ($digit % 2 == 0) {\n            $result[0]++;\n        } else {\n  \
    \          $result[1]++;\n        }\n    }\n    return @result;\n}", "my $num\
    \ = shift;\n    my @digits = split //, $num;\n    my $even_count = 0;\n    my\
    \ $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my ($even, $odd) = (0, 0);\n    for\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $n = shift;\n    my $even = 0;\n    my $odd = 0;\n    my @digits = split\
    \ //, $n;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}", "my $num = shift;\n    my $even = 0;\n    my $odd\
    \ = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n    \
    \    if ($digit % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, $num;\n    my $even = 0;\n    my $odd = 0;\n    for\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, $num;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n\
    \    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split(//, abs($num));\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num != 0) {\n        my $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n \
    \   }\n    return [$even, $odd];\n}", "my $n = shift;\n    my $even = 0;\n   \
    \ my $odd = 0;\n    while ($n) {\n        if ($n % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $n = int($n / 10);\n\
    \    }\n    return [$even, $odd];\n}", "my $n = shift;\n    my @digits = split\
    \ //, abs $n;\n    my $even = 0;\n    my $odd = 0;\n    for my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if\
    \ ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, $num;\n    my $even = 0;\n \
    \   my $odd = 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split(//,\
    \ abs($num));\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n    \
    \    if ($digit % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $n = shift;\n\
    \    my @digits = split //, abs $n;\n    my ($even, $odd) = (0, 0);\n    for my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split(//, $num);\n    my $even = 0;\n\
    \    my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, $num;\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num != 0) {\n   \
    \     my $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    my @digits = split(//, $num);\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my @result = (0, 0);\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n\
    \        }\n    }\n    return @result;\n}", "my $num = shift;\n    my $even =\
    \ 0;\n    my $odd = 0;\n    while ($num) {\n        my $digit = $num % 10;\n \
    \       if ($digit % 2 == 0) {\n            $even++;\n        } else {\n     \
    \       $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even_count = 0;\n    my $odd_count = 0;\n    for (@digits) {\n      \
    \  if ($_ % 2 == 0) {\n            $even_count++;\n        } else {\n        \
    \    $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n}",
  "my $num = shift;\n    my @digits = split //, $num;\n    my $even_count = 0;\n \
    \   my $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit % 2\
    \ == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my @count = (0, 0);\n    for my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $count[0]++;\n    \
    \    } else {\n            $count[1]++;\n        }\n    }\n    return @count;\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num !=\
    \ 0) {\n        my $digit = $num % 10;\n        if ($digit % 2 == 0) {\n     \
    \       $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my\
    \ $num = shift;\n    my @digits = split(//, abs($num));\n    my $even = 0;\n \
    \   my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my ($n) = @_;\n    my $even = 0;\n   \
    \ my $odd = 0;\n    while ($n) {\n        if ($n % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $n = int($n / 10);\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, $num;\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n  \
    \      } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, $num;\n    my\
    \ $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}", "my ($num) = @_;\n    my $even\
    \ = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n     \
    \   $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my\
    \ $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n   \
    \     if ($num % 2 == 0) {\n            $even++;\n        } else {\n         \
    \   $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return [$even,\
    \ $odd];\n}", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while\
    \ ($num) {\n        if ($num % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n        $num = int($num / 10);\n    }\n \
    \   return [$even, $odd];\n}", "my $num = shift;\n    my $even = 0;\n    my $odd\
    \ = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split(//,\
    \ abs($num));\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split //, $num;\n    my $even_count = 0;\n    my\
    \ $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my @result = (0, 0);\n    for my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $result[0]++;\n   \
    \     } else {\n            $result[1]++;\n        }\n    }\n    return @result;\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n\
    \        if ($num % 2 == 0) {\n            $even++;\n        } else {\n      \
    \      $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return [$even,\
    \ $odd];\n}", "my $num = shift;\n    my @digits = split //, $num;\n    my $even\
    \ = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even\
    \ = 0;\n    my $odd = 0;\n    while ($num > 0) {\n        my $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my @even_odd_count = (0, 0);\n    foreach my $digit (@digits) {\n       \
    \ if ($digit % 2 == 0) {\n            $even_odd_count[0]++;\n        } else {\n\
    \            $even_odd_count[1]++;\n        }\n    }\n    return @even_odd_count;\n\
    }", "my $num = shift;\n    my @digits = split //, $num;\n    my @count = (0, 0);\n\
    \    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $count[0]++;\n\
    \        } else {\n            $count[1]++;\n        }\n    }\n    return @count;\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num >\
    \ 0) {\n        my $digit = $num % 10;\n        if ($digit % 2 == 0) {\n     \
    \       $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $n = shift;\n \
    \   my @digits = split //, $n;\n    my $even_count = 0;\n    my $odd_count = 0;\n\
    \    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n         \
    \   $even_count++;\n        } else {\n            $odd_count++;\n        }\n \
    \   }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n    my $even\
    \ = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n     \
    \   $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, $num;\n    my $even = 0;\n    my $odd = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $number = shift;\n    my @digits = split //, $number;\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n        \
    \    $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n}",
  "my $n = shift;\n    my @digits = split //, abs $n;\n    my @even_odd = (0, 0);\n\
    \    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_odd[0]++;\n\
    \        } else {\n            $even_odd[1]++;\n        }\n    }\n    return @even_odd;\n\
    }", "my $num = shift;\n    my @digits = split(//, abs($num));\n    my @count =\
    \ (0, 0);\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n\
    \            $count[0]++;\n        } else {\n            $count[1]++;\n      \
    \  }\n    }\n    return @count;\n}", "my $num = shift;\n    my $even = 0;\n  \
    \  my $odd = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n          \
    \  $even++;\n        } else {\n            $odd++;\n        }\n        $num =\
    \ int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n \
    \   my @digits = split //, $num;\n    my $even_count = 0;\n    my $odd_count =\
    \ 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n        \
    \    $even_count++;\n        } else {\n            $odd_count++;\n        }\n\
    \    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n  \
    \  foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n           \
    \ $even_count++;\n        } else {\n            $odd_count++;\n        }\n   \
    \ }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even = 0;\n\
    \    my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even = 0;\n\
    \    my $odd = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, $num;\n    my $even = 0;\n    my $odd = 0;\n    for\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    my @digits = split\
    \ //, $num;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //,\
    \ abs($num);\n    my ($even, $odd) = (0, 0);\n    foreach (@digits) {\n      \
    \  if ($_ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even\
    \ = 0;\n    my $odd = 0;\n    my @digits = split //, abs($num);\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split(//, abs($num));\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n        \
    \    $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n}",
  "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    my @result = ();\n \
    \   while ($num != 0) {\n        my $digit = $num % 10;\n        if ($digit %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n        $num = int($num / 10);\n    }\n    push @result, $even;\n   \
    \ push @result, $odd;\n    return @result;\n}", "my $num = shift;\n    my @digits\
    \ = split //, $num;\n    my $even = 0;\n    my $odd = 0;\n    for my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split //, abs($num);\n    my $even_count = 0;\n \
    \   my $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit % 2\
    \ == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2\
    \ == 0) {\n            $even++;\n        } else {\n            $odd++;\n     \
    \   }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my\
    \ $num = shift;\n    my @digits = split(//, abs($num));\n    my $even = 0;\n \
    \   my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even = 0;\n\
    \    my $odd = 0;\n    while ($num != 0) {\n        if ($num % 2 == 0) {\n   \
    \         $even++;\n        } else {\n            $odd++;\n        }\n       \
    \ $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n\
    \    foreach (@digits) {\n        if ($_ % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num !=\
    \ 0) {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "my $num = shift;\n    my @digits = split(//, abs($num));\n\
    \    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n    \
    \    if ($digit % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, $num;\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_count++;\n        } else {\n            $odd_count++;\n     \
    \   }\n    }\n    return [$even_count, $odd_count];\n}", "my $n = shift;\n   \
    \ my @digits = split //, abs $n;\n    my @count = (0, 0);\n    for my $digit (@digits)\
    \ {\n        $count[$digit % 2]++;\n    }\n    return @count;\n}", "my $num =\
    \ shift;\n    my @digits = split //, abs($num);\n    my @counts = (0, 0);\n  \
    \  foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n           \
    \ $counts[0]++;\n        } else {\n            $counts[1]++;\n        }\n    }\n\
    \    return @counts;\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my ($even, $odd) = (0, 0);\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    my @digits = split(//,\
    \ $num);\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //,\
    \ $num;\n    my $even = 0;\n    my $odd = 0;\n    for my $digit (@digits) {\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num =\
    \ shift;\n    my @digits = split //, abs($num);\n    my $even_count = 0;\n   \
    \ my $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n\
    \    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}", "my $number = shift;\n    my @digits = split //, abs $number;\n\
    \    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split //, $num;\n    my $even = 0;\n \
    \   my $odd = 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even = 0;\n    my $odd = 0;\n    foreach (@digits) {\n        if ($_\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits\
    \ = split //, $num;\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit\
    \ (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}",
  "my $num = shift;\n    my @digits = split(//, abs($num));\n    my $even = 0;\n \
    \   my $odd = 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, $num;\n    my\
    \ $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my $even\
    \ = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n     \
    \   $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_count++;\n        } else {\n            $odd_count++;\n     \
    \   }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n \
    \   my $even = 0;\n    my $odd = 0;\n    while ($num > 0) {\n        my $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = int($num / 10);\n \
    \   }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split(//,\
    \ abs($num));\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split //, $num;\n    my $even_count = 0;\n    my\
    \ $odd_count = 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n\
    \    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split(//, abs($num));\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even_count++;\n        } else {\n        \
    \    $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n}",
  "my $num = shift;\n    my @digits = split(//, $num);\n    my $even_count = 0;\n\
    \    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n\
    \    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}", "my $n = shift;\n    my @digits = split //, abs $n;\n  \
    \  my $even = 0;\n    my $odd = 0;\n    for my $d (@digits) {\n        if ($d\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n  \
    \  for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n    \
    \    if ($digit % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_count++;\n        } else {\n            $odd_count++;\n     \
    \   }\n    }\n    return [$even_count, $odd_count];\n}", "my $n = shift;\n   \
    \ my @digits = split //, abs $n;\n    my $even_count = 0;\n    my $odd_count =\
    \ 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n        \
    \    $even_count++;\n        } else {\n            $odd_count++;\n        }\n\
    \    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n    my $even_count\
    \ = 0;\n    my $odd_count = 0;\n    while ($num) {\n        if ($num % 2 == 0)\
    \ {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my @count =\
    \ (0, 0);\n    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n   \
    \         $count[0]++;\n        } else {\n            $count[1]++;\n        }\n\
    \    }\n    return @count;\n}", "my $num = shift;\n    my @digits = split(//,\
    \ abs($num));\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if\
    \ ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my ($even, $odd)\
    \ = (0, 0);\n    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n \
    \           $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //,\
    \ abs($num);\n    my ($even, $odd) = (0, 0);\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if\
    \ ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my @even_odd_count\
    \ = (0, 0);\n    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n \
    \           $even_odd_count[0]++;\n        } else {\n            $even_odd_count[1]++;\n\
    \        }\n    }\n    return @even_odd_count;\n}", "my $num = shift;\n    my\
    \ $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = int($num / 10);\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split(//, abs($num));\n    my $even_count = 0;\n\
    \    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_count++;\n        } else {\n            $odd_count++;\n     \
    \   }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n \
    \   my @digits = split //, abs($num);\n    my @even_odd_count = (0, 0);\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_odd_count[0]++;\n\
    \        } else {\n            $even_odd_count[1]++;\n        }\n    }\n    return\
    \ @even_odd_count;\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even = 0;\n\
    \    my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my ($num)\
    \ = @_;\n    my @digits = split //, abs $num;\n    my $even = 0;\n    my $odd\
    \ = 0;\n    for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n    }\n   \
    \ return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my ($even, $odd) = (0, 0);\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n  \
    \  foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n           \
    \ $even_count++;\n        } else {\n            $odd_count++;\n        }\n   \
    \ }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n  \
    \  foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n           \
    \ $even_count++;\n        } else {\n            $odd_count++;\n        }\n   \
    \ }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n    my $even\
    \ = 0;\n    my $odd = 0;\n    while ($num) {\n        my $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even, $odd];\n}", "my $num = shift;\n    my @digits = split(//, abs($num));\n\
    \    my ($even, $odd) = (0, 0);\n    for (@digits) {\n        if ($_ % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, $num;\n    my\
    \ $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n  \
    \  foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n           \
    \ $even_count++;\n        } else {\n            $odd_count++;\n        }\n   \
    \ }\n    return [$even_count, $odd_count];\n}", "my $n = shift;\n    my @digits\
    \ = split //, abs $n;\n    my $even_count = 0;\n    my $odd_count = 0;\n    for\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    while ($num) {\n        if ($num % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    return [$even_count, $odd_count];\n}", "my $number = shift;\n\
    \    my @digits = split //, $number;\n    my $even_count = 0;\n    my $odd_count\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even_count++;\n        } else {\n            $odd_count++;\n     \
    \   }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n \
    \   my $even_count = 0;\n    my $odd_count = 0;\n    while ($num) {\n        if\
    \ ($num % 2 == 0) {\n            $even_count++;\n        } else {\n          \
    \  $odd_count++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ [$even_count, $odd_count];\n}", "my $num = shift;\n    my @digits = split //,\
    \ abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even = 0;\n    my $odd = 0;\n    for my $digit (@digits) {\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n    foreach my\
    \ $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my @digits = split //, $num;\n    my $even_count =\
    \ 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my ($num) = @_;\n\
    \    my @digits = split //, $num;\n    my $even = 0;\n    my $odd = 0;\n    for\
    \ my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n\
    }", "my $num = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n\
    \        if ($num % 2 == 0) {\n            $even++;\n        } else {\n      \
    \      $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return [$even,\
    \ $odd];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n    my\
    \ @counts = (0, 0);\n    for my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $counts[0]++;\n        } else {\n            $counts[1]++;\n\
    \        }\n    }\n    return @counts;\n}", "my $num = shift;\n    my @digits\
    \ = split //, abs($num);\n    my $even_count = 0;\n    my $odd_count = 0;\n  \
    \  for my $digit (@digits) {\n        if ($digit % 2 == 0) {\n            $even_count++;\n\
    \        } else {\n            $odd_count++;\n        }\n    }\n    return [$even_count,\
    \ $odd_count];\n}", "my $num = shift;\n    my @digits = split //, abs($num);\n\
    \    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits) {\n    \
    \    if ($digit % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num = shift;\n\
    \    my $even = 0;\n    my $odd = 0;\n    while ($num != 0) {\n        if ($num\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}", "my\
    \ $n = shift;\n    my $even = 0;\n    my $odd = 0;\n    while ($n != 0) {\n  \
    \      my $digit = $n % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $n = int($n / 10);\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, abs($num);\n    my $even = 0;\n    my $odd = 0;\n    for my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split //, abs($num);\n    my $even = 0;\n    my $odd\
    \ = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n  \
    \          $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split //,\
    \ abs($num);\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split(//, abs($num));\n    my $even_count = 0;\n\
    \    my $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit\
    \ % 2 == 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}", "my $num = shift;\n\
    \    my @digits = split(//, abs($num));\n    my $even = 0;\n    my $odd = 0;\n\
    \    foreach my $digit (@digits) {\n        if ($digit % 2 == 0) {\n         \
    \   $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return\
    \ [$even, $odd];\n}", "my $num = shift;\n    my @digits = split(//, abs($num));\n\
    \    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even_count++;\n        } else\
    \ {\n            $odd_count++;\n        }\n    }\n    return [$even_count, $odd_count];\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my @count =\
    \ (0, 0);\n    foreach (@digits) {\n        if ($_ % 2 == 0) {\n            $count[0]++;\n\
    \        } else {\n            $count[1]++;\n        }\n    }\n    return @count;\n\
    }", "my $num = shift;\n    my @digits = split //, abs($num);\n    my $even = 0;\n\
    \    my $odd = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \    }\n    return [$even, $odd];\n}", "my $num = shift;\n    my @digits = split\
    \ //, $num;\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (@digits)\
    \ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n    }\n    return [$even, $odd];\n}", "my $num\
    \ = shift;\n    my @digits = split //, $num;\n    my $even_count = 0;\n    my\
    \ $odd_count = 0;\n    foreach my $digit (@digits) {\n        if ($digit % 2 ==\
    \ 0) {\n            $even_count++;\n        } else {\n            $odd_count++;\n\
    \        }\n    }\n    return [$even_count, $odd_count];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
