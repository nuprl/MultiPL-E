language: pl
name: HumanEval_139_special_factorial
results:
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= $n--;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 0
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ return 1 if $n == 0;\n    my $factorial = 1;\n    foreach my $i (1..$n) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial * special_factorial($n-1);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= $n;\n     \
    \   $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    my $i = 1;\n    while ($i <= $n) {\n        $factorial\
    \ *= $i;\n        $i++;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    my $i = $n;\n    while ($i > 0) {\n        $factorial\
    \ *= $i;\n        $i--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        $factorial *= $i;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    my $i = 1;\n    while ($i <= $n) {\n        $factorial\
    \ *= $i;\n        $i++;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n \
    \   return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *=\
    \ factorial($i);\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpgowe5xwf.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (1..$n) {\n        $result *= factorial($_);\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmppnv7tbr8.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: -1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n \
    \   return $factorial * special_factorial($n-1);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660233996
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *=\
    \ factorial($i);\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpgowe5xwf.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp6ts7krtn.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $fact = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $fact *= $i;\n\
    \    }\n    return $fact;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n \
    \       $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpad4xeoos.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $product = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $product *=\
    \ factorial($i);\n    }\n    return $product;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmplykt0eqn.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpk6iyaidw.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $fact = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $fact *= $i;\n\
    \    }\n    return $fact;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n \
    \       $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpad4xeoos.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n\
    \        $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp99dq0glz.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpk6iyaidw.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n \
    \       $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpad4xeoos.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n\
    \        $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp99dq0glz.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *=\
    \ factorial($i);\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpgowe5xwf.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    my $i = 1;\n    while ($i <= $n) {\n        $result *=\
    \ factorial($i);\n        $i++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp4j_ieub5.pl line
    14.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n\
    \        $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp99dq0glz.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    my $i = 1;\n    while ($i <= $n) {\n        $factorial\
    \ *= $i;\n        $i++;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *=\
    \ factorial($i);\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpgowe5xwf.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp6ts7krtn.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *=\
    \ factorial($i);\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpgowe5xwf.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: -1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $fact = 1;\n    for (1..$n) {\n        $fact *= $_;\n    }\n    return $fact\
    \ * special_factorial($n-1);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660233996
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n \
    \       $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpad4xeoos.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for my $i (1..$n) {\n        $factorial *= $i;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *=\
    \ factorial($i);\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpgowe5xwf.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp6ts7krtn.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: -1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n \
    \   return $factorial * special_factorial($n-1);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660233996
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    while ($n > 0) {\n        $result *= factorial($n);\n\
    \        $n--;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp99dq0glz.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    foreach my $i (1..$n) {\n        $factorial *= factorial($i);\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp1lo8jb9q.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    foreach my $i (1..$n) {\n        $factorial *= $i;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (1..$n) {\n        $result *= factorial($_);\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmppnv7tbr8.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n \
    \   for (1..$n-1) {\n        $factorial *= $_;\n    }\n    return $factorial;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpk6iyaidw.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: -1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n  \
    \  return $factorial * special_factorial($n-1);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660233996
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n \
    \   for (1..$n-1) {\n        $factorial *= $_;\n    }\n    return $factorial;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmpso3bbbq5.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $prod = 1;\n    for (1..$n) {\n        $prod *= factorial($_);\n    }\n\
    \    return $prod;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp9bh9cfv1.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= $n;\n     \
    \   $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for my $i (1..$n) {\n        $factorial *= $i;\n   \
    \ }\n    for my $i (1..$n-1) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    my $i = 1;\n    while ($i <= $n) {\n        $factorial\
    \ *= $i;\n        $i++;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= $n--;\n   \
    \ }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp6ts7krtn.pl line
    12.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = 1; $i < $n; $i++) {\n        $factorial *= $i;\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n \
    \   for (1..$n-1) {\n        $factorial *= $_;\n    }\n    return $factorial;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
    \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n   \
    \ }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    foreach my $i (1..$n) {\n        $factorial *= factorial($i);\n\
    \    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp1lo8jb9q.pl line
    13.

    '
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    for (my $i = $n - 1; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    while ($n > 0) {\n        $factorial *= factorial($n);\n\
    \        $n--;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmp0zxyhw_m.pl line
    13.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (1..$n) {\n        $factorial *= $_;\n    }\n \
    \   return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660233980
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
- exit_code: 255
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my ($n) = @_;\n   \
    \ my $result = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n   \
    \ my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::factorial called at /tmp/tmptvmwgfgl.pl line
    12.

    '
  stdout: ''
  timestamp: 1660227774
- exit_code: 1
  program: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
    # 288\n# The function will receive an integer as input and should return the special\n\
    # factorial of this integer.\nsub special_factorial {\n    my $n = shift;\n  \
    \  my $factorial = 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&special_factorial;\n        if(eq_deeply($candidate->(4),288))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660227774
