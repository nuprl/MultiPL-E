name: HumanEval_9_rolling_max
language: notypes.py
prompt: "def rolling_max(numbers):\n    \"\"\" From a given list of integers, generate\
  \ a list of rolling maximum element found until given moment\n    in the sequence.\n\
  \    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\
  \"\n"
tests: "def check(candidate):\n    assert candidate([]) == []\n    assert candidate([1,\
  \ 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n\
  \    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n\ndef test_check():\n\
  \    check(rolling_max)\n\ntest_check()\n"
completions: ["    max_so_far = numbers[0]\n    max_list = [max_so_far]\n    for i\
    \ in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n          \
    \  max_so_far = numbers[i]\n        max_list.append(max_so_far)\n    return max_list\n\
    \n", "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for i in range(1,\
    \ len(numbers)):\n        if numbers[i] > max_so_far:\n            max_so_far\
    \ = numbers[i]\n        result.append(max_so_far)\n    return result\n\n", " \
    \   max_list = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      max_list.append(max_so_far)\n    return max_list\n\n", "    max_so_far\
    \ = numbers[0]\n    max_list = [max_so_far]\n    for i in range(1, len(numbers)):\n\
    \        if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n  \
    \      max_list.append(max_so_far)\n    return max_list\n\n", "    result = []\n\
    \    max_value = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i]\
    \ > max_value:\n            max_value = numbers[i]\n        result.append(max_value)\n\
    \    return result\n\n", "    max_list = []\n    max_value = numbers[0]\n    for\
    \ i in range(len(numbers)):\n        if numbers[i] > max_value:\n            max_value\
    \ = numbers[i]\n        max_list.append(max_value)\n    return max_list\n\n",
  "    result = []\n    current_max = numbers[0]\n    for number in numbers:\n   \
    \     if number > current_max:\n            current_max = number\n        result.append(current_max)\n\
    \    return result\n\n", "    max_list = []\n    max_value = numbers[0]\n    for\
    \ number in numbers:\n        if number > max_value:\n            max_value =\
    \ number\n        max_list.append(max_value)\n    return max_list\n\n", "    max_list\
    \ = []\n    max_value = 0\n    for number in numbers:\n        if number > max_value:\n\
    \            max_value = number\n        max_list.append(max_value)\n    return\
    \ max_list\n\n", "    result = []\n    max_value = numbers[0]\n    for number\
    \ in numbers:\n        if number > max_value:\n            max_value = number\n\
    \        result.append(max_value)\n    return result\n\n", "    result = []\n\
    \    max_number = numbers[0]\n    for number in numbers:\n        if number >\
    \ max_number:\n            max_number = number\n        result.append(max_number)\n\
    \    return result\n\n", "    max_so_far = numbers[0]\n    max_list = [max_so_far]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n \
    \           max_so_far = numbers[i]\n        max_list.append(max_so_far)\n   \
    \ return max_list\n\n", "    max_so_far = numbers[0]\n    result = [max_so_far]\n\
    \    for i in range(1, len(numbers)):\n        if numbers[i] > max_so_far:\n \
    \           max_so_far = numbers[i]\n        result.append(max_so_far)\n    return\
    \ result\n\n", "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for\
    \ number in numbers[1:]:\n        if number > max_so_far:\n            max_so_far\
    \ = number\n        result.append(max_so_far)\n    return result\n\n", "    max_list\
    \ = []\n    max_so_far = numbers[0]\n    for i in range(len(numbers)):\n     \
    \   if numbers[i] > max_so_far:\n            max_so_far = numbers[i]\n       \
    \ max_list.append(max_so_far)\n    return max_list\n\n", "    max_list = []\n\
    \    for i in range(len(numbers)):\n        max_list.append(max(numbers[:i+1]))\n\
    \    return max_list\n\n", "    max_numbers = []\n    max_number = 0\n    for\
    \ number in numbers:\n        if number > max_number:\n            max_number\
    \ = number\n        max_numbers.append(max_number)\n    return max_numbers\n\n",
  "    max_so_far = numbers[0]\n    result = [max_so_far]\n    for number in numbers[1:]:\n\
    \        if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n\
    \    return result\n\n", "    max_so_far = numbers[0]\n    result = [max_so_far]\n\
    \    for number in numbers[1:]:\n        if number > max_so_far:\n           \
    \ max_so_far = number\n        result.append(max_so_far)\n    return result\n\n",
  "    max_list = []\n    max_number = 0\n    for number in numbers:\n        if number\
    \ > max_number:\n            max_number = number\n        max_list.append(max_number)\n\
    \    return max_list\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
