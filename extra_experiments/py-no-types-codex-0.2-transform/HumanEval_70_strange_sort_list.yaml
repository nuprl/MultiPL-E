name: HumanEval_70_strange_sort_list
language: notypes.py
prompt: "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return\
  \ list in strange order.\n    Strange sorting, is when you start with the minimum\
  \ value,\n    then maximum of the remaining integers, then minimum and so on.\n\n\
  \    Examples:\n    >>> strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>>\
  \ strange_sort_list([5, 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n\
  \    []\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
  \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1,\
  \ 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
  \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
  \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
  \ -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
  \    check(strange_sort_list)\n\ntest_check()\n"
completions: ["    if not lst:\n        return []\n    lst.sort()\n    return [lst[0]]\
    \ + [lst[-1]] + strange_sort_list(lst[1:-1])\n\n", "    if not lst:\n        return\
    \ []\n    lst.sort()\n    return [lst[0]] + strange_sort_list(lst[2:]) + [lst[1]]\n\
    \n", "    if not lst:\n        return []\n    lst.sort()\n    res = []\n    while\
    \ len(lst) > 1:\n        res.append(lst.pop(0))\n        res.append(lst.pop())\n\
    \    if lst:\n        res.append(lst.pop())\n    return res\n\n", "    if not\
    \ lst:\n        return []\n    lst.sort()\n    return [lst[0]] + strange_sort_list(lst[2:])\
    \ + [lst[1]]\n\n", "    if not lst:\n        return []\n    lst.sort()\n    return\
    \ lst[::2] + lst[1::2]", "    if not lst:\n        return []\n    lst.sort()\n\
    \    res = []\n    while lst:\n        res.append(lst.pop(0))\n        if lst:\n\
    \            res.append(lst.pop())\n    return res\n\n", "    if not lst:\n  \
    \      return []\n    lst.sort()\n    return [lst[i] for i in range(len(lst))\
    \ if i % 2 == 0] + [lst[i] for i in range(len(lst)) if i % 2 != 0]\n\n", "   \
    \ if not lst:\n        return []\n    lst.sort()\n    return [lst[i] for i in\
    \ range(len(lst)) if i % 2 == 0] + [lst[i] for i in range(len(lst)) if i % 2 !=\
    \ 0]\n\n", "    if not lst:\n        return []\n    lst.sort()\n    res = []\n\
    \    while len(lst) > 1:\n        res.append(lst.pop(0))\n        res.append(lst.pop())\n\
    \    if lst:\n        res.append(lst.pop())\n    return res\n\n", "    if len(lst)\
    \ == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if\
    \ len(lst) == 2:\n        return [min(lst), max(lst)]\n    if len(lst) == 3:\n\
    \        return [min(lst), max(lst), lst[1]]\n    if len(lst) == 4:\n        return\
    \ [min(lst), max(lst), lst[1], lst[2]]\n    if len(lst) == 5:\n        return\
    \ [min(lst), max(lst), lst[1], lst[3], lst[2]]\n    if len(lst) == 6:\n      \
    \  return [min(lst), max(lst), lst[1], lst[3], lst[2], lst[4]]\n    if len(lst)\
    \ == 7:\n        return [min(lst), max(lst), lst[1], lst[3], lst[2], lst[4], lst[5]]\n\
    \    if len(lst) == 8:\n        return [min(lst), max(lst), lst[1], lst[3], lst[2],\
    \ lst[4], lst[5], lst[6]]\n    if len(lst) == 9:\n        return [min(lst), max(lst),\
    \ lst[1], lst[3], lst[2], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) ==\
    \ 10:\n        return [min(lst), max(lst), lst[1], lst[3], lst[2], lst[4], lst[5],\
    \ lst[6], lst[7], lst[8]]\n    if len(lst) == 11:\n        return [min(lst), max(lst),\
    \ lst[1], lst[3], lst[2], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9]]\n  \
    \  if len(l", "    if not lst:\n        return []\n    lst.sort()\n    res = []\n\
    \    while len(lst) > 1:\n        res.append(lst.pop(0))\n        res.append(lst.pop())\n\
    \    if lst:\n        res.append(lst.pop())\n    return res\n\n", "    if len(lst)\
    \ == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if\
    \ len(lst) == 2:\n        return [min(lst), max(lst)]\n    if len(lst) == 3:\n\
    \        return [min(lst), max(lst), lst[1]]\n    if len(lst) == 4:\n        return\
    \ [min(lst), max(lst), lst[1], lst[2]]\n    if len(lst) == 5:\n        return\
    \ [min(lst), max(lst), lst[1], lst[3], lst[2]]\n    if len(lst) == 6:\n      \
    \  return [min(lst), max(lst), lst[1], lst[3], lst[2], lst[4]]\n    if len(lst)\
    \ == 7:\n        return [min(lst), max(lst), lst[1], lst[3], lst[2], lst[4], lst[5]]\n\
    \    if len(lst) == 8:\n        return [min(lst), max(lst), lst[1], lst[3], lst[2],\
    \ lst[4], lst[5], lst[6]]\n    if len(lst) == 9:\n        return [min(lst), max(lst),\
    \ lst[1], lst[3], lst[2], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) ==\
    \ 10:\n        return [min(lst), max(lst), lst[1], lst[3], lst[2], lst[4], lst[5],\
    \ lst[6], lst[7], lst[8]]\n    if len(lst) == 11:\n        return [min(lst), max(lst),\
    \ lst[1], lst[3], lst[2], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9]]\n  \
    \  if len(l", "    if not lst:\n        return []\n    lst.sort()\n    res = []\n\
    \    while len(lst) > 1:\n        res.append(lst.pop(0))\n        res.append(lst.pop())\n\
    \    if lst:\n        res.append(lst.pop())\n    return res\n\n", "    if len(lst)\
    \ == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if\
    \ len(lst) == 2:\n        return [min(lst), max(lst)]\n    if len(lst) == 3:\n\
    \        return [min(lst), max(lst), lst[1]]\n    if len(lst) == 4:\n        return\
    \ [min(lst), max(lst), lst[1], lst[2]]\n    if len(lst) == 5:\n        return\
    \ [min(lst), max(lst), lst[1], lst[2], lst[3]]\n    if len(lst) == 6:\n      \
    \  return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4]]\n    if len(lst)\
    \ == 7:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5]]\n\
    \    if len(lst) == 8:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3],\
    \ lst[4], lst[5], lst[6]]\n    if len(lst) == 9:\n        return [min(lst), max(lst),\
    \ lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) ==\
    \ 10:\n        return [min(lst), max(lst), lst[1], lst[2], lst[3], lst[4], lst[5],\
    \ lst[6], lst[7], lst[8]]\n    if len(lst) == 11:\n        return [min(lst), max(lst),\
    \ lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9]]\n  \
    \  if len(l", "    if not lst:\n        return []\n    lst.sort()\n    return\
    \ [lst[0]] + strange_sort_list(lst[2:]) + [lst[1]]\n\n", "    if not lst:\n  \
    \      return []\n    lst = sorted(lst)\n    result = []\n    while len(lst) >\
    \ 1:\n        result.append(lst.pop(0))\n        result.append(lst.pop(-1))\n\
    \    if lst:\n        result.append(lst.pop())\n    return result\n\n", "    if\
    \ not lst:\n        return []\n    lst = sorted(lst)\n    lst_len = len(lst)\n\
    \    res = []\n    for i in range(lst_len // 2):\n        res.append(lst[i])\n\
    \        res.append(lst[lst_len - i - 1])\n    if lst_len % 2:\n        res.append(lst[lst_len\
    \ // 2])\n    return res\n\n", "    if not lst:\n        return []\n    lst.sort()\n\
    \    res = []\n    while lst:\n        res.append(lst.pop(0))\n        if lst:\n\
    \            res.append(lst.pop())\n    return res\n\n", "    if not lst:\n  \
    \      return []\n    lst.sort()\n    res = []\n    while len(lst) > 1:\n    \
    \    res.append(lst.pop(0))\n        res.append(lst.pop())\n    if lst:\n    \
    \    res.append(lst.pop())\n    return res\n\n", "    if len(lst) == 0:\n    \
    \    return []\n    lst.sort()\n    res = [lst[0]]\n    lst = lst[1:]\n    while\
    \ len(lst) > 0:\n        res.append(lst[-1])\n        lst = lst[:-1]\n       \
    \ if len(lst) > 0:\n            res.append(lst[0])\n            lst = lst[1:]\n\
    \    return res\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
