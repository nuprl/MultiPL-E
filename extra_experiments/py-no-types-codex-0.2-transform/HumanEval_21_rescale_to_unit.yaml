name: HumanEval_21_rescale_to_unit
language: notypes.py
prompt: "def rescale_to_unit(numbers):\n    \"\"\" Given list of numbers (of at least\
  \ two elements), apply a linear transform to that list,\n    such that the smallest\
  \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
  \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
  \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
  \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
  \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
  \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
  \ntest_check()\n"
completions: ["    if len(numbers) < 2:\n        raise ValueError(\"Need at least\
    \ two numbers to rescale\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    if min_value == max_value:\n        raise ValueError(\"All numbers are the\
    \ same\")\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n\
    \n", "    min_value = min(numbers)\n    max_value = max(numbers)\n    return [(n\
    \ - min_value) / (max_value - min_value) for n in numbers]\n\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Cannot rescale a list with less than two elements\"\
    )\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n\
    \        raise ValueError(\"Cannot rescale a list with all equal elements\")\n\
    \    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n", "   \
    \ if len(numbers) < 2:\n        raise ValueError(\"Cannot rescale a list of less\
    \ than two elements\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    if min_value == max_value:\n        raise ValueError(\"Cannot rescale a list\
    \ of identical elements\")\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n\n", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    return [(n - minimum) / (maximum - minimum) for n in numbers]\n\n", "   \
    \ if len(numbers) < 2:\n        raise ValueError(\"Cannot rescale a list with\
    \ less than two elements\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    if min_value == max_value:\n        raise ValueError(\"Cannot rescale a list\
    \ with all equal elements\")\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n", "    return [float(number - min(numbers)) / (max(numbers)\
    \ - min(numbers)) for number in numbers]\n", "    # TODO: implement this function\n\
    \    pass\n", "    # TODO: implement this function\n    # Hint: you can use the\
    \ built-in functions min() and max()\n    # Hint: you can use the built-in function\
    \ zip()\n    # Hint: you can use the built-in function map()\n    # Hint: you\
    \ can use the built-in function lambda\n    # Hint: you can use the built-in function\
    \ enumerate()\n    # Hint: you can use the built-in function list()\n    # Hint:\
    \ you can use the built-in function range()\n    # Hint: you can use the built-in\
    \ function sum()\n    # Hint: you can use the built-in function abs()\n    # Hint:\
    \ you can use the built-in function divmod()\n    # Hint: you can use the built-in\
    \ function pow()\n    # Hint: you can use the built-in function round()\n    #\
    \ Hint: you can use the built-in function sorted()\n    # Hint: you can use the\
    \ built-in function reversed()\n    # Hint: you can use the built-in function\
    \ filter()\n    # Hint: you can use the built-in function any()\n    # Hint: you\
    \ can use the built-in function all()\n    # Hint: you can use the built-in function\
    \ zip()\n    # Hint: you can use the built-in function len()\n    # Hint: you\
    \ can use the built-in function str()\n    # Hint: you can use the built-in function\
    \ int()\n    # Hint: you can use the built-in function float()\n    # Hint: you\
    \ can use the built-in function complex()\n    # Hint: you can use the built-in\
    \ function ord()\n    # Hint: you can use the built-in function chr()\n    # Hint:\
    \ you can use the built-in function bin()\n    # Hint: you can use the built-in\
    \ function hex()\n    # Hint: you can use the built-in function oct()\n    # Hint:\
    \ you can use the built-in function id()\n    # Hint: you can use the built-in\
    \ function type()\n    # Hint: you can use the built-in function dir()\n   ",
  "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x -\
    \ min_number) / (max_number - min_number) for x in numbers]\n\n", "    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number)\
    \ / (max_number - min_number) for number in numbers]\n\n", "    assert len(numbers)\
    \ >= 2\n    min_n = min(numbers)\n    max_n = max(numbers)\n    return [(n - min_n)\
    \ / (max_n - min_n) for n in numbers]\n\n", "    if len(numbers) < 2:\n      \
    \  raise ValueError(\"List must have at least two elements\")\n    min_number\
    \ = min(numbers)\n    max_number = max(numbers)\n    if min_number == max_number:\n\
    \        raise ValueError(\"List must have at least two different elements\")\n\
    \    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n",
  "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num)\
    \ / (max_num - min_num) for num in numbers]\n\n", "    assert len(numbers) >=\
    \ 2\n    min_number = min(numbers)\n    max_number = max(numbers)\n    assert\
    \ min_number != max_number\n    return [(x - min_number) / (max_number - min_number)\
    \ for x in numbers]\n\n", "    assert len(numbers) >= 2\n    min_value = min(numbers)\n\
    \    max_value = max(numbers)\n    return [(x - min_value) / (max_value - min_value)\
    \ for x in numbers]\n\n", "    if len(numbers) < 2:\n        raise ValueError(\"\
    List of numbers must have at least two elements\")\n    min_number = min(numbers)\n\
    \    max_number = max(numbers)\n    if min_number == max_number:\n        raise\
    \ ValueError(\"List of numbers must have at least two different elements\")\n\
    \    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\
    \n", "    min_number = min(numbers)\n    max_number = max(numbers)\n    return\
    \ [(number - min_number) / (max_number - min_number) for number in numbers]\n\n",
  "    assert len(numbers) >= 2\n    min_num = min(numbers)\n    max_num = max(numbers)\n\
    \    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n", " \
    \   return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
