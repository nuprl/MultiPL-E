name: HumanEval_151_double_the_difference
language: notypes.py
prompt: "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers,\
  \ return the sum of squares of the numbers\n    in the list that are odd. Ignore\
  \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
  \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
  \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n \
  \   0\n   \n    If the input list is empty, return 0.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0,\
  \ 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0,\
  \ -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert\
  \ candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0,\
  \ -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\
  \ntest_check()\n"
completions: ["    return sum([x**2 for x in lst if x%2==1])\n", "    return sum([x**2\
    \ for x in lst if x%2 != 0 and x > 0 and type(x) == int])\n", "    return sum(x**2\
    \ for x in lst if x % 2 == 1 and x > 0 and isinstance(x, int))\n", "    return\
    \ sum(x**2 for x in lst if x%2==1 and x>=0 and isinstance(x, int))\n", "    #\
    \ YOUR CODE HERE\n    pass\n", "    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    if len(lst) == 0:\n        return 0\n    else:\n        sum = 0\n       \
    \ for i in lst:\n            if i % 2 == 1 and i > 0:\n                sum +=\
    \ i ** 2\n        return sum * 2\n", "    return sum([x**2 for x in lst if x%2==1])\n",
  "    return sum([x**2 for x in lst if x%2==1 and x>=0 and type(x)==int])\n", " \
    \   # YOUR CODE HERE\n    if len(lst) == 0:\n        return 0\n    else:\n   \
    \     return sum([x**2 for x in lst if x%2 != 0])\n", "    return sum([x**2 for\
    \ x in lst if x%2!=0 and x>=0 and isinstance(x,int)])\n", "    # YOUR CODE HERE\n\
    \    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2\
    \ for x in lst if x % 2 == 1])\n", "    # YOUR CODE HERE\n    # raise NotImplementedError()\n\
    \    if len(lst) == 0:\n        return 0\n    else:\n        sum = 0\n       \
    \ for i in lst:\n            if i % 2 == 1 and i > 0:\n                sum +=\
    \ i ** 2\n        return sum * 2\n\n", "    return sum([x**2 for x in lst if x\
    \ % 2 == 1 and x >= 0 and type(x) == int])\n", "    return sum(x**2 for x in lst\
    \ if x%2 == 1 and x > 0 and isinstance(x, int))\n", "    return sum([x**2 for\
    \ x in lst if x%2 != 0 and x > 0 and isinstance(x, int)])\n", "    # YOUR CODE\
    \ HERE\n    sum = 0\n    for i in lst:\n        if i%2 != 0 and i > 0:\n     \
    \       sum += i**2\n    return sum\n    \n", "    return sum(x*x for x in lst\
    \ if x%2 == 1 and x >= 0 and isinstance(x, int))\n", "    # Write your code here\n\
    \    return 0\n", "    # YOUR CODE HERE\n    sum = 0\n    for i in lst:\n    \
    \    if i % 2 == 1:\n            sum += i**2\n    return sum\n", "    return sum(x**2\
    \ for x in lst if x % 2 == 1 and x > 0 and isinstance(x, int))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
