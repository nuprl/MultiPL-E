name: HumanEval_35_max_element
language: notypes.py
prompt: "def max_element(l):\n    \"\"\"Return maximum element in the list.\n    >>>\
  \ max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n    123\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\ndef test_check():\n    check(max_element)\n\
  \ntest_check()\n"
completions: ["    max_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i]\
    \ > max_elem:\n            max_elem = l[i]\n    return max_elem\n\n", "    return\
    \ max(l)\n", "    return max(l)\n", "    return max(l)\n\n", "    max_elem = l[0]\n\
    \    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n\
    \    return max_elem\n\n", "    max_elem = l[0]\n    for elem in l:\n        if\
    \ elem > max_elem:\n            max_elem = elem\n    return max_elem\n\n", " \
    \   max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el\
    \ = el\n    return max_el\n", "    max_el = l[0]\n    for i in l:\n        if\
    \ i > max_el:\n            max_el = i\n    return max_el\n\n", "    return max(l)\n",
  "    return max(l)\n", "    if len(l) == 1:\n        return l[0]\n    else:\n  \
    \      return max(l[0], max_element(l[1:]))\n", "    max_elem = l[0]\n    for\
    \ elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return\
    \ max_elem\n\n", "    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n\
    \            max_elem = elem\n    return max_elem\n\n", "    max_elem = l[0]\n\
    \    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n\
    \    return max_elem\n\n", "    max_elem = l[0]\n    for i in range(1, len(l)):\n\
    \        if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem\n\
    \n", "    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n \
    \           max_elem = elem\n    return max_elem\n\n", "    return reduce(lambda\
    \ x, y: x if x > y else y, l)\n", "    max_elem = l[0]\n    for elem in l:\n \
    \       if elem > max_elem:\n            max_elem = elem\n    return max_elem\n\
    \n", "    max_elem = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_elem:\n\
    \            max_elem = l[i]\n    return max_elem\n\n", "    return max(l)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
