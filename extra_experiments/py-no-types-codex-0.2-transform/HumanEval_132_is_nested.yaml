name: HumanEval_132_is_nested
language: notypes.py
prompt: "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string\
  \ as input which contains only square brackets.\n    The function should return\
  \ True if and only if there is a valid subsequence of brackets \n    where at least\
  \ one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n\
  \    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n   \
  \ False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n\
  \    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('[[]]') == True\n    assert candidate('[]]]]]]][[[[[]')\
  \ == False\n    assert candidate('[][]') == False\n    assert candidate('[]') ==\
  \ False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]')\
  \ == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]')\
  \ == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[')\
  \ == True\n    assert candidate('[[][]]') == True\n    assert candidate('') == False\n\
  \    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') ==\
  \ False\n\ndef test_check():\n    check(is_nested)\n\ntest_check()\n"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
