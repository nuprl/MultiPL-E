name: HumanEval_47_median
language: notypes.py
prompt: "def median(l):\n    \"\"\"Return median of elements in the list l.\n    >>>\
  \ median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n  \
  \  15.0\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert\
  \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n\
  \    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7])\
  \ == 7\n\ndef test_check():\n    check(median)\n\ntest_check()\n"
completions: ["    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2]\
    \ + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n", "    l =\
    \ sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n\
    \    else:\n        return l[len(l)//2]\n", "    l.sort()\n    n = len(l)\n  \
    \  if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n //\
    \ 2 - 1] + l[n // 2]) / 2\n", "    l.sort()\n    if len(l) % 2 == 0:\n       \
    \ return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n",
  "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l)\
    \ // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)\
    \ // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n",
  "    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n\
    \    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1])\
    \ / 2\n    else:\n        return l[len(l) // 2]\n", "    l.sort()\n    if len(l)\
    \ % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n\
    \        return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n  \
    \      return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return\
    \ l[len(l)//2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2]\
    \ + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n", "    l.sort()\n\
    \    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n\
    \    else:\n        return l[len(l)//2]\n", "    l.sort()\n    if len(l) % 2 ==\
    \ 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n  \
    \      return l[len(l) // 2]\n", "    l.sort()\n    if len(l) % 2 == 0:\n    \
    \    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return\
    \ l[len(l) // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return\
    \ (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l)\
    \ // 2]\n", "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2]\
    \ + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
