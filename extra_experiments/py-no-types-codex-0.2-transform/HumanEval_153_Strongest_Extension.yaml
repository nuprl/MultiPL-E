name: HumanEval_153_Strongest_Extension
language: notypes.py
prompt: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given\
  \ the name of a class (a string) and a list of extensions.\n    The extensions are\
  \ to be used to load additional classes to the class. The\n    strength of the extension\
  \ is as follows: Let CAP be the number of the uppercase\n    letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n    in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    You should find the strongest\
  \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n    >>>\
  \ Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
  \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
  \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
  \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
  \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
  \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
  \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n\
  \    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
  \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
  \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
  \ntest_check()\n"
completions: ["    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]', x)))\n",
  "    # your code here\n    return\n\n", "    # your code here\n    pass\n\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # Your code here\n    # You\
    \ can use the function count_upper_lower_case(string)\n    # that you implemented\
    \ in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # Your code here\n    # You can use the function count_upper_lower(s)\n   \
    \ # to count the number of uppercase and lowercase letters in a string s\n   \
    \ # You can use the function count_upper_lower(s)\n    # to count the number of\
    \ uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)\n    # to count the number of uppercase\
    \ and lowercase letters in a string s\n    # You can use the function count_upper_lower(s)\n\
    \    # to count the number of uppercase and lowercase letters in a string s\n\
    \    # You can use the function count_upper_lower(s)\n    # to count the number\
    \ of uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)\n    # to count the number of uppercase\
    \ and lowercase letters in a string s\n    # You can use the function count_upper_lower(s)\n\
    \    # to count the number of uppercase and lowercase letters in a string s\n\
    \    # You can use the function count_upper_lower(s)\n    # to count the number\
    \ of uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)", "    # your code here\n    pass\n\
    \n", "    # your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n\
    \n", "    # your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # your code here\n    return\n", "   \
    \ # your code here\n    pass\n\n", "    # your code here\n    pass\n\n", "   \
    \ # your code here\n    return class_name + '.' + max(extensions, key=lambda x:\
    \ (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: x.count(x.upper()) - x.count(x.lower()))\n\n", "    # your code here\n  \
    \  return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if\
    \ c.isupper()), x))\n", "    # your code here\n    # return 'my_class.AA'\n  \
    \  # pass\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for char\
    \ in extension:\n            if char.isupper():\n                strength += 1\n\
    \            elif char.islower():\n                strength -= 1\n        if strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
