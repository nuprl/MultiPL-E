name: HumanEval_61_correct_bracketing
language: notypes.py
prompt: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of \"\
  (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
  \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
  \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
  \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
  \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
  \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
  \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    if brackets == \"\":\n        return True\n    elif brackets[0]\
    \ == \")\" or brackets[-1] == \"(\":\n        return False\n    else:\n      \
    \  return correct_bracketing(brackets[1:-1])\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            count += 1\n        elif\
    \ bracket == ')':\n            count -= 1\n        if count < 0:\n           \
    \ return False\n    return count == 0\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n\
    \            count -= 1\n        if count < 0:\n            return False\n   \
    \ return count == 0\n", "    count = 0\n    for char in brackets:\n        if\
    \ char == '(':\n            count += 1\n        elif char == ')':\n          \
    \  count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n\n", "    count = 0\n    for i in brackets:\n        if i == '(':\n  \
    \          count += 1\n        elif i == ')':\n            count -= 1\n      \
    \  if count < 0:\n            return False\n    return count == 0\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n", "    count = 0\n \
    \   for bracket in brackets:\n        if bracket == '(':\n            count +=\
    \ 1\n        elif bracket == ')':\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n", "    count = 0\n   \
    \ for bracket in brackets:\n        if bracket == '(':\n            count += 1\n\
    \        elif bracket == ')':\n            count -= 1\n            if count <\
    \ 0:\n                return False\n    return count == 0\n", "    count = 0\n\
    \    for bracket in brackets:\n        if bracket == '(':\n            count +=\
    \ 1\n        elif bracket == ')':\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n", "    count = 0\n \
    \   for bracket in brackets:\n        if bracket == '(':\n            count +=\
    \ 1\n        elif bracket == ')':\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n", "    count = 0\n   \
    \ for i in brackets:\n        if i == '(':\n            count += 1\n        elif\
    \ i == ')':\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n", "    count = 0\n    for i in brackets:\n\
    \        if i == '(':\n            count += 1\n        elif i == ')':\n      \
    \      count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            count += 1\n        elif bracket == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
  "    # Hint: you can use a variable to keep track of the number of open brackets.\n\
    \    # If the number of open brackets is ever negative, return False.\n    # If\
    \ the number of open brackets is ever greater than zero at the end, return False.\n\
    \    # If you make it to the end without returning False, return True.\n    open_brackets\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            open_brackets\
    \ += 1\n        elif bracket == ')':\n            open_brackets -= 1\n       \
    \ if open_brackets < 0:\n            return False\n    if open_brackets > 0:\n\
    \        return False\n    return True\n", "    if brackets == \"\":\n       \
    \ return True\n    elif brackets[0] == \")\":\n        return False\n    else:\n\
    \        return correct_bracketing(brackets[1:])\n", "    count = 0\n    for char\
    \ in brackets:\n        if char == '(':\n            count += 1\n        elif\
    \ char == ')':\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n", "    count = 0\n    for i in brackets:\n  \
    \      if i == '(':\n            count += 1\n        elif i == ')':\n        \
    \    count -= 1\n        if count < 0:\n            return False\n    return count\
    \ == 0\n", "    count = 0\n    for i in brackets:\n        if i == '(':\n    \
    \        count += 1\n        elif i == ')':\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count\
    \ += 1\n        elif bracket == ')':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n", "    count = 0\n \
    \   for char in brackets:\n        if char == '(':\n            count += 1\n \
    \       elif char == ')':\n            count -= 1\n        if count < 0:\n   \
    \         return False\n    return count == 0\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
