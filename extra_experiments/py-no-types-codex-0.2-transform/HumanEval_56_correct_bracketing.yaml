name: HumanEval_56_correct_bracketing
language: notypes.py
prompt: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of \"\
  <\" and \">\".\n    return True if every opening bracket has a corresponding closing\
  \ bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n\
  \    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>')\
  \ == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>')\
  \ == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>')\
  \ == False\n    assert candidate('<') == False\n    assert candidate('<<<<') ==\
  \ False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n\
  \    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>')\
  \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
completions: ["    if len(brackets) == 0:\n        return True\n    elif brackets[0]\
    \ == '<':\n        return correct_bracketing(brackets[1:])\n    elif brackets[0]\
    \ == '>':\n        return False\n    else:\n        return False\n", "    count\
    \ = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count\
    \ += 1\n        elif bracket == '>':\n            count -= 1\n        if count\
    \ < 0:\n            return False\n    return count == 0\n", "    count = 0\n \
    \   for bracket in brackets:\n        if bracket == '<':\n            count +=\
    \ 1\n        elif bracket == '>':\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n", "    count = 0\n   \
    \ for i in brackets:\n        if i == '<':\n            count += 1\n        else:\n\
    \            count -= 1\n        if count < 0:\n            return False\n   \
    \ return count == 0\n", "    count = 0\n    for bracket in brackets:\n       \
    \ if bracket == '<':\n            count += 1\n        elif bracket == '>':\n \
    \           count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n", "    count = 0\n    for bracket in brackets:\n        if bracket\
    \ == '<':\n            count += 1\n        elif bracket == '>':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n     \
    \       count += 1\n        elif bracket == '>':\n            count -= 1\n   \
    \     if count < 0:\n            return False\n    return count == 0\n", "   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == '<':\n      \
    \      count += 1\n        elif bracket == '>':\n            count -= 1\n    \
    \    if count < 0:\n            return False\n    return count == 0\n", "    return\
    \ brackets.count('<') == brackets.count('>')\n", "    \"*** YOUR CODE HERE ***\"\
    \n    count = 0\n    for i in brackets:\n        if i == '<':\n            count\
    \ += 1\n        elif i == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n", "    count = 0\n    for i\
    \ in brackets:\n        if i == '<':\n            count += 1\n        elif i ==\
    \ '>':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n", "    count = 0\n    for bracket in brackets:\n    \
    \    if bracket == '<':\n            count += 1\n        elif bracket == '>':\n\
    \            count -= 1\n        if count < 0:\n            return False\n   \
    \ return count == 0\n", "    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == '<':\n        if brackets[-1] == '>':\n            return correct_bracketing(brackets[1:-1])\n\
    \        else:\n            return False\n    else:\n        return False\n",
  "    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n     \
    \       count += 1\n        elif bracket == '>':\n            count -= 1\n   \
    \     if count < 0:\n            return False\n    return count == 0\n", "   \
    \ count = 0\n    for i in brackets:\n        if i == '<':\n            count +=\
    \ 1\n        elif i == '>':\n            count -= 1\n        if count < 0:\n \
    \           return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == '<':\n            count += 1\n \
    \       elif bracket == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n", "    count = 0\n    for\
    \ bracket in brackets:\n        if bracket == '<':\n            count += 1\n \
    \       elif bracket == '>':\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n", "    count = 0\n    for bracket\
    \ in brackets:\n        if bracket == '<':\n            count += 1\n        elif\
    \ bracket == '>':\n            count -= 1\n        if count < 0:\n           \
    \ return False\n    return count == 0\n", "    count = 0\n    for bracket in brackets:\n\
    \        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n\
    \            count -= 1\n        if count < 0:\n            return False\n   \
    \ return count == 0\n", "    count = 0\n    for bracket in brackets:\n       \
    \ if bracket == '<':\n            count += 1\n        else:\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
