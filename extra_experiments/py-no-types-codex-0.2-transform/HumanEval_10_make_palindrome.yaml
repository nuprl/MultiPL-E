name: HumanEval_10_make_palindrome
language: notypes.py
prompt: "def make_palindrome(string):\n    \"\"\" Find the shortest palindrome that\
  \ begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the\
  \ longest postfix of supplied string that is a palindrome.\n    - Append to the\
  \ end of the string reverse of a string prefix that comes before the palindromic\
  \ suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n\
  \    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == ''\n    assert candidate('x')\
  \ == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') ==\
  \ 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n\ndef test_check():\n   \
  \ check(make_palindrome)\n\ntest_check()\n"
completions: ["    if not string:\n        return string\n    string_len = len(string)\n\
    \    for i in range(string_len):\n        if is_palindrome(string[i:]):\n    \
    \        return string + string[:i][::-1]\n    return string + string[::-1]\n\n",
  "    if not string:\n        return string\n    # Find the longest palindromic suffix.\n\
    \    suffix = find_longest_palindromic_suffix(string)\n    # Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \    return string + string[:len(string) - len(suffix)][::-1]\n\n", "    if not\
    \ string:\n        return string\n    for i in range(len(string), 0, -1):\n  \
    \      if is_palindrome(string[:i]):\n            return string + string[:i-1:-1]\n\
    \    return string + string[::-1]\n\n", "    if not string:\n        return string\n\
    \    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n   \
    \         return string + string[:i][::-1]\n    return string + string[::-1]\n\
    \n", "    if not string:\n        return string\n    if is_palindrome(string):\n\
    \        return string\n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    prefix = string[:-len(longest_palindrome_suffix)]\n    return string + prefix[::-1]\n\
    \n", "    if not string:\n        return string\n    # Find the longest palindromic\
    \ suffix of the string.\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    # Append reverse of the string prefix to the end of the string.\n    return\
    \ string + string[:len(string) - len(suffix)][::-1]\n\n", "    if not string:\n\
    \        return string\n    # Find the longest palindromic suffix of the string.\n\
    \    suffix = find_longest_palindromic_suffix(string)\n    # Reverse the string\
    \ prefix that comes before the palindromic suffix.\n    prefix = string[:len(string)\
    \ - len(suffix)]\n    prefix = prefix[::-1]\n    return string + prefix\n\n",
  "    if not string:\n        return string\n    # Find the longest palindromic suffix\
    \ of the string.\n    suffix = longest_palindromic_suffix(string)\n    # Reverse\
    \ the prefix of the string that comes before the palindromic suffix.\n    prefix\
    \ = string[:len(string) - len(suffix)]\n    prefix = prefix[::-1]\n    return\
    \ string + prefix\n", "    if not string:\n        return string\n    # Find the\
    \ longest palindromic suffix.\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string + string[:len(string) - len(suffix)][::-1]\n\
    \n", "    if not string:\n        return string\n    for i in range(len(string)):\n\
    \        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\
    \    return string + string[::-1]\n", "    if not string:\n        return string\n\
    \    # Find the longest palindromic suffix of the string.\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    # Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    return string + string[:len(string) - len(suffix)][::-1]\n\
    \n", "    if not string:\n        return string\n    if len(string) == 1:\n  \
    \      return string + string\n    suffix = find_longest_palindromic_suffix(string)\n\
    \    prefix = string[:len(string) - len(suffix)]\n    return string + prefix[::-1]\n\
    \n", "    if not string:\n        return string\n    # Find the longest palindromic\
    \ suffix.\n    suffix = find_longest_palindromic_suffix(string)\n    # Reverse\
    \ the prefix and append it to the end of the string.\n    prefix = string[:len(string)\
    \ - len(suffix)]\n    return string + prefix[::-1]\n\n", "    if not string:\n\
    \        return string\n    # Find the longest palindromic suffix of the string.\n\
    \    suffix = find_longest_palindromic_suffix(string)\n    # Reverse the prefix\
    \ of the string that comes before the palindromic suffix.\n    prefix = string[:len(string)\
    \ - len(suffix)]\n    prefix = prefix[::-1]\n    return string + prefix\n\n",
  "    if not string:\n        return string\n    longest_palindrome_suffix = find_longest_palindrome_suffix(string)\n\
    \    return string + string[:len(string) - len(longest_palindrome_suffix)][::-1]\n\
    \n", "    if not string:\n        return string\n    # Find the longest palindromic\
    \ suffix.\n    suffix = find_longest_palindromic_suffix(string)\n    # Reverse\
    \ the prefix that comes before the palindromic suffix.\n    prefix = string[:len(string)\
    \ - len(suffix)]\n    prefix = prefix[::-1]\n    return string + prefix\n\n",
  "    if not string:\n        return string\n    for i in range(len(string)):\n \
    \       if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\
    \n", "    if not string:\n        return string\n    if len(string) == 1:\n  \
    \      return string + string\n    if len(string) == 2:\n        return string\
    \ if string[0] == string[1] else string + string[::-1]\n    for i in range(len(string)\
    \ - 1, -1, -1):\n        if string[:i] == string[i - 1::-1]:\n            return\
    \ string + string[i - 1::-1]\n    return string + string[::-1]\n\n", "    if not\
    \ string:\n        return string\n    for i in range(len(string)):\n        if\
    \ string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\
    \    return string + string[:-1][::-1]\n\n", "    if not string:\n        return\
    \ string\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n\
    \            return string + string[:i][::-1]\n    return string + string[::-1]\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
