name: HumanEval_111_histogram
language: notypes.py
prompt: "def histogram(test):\n    \"\"\"Given a string representing a space separated\
  \ lowercase letters, return a dictionary\n    of the letter with the most repetition\
  \ and containing the corresponding count.\n    If several letters have the same\
  \ occurrence, return all of them.\n    \n    Example:\n    >>> histogram('a b c')\n\
  \    { 'a': 1, 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b':\
  \ 2 }\n    >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b\
  \ b b b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
  \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
  \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
  \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b':\
  \ 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('')\
  \ == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
  \ntest_check()\n"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
