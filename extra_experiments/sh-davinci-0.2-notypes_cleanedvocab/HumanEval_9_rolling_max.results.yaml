language: sh
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n\
    \        fi\n        res+=(\"$max\")\n    done\n    echo \"${res[@]}\"\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        max=$((i > max ? i :\
    \ max))\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local max=0\n  local -a result\n  for i in $@;\
    \ do\n    if (( i > max )); then\n      max=$i\n    fi\n    result+=($max)\n \
    \ done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo -n \"\\\
    \"$max\\\" \"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -i max=0\n \
    \   local -i i=0\n    local -i len=${#arr[@]}\n    while [ $i -lt $len ]; do\n\
    \        if [ ${arr[$i]} -gt $max ]; then\n            max=${arr[$i]}\n      \
    \  fi\n        echo \"\\\"$max\\\"\"\n        i=$((i+1))\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpbvdwel8a.sh: line 12: [: -gt: unary operator expected\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -i max=0\n \
    \   local -i i=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if [[ ${arr[i]} -gt $max ]]; then\n            max=${arr[i]}\n      \
    \  fi\n        echo -n \"\\\"$max\\\"\"\n        if [[ $i -lt $((len-1)) ]]; then\n\
    \            echo -n \", \"\n        fi\n    done\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($1)\n    local -a maxes\n    local\
    \ max=${arr[0]}\n    maxes+=($max)\n    for i in \"${arr[@]:1}\"; do\n       \
    \ if ((i > max)); then\n            max=$i\n        fi\n        maxes+=($max)\n\
    \    done\n    echo \"${maxes[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max=0\n    for i\
    \ in $@; do\n        if (( i > max )); then\n            max=$i\n        fi\n\
    \        max_list+=(\"$max\")\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_list_len=0\n\
    \    local max_list_idx=0\n    local max_list_idx_next=0\n    local max_list_idx_prev=0\n\
    \    local max_list_idx_prev_prev=0\n    local max_list_idx_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev=0\n    local max_list_idx_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev=0\n    local max_list_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate() {\n \
    \   rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo \"\\\"$max\\\
    \"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max_arr\n    local\
    \ max\n    local i\n\n    arr=($@)\n    max=${arr[0]}\n    max_arr=($max)\n  \
    \  for ((i=1; i<${#arr[@]}; i++)); do\n        if ((arr[i] > max)); then\n   \
    \         max=${arr[i]}\n        fi\n        max_arr+=($max)\n    done\n    echo\
    \ \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max=0\n    for i\
    \ in $@; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n\
    \        max_list+=($max)\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a array=($@)\n    local -a result\n  \
    \  local max=${array[0]}\n    result+=(\"$max\")\n    for i in \"${array[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n   \
    \     fi\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ ((i > max)); then\n            max=$i\n        fi\n        echo -n \"\\\"$max\\\
    \" \"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a a=($1)\n    local -a b=()\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=${#a[@]}\n    local -i m=0\n    for\
    \ ((i=0; i<n; i++)); do\n        m=${a[i]}\n        for ((j=0; j<i; j++)); do\n\
    \            if ((m < ${a[j]})); then\n                m=${a[j]}\n           \
    \ fi\n        done\n        b+=($m)\n    done\n    echo ${b[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local -a list=($@)\n  local -a result\n  local\
    \ max=${list[0]}\n  result+=(\"$max\")\n  for i in \"${list[@]:1}\"; do\n    if\
    \ (( i > max )); then\n      max=$i\n    fi\n    result+=(\"$max\")\n  done\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    echo -n \"[\"\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo -n \"\\\"$max\\\"\"\n\
    \        if [[ $i -ne ${arr[-1]} ]]; then\n            echo -n \", \"\n      \
    \  fi\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_value=0\n  \
    \  for i in $@; do\n        if (( i > max_value )); then\n            max_value=$i\n\
    \        fi\n        max_list+=(\"$max_value\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a max_arr\n   \
    \ max_arr=(\"${arr[0]}\")\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if\
    \ [[ ${arr[$i]} -gt ${max_arr[$i-1]} ]]; then\n            max_arr[$i]=${arr[$i]}\n\
    \        else\n            max_arr[$i]=${max_arr[$i-1]}\n        fi\n    done\n\
    \    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        max[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n\
    \            if ((${arr[j]} > ${max[i]})); then\n                max[i]=${arr[j]}\n\
    \            fi\n        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($@)\n    local -a result=()\n\
    \    local max=${list[0]}\n    result+=(\"$max\")\n    for i in \"${list[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr=(\"$max\")\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n\
    \        fi\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    echo -n \"[\"\n    for i in \"${arr[@]}\"; do\n        if (( i > max ));\
    \ then\n            max=$i\n        fi\n        echo -n \"\\\"$max\\\"\"\n   \
    \     if (( i != arr[-1] )); then\n            echo -n \", \"\n        fi\n  \
    \  done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local -a arr\n  local i\n  local max\n  arr=($@)\n\
    \  max=${arr[0]}\n  echo -n \"[\\\"$max\\\"\"\n  for ((i=1; i<${#arr[@]}; i++));\
    \ do\n    if (( arr[i] > max )); then\n      max=${arr[i]}\n    fi\n    echo -n\
    \ \", \\\"$max\\\"\"\n  done\n  echo \"]\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a maxes=()\n\
    \    local max=${arr[0]}\n    maxes+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     maxes+=(\"$max\")\n    done\n    echo \"${maxes[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a result=()\n\
    \    local max=${arr[0]}\n    result+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n   \
    \     fi\n        result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a max_arr\n   \
    \ local max=${arr[0]}\n    max_arr+=($max)\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if (( ${arr[$i]} > $max )); then\n            max=${arr[$i]}\n \
    \       fi\n        max_arr+=($max)\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res\n   \
    \ local max=${arr[0]}\n    res+=(\"$max\")\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n       \
    \ fi\n        res+=(\"$max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a maxes=()\n\
    \    local max=${arr[0]}\n    maxes+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n   \
    \     fi\n        maxes+=(\"$max\")\n    done\n    echo \"${maxes[@]}\"\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max\n    local -a\
    \ res\n    local i\n    local j\n    local k\n    local m\n    arr=($1)\n    max[0]=${arr[0]}\n\
    \    for ((i=1; i<${#arr[@]}; i++)); do\n        m=${arr[i]}\n        for ((j=0;\
    \ j<i; j++)); do\n            if [[ ${arr[j]} -gt $m ]]; then\n              \
    \  m=${arr[j]}\n            fi\n        done\n        max[i]=$m\n    done\n  \
    \  for ((k=0; k<${#max[@]}; k++)); do\n        res[k]=\"\\\"${max[k]}\\\"\"\n\
    \    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a seq=($@)\n    local -a max=()\n    local\
    \ -i i=0\n    local -i j=0\n    local -i max_i=0\n    local -i max_j=0\n    local\
    \ -i max_val=0\n    local -i cur_val=0\n    local -i cur_i=0\n    local -i cur_j=0\n\
    \    local -i seq_len=${#seq[@]}\n    local -i max_len=0\n    local -i max_len_prev=0\n\
    \    local -i max_len_cur=0\n    local -i max_len_next=0\n    local -i max_len_prev_prev=0\n\
    \    local -i max_len_prev_prev_prev=0\n    local -i max_len_prev_prev_prev_prev=0\n\
    \    local -i max_len_prev_prev_prev_prev_prev=0\n    local -i max_len_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_len_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_len_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \   local -i max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_len_prev_prev_prev_prev_prev_\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a array=($@)\n    local -a result=()\n\
    \    local max=${array[0]}\n    result+=(\"$max\")\n    for ((i=1; i<${#array[@]};\
    \ i++)); do\n        if [[ ${array[$i]} -gt $max ]]; then\n            max=${array[$i]}\n\
    \        fi\n        result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_so_far\n    for i in $@; do\n  \
    \      max_so_far+=($(max \"${max_so_far[-1]}\" \"$i\"))\n    done\n    echo \"\
    ${max_so_far[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp_li3ox83.sh: line 9: max_so_far: bad array subscript\n/tmp/tmp_li3ox83.sh:
    line 9: max: command not found\n/tmp/tmp_li3ox83.sh: line 9: max_so_far: bad array
    subscript\n/tmp/tmp_li3ox83.sh: line 9: max: command not found\n/tmp/tmp_li3ox83.sh:
    line 9: max_so_far: bad array subscript\n/tmp/tmp_li3ox83.sh: line 9: max: command
    not found\n/tmp/tmp_li3ox83.sh: line 9: max_so_far: bad array subscript\n/tmp/tmp_li3ox83.sh:
    line 9: max: command not found\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local -a arr=(\"$@\")\n  local -a max\n  local\
    \ -i i\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ -z \"${max[$i]}\" ]];\
    \ then\n      max[$i]=${arr[$i]}\n    else\n      if (( ${arr[$i]} > ${max[$i-1]}\
    \ )); then\n        max[$i]=${arr[$i]}\n      else\n        max[$i]=${max[$i-1]}\n\
    \      fi\n    fi\n  done\n  echo \"${max[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max\n    local i\n\
    \    local j\n    local max_val\n    local -a result\n    arr=($@)\n    max_val=${arr[0]}\n\
    \    max[0]=$max_val\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max_val ]]; then\n            max_val=${arr[$i]}\n        fi\n        max[$i]=$max_val\n\
    \    done\n    for ((i=0; i<${#max[@]}; i++)); do\n        result[$i]=\"\\\"${max[$i]}\\\
    \"\"\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        max_arr+=(\"$max\")\n    done\n    echo\
    \ \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max\n    local -a list\n    local i\n\
    \    local n\n    list=($@)\n    max[0]=${list[0]}\n    for ((i=1; i<${#list[@]};\
    \ i++)); do\n        n=${list[i]}\n        if ((n > max[i-1])); then\n       \
    \     max[i]=$n\n        else\n            max[i]=${max[i-1]}\n        fi\n  \
    \  done\n    echo ${max[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n   \
    \     fi\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($@)\n    local max=${list[0]}\n\
    \    local -a result=()\n    result+=($max)\n    for i in \"${list[@]:1}\"; do\n\
    \        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        result+=($max)\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ local -i i\n    max[0]=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n \
    \       if [[ ${arr[i]} -gt ${max[i-1]} ]]; then\n            max[i]=${arr[i]}\n\
    \        else\n            max[i]=${max[i-1]}\n        fi\n    done\n    echo\
    \ \"${max[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $max ]];\
    \ then\n            max=$i\n        fi\n        max_arr+=(\"$max\")\n    done\n\
    \    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        res+=(\"\
    $max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        max_arr+=(\"$max\")\n    done\n    printf\
    \ '%s\\n' \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo \"\\\"\
    $max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo \"\\\"\
    $max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a result\n    local -a sequence\n    local\
    \ max\n    sequence=($@)\n    max=${sequence[0]}\n    for i in \"${sequence[@]}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local -i max_value=0\n\
    \    for value in $@; do\n        if (( value > max_value )); then\n         \
    \   max_value=$value\n        fi\n        max_list+=($max_value)\n    done\n \
    \   echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_value=0\n  \
    \  for value in $@; do\n        if (( value > max_value )); then\n           \
    \ max_value=$value\n        fi\n        max_list+=($max_value)\n    done\n   \
    \ echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo $max\n   \
    \ done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -i max=0\n \
    \   local -i i=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if (( arr[i] > max )); then\n            max=${arr[i]}\n        fi\n\
    \        echo -n '\"'$max'\"'\n        if (( i < len-1 )); then\n            echo\
    \ -n ', '\n        fi\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a input=($@)\n    local -a output=()\n\
    \    local max=${input[0]}\n    output+=($max)\n    for i in \"${input[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ output+=($max)\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n  \
    \  rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"\
    4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100\
    \ 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    local -a result=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        result+=(\"\
    $max\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a res=()\n    local\
    \ max=${arr[0]}\n    res+=(\"$max\")\n    for ((i=1; i<${#arr[@]}; i++)); do\n\
    \        if (( ${arr[$i]} > $max )); then\n            max=${arr[$i]}\n      \
    \  fi\n        res+=(\"$max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_so_far=0\n \
    \   for i in \"$@\"; do\n        if (( i > max_so_far )); then\n            max_so_far=$i\n\
    \        fi\n        max_list+=(\"$max_so_far\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local max=${arr[0]}\n\
    \    local -a res=()\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        res+=($max)\n    done\n  \
    \  echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo \"\\\"\
    $max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -i max=0\n \
    \   local -i i=0\n    local -i len=${#arr[@]}\n    while [ $i -lt $len ]; do\n\
    \        if [ ${arr[$i]} -gt $max ]; then\n            max=${arr[$i]}\n      \
    \  fi\n        echo \"\\\"$max\\\"\"\n        i=$((i+1))\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpbvdwel8a.sh: line 12: [: -gt: unary operator expected\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a res=()\n    local\
    \ max=${arr[0]}\n    res+=($max)\n    for i in \"${arr[@]:1}\"; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        res+=($max)\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_so_far\n    local -a input=($@)\n\
    \    local max_so_far_index=0\n    local input_index=0\n    local max_so_far_value=${input[$input_index]}\n\
    \    max_so_far[$max_so_far_index]=$max_so_far_value\n    input_index=$((input_index\
    \ + 1))\n    while [ $input_index -lt ${#input[@]} ]; do\n        if [ ${input[$input_index]}\
    \ -gt $max_so_far_value ]; then\n            max_so_far_value=${input[$input_index]}\n\
    \        fi\n        max_so_far_index=$((max_so_far_index + 1))\n        max_so_far[$max_so_far_index]=$max_so_far_value\n\
    \        input_index=$((input_index + 1))\n    done\n    echo ${max_so_far[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    max_arr[0]=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if\
    \ [[ ${arr[$i]} -gt ${max_arr[$i-1]} ]]; then\n            max_arr[$i]=${arr[$i]}\n\
    \        else\n            max_arr[$i]=${max_arr[$i-1]}\n        fi\n    done\n\
    \    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($@)\n    local -a maxs=()\n  \
    \  local max=0\n    for i in \"${list[@]}\"; do\n        if [[ $i -gt $max ]];\
    \ then\n            max=$i\n        fi\n        maxs+=($max)\n    done\n    echo\
    \ \"${maxs[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max\n    local -i\
    \ i\n    local -i j\n    local -i len\n    local -i max_len\n    local -i max_len_prev\n\
    \    local -i max_len_curr\n    local -i max_len_next\n    local -i max_len_next_next\n\
    \    local -i max_len_next_next_next\n    local -i max_len_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next\n    local -i max_len_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next\n    local -i max_len_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next_next_next\n    local\
    \ -i max_len_next_next_next_next_next_next_next_next_next_next\n    local -i max_len_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i max_len_next_\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($@)\n    local -a max_list=()\n\
    \    local max=${list[0]}\n    max_list+=($max)\n    for i in ${list[@]:1}; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        max_list+=($max)\n\
    \    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo \"\\\"\
    $max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local\
    \ max=${arr[0]}\n  res+=(\"$max\")\n  for i in \"${arr[@]:1}\"; do\n    if [[\
    \ $i -gt $max ]]; then\n      max=$i\n    fi\n    res+=(\"$max\")\n  done\n  echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=()\n    local max=0\n    for i in\
    \ $@; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n\
    \        arr+=(\"$max\")\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=i\n        fi\n        max_arr+=(\"$max\")\n    done\n    echo\
    \ \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a max_arr\n   \
    \ local max=${arr[0]}\n    max_arr+=($max)\n    for i in \"${arr[@]:1}\"; do\n\
    \        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a res=()\n    local\
    \ max=${arr[0]}\n    res+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n   \
    \     if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n       \
    \ fi\n        res+=($max)\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a result=()\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if [[ \"$i\" -gt \"\
    $max\" ]]; then\n            max=\"$i\"\n        fi\n        result+=(\"$max\"\
    )\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local -a arr\n  local -a max\n  local -i i\n  local\
    \ -i j\n  local -i len\n  local -i max_len\n  local -i max_len_prev\n  local -i\
    \ max_len_curr\n  local -i max_len_next\n  local -i max_len_last\n  local -i max_len_last_prev\n\
    \  local -i max_len_last_curr\n  local -i max_len_last_next\n  local -i max_len_last_last\n\
    \  local -i max_len_last_last_prev\n  local -i max_len_last_last_curr\n  local\
    \ -i max_len_last_last_next\n  local -i max_len_last_last_last\n  local -i max_len_last_last_last_prev\n\
    \  local -i max_len_last_last_last_curr\n  local -i max_len_last_last_last_next\n\
    \  local -i max_len_last_last_last_last\n  local -i max_len_last_last_last_last_prev\n\
    \  local -i max_len_last_last_last_last_curr\n  local -i max_len_last_last_last_last_next\n\
    \  local -i max_len_last_last_last_last_last\n  local -i max_len_last_last_last_last_last_prev\n\
    \  local -i max_len_last_last_last_last_last_curr\n  local -i max_len_last_last_last_last_last_next\n\
    \  local -i max_len_last_last_last_last_last_last\n  local -i max_len_last_last_last_last_last_last_prev\n\
    \  local -i max_len_last_last_last_last_last_last_curr\n  local -i max_len_last_last_last_last_last_last_next\n\
    \  local -i max_len_last_last_last_last_last_last_last\n  local -i max_len_last_last_last_last_last_\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=${arr[0]}\n    max_arr+=($max)\n    for i in \"${arr[@]:1}\"; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ max[0]=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[i]}\
    \ -gt ${max[i-1]} ]]; then\n            max[i]=${arr[i]}\n        else\n     \
    \       max[i]=${max[i-1]}\n        fi\n    done\n    echo \"${max[@]}\"\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -i i=0\n    local -i\
    \ max=0\n    local -i curr=0\n    for i in $@; do\n        arr[${#arr[@]}]=$i\n\
    \        curr=$i\n        if (( curr > max )); then\n            max=$curr\n \
    \       fi\n        echo -n \"\\\"$max\\\" \"\n    done\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=0\n    local\
    \ i=0\n    local len=${#arr[@]}\n    while [ $i -lt $len ]; do\n        if [ $max\
    \ -lt ${arr[$i]} ]; then\n            max=${arr[$i]}\n        fi\n        echo\
    \ -n \"\\\"$max\\\" \"\n        i=$((i+1))\n    done\n}\n\ncandidate() {\n   \
    \ rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"\
    4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100\
    \ 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpgn2d4n4s.sh: line 12: [: 0: unary operator expected\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo $max\n   \
    \ done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_value\n    local\
    \ current_value\n    for current_value in $@; do\n        if [[ -z \"$max_value\"\
    \ ]]; then\n            max_value=\"$current_value\"\n        elif [[ \"$current_value\"\
    \ -gt \"$max_value\" ]]; then\n            max_value=\"$current_value\"\n    \
    \    fi\n        max_list+=(\"$max_value\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo -n \"\\\"\
    $max\\\" \"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max=0\n    for i\
    \ in $@; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n\
    \        max_list+=($max)\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a max_arr\n   \
    \ local max=${arr[0]}\n    max_arr=($max)\n    for i in ${arr[@]:1}; do\n    \
    \    if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $*; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    echo -n \"[\"\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( arr[i]\
    \ > max )); then\n            max=${arr[i]}\n        fi\n        if (( i > 0 ));\
    \ then\n            echo -n \", \"\n        fi\n        echo -n '\"'$max'\"'\n\
    \    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ local i=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ -z \"${max[i-1]}\"\
    \ ]]; then\n            max[i]=${arr[i]}\n        else\n            max[i]=$(max\
    \ ${max[i-1]} ${arr[i]})\n        fi\n    done\n    echo \"${max[@]}\"\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpk88bxodn.sh: line 11: max: bad array subscript\n/tmp/tmpk88bxodn.sh:
    line 11: max: bad array subscript\n/tmp/tmpk88bxodn.sh: line 11: max: bad array
    subscript\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n        fi\n\
    \        res+=(\"$max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo \"\\\"$max\\\
    \"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local -a input_list\n\
    \    local max_value\n    local current_value\n    local i\n\n    input_list=($@)\n\
    \    max_value=${input_list[0]}\n    max_list=(\"$max_value\")\n    for ((i=1;\
    \ i<${#input_list[@]}; i++)); do\n        current_value=${input_list[$i]}\n  \
    \      if [[ $current_value -gt $max_value ]]; then\n            max_value=$current_value\n\
    \        fi\n        max_list+=(\"$max_value\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt\
    \ $max ]]; then\n            max=$i\n        fi\n        res+=($max)\n    done\n\
    \    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp2d781as.sh: line 11: [[: 1 2 3 4: syntax error in expression
    (error token is "2 3 4")\n/tmp/tmpp2d781as.sh: line 11: [[: 4 3 2 1: syntax error
    in expression (error token is "3 2 1")\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list=()\n    local -i max_value=0\n\
    \    for value in $@; do\n        if [[ $value -gt $max_value ]]; then\n     \
    \       max_value=$value\n        fi\n        max_list+=($max_value)\n    done\n\
    \    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_value\n    local\
    \ current_value\n    for current_value in \"$@\"; do\n        if [[ -z \"$max_value\"\
    \ ]] || (( current_value > max_value )); then\n            max_value=\"$current_value\"\
    \n        fi\n        max_list+=(\"$max_value\")\n    done\n    printf \"[%s]\"\
    \ \"$(join_by \", \" \"${max_list[@]}\")\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmphrsy4jbp.sh: line 16: join_by: command not found\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a a=($1)\n    local -a b=()\n    local\
    \ -i i=0\n    local -i j=0\n    local -i n=${#a[@]}\n    local -i m=0\n    local\
    \ -i max=0\n    for ((i=0; i<n; i++)); do\n        m=${a[i]}\n        if ((m >\
    \ max)); then\n            max=$m\n        fi\n        b[i]=$max\n    done\n \
    \   echo ${b[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max=0\n    for i\
    \ in $@; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n\
    \        max_list+=($max)\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local -a input_list\n\
    \    local max_value\n    local current_value\n    local i\n    local j\n\n  \
    \  input_list=($@)\n    max_value=${input_list[0]}\n    max_list=($max_value)\n\
    \    for ((i=1; i<${#input_list[@]}; i++)); do\n        current_value=${input_list[$i]}\n\
    \        if [[ $current_value -gt $max_value ]]; then\n            max_value=$current_value\n\
    \        fi\n        max_list+=($max_value)\n    done\n    for ((j=0; j<${#max_list[@]};\
    \ j++)); do\n        echo -n \"\\\"${max_list[$j]}\\\"\"\n        if [[ $j -lt\
    \ $(( ${#max_list[@]} - 1 )) ]]; then\n            echo -n \", \"\n        fi\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max_arr\n    local\
    \ max\n    local i\n    arr=($@)\n    max_arr=()\n    max=${arr[0]}\n    max_arr+=($max)\n\
    \    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt $max ]];\
    \ then\n            max=${arr[$i]}\n        fi\n        max_arr+=($max)\n    done\n\
    \    echo ${max_arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -i i=0\n    local -i\
    \ max=0\n    for el in $@; do\n        arr[$i]=$el\n        if [[ $el -gt $max\
    \ ]]; then\n            max=$el\n        fi\n        echo -n \"\\\"$max\\\" \"\
    \n        i+=1\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=()\n    local max=0\n    for i in\
    \ $@; do\n        arr+=(\"$i\")\n        if (( $i > $max )); then\n          \
    \  max=$i\n        fi\n        echo \"\\\"$max\\\"\"\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo \"\\\"\
    $max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($@)\n    local -a max_list\n \
    \   local max=${list[0]}\n    max_list+=(\"$max\")\n    for ((i=1; i<${#list[@]};\
    \ i++)); do\n        if (( ${list[$i]} > $max )); then\n            max=${list[$i]}\n\
    \        fi\n        max_list+=(\"$max\")\n    done\n    echo ${max_list[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local -i max_value\n \
    \   local -i current_value\n    max_value=0\n    for current_value in $@; do\n\
    \        if (( current_value > max_value )); then\n            max_value=$current_value\n\
    \        fi\n        max_list+=($max_value)\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($@)\n    local -a result=()\n\
    \    local max=${list[0]}\n    result+=(\"$max\")\n    for i in \"${list[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local -a arr=(\"$@\")\n  local -a max_arr\n  local\
    \ max=${arr[0]}\n  max_arr=(\"$max\")\n  for i in \"${arr[@]:1}\"; do\n    if\
    \ (( i > max )); then\n      max=$i\n    fi\n    max_arr+=(\"$max\")\n  done\n\
    \  echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a input=($@)\n    local -a output=()\n\
    \    local max=${input[0]}\n    output+=($max)\n    for i in ${input[@]:1}; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        output+=($max)\n\
    \    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local input=($@)\n    local max=${input[0]}\n\
    \    echo -n \"[\"\n    for i in \"${input[@]}\"; do\n        if [[ $i -gt $max\
    \ ]]; then\n            max=$i\n        fi\n        echo -n \"\\\"$max\\\"\"\n\
    \        if [[ $i -ne ${input[-1]} ]]; then\n            echo -n \", \"\n    \
    \    fi\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max=0\n    for i\
    \ in $@; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n\
    \        max_list+=($max)\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local -i max_list_index=0\n\
    \    local -i max_list_length=0\n    local -i max_list_max_length=0\n    local\
    \ -i max_list_max_index=0\n    local -i max_list_max_value=0\n    local -i max_list_min_value=0\n\
    \    local -i max_list_min_index=0\n    local -i max_list_min_length=0\n    local\
    \ -i max_list_min_max_length=0\n    local -i max_list_min_max_index=0\n    local\
    \ -i max_list_min_max_value=0\n    local -i max_list_min_min_value=0\n    local\
    \ -i max_list_min_min_index=0\n    local -i max_list_min_min_length=0\n    local\
    \ -i max_list_min_min_max_length=0\n    local -i max_list_min_min_max_index=0\n\
    \    local -i max_list_min_min_max_value=0\n    local -i max_list_min_min_min_value=0\n\
    \    local -i max_list_min_min_min_index=0\n    local -i max_list_min_min_min_length=0\n\
    \    local -i max_list_min_min_min_max_length=0\n    local -i max_list_min_min_min_max_index=0\n\
    \    local -i max_list_min_min_min_max_value=0\n    local -i max_list_min_min_min_min_value=0\n\
    \    local -i max_list_min_min_min_min_index=0\n    local -i max_list_min_min_min_min_length=0\n\
    \    local -i max_list_min_min_min_min_max_length=0\n    local -i max_list_min_min_min_min_max_index=0\n\
    \    local -i max_list_min_min_min_min_max_value=0\n    local -i max\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local\
    \ max=${arr[0]}\n  res+=(\"$max\")\n  for i in \"${arr[@]:1}\"; do\n    if ((\
    \ i > max )); then\n      max=$i\n    fi\n    res+=(\"$max\")\n  done\n  echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_so_far=0\n \
    \   for i in $@; do\n        if (( i > max_so_far )); then\n            max_so_far=$i\n\
    \        fi\n        max_list+=(\"$max_so_far\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if (( ${arr[$i]} > $max )); then\n            max=${arr[$i]}\n\
    \        fi\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    echo -n \"[\"\n    for i in \"${arr[@]}\"; do\n        if (( i > max ));\
    \ then\n            max=$i\n        fi\n        echo -n \"\\\"$max\\\"\"\n   \
    \     if (( i < ${#arr[@]} )); then\n            echo -n \", \"\n        fi\n\
    \    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo $max\n   \
    \ done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        res+=(\"\
    $max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo \"\\\"\
    $max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max=0\n    for i\
    \ in $@; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n\
    \        max_list+=($max)\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ local -i i=0\n    local -i max_i=0\n    local -i max_v=0\n    for i in \"${!arr[@]}\"\
    ; do\n        if [[ \"${arr[$i]}\" -gt \"$max_v\" ]]; then\n            max_v=\"\
    ${arr[$i]}\"\n            max_i=\"$i\"\n        fi\n        max[$i]=\"$max_v\"\
    \n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max_val=${arr[0]}\n    max_arr+=(\"$max_val\")\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[$i]} -gt $max_val ]]; then\n            max_val=${arr[$i]}\n\
    \        fi\n        max_arr+=(\"$max_val\")\n    done\n    echo \"${max_arr[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=($max)\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n       \
    \ fi\n        res+=($max)\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n  local max=0\n  for i in $@; do\n    if (( i > max\
    \ )); then\n      max=$i\n    fi\n    echo $max\n  done\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n   \
    \     fi\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a seq=($@)\n    local -a max\n    local\
    \ -i i\n    max[0]=${seq[0]}\n    for ((i=1; i<${#seq[@]}; i++)); do\n       \
    \ if ((seq[i] > max[i-1])); then\n            max[i]=${seq[i]}\n        else\n\
    \            max[i]=${max[i-1]}\n        fi\n    done\n    echo ${max[@]}\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        res+=(\"$max\")\n    done\n    echo \"\
    ${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        max[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n\
    \            if ((${arr[j]} > ${max[i]})); then\n                max[i]=${arr[j]}\n\
    \            fi\n        done\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a input=($@)\n    local -a output=()\n\
    \    local max=${input[0]}\n    output+=($max)\n    for i in \"${input[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     output+=($max)\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    echo -n '[';\n    for i in \"${arr[@]}\"; do\n        if [[ $i -gt $max ]];\
    \ then\n            max=$i\n        fi\n        echo -n '\"'$max'\"'\n       \
    \ echo -n ', '\n    done\n    echo -n ']'\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=${arr[0]}\n    max_arr+=($max)\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if (( ${arr[$i]} > $max )); then\n            max=${arr[$i]}\n \
    \       fi\n        max_arr+=($max)\n    done\n    echo \"${max_arr[@]}\"\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list\n    local -a max_list\n    local\
    \ max\n    list=($@)\n    max=${list[0]}\n    max_list=(\"$max\")\n    for i in\
    \ \"${list[@]:1}\"; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n        max_list+=(\"$max\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max=0\n    for i\
    \ in $@; do\n        if (( i > max )); then\n            max=$i\n        fi\n\
    \        max_list+=($max)\n    done\n    echo ${max_list[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max\n    for i in\
    \ $@; do\n        if [ -z \"$max\" ] || [ \"$i\" -gt \"$max\" ]; then\n      \
    \      max=\"$i\"\n        fi\n        max_list+=(\"$max\")\n    done\n    echo\
    \ \"${max_list[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n\
    \    local -i len\n    local -i j\n    arr=($@)\n    len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        max=${arr[i]}\n        for ((j=i; j<len; j++)); do\n\
    \            if (( arr[j] > max )); then\n                max=${arr[j]}\n    \
    \        fi\n        done\n        echo -n '\"'$max'\"'\n        if (( i < len-1\
    \ )); then\n            echo -n ', '\n        fi\n    done\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a result=()\n\
    \    local max=${arr[0]}\n    result+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max\n    local -a\
    \ res\n    local i\n    local j\n    local k\n    local m\n    local n\n    arr=($(echo\
    \ \"$@\"))\n    max=(${arr[0]})\n    res=()\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        m=${arr[$i]}\n        for ((j=0; j<${#max[@]}; j++)); do\n     \
    \       n=${max[$j]}\n            if [[ $m -gt $n ]]; then\n                max[$j]=$m\n\
    \            fi\n        done\n        max+=($m)\n    done\n    for ((k=0; k<${#max[@]};\
    \ k++)); do\n        res+=($(echo \"${max[$k]}\"))\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    arr=($1)\n    local max=${arr[0]}\n\
    \    echo -n \"[\"\n    for i in \"${arr[@]}\"; do\n        if (( i > max ));\
    \ then\n            max=$i\n        fi\n        echo -n \"\\\"$max\\\"\"\n   \
    \     if (( i < ${#arr[@]} )); then\n            echo -n \", \"\n        fi\n\
    \    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a result=()\n\
    \    local max=${arr[0]}\n    result+=(\"$max\")\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if [[ \"$i\" -gt \"\
    $max\" ]]; then\n            max=\"$i\"\n        fi\n        max_arr+=(\"$max\"\
    )\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    local -a result=()\n    result+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n   \
    \     fi\n        result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        max[i]=${arr[i]}\n        for ((j=0; j<i; j++)); do\n\
    \            if ((max[j] > max[i])); then\n                max[i]=${max[j]}\n\
    \            fi\n        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -i i=0\n    local -i\
    \ max=0\n    for i in $@; do\n        if (( i > max )); then\n            max=$i\n\
    \        fi\n        arr[$i]=$max\n    done\n    echo \"${arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    arr=($@)\n    local max=\"\
    ${arr[0]}\"\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((\
    \ arr[i] > max )); then\n            max=\"${arr[i]}\"\n        fi\n        echo\
    \ -n '\"'\n        echo -n \"$max\"\n        echo -n '\"'\n        if (( i < ${#arr[@]}-1\
    \ )); then\n            echo -n ', '\n        fi\n    done\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_value\n    local\
    \ current_value\n    max_value=0\n    for current_value in $@; do\n        if\
    \ [[ $current_value -gt $max_value ]]; then\n            max_value=$current_value\n\
    \        fi\n        max_list+=(\"$max_value\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=0; j<=i; j++)); do\n            if [[ ${arr[j]}\
    \ -gt ${max[i]} ]]; then\n                max[i]=${arr[j]}\n            fi\n \
    \       done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzqnv09xs.sh: line 14: [[: 1 2 3 4: syntax error in expression
    (error token is "2 3 4")\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i max_len=0\n\
    \    local -i max_i=0\n    local -i max_j=0\n    local -i max_val=0\n    local\
    \ -i val=0\n    local -i max_val_i=0\n    local -i max_val_j=0\n    local -i max_val_len=0\n\
    \    local -i max_val_val=0\n    local -i max_val_max_val=0\n    local -i max_val_max_val_i=0\n\
    \    local -i max_val_max_val_j=0\n    local -i max_val_max_val_len=0\n    local\
    \ -i max_val_max_val_val=0\n    local -i max_val_max_val_max_val=0\n    local\
    \ -i max_val_max_val_max_val_i=0\n    local -i max_val_max_val_max_val_j=0\n \
    \   local -i max_val_max_val_max_val_len=0\n    local -i max_val_max_val_max_val_val=0\n\
    \    local -i max_val_max_val_max_val_max_val=0\n    local -i max_val_max_val_max_val_max_val_i=0\n\
    \    local -i max_val_max_val_max_val_max_val_j=0\n    local -i max_val_max_val_max_val_max_val_len=0\n\
    \    local -i max_val_max_val_max_val_max_val_val=0\n    local -i max_val_max_val_max_val_max_val_max_val=0\n\
    \    local -i max_val_max_val_max_val_max_val_max_val_i=0\n    local -i max_val_max_val_max_val_max_val_max\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($1)\n    local -a max_list=()\n\
    \    local max=${list[0]}\n    max_list+=($max)\n    for i in \"${list[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ max_list+=($max)\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    max_arr[0]=${arr[0]}\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if\
    \ (( arr[i] > max_arr[i-1] )); then\n            max_arr[i]=${arr[i]}\n      \
    \  else\n            max_arr[i]=${max_arr[i-1]}\n        fi\n    done\n    echo\
    \ ${max_arr[@]}\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max\n   \
    \ local -i i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ -z \"${max[i-1]}\"\
    \ ]]; then\n            max[i]=${arr[i]}\n        else\n            max[i]=$(echo\
    \ -e \"${max[i-1]}\\n${arr[i]}\" | sort -n | tail -n1)\n        fi\n    done\n\
    \    echo \"${max[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp9yzke0mc.sh: line 11: max: bad array subscript\n/tmp/tmp9yzke0mc.sh:
    line 11: max: bad array subscript\n/tmp/tmp9yzke0mc.sh: line 11: max: bad array
    subscript\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        res+=(\"$max\")\n    done\n    echo \"\
    ${res[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a maxes=()\n\
    \    local max=${arr[0]}\n    maxes+=(\"$max\")\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n\
    \        fi\n        maxes+=(\"$max\")\n    done\n    echo \"${maxes[@]}\"\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local i\n    local max\n  \
    \  local -i len\n    local -i idx\n    local -i j\n    local -i k\n    arr=($@)\n\
    \    len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n        max=${arr[i]}\n\
    \        for ((j=i+1; j<len; j++)); do\n            if (( ${arr[j]} > max ));\
    \ then\n                max=${arr[j]}\n            fi\n        done\n        echo\
    \ \"\\\"$max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo \"\\\"\
    $max\\\"\"\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        res+=(\"\
    $max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n        fi\n\
    \        res+=(\"$max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    echo -n \"[\"\n    for i in \"${arr[@]}\"; do\n        if (( i > max ));\
    \ then\n            max=$i\n        fi\n        echo -n \"\\\"$max\\\"\"\n   \
    \     if (( i < ${#arr[@]} )); then\n            echo -n \", \"\n        fi\n\
    \    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list=()\n    local max=0\n    for\
    \ i in $@; do\n        max_list+=($max)\n        if (( i > max )); then\n    \
    \        max=$i\n        fi\n    done\n    echo \"${max_list[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local max=${arr[0]}\n\
    \    local -a res=()\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n        fi\n\
    \        res+=(\"$max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo $max\n   \
    \ done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max\n    local -a\
    \ result\n    local i\n    local j\n    local n\n    local m\n    arr=($@)\n \
    \   n=${#arr[@]}\n    max[0]=${arr[0]}\n    for ((i=1; i<n; i++)); do\n      \
    \  m=${max[i-1]}\n        if [[ ${arr[i]} -gt $m ]]; then\n            max[i]=${arr[i]}\n\
    \        else\n            max[i]=$m\n        fi\n    done\n    for ((i=0; i<n;\
    \ i++)); do\n        result[i]=\"\\\"${max[i]}\\\"\"\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_list_len=0\n\
    \    local max_list_idx=0\n    local max_list_idx_next=0\n    local max_list_idx_prev=0\n\
    \    local max_list_idx_prev_prev=0\n    local max_list_idx_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev=0\n    local max_list_idx_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev=0\n    local max_list_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_idx_prev_prev_prev_prev_prev_prev_\n}\n\ncandidate() {\n \
    \   rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -i i\n    local -i max\n\
    \    local -i len\n    local -i j\n    arr=($@)\n    len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        max=${arr[i]}\n        for ((j=i; j<len; j++)); do\n\
    \            if (( arr[j] > max )); then\n                max=${arr[j]}\n    \
    \        fi\n        done\n        echo \"\\\"$max\\\"\"\n    done\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local max=${arr[0]}\n\
    \    echo -n \"[\"\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((arr[i]\
    \ > max)); then\n            max=${arr[i]}\n        fi\n        echo -n '\"'$max'\"\
    '\n        if ((i < ${#arr[@]} - 1)); then\n            echo -n \", \"\n     \
    \   fi\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        max_arr+=(\"$max\")\n    done\n    echo\
    \ \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a max_arr\n   \
    \ local max=${arr[0]}\n    max_arr+=($max)\n    for i in \"${arr[@]:1}\"; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        max_arr+=($max)\n\
    \    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n    local -i\
    \ max_val=0\n    for ((i=0; i<len; i++)); do\n        max_val=${arr[i]}\n    \
    \    for ((j=0; j<i; j++)); do\n            if [[ ${arr[j]} -gt $max_val ]]; then\n\
    \                max_val=${arr[j]}\n            fi\n        done\n        max+=(\"\
    $max_val\")\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a maxs\n    local max=0\n    for i in\
    \ $@; do\n        if (( i > max )); then\n            max=$i\n        fi\n   \
    \     maxs+=(\"$max\")\n    done\n    echo \"${maxs[@]}\"\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a list=($@)\n    local -a max_list=()\n\
    \    local max=${list[0]}\n    max_list+=($max)\n    for ((i=1; i<${#list[@]};\
    \ i++)); do\n        if [[ ${list[$i]} -gt $max ]]; then\n            max=${list[$i]}\n\
    \        fi\n        max_list+=($max)\n    done\n    echo ${max_list[@]}\n}\n\n\
    candidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_so_far\n    local -a max_so_far_index\n\
    \    local -a max_so_far_length\n    local -a max_so_far_length_index\n    local\
    \ -a max_so_far_length_index_length\n    local -a max_so_far_length_index_length_index\n\
    \    local -a max_so_far_length_index_length_index_length\n    local -a max_so_far_length_index_length_index_length_index\n\
    \    local -a max_so_far_length_index_length_index_length_index_length\n    local\
    \ -a max_so_far_length_index_length_index_length_index_length_index\n    local\
    \ -a max_so_far_length_index_length_index_length_index_length_index_length\n \
    \   local -a max_so_far_length_index_length_index_length_index_length_index_length_index\n\
    \    local -a max_so_far_length_index_length_index_length_index_length_index_length_index_length\n\
    \    local -a max_so_far_length_index_length_index_length_index_length_index_length_index_length_index\n\
    \    local -a max_so_far_length_index_length_index_length_index_length_index_length_index_length_index_length\n\
    \    local -a max_so_far_length_index_length_index_length_index_length_index_length_index_length_index_length_index\n\
    \    local -a max_so_far_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length\n\
    \    local -a max_so_far_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index\n\
    \    local -a max_so_far_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length_index_length\n\
    \    local -a max_so_far_length_index\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n        fi\n   \
    \     max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr\n\
    \    local max=${arr[0]}\n    max_arr+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ max_arr+=(\"$max\")\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_so_far\n    local -i i\n    local\
    \ -i max_so_far_i\n    local -i max_so_far_value\n    local -i value\n    for\
    \ i in \"$@\"; do\n        value=$i\n        if [[ $value -gt $max_so_far_value\
    \ ]]; then\n            max_so_far_value=$value\n            max_so_far_i=$i\n\
    \        fi\n        max_so_far[$i]=$max_so_far_value\n    done\n    echo \"${max_so_far[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu139tu5k.sh: line 12: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")\n'''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        res+=(\"\
    $max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_list_len=0\n\
    \    local max_list_idx=0\n    local max_list_max_idx=0\n    local max_list_max_val=0\n\
    \    local max_list_max_val_idx=0\n    local max_list_max_val_idx_prev=0\n   \
    \ local max_list_max_val_idx_prev_prev=0\n    local max_list_max_val_idx_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev=0\n    local max_list_max_val_idx_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev=0\n    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev_prev=0\n  \
    \  local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_list_max_val_idx_prev_prev_prev_prev_prev\n}\n\ncandidate() {\n\
    \    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a max_list\n    local max_value=0\n  \
    \  for i in $@; do\n        if (( i > max_value )); then\n            max_value=$i\n\
    \        fi\n        max_list+=(\"$max_value\")\n    done\n    echo \"${max_list[@]}\"\
    \n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ [[ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo $max\n\
    \    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if (( arr[i] > max )); then\n            max=${arr[i]}\n       \
    \ fi\n        res+=(\"$max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a result=()\n\
    \    local max=${arr[0]}\n    result+=(\"$max\")\n    for i in \"${arr[@]:1}\"\
    ; do\n        if [[ \"$i\" -gt \"$max\" ]]; then\n            max=\"$i\"\n   \
    \     fi\n        result+=(\"$max\")\n    done\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a input=($@)\n    local -a output=()\n\
    \    local max=${input[0]}\n    output+=($max)\n    for i in \"${input[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ output+=($max)\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n  \
    \  rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"\
    4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100\
    \ 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max_arr\n    local\
    \ max\n    local i\n    local j\n    arr=($@)\n    max_arr=()\n    max=${arr[0]}\n\
    \    max_arr+=($max)\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt $max ]]; then\n            max=${arr[$i]}\n        fi\n        max_arr+=($max)\n\
    \    done\n    for ((j=0; j<${#max_arr[@]}; j++)); do\n        echo -n '\"'${max_arr[$j]}'\"\
    '\n        if [[ $j -lt $(( ${#max_arr[@]} - 1 )) ]]; then\n            echo -n\
    \ ', '\n        fi\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a res=()\n    local\
    \ max=${arr[0]}\n    res+=(\"\\\"$max\\\"\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        res+=(\"\
    \\\"$max\\\"\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr\n    local -a max\n    local -a\
    \ res\n    local i=0\n    local j=0\n    local len=0\n    local max_len=0\n  \
    \  local max_len_prev=0\n    local max_len_prev_prev=0\n    local max_len_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev=0\n    local max_len_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev=0\n    local max_len_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local max_len_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local -a max_arr\n   \
    \ local max=${arr[0]}\n    max_arr+=($max)\n    for ((i=1; i<${#arr[@]}; i++));\
    \ do\n        if (( ${arr[$i]} > $max )); then\n            max=${arr[$i]}\n \
    \       fi\n        max_arr+=($max)\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate()\
    \ {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3\
    \ 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local max=0\n    for i in $@; do\n        if\
    \ (( i > max )); then\n            max=$i\n        fi\n        echo $max\n   \
    \ done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a res=()\n\
    \    local max=${arr[0]}\n    res+=(\"$max\")\n    for i in \"${arr[@]:1}\"; do\n\
    \        if (( i > max )); then\n            max=$i\n        fi\n        res+=(\"\
    $max\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    rolling_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") =\
    \ \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -i max=0\n \
    \   local -i i=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if ((arr[i] > max)); then\n            max=${arr[i]}\n        fi\n  \
    \      echo -n '\"'$max'\"'\n        if ((i < len-1)); then\n            echo\
    \ -n ', '\n        fi\n    done\n}\n\ncandidate() {\n    rolling_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($@)\n    local max=${arr[0]}\n\
    \    echo -n \"[\\\"$max\\\"\"\n    for i in \"${arr[@]:1}\"; do\n        if [[\
    \ $i -gt $max ]]; then\n            max=$i\n        fi\n        echo -n \", \\\
    \"$max\\\"\"\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    rolling_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\"\
    \ ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 1
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=(\"$@\")\n    local -a max_arr=()\n\
    \    local max=0\n    for i in \"${arr[@]}\"; do\n        if (( i > max )); then\n\
    \            max=$i\n        fi\n        max_arr+=(\"$max\")\n    done\n    echo\
    \ \"${max_arr[@]}\"\n}\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"3 2 3 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a input=($@)\n    local -a output=()\n\
    \    local max=${input[0]}\n    output+=($max)\n    for i in \"${input[@]:1}\"\
    ; do\n        if (( i > max )); then\n            max=$i\n        fi\n       \
    \ output+=($max)\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n  \
    \  rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"\
    4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3 100 3\") = \"3 3 3 100\
    \ 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
- exit_code: 0
  program: "#!/bin/bash\n# From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max\
    \ \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"',\
    \ '\"4\"']\nrolling_max() {\n    local -a arr=($1)\n    local -a result=()\n \
    \   local max=${arr[0]}\n    for i in ${arr[@]}; do\n        if ((i > max)); then\n\
    \            max=$i\n        fi\n        result+=($max)\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    rolling_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"4 3 2 1\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"3 2 3\
    \ 100 3\") = \"3 3 3 100 100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358286
