language: sh
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_left=$(echo $q | cut -d \" \" -f -$q_half)\n  local q_right=$(echo $q | cut\
    \ -d \" \" -f $((q_half+1))-)\n  local q_left_rev=$(echo $q_left | rev)\n  local\
    \ q_right_rev=$(echo $q_right | rev)\n  for i in $q; do\n    sum=$((sum+i))\n\
    \  done\n  if [ $sum -le $w ] && [ \"$q_left\" == \"$q_left_rev\" ] && [ \"$q_right\"\
    \ == \"$q_right_rev\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_plus_one=0\n\
    \  local q_len_half_minus_one=0\n  local q_len_half_plus_one_val=0\n  local q_len_half_minus_one_val=0\n\
    \  local q_len_half_val=0\n  local q_len_half_plus_one_val_rev=0\n  local q_len_half_minus_one_val_rev=0\n\
    \  local q_len_half_val_rev=0\n  local q_len_half_plus_one_val_rev_sum=0\n  local\
    \ q_len_half_minus_one_val_rev_sum=0\n  local q_len_half_val_rev_sum=0\n  local\
    \ q_len_half_plus_one_val_rev_sum_sum=0\n  local q_len_half_minus_one_val_rev_sum_sum=0\n\
    \  local q_len_half_val_rev_sum_sum=0\n  local q_len_half_plus_one_val_rev_sum_sum_sum=0\n\
    \  local q_len_half_minus_one_val_rev_sum_sum_sum=0\n  local q_len_half_val_rev_sum_sum_sum=0\n\
    \  local q_len_half_plus_one_val_rev_sum_sum_sum_sum=0\n  local q_len_half_minus_one_val_rev_sum_sum_sum_sum=0\n\
    \  local q_len_half_val_rev_sum_sum_sum_sum=0\n  local q_len_half_plus_one_val_rev_sum_sum_sum_sum_sum=0\n\
    \  local q_len_half_minus_one_val_rev_sum_sum_sum_sum_sum=0\n  local q_len_half_val_rev_sum_sum_sum_sum_sum=0\n\
    \  local q_len_half_plus_one_val\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $q = $rev ] && [ $sum -le $w ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpqqgpozat.sh: line 22: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # To access\
    \ arguments use variables $1, $2, etc.\n    q=$1\n    w=$2\n    q_arr=($q)\n \
    \   q_len=${#q_arr[@]}\n    q_sum=0\n    for ((i=0; i<$q_len; i++))\n    do\n\
    \        q_sum=$(($q_sum+${q_arr[$i]}))\n    done\n    if [ $q_sum -gt $w ]\n\
    \    then\n        echo \"false\"\n    else\n        q_rev=`echo $q | rev`\n \
    \       if [ \"$q\" == \"$q_rev\" ]\n        then\n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  q=$1\n  w=$2\n  if [[ $(echo\
    \ $q | rev) == $q ]]; then\n    if [[ $(echo $q | tr \" \" \"+\" | bc) -le $w\
    \ ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local balanced=true\n\
    \    for ((i=0; i<${#q}; i++)); do\n        sum=$(($sum+${q:$i:1}))\n        if\
    \ [[ $sum -gt $w ]]; then\n            echo \"false\"\n            return\n  \
    \      fi\n        if [[ ${q:$i:1} -ne ${q:$j:1} ]]; then\n            balanced=false\n\
    \        fi\n        j=$(($j-1))\n    done\n    if [[ $balanced == true ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgx3e2n9a.sh: line 25: 3+ : syntax error: operand expected (error
    token is "+ ")\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | rev | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpza6wyuub.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=${#q}\n    local q_len_half=$((q_len/2))\n \
    \   local q_len_half_plus_one=$((q_len_half+1))\n    local q_len_half_minus_one=$((q_len_half-1))\n\
    \    local q_len_half_minus_one_plus_one=$((q_len_half_minus_one+1))\n    local\
    \ q_len_half_minus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=${#q}\n    local q_len_half=$((q_len/2))\n \
    \   local q_len_half_plus_one=$((q_len_half+1))\n    local q_len_half_minus_one=$((q_len_half-1))\n\
    \    local q_len_half_minus_one_plus_one=$((q_len_half_minus_one+1))\n    local\
    \ q_len_half_minus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \    local q_len_half_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_plus_one=0\n\
    \  local q_len_half_minus_one=0\n  local q_len_half_plus_one_index=0\n  local\
    \ q_len_half_minus_one_index=0\n  local q_len_half_plus_one_val=0\n  local q_len_half_minus_one_val=0\n\
    \  local q_len_half_plus_one_val_sum=0\n  local q_len_half_minus_one_val_sum=0\n\
    \  local q_len_half_plus_one_val_sum_str=0\n  local q_len_half_minus_one_val_sum_str=0\n\
    \  local q_len_half_plus_one_val_sum_str_rev=0\n  local q_len_half_minus_one_val_sum_str_rev=0\n\
    \  local q_len_half_plus_one_val_sum_str_rev_len=0\n  local q_len_half_minus_one_val_sum_str_rev_len=0\n\
    \  local q_len_half_plus_one_val_sum_str_rev_len_half=0\n  local q_len_half_minus_one_val_sum_str_rev_len_half=0\n\
    \  local q_len_half_plus_one_val_sum_str_rev_len_half_plus_one=0\n  local q_len_half_minus_one_val_sum_str_rev_len_half_plus_one=0\n\
    \  local q_len_half_plus_one_val_sum_str_rev_len_half_minus_one=0\n  local q_len_half_minus_one_val_sum_str_rev_len_half_minus_one=0\n\
    \  local q_len_half_plus_one_val_sum_str_rev_len_half_plus_one_index=0\n  local\
    \ q_len_half_minus_one\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=\"\"\n    local q_len=0\n    local i=0\n   \
    \ local j=0\n    local q_arr=()\n    local q_arr_rev=()\n    local is_balanced=false\n\
    \    local is_weight_ok=false\n\n    q_arr=($q)\n    q_len=${#q_arr[@]}\n    q_arr_rev=(\"\
    ${q_arr[@]}\")\n    for ((i=0; i<q_len; i++)); do\n        j=$((q_len-i-1))\n\
    \        q_arr_rev[$i]=${q_arr[$j]}\n    done\n    if [[ \"${q_arr[@]}\" == \"\
    ${q_arr_rev[@]}\" ]]; then\n        is_balanced=true\n    fi\n    for ((i=0; i<q_len;\
    \ i++)); do\n        sum=$((sum+${q_arr[$i]}))\n    done\n    if [[ $sum -le $w\
    \ ]]; then\n        is_weight_ok=true\n    fi\n    if [[ $is_balanced == true\
    \ && $is_weight_ok == true ]]; then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    local i=0\n    local j=0\n    local arr=()\n\
    \    local len_arr=0\n    local is_palindrome=0\n    local is_balanced=0\n   \
    \ local is_weight=0\n    local is_fly=0\n    local result=0\n\n    # check if\
    \ the sum of the elements is less than or equal the maximum possible weight\n\
    \    for i in $q; do\n        sum=$((sum+i))\n    done\n    if [[ $sum -le $w\
    \ ]]; then\n        is_weight=1\n    fi\n\n    # check if the object is balanced\n\
    \    len=${#q}\n    for ((i=0; i<len; i++)); do\n        arr[$i]=${q:$i:1}\n \
    \   done\n    len_arr=${#arr[@]}\n    for ((i=0, j=len_arr-1; i<len_arr/2; i++,\
    \ j--)); do\n        if [[ ${arr[$i]} -ne ${arr[$j]} ]]; then\n            is_palindrome=0\n\
    \            break\n        else\n            is_palindrome=1\n        fi\n  \
    \  done\n    if [[ $is_palindrome -eq 1 ]]; then\n        is_balanced=1\n    fi\n\
    \n    # check if the object will fly\n    if [[ $is_weight -eq 1 && $is_balanced\
    \ -eq 1 ]]; then\n        is_fly=1\n    fi\n\n    # return the result\n    if\
    \ [[ $is_fly -eq 1 ]]; then\n        result=1\n    fi\n    echo $result\n}\n\n\
    candidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#q}-1))\n  while [\
    \ $i -lt $j ]; do\n    if [ \"${q:$i:1}\" != \"${q:$j:1}\" ]; then\n      balanced=false\n\
    \      break\n    fi\n    ((i++))\n    ((j--))\n  done\n  for i in $q; do\n  \
    \  ((sum+=i))\n  done\n  if [ $sum -le $w ] && $balanced; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=\"$1\"\n  local w=\"\
    $2\"\n  local sum=0\n  local balanced=true\n  for i in $q; do\n    sum=$((sum+i))\n\
    \    if [[ $((sum > w)) == 1 ]]; then\n      echo \"false\"\n      return\n  \
    \  fi\n  done\n  local q_rev=$(echo $q | rev)\n  for i in $q; do\n    if [[ $i\
    \ != $q_rev ]]; then\n      balanced=false\n      break\n    fi\n  done\n  if\
    \ [[ $balanced == true ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=0\n  local i=0\n  local j=0\n  local balanced=true\n  for\
    \ i in $q; do\n    ((sum+=i))\n    ((len++))\n  done\n  if ((sum>w)); then\n \
    \   echo \"false\"\n    return\n  fi\n  ((len--))\n  for ((i=0; i<len; i++));\
    \ do\n    ((j=len-i))\n    if [[ ${q[i]} -ne ${q[j]} ]]; then\n      balanced=false\n\
    \      break\n    fi\n  done\n  if $balanced; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkso4j549.sh: line 36: [[: 3 2 3: syntax error in expression
    (error token is "2 3")\n/tmp/tmpkso4j549.sh: line 36: [[: 1 2: syntax error in
    expression (error token is "2")\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | rev | tr\
    \ '\\n' ' ')\n  if [ $q = $rev ] && [ $sum -le $w ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpc7arsrm5.sh: line 22: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n  \
    \  local ab=0\n    local ac=0\n    local ad=0\n    local ae=0\n    local af=0\n\
    \    local ag=0\n    local ah=0\n    local ai=0\n    local aj=0\n    local ak=0\n\
    \    local al=0\n    local am=0\n    local an=0\n    local ao=0\n    local ap=0\n\
    \    local aq=0\n    local ar=0\n    local as=0\n    local at=0\n    local au=0\n\
    \    local av=0\n    local aw=0\n    local ax=0\n    local ay=0\n    local az=0\n\
    \    local ba=0\n    local bb=0\n    local bc=0\n    local bd=0\n    local be=0\n\
    \    local bf=0\n    local bg=0\n    local bh=0\n    local bi=0\n    local bj=0\n\
    \    local bk=0\n    local bl=0\n    local bm=0\n    local bn=0\n    local bo=0\n\
    \    local bp=0\n    local bq=0\n    local br=0\n    local bs=0\n    local bt=0\n\
    \    local bu=0\n    local bv=0\n    local bw=0\n    local bx=0\n    local by=0\n\
    \    local bz=0\n    local ca=0\n    local cb=0\n    local cc=0\n    local cd=0\n\
    \    local ce=0\n    local cf=0\n    local cg=0\n    local ch=0\n\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  for i in $(echo $q | tr \" \" \"\\n\"); do\n\
    \    sum=$((sum+i))\n    if [ $i -gt $w ]; then\n      balanced=false\n    fi\n\
    \  done\n  if [ $sum -gt $w ]; then\n    balanced=false\n  fi\n  if [ $balanced\
    \ = true ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=1\n  for i in $(echo $q | tr ' ' '\\n'); do\n    sum=$((sum+i))\n\
    \    if [[ $((sum-i)) -ne $((sum-2*i)) ]]; then\n      balanced=0\n    fi\n  done\n\
    \  if [[ $sum -le $w && $balanced -eq 1 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=0\n    local len=0\n    local arr=()\n\
    \    local is_balanced=true\n    local is_weight_ok=false\n\n    # Check if the\
    \ sum of the elements is less than the maximum possible weight.\n    for i in\
    \ $q; do\n        ((sum+=i))\n    done\n    if ((sum<=w)); then\n        is_weight_ok=true\n\
    \    fi\n\n    # Check if the list is palindromic.\n    len=${#q}\n    arr=($q)\n\
    \    for ((i=0; i<len/2; i++)); do\n        j=$((len-i-1))\n        if ((arr[i]!=arr[j]));\
    \ then\n            is_balanced=false\n            break\n        fi\n    done\n\
    \n    if $is_balanced && $is_weight_ok; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=\"$1\"\n    local w=\"\
    $2\"\n    local sum=0\n    local balanced=true\n    local i=0\n    local j=$((${#q}\
    \ - 1))\n    while [ $i -lt $j ]; do\n        if [ \"${q:$i:1}\" != \"${q:$j:1}\"\
    \ ]; then\n            balanced=false\n            break\n        fi\n       \
    \ i=$((i + 1))\n        j=$((j - 1))\n    done\n    for i in $q; do\n        sum=$((sum\
    \ + i))\n    done\n    if [ $sum -le $w ] && $balanced; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#q}-1))\n  while [\
    \ $i -lt $j ]; do\n    if [ ${q:$i:1} -ne ${q:$j:1} ]; then\n      balanced=false\n\
    \      break\n    fi\n    i=$((i+1))\n    j=$((j-1))\n  done\n  for i in $q; do\n\
    \    sum=$((sum+i))\n  done\n  if [ $sum -le $w ] && $balanced; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local balanced=true\n    local q_len=$(echo $q | wc -w)\n\
    \    local q_half=$((q_len/2))\n    local q_array=($q)\n    for ((i=0; i<q_half;\
    \ i++)); do\n        if [[ ${q_array[i]} -ne ${q_array[q_len-i-1]} ]]; then\n\
    \            balanced=false\n            break\n        fi\n        sum=$((sum+q_array[i]))\n\
    \    done\n    if [[ $((q_len%2)) -ne 0 ]]; then\n        sum=$((sum+q_array[q_half]))\n\
    \    fi\n    if [[ $sum -le $w && $balanced == true ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local balanced=1\n    local len=${#q}\n    local i=0\n \
    \   local j=$((len-1))\n    while [ $i -lt $j ]; do\n        if [ ${q:$i:1} -ne\
    \ ${q:$j:1} ]; then\n            balanced=0\n            break\n        fi\n \
    \       ((i++))\n        ((j--))\n    done\n    for i in $q; do\n        ((sum+=i))\n\
    \    done\n    if [ $sum -le $w ] && [ $balanced -eq 1 ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ q_sum=$(echo $q | tr ' ' '+')\n  local q_rev=$(echo $q | tr ' ' '\\n' | tac\
    \ | tr '\\n' ' ')\n  if [[ $q_sum -le $w ]] && [[ $q == $q_rev ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_rev=\"\"\n    for i in $q; do\n\
    \        let sum+=$i\n        let q_len+=1\n        q_rev=\"$i $q_rev\"\n    done\n\
    \    if [ $sum -gt $w ]; then\n        echo \"false\"\n    elif [ \"$q\" = \"\
    $q_rev\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_rev=\"\"\n    local q_rev_len=0\n\
    \    local q_rev_len_half=0\n    local q_rev_len_half_plus_one=0\n    local q_rev_len_half_minus_one=0\n\
    \    local q_rev_half=\"\"\n    local q_rev_half_plus_one=\"\"\n    local q_rev_half_minus_one=\"\
    \"\n    local q_rev_half_plus_one_len=0\n    local q_rev_half_minus_one_len=0\n\
    \    local q_rev_half_plus_one_rev=\"\"\n    local q_rev_half_minus_one_rev=\"\
    \"\n    local q_rev_half_plus_one_rev_len=0\n    local q_rev_half_minus_one_rev_len=0\n\
    \    local q_rev_half_plus_one_rev_len_half=0\n    local q_rev_half_minus_one_rev_len_half=0\n\
    \    local q_rev_half_plus_one_rev_len_half_plus_one=0\n    local q_rev_half_minus_one_rev_len_half_plus_one=0\n\
    \    local q_rev_half_plus_one_rev_len_half_minus_one=0\n    local q_rev_half_minus_one_rev_len_half_minus_one=0\n\
    \    local q_rev_half_plus_one_rev_half=\"\"\n    local q_rev_half_minus_one_rev_half=\"\
    \"\n    local q_rev_half_plus_one_rev_half_plus_one=\"\"\n    local q_rev_half_minus_one_rev_half_plus_one=\"\
    \"\n    local q_rev_half_plus_one_rev_half_minus_one=\"\"\n    local q_rev_half_minus_one_rev_half_minus_one=\"\
    \"\n    local q_rev_half_plus_one_rev_half_plus_one_len=0\n    local q_rev_half_minus_one_rev\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local balanced=true\n\
    \    local q_array=($q)\n    while [ $i -lt $j ]; do\n        if [ ${q_array[$i]}\
    \ -ne ${q_array[$j]} ]; then\n            balanced=false\n            break\n\
    \        fi\n        i=$(($i+1))\n        j=$(($j-1))\n    done\n    for i in\
    \ ${q_array[@]}; do\n        sum=$(($sum+$i))\n    done\n    if [ $sum -le $w\
    \ ] && $balanced; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: 'b''/tmp/tmp8jcykvm0.sh: line 26: [: 3: unary operator expected\n/tmp/tmp8jcykvm0.sh:
    line 26: [: 2: unary operator expected\n/tmp/tmp8jcykvm0.sh: line 26: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    local i=0\n    local j=0\n    local q_array=()\n\
    \    local q_rev_array=()\n    local q_array_len=0\n    local q_rev_array_len=0\n\
    \    local is_balanced=0\n    local is_balanced_rev=0\n    local is_balanced_final=0\n\
    \    local is_weight_ok=0\n    local is_weight_ok_final=0\n    local is_fly=0\n\
    \    local is_fly_final=0\n\n    # Check if q is a palindromic list\n    q_array=($q)\n\
    \    q_array_len=${#q_array[@]}\n    q_rev_array=($(echo $q | rev))\n    q_rev_array_len=${#q_rev_array[@]}\n\
    \    if [ $q_array_len -eq $q_rev_array_len ]; then\n        for ((i=0; i<$q_array_len;\
    \ i++)); do\n            if [ ${q_array[$i]} -eq ${q_rev_array[$i]} ]; then\n\
    \                is_balanced=1\n            else\n                is_balanced=0\n\
    \                break\n            fi\n        done\n    else\n        is_balanced=0\n\
    \    fi\n\n    # Check if the sum of its elements is less than or equal the maximum\
    \ possible weight w\n    for ((i=0; i<$q_array_len; i++)); do\n        sum=$((sum+${q_array[$i]}))\n\
    \    done\n    if [ $sum -le $w ]; then\n        is_weight_ok=1\n    else\n  \
    \      is_weight_ok=0\n    fi\n\n    # Check if the object q will fly\n    if\
    \ [ $is_balanced -eq 1 ] && [ $is_weight_ok -eq 1 ]; then\n        is_fly=1\n\
    \    else\n        is_fly=0\n    fi\n\n    # Check if the object q will fly\n\
    \    if [ $is_fly -eq 1 ]; then\n        echo \"true\"\n    else\n        echo\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpsg_qp2pg.sh: line 76: syntax error near unexpected token `}''\n/tmp/tmpsg_qp2pg.sh:
    line 76: `}''\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [[ $sum -le $w ]] && [[ $q == $rev ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ q_sum=$(echo $q | tr ' ' '+')\n  local q_rev=$(echo $q | tr ' ' '\\n' | tac\
    \ | tr '\\n' ' ')\n  if [ $(($q_sum)) -le $w ] && [ \"$q\" == \"$q_rev\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_plus_one=0\n\
    \  local q_len_half_minus_one=0\n  local q_len_half_plus_one_sum=0\n  local q_len_half_minus_one_sum=0\n\
    \  local q_len_half_sum=0\n  local q_len_half_plus_one_sum_str=\"\"\n  local q_len_half_minus_one_sum_str=\"\
    \"\n  local q_len_half_sum_str=\"\"\n  local q_len_half_plus_one_sum_str_rev=\"\
    \"\n  local q_len_half_minus_one_sum_str_rev=\"\"\n  local q_len_half_sum_str_rev=\"\
    \"\n  local q_len_half_plus_one_sum_str_rev_len=0\n  local q_len_half_minus_one_sum_str_rev_len=0\n\
    \  local q_len_half_sum_str_rev_len=0\n  local q_len_half_plus_one_sum_str_rev_len_half=0\n\
    \  local q_len_half_minus_one_sum_str_rev_len_half=0\n  local q_len_half_sum_str_rev_len_half=0\n\
    \  local q_len_half_plus_one_sum_str_rev_len_half_plus_one=0\n  local q_len_half_minus_one_sum_str_rev_len_half_plus_one=0\n\
    \  local q_len_half_sum_str_rev_len_half_plus_one=0\n  local q_len_half_plus_one_sum_str_rev_len_half_minus_one=0\n\
    \  local q_len_half_minus_one_sum_str_rev_len_half_minus_one=0\n  local q_len_half_sum_str_rev_len_half_minus_one=0\n\
    \  local q_len_half_plus_one_sum\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [[ $sum -le $w ]] && [[ $q == $rev ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local q_array=($q)\n\
    \    local q_len=${#q_array[@]}\n    while [ $i -lt $q_len ]; do\n        sum=$(($sum+${q_array[$i]}))\n\
    \        if [ $sum -gt $w ]; then\n            echo \"false\"\n            return\n\
    \        fi\n        if [ ${q_array[$i]} -ne ${q_array[$j]} ]; then\n        \
    \    echo \"false\"\n            return\n        fi\n        i=$(($i+1))\n   \
    \     j=$(($j-1))\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpvjpo2sdi.sh: line 31: [: 3: unary operator expected\n/tmp/tmpvjpo2sdi.sh:
    line 31: [: 2: unary operator expected\n/tmp/tmpvjpo2sdi.sh: line 31: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=0\n    local len=0\n    local is_balanced=1\n\
    \    local is_light=1\n    for i in $q; do\n        sum=$((sum+i))\n    done\n\
    \    if [ $sum -gt $w ]; then\n        is_light=0\n    fi\n    len=$(echo $q |\
    \ wc -w)\n    for ((i=0, j=$((len-1)); i<$((len/2)); i++, j--)); do\n        if\
    \ [ $(echo $q | cut -d \" \" -f $((i+1))) -ne $(echo $q | cut -d \" \" -f $((j+1)))\
    \ ]; then\n            is_balanced=0\n        fi\n    done\n    if [ $is_balanced\
    \ -eq 1 ] && [ $is_light -eq 1 ]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  q=$1\n  w=$2\n  if [[ $(echo\
    \ $q | rev) == $q ]]; then\n    if [[ $(echo $q | tr ' ' '+') -le $w ]]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | tac | tr '\\n' ' ')\n    if [[ $sum -le $w ]] && [[ $q == $rev ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#q}-1))\n  while [\
    \ $i -lt $j ]; do\n    if [ \"${q:$i:1}\" != \"${q:$j:1}\" ]; then\n      balanced=false\n\
    \      break\n    fi\n    i=$((i+1))\n    j=$((j-1))\n  done\n  for i in $q; do\n\
    \    sum=$((sum+i))\n  done\n  if [ $sum -le $w ] && $balanced; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local palindrome=$(echo $q | rev)\n  if [[ $q\
    \ == $palindrome ]] && [[ $sum -le $w ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_half_end=$((q_len-q_half))\n  local q_first=$(echo $q | cut -d' ' -f1-$q_half)\n\
    \  local q_last=$(echo $q | cut -d' ' -f$q_half_end-$q_len)\n  local q_last_rev=$(echo\
    \ $q_last | rev)\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [ $sum -gt\
    \ $w ]; then\n    echo \"false\"\n  elif [ \"$q_first\" != \"$q_last_rev\" ];\
    \ then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | tac | tr '\\n' ' ')\n    if [ $q = $rev ] && [ $sum -le $w ]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpe99zjkvm.sh: line 22: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=$(echo $q | wc -w)\n    local q_half=$((q_len/2))\n\
    \    local q_half_len=$((q_half+1))\n    local q_half_first=$(echo $q | cut -d\
    \ ' ' -f 1-$q_half_len)\n    local q_half_last=$(echo $q | cut -d ' ' -f -$q_half_len\
    \ | rev)\n    local q_half_first_len=$(echo $q_half_first | wc -w)\n    local\
    \ q_half_last_len=$(echo $q_half_last | wc -w)\n    local q_half_first_last_len=$((q_half_first_len+q_half_last_len))\n\
    \    local q_half_first_last=$(echo $q_half_first $q_half_last)\n    local q_half_first_last_sum=$(echo\
    \ $q_half_first_last | tr ' ' '+' | bc)\n    local q_half_first_last_sum_len=$(echo\
    \ $q_half_first_last_sum | wc -w)\n    local q_half_first_last_sum_half=$((q_half_first_last_sum_len/2))\n\
    \    local q_half_first_last_sum_half_len=$((q_half_first_last_sum_half+1))\n\
    \    local q_half_first_last_sum_half_first=$(echo $q_half_first_last_sum | cut\
    \ -d ' ' -f 1-$q_half_first_last_sum_half_len)\n    local q_half_first_last_sum_half_last=$(echo\
    \ $q_half_first_last_sum | cut -d ' ' -f -$q_half_first_last_sum_half_len | rev)\n\
    \    local q_half_first_last_sum_half_first_len=$(echo $q_half_first_last_sum_half_first\
    \ | wc -w)\n    local q\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo \"$q\" | tr ' ' '+')\n  local rev=$(echo \"$q\" | tr ' ' '\\n' |\
    \ tac | tr '\\n' ' ')\n  if [[ \"$sum\" -le \"$w\" && \"$q\" == \"$rev\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local q_sum=$(echo $q | tr ' ' '+')\n    local q_rev=$(echo $q | tr ' ' '\\\
    n' | tac | tr '\\n' ' ')\n    if [[ $q_sum -le $w ]] && [[ $q == $q_rev ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=0\n    local len=0\n    local arr=()\n\
    \    local is_palindrome=0\n    local is_balanced=0\n    local is_underweight=0\n\
    \    local is_flying=0\n\n    # sum the elements of q\n    for i in $q; do\n \
    \       sum=$((sum+i))\n    done\n\n    # check if q is a palindrome\n    len=${#q}\n\
    \    arr=($q)\n    for ((i=0; i<len/2; i++)); do\n        if [[ ${arr[i]} -ne\
    \ ${arr[len-i-1]} ]]; then\n            is_palindrome=1\n            break\n \
    \       fi\n    done\n\n    # check if q is balanced\n    if [[ $is_palindrome\
    \ -eq 0 ]]; then\n        is_balanced=1\n    fi\n\n    # check if q is underweight\n\
    \    if [[ $sum -le $w ]]; then\n        is_underweight=1\n    fi\n\n    # check\
    \ if q will fly\n    if [[ $is_balanced -eq 1 && $is_underweight -eq 1 ]]; then\n\
    \        is_flying=1\n    fi\n\n    # return the result\n    if [[ $is_flying\
    \ -eq 1 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ q_sum=$(echo $q | tr ' ' '+')\n  local q_rev=$(echo $q | tr ' ' '\\n' | rev\
    \ | tr '\\n' ' ')\n  if [[ $q_sum -le $w ]] && [[ $q == $q_rev ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | rev | tr\
    \ '\\n' ' ')\n  if [ $q = $rev ] && [ $sum -le $w ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpc7arsrm5.sh: line 22: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_rev=\"\"\n  local q_rev_len=0\n  local i=0\n\
    \  local j=0\n  local balanced=0\n  local fly=0\n  for i in $q; do\n    sum=$((sum+i))\n\
    \    q_len=$((q_len+1))\n  done\n  if [ $sum -le $w ]; then\n    for i in $q;\
    \ do\n      q_rev=\"$i $q_rev\"\n    done\n    for i in $q; do\n      for j in\
    \ $q_rev; do\n        if [ $i -eq $j ]; then\n          balanced=$((balanced+1))\n\
    \        fi\n      done\n      q_rev_len=$((q_rev_len+1))\n      q_rev=${q_rev#*\
    \ }\n    done\n    if [ $q_len -eq $balanced ]; then\n      fly=1\n    fi\n  fi\n\
    \  if [ $fly -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=$(echo $q | wc -w)\n  local i=1\n  local j=$((len/2))\n \
    \ local k=$((len-1))\n  while [ $i -le $j ]; do\n    local a=$(echo $q | cut -d\
    \ ' ' -f $i)\n    local b=$(echo $q | cut -d ' ' -f $k)\n    sum=$((sum+a+b))\n\
    \    i=$((i+1))\n    k=$((k-1))\n  done\n  if [ $((len%2)) -eq 1 ]; then\n   \
    \ local c=$(echo $q | cut -d ' ' -f $((len/2+1)))\n    sum=$((sum+c))\n  fi\n\
    \  if [ $sum -le $w ]; then\n    if [ $len -eq 1 ]; then\n      echo \"true\"\n\
    \    else\n      local i=1\n      local j=$((len/2))\n      local k=$((len-1))\n\
    \      while [ $i -le $j ]; do\n        local a=$(echo $q | cut -d ' ' -f $i)\n\
    \        local b=$(echo $q | cut -d ' ' -f $k)\n        if [ $a -ne $b ]; then\n\
    \          echo \"false\"\n          return\n        fi\n        i=$((i+1))\n\
    \        k=$((k-1))\n      done\n      echo \"true\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=0\n  local i=0\n  local j=0\n  local is_balanced=true\n \
    \ local is_under_weight=true\n  local q_array=()\n  local q_array_rev=()\n  local\
    \ q_array_len=0\n  local q_array_rev_len=0\n  local q_array_len_half=0\n  local\
    \ q_array_rev_len_half=0\n  local q_array_len_half_plus_one=0\n  local q_array_rev_len_half_plus_one=0\n\
    \  local q_array_len_half_minus_one=0\n  local q_array_rev_len_half_minus_one=0\n\
    \  local q_array_len_half_plus_one_val=0\n  local q_array_rev_len_half_plus_one_val=0\n\
    \  local q_array_len_half_minus_one_val=0\n  local q_array_rev_len_half_minus_one_val=0\n\
    \  for i in $q; do\n    sum=$((sum+i))\n    len=$((len+1))\n    q_array+=($i)\n\
    \  done\n  if ((sum>w)); then\n    is_under_weight=false\n  fi\n  q_array_len=${#q_array[@]}\n\
    \  q_array_rev_len=${#q_array_rev[@]}\n  q_array_len_half=$((q_array_len/2))\n\
    \  q_array_rev_len_half=$((q_array_rev_len/2))\n  q_array_len_half_plus_one=$((q_array_len_half+1))\n\
    \  q_array_rev_len_half_plus_one=$((q_array_rev_len_half+1))\n  q_array_len_half_minus_one=$((q_array_len_half-1))\n\
    \  q_array_rev_len_half_minus_one=$((q_array_rev_len_half-1))\n\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=\"\"\n    for i in $q; do\n        sum=$((sum+i))\n\
    \        q_rev=\"$i $q_rev\"\n    done\n    if [[ $sum -gt $w ]]; then\n     \
    \   echo \"false\"\n    elif [[ $q != $q_rev ]]; then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local rev=\"\"\n  for i in $q; do\n    sum=$((sum+i))\n    rev=\"$i\
    \ $rev\"\n  done\n  if [ \"$q\" = \"$rev\" ] && [ $sum -le $w ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  # Write your code here\n  # Use\
    \ echo to print result, e.g.\n  # echo \"true\"\n  # echo \"false\"\n  q=$1\n\
    \  w=$2\n  q_array=($q)\n  q_len=${#q_array[@]}\n  q_sum=0\n  for ((i=0; i<$q_len;\
    \ i++))\n  do\n    q_sum=$(($q_sum+${q_array[$i]}))\n  done\n  if [[ $q_sum -gt\
    \ $w ]]; then\n    echo \"false\"\n  else\n    q_rev=()\n    for ((i=$q_len-1;\
    \ i>=0; i--))\n    do\n      q_rev+=(${q_array[$i]})\n    done\n    for ((i=0;\
    \ i<$q_len; i++))\n    do\n      if [[ ${q_array[$i]} -ne ${q_rev[$i]} ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n    done\n    echo \"true\"\
    \n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | tac | tr '\\n' ' ')\n    if [ $(($sum)) -le $w ] && [ \"$q\" == \"$rev\" ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | rev | tr '\\n' ' ')\n    if [[ $q == $rev ]] && [[ $sum -le $w ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr \" \" \"+\" | bc)\n  local rev=$(echo $q | rev)\n  if [ $sum\
    \ -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ q_sum=$(echo $q | tr ' ' '+')\n  local q_rev=$(echo $q | tr ' ' '\\n' | tac\
    \ | tr '\\n' ' ')\n  if [ $q_sum -le $w ] && [ \"$q\" == \"$q_rev\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpdo4_h5xb.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | sed 's/ /+/g')\n  local rev=$(echo $q | sed 's/ /\\n/g' | tac\
    \ | tr -d '\\n')\n  if [[ $q == $rev ]] && [[ $sum -le $w ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_rev=\"\"\n    local i=0\n   \
    \ local q_arr=($q)\n    local q_len=${#q_arr[@]}\n    for ((i=0; i<$q_len; i++));\
    \ do\n        sum=$((sum+${q_arr[$i]}))\n    done\n    if [ $sum -gt $w ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    for ((i=$q_len-1; i>=0; i--));\
    \ do\n        q_rev=\"$q_rev ${q_arr[$i]}\"\n    done\n    if [ \"$q\" = \"$q_rev\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local j=$((${#q}-1))\n  local balanced=true\n  for ((i=0;\
    \ i<${#q}; i++)); do\n    local c=${q:$i:1}\n    local d=${q:$j:1}\n    if [ \"\
    $c\" != \"$d\" ]; then\n      balanced=false\n    fi\n    ((j--))\n    sum=$((sum+c))\n\
    \  done\n  if [ \"$balanced\" = true ] && [ \"$sum\" -le \"$w\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local j=$((${#q}-1))\n  local q_arr=($q)\n  local q_len=${#q_arr[@]}\n\
    \  while [ $i -lt $j ]; do\n    if [ ${q_arr[$i]} -ne ${q_arr[$j]} ]; then\n \
    \     echo \"false\"\n      return\n    fi\n    ((i++))\n    ((j--))\n  done\n\
    \  for i in ${q_arr[@]}; do\n    ((sum+=i))\n  done\n  if [ $sum -le $w ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp21ww195f.sh: line 26: [: 3: unary operator expected\n/tmp/tmp21ww195f.sh:
    line 26: [: 2: unary operator expected\n/tmp/tmp21ww195f.sh: line 26: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_half_1=$((q_half+1))\n  local q_half_2=$((q_half+2))\n  local q_half_3=$((q_half+3))\n\
    \  local q_half_4=$((q_half+4))\n  local q_half_5=$((q_half+5))\n  local q_half_6=$((q_half+6))\n\
    \  local q_half_7=$((q_half+7))\n  local q_half_8=$((q_half+8))\n  local q_half_9=$((q_half+9))\n\
    \  local q_half_10=$((q_half+10))\n  local q_half_11=$((q_half+11))\n  local q_half_12=$((q_half+12))\n\
    \  local q_half_13=$((q_half+13))\n  local q_half_14=$((q_half+14))\n  local q_half_15=$((q_half+15))\n\
    \  local q_half_16=$((q_half+16))\n  local q_half_17=$((q_half+17))\n  local q_half_18=$((q_half+18))\n\
    \  local q_half_19=$((q_half+19))\n  local q_half_20=$((q_half+20))\n  local q_half_21=$((q_half+21))\n\
    \  local q_half_22=$((q_half+22))\n  local q_half_23=$((q_half+23))\n  local q_half_24=$((q_half+24))\n\
    \  local q_half_25=$((q_half+25))\n  local q_half_26=$((q_half+26))\n  local q_half_27=$((q_half+27))\n\
    \  local q_half_28=$((q_half+28))\n  local q_half_29=$((q_half+29\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp2s1vnmhj.sh: line 51: unexpected EOF while looking for matching
    `)''\n/tmp/tmp2s1vnmhj.sh: line 69: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_plus_one=0\n\
    \  local q_len_half_minus_one=0\n  local q_len_half_plus_one_rev=0\n  local q_len_half_minus_one_rev=0\n\
    \  local q_len_half_plus_one_rev_rev=0\n  local q_len_half_minus_one_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local j=0\n  local len=0\n  local balanced=true\n  local\
    \ q_array=()\n  local q_array_len=0\n  local q_array_half_len=0\n  local q_array_half_len_floor=0\n\
    \  local q_array_half_len_ceil=0\n  local q_array_half_len_floor_index=0\n  local\
    \ q_array_half_len_ceil_index=0\n  local q_array_half_len_floor_value=0\n  local\
    \ q_array_half_len_ceil_value=0\n  local q_array_half_len_floor_value_sum=0\n\
    \  local q_array_half_len_ceil_value_sum=0\n  local q_array_half_len_floor_value_sum_str=0\n\
    \  local q_array_half_len_ceil_value_sum_str=0\n  local q_array_half_len_floor_value_sum_str_rev=0\n\
    \  local q_array_half_len_ceil_value_sum_str_rev=0\n  local q_array_half_len_floor_value_sum_str_rev_len=0\n\
    \  local q_array_half_len_ceil_value_sum_str_rev_len=0\n  local q_array_half_len_floor_value_sum_str_rev_len_half=0\n\
    \  local q_array_half_len_ceil_value_sum_str_rev_len_half=0\n  local q_array_half_len_floor_value_sum_str_rev_len_half_floor=0\n\
    \  local q_array_half_len_ceil_value_sum_str_rev_len_half_floor=0\n  local q_array_half_len_floor_value_sum_str_rev_len_half_ceil=0\n\
    \  local q_array_half_len_ceil_value_sum_str_rev_len_half_ceil=0\n  local q\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local q_arr=($q)\n\
    \    local q_len=${#q_arr[@]}\n    local q_half=$((q_len/2))\n    local q_odd=$((q_len%2))\n\
    \    local q_mid=$((q_half-1))\n    while [ $i -lt $q_half ]; do\n        if [\
    \ ${q_arr[$i]} -ne ${q_arr[$j]} ]; then\n            echo \"false\"\n        \
    \    return 0\n        fi\n        sum=$((sum+q_arr[$i]))\n        if [ $q_odd\
    \ -eq 1 ] && [ $i -eq $q_mid ]; then\n            sum=$((sum+q_arr[$i]))\n   \
    \     fi\n        i=$((i+1))\n        j=$((j-1))\n    done\n    if [ $sum -le\
    \ $w ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpjnfln1k3.sh: line 29: [: 3: unary operator expected\n/tmp/tmpjnfln1k3.sh:
    line 29: [: 1: unary operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  local arr=($q)\n  local len=${#arr[@]}\n  for\
    \ ((i=0; i<len; i++)); do\n    local num=${arr[$i]}\n    sum=$((sum + num))\n\
    \    if [[ $num -gt $w ]]; then\n      balanced=false\n    fi\n  done\n  if [[\
    \ $balanced == true ]]; then\n    if [[ $sum -le $w ]]; then\n      echo \"true\"\
    \n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=\"\"\n    local q_len=0\n    local i=0\n   \
    \ local j=0\n    local res=0\n    for ((i=0; i<${#q}; i++)); do\n        if [[\
    \ ${q:$i:1} != \" \" ]]; then\n            sum=$((sum + ${q:$i:1}))\n        \
    \    q_rev=\"${q:$i:1}${q_rev}\"\n            q_len=$((q_len + 1))\n        fi\n\
    \    done\n    if [[ $sum -gt $w ]]; then\n        echo \"false\"\n        return\n\
    \    fi\n    for ((i=0, j=q_len-1; i<q_len; i++, j--)); do\n        if [[ ${q:$i:1}\
    \ != ${q_rev:$j:1} ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | rev | tr\
    \ '\\n' ' ')\n  if [ $q = $rev ] && [ $sum -le $w ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpc7arsrm5.sh: line 22: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=\n    local q_len=\n    local i=\n    local\
    \ j=\n    for i in $q; do\n        sum=$((sum+i))\n    done\n    if [ $sum -gt\
    \ $w ]; then\n        echo \"false\"\n        return\n    fi\n    q_len=$(echo\
    \ $q | wc -w)\n    for ((i=0; i<q_len; i++)); do\n        j=$((q_len-i-1))\n \
    \       q_rev=\"$q_rev $(echo $q | cut -d' ' -f$((i+1)))\"\n        if [ \"$(echo\
    \ $q | cut -d' ' -f$((i+1)))\" != \"$(echo $q_rev | cut -d' ' -f$((j+1)))\" ];\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=$(echo $q | wc -w)\n    local q_half=$((q_len/2))\n\
    \    local q_first=$(echo $q | cut -d' ' -f1-$q_half)\n    local q_last=$(echo\
    \ $q | cut -d' ' -f$((q_len-q_half+1))-$q_len)\n    local q_first_rev=$(echo $q_first\
    \ | rev)\n    if [[ $q_first != $q_first_rev ]]; then\n        echo \"false\"\n\
    \        return\n    fi\n    for i in $q; do\n        sum=$((sum+i))\n    done\n\
    \    if [[ $sum -le $w ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [[ $q == $rev ]] && [[ $sum -le $w ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=\"$1\"\n  local w=\"\
    $2\"\n  local sum=0\n  local i=0\n  local j=0\n  local len=0\n  local balanced=1\n\
    \  local q_arr=()\n  local q_arr_len=0\n  local q_arr_half_len=0\n  local q_arr_half_len_floor=0\n\
    \  local q_arr_half_len_ceil=0\n  local q_arr_half_len_floor_index=0\n  local\
    \ q_arr_half_len_ceil_index=0\n  local q_arr_half_len_floor_value=0\n  local q_arr_half_len_ceil_value=0\n\
    \  local q_arr_half_len_floor_value_rev=0\n  local q_arr_half_len_ceil_value_rev=0\n\
    \  local q_arr_half_len_floor_value_rev_len=0\n  local q_arr_half_len_ceil_value_rev_len=0\n\
    \  local q_arr_half_len_floor_value_rev_len_diff=0\n  local q_arr_half_len_ceil_value_rev_len_diff=0\n\
    \  local q_arr_half_len_floor_value_rev_len_diff_abs=0\n  local q_arr_half_len_ceil_value_rev_len_diff_abs=0\n\
    \  local q_arr_half_len_floor_value_rev_len_diff_abs_min=0\n  local q_arr_half_len_ceil_value_rev_len_diff_abs_min=0\n\
    \  local q_arr_half_len_floor_value_rev_len_diff_abs_min_index=0\n  local q_arr_half_len_ceil_value_rev_len_diff_abs_min_index=0\n\
    \  local q_arr_half_len_floor_value_rev_len_diff_abs_min_value=0\n  local q_arr_half_len_ceil_value_rev_len_diff_abs_min_value=0\n\
    \ \n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"\
    5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | rev)\n    if\
    \ [[ $q == $rev ]] && [[ $sum -le $w ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  q=$1\n  w=$2\n  if [[ $(echo\
    \ $q | rev) == $q ]]; then\n    if [[ $(echo $q | tr \" \" \"+\" | bc) -le $w\
    \ ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=0\n  local i=0\n  local j=0\n  local q_array=()\n  local\
    \ q_array_rev=()\n  local q_array_len=0\n  local q_array_rev_len=0\n  local is_palindrome=0\n\
    \  local is_balanced=0\n  local is_underweight=0\n  local is_flying=0\n\n  # Check\
    \ if q is a palindrome\n  q_array=($q)\n  q_array_len=${#q_array[@]}\n  q_array_rev=($(echo\
    \ ${q_array[@]} | rev))\n  q_array_rev_len=${#q_array_rev[@]}\n  if [ $q_array_len\
    \ -eq $q_array_rev_len ]; then\n    is_palindrome=1\n    for (( i=0; i<$q_array_len;\
    \ i++ )); do\n      if [ ${q_array[$i]} -ne ${q_array_rev[$i]} ]; then\n     \
    \   is_palindrome=0\n        break\n      fi\n    done\n  fi\n\n  # Check if q\
    \ is balanced\n  if [ $is_palindrome -eq 1 ]; then\n    is_balanced=1\n  fi\n\n\
    \  # Check if q is underweight\n  for (( i=0; i<$q_array_len; i++ )); do\n   \
    \ sum=$((sum+${q_array[$i]}))\n  done\n  if [ $sum -le $w ]; then\n    is_underweight=1\n\
    \  fi\n\n  # Check if q will fly\n  if [ $is_balanced -eq 1 ] && [ $is_underweight\
    \ -eq 1 ]; then\n    is_flying=1\n  fi\n\n  if [ $is_flying -eq 1 ]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | rev | tr\
    \ '\\n' ' ')\n  if [ $q = $rev ] && [ $sum -le $w ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpc7arsrm5.sh: line 22: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=$(echo $q | wc -w)\n    local q_len_half=$((q_len/2))\n\
    \    local q_len_half_plus_one=$((q_len_half+1))\n    local q_len_half_minus_one=$((q_len_half-1))\n\
    \    local q_len_half_minus_one_plus_one=$((q_len_half_minus_one+1))\n    local\
    \ q_len_half_minus_one_plus_two=$((q_len_half_minus_one+2))\n    local q_len_half_minus_one_plus_three=$((q_len_half_minus_one+3))\n\
    \    local q_len_half_minus_one_plus_four=$((q_len_half_minus_one+4))\n    local\
    \ q_len_half_minus_one_plus_five=$((q_len_half_minus_one+5))\n    local q_len_half_minus_one_plus_six=$((q_len_half_minus_one+6))\n\
    \    local q_len_half_minus_one_plus_seven=$((q_len_half_minus_one+7))\n    local\
    \ q_len_half_minus_one_plus_eight=$((q_len_half_minus_one+8))\n    local q_len_half_minus_one_plus_nine=$((q_len_half_minus_one+9))\n\
    \    local q_len_half_minus_one_plus_ten=$((q_len_half_minus_one+10))\n    local\
    \ q_len_half_minus_one_plus_eleven=$((q_len_half_minus_one+11))\n    local q_len_half_minus_one_plus_twelve=$((q_len_half_minus_one+12))\n\
    \    local q_len_half_minus_one_plus_thirteen=$((q_len_half_minus_one+13))\n \
    \   local q_len_half_minus_one_plus_fourteen=$((q_len_half\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmptcfahps1.sh: line 38: unexpected EOF while looking for matching
    `)''\n/tmp/tmptcfahps1.sh: line 56: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local j=$((${#q}-1))\n  local q_array=($q)\n  while [\
    \ $i -lt $j ]; do\n    if [ ${q_array[$i]} -ne ${q_array[$j]} ]; then\n      echo\
    \ \"false\"\n      return\n    fi\n    i=$(($i+1))\n    j=$(($j-1))\n  done\n\
    \  for i in ${q_array[@]}; do\n    sum=$(($sum+$i))\n  done\n  if [ $sum -le $w\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp7b4yr1p0.sh: line 25: [: 3: unary operator expected\n/tmp/tmp7b4yr1p0.sh:
    line 25: [: 2: unary operator expected\n/tmp/tmp7b4yr1p0.sh: line 25: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local balanced=true\n    local i=0\n    local j=$((${#q}-1))\n\
    \    while [ $i -lt ${#q} ]; do\n        if [ ${q:$i:1} -ne ${q:$j:1} ]; then\n\
    \            balanced=false\n        fi\n        sum=$(($sum+${q:$i:1}))\n   \
    \     i=$(($i+1))\n        j=$(($j-1))\n    done\n    if [ $sum -le $w ] && $balanced;\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgdk501t5.sh: line 28: 3+ : syntax error: operand expected (error
    token is "+ ")\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=\"\"\n    for i in $q; do\n        sum=$((sum+i))\n\
    \        q_rev=\"$i $q_rev\"\n    done\n    if [[ $sum -gt $w ]]; then\n     \
    \   echo \"false\"\n    elif [[ \"$q\" != \"$q_rev\" ]]; then\n        echo \"\
    false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_rev=\"\"\n    local q_rev_len=0\n\
    \    local q_rev_len_half=0\n    local q_rev_len_half_floor=0\n    local q_rev_len_half_ceil=0\n\
    \    local q_rev_len_half_floor_sum=0\n    local q_rev_len_half_ceil_sum=0\n \
    \   local q_rev_len_half_floor_sum_max=0\n    local q_rev_len_half_ceil_sum_max=0\n\
    \    local q_rev_len_half_floor_sum_max_str=\"\"\n    local q_rev_len_half_ceil_sum_max_str=\"\
    \"\n    local q_rev_len_half_floor_sum_max_str_len=0\n    local q_rev_len_half_ceil_sum_max_str_len=0\n\
    \    local q_rev_len_half_floor_sum_max_str_len_half=0\n    local q_rev_len_half_ceil_sum_max_str_len_half=0\n\
    \    local q_rev_len_half_floor_sum_max_str_len_half_floor=0\n    local q_rev_len_half_ceil_sum_max_str_len_half_ceil=0\n\
    \    local q_rev_len_half_floor_sum_max_str_len_half_floor_sum=0\n    local q_rev_len_half_ceil_sum_max_str_len_half_ceil_sum=0\n\
    \    local q_rev_len_half_floor_sum_max_str_len_half_floor_sum_max=0\n    local\
    \ q_rev_len_half_ceil_sum_max_str_len_half_ceil_sum_max=0\n    local q_rev_len_half_floor_sum_max_str_len_half_floor_sum_max_str=\"\
    \"\n    local q_rev_len_half_ceil_sum_max_str_\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | tac | tr '\\n' ' ')\n    if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpnjkqzqfb.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=$(echo $q | wc -w)\n  local half=$((len/2))\n  local i=1\n\
    \  for i in $(seq 1 $half); do\n    local a=$(echo $q | cut -d \" \" -f $i)\n\
    \    local b=$(echo $q | cut -d \" \" -f $((len-i+1)))\n    if [ $a -ne $b ];\
    \ then\n      echo \"false\"\n      return\n    fi\n    sum=$((sum+a))\n  done\n\
    \  if [ $((len%2)) -eq 1 ]; then\n    sum=$((sum+$(echo $q | cut -d \" \" -f $((half+1)))))\n\
    \  fi\n  if [ $sum -le $w ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_len_half=0\n    local q_len_half_plus_one=0\n\
    \    local q_half_left=0\n    local q_half_right=0\n    local q_half_left_sum=0\n\
    \    local q_half_right_sum=0\n    local q_half_left_sum_str=0\n    local q_half_right_sum_str=0\n\
    \    local q_half_left_sum_str_rev=0\n    local q_half_right_sum_str_rev=0\n \
    \   local q_half_left_sum_str_rev_len=0\n    local q_half_right_sum_str_rev_len=0\n\
    \    local q_half_left_sum_str_rev_len_half=0\n    local q_half_right_sum_str_rev_len_half=0\n\
    \    local q_half_left_sum_str_rev_len_half_plus_one=0\n    local q_half_right_sum_str_rev_len_half_plus_one=0\n\
    \    local q_half_left_sum_str_rev_half_left=0\n    local q_half_right_sum_str_rev_half_right=0\n\
    \    local q_half_left_sum_str_rev_half_left_sum=0\n    local q_half_right_sum_str_rev_half_right_sum=0\n\
    \    local q_half_left_sum_str_rev_half_left_sum_str=0\n    local q_half_right_sum_str_rev_half_right_sum_str=0\n\
    \    local q_half_left_sum_str_rev_half_left_sum_str_rev=0\n    local q_half_right_sum_str_rev_half_right_sum_str_rev=0\n\
    \    local q_half_left_sum_str_rev_half_left_sum_str_rev_len=0\n    local q_half_right_sum_str_rev_half_right_sum_str\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=0\n    local len=0\n    local arr=()\n\
    \    local is_balanced=true\n    local is_less_than_max_weight=true\n\n    # check\
    \ if the object is balanced\n    arr=($q)\n    len=${#arr[@]}\n    for ((i=0;\
    \ i<len/2; i++)); do\n        j=$((len-i-1))\n        if [[ ${arr[i]} -ne ${arr[j]}\
    \ ]]; then\n            is_balanced=false\n            break\n        fi\n   \
    \ done\n\n    # check if the sum of its elements is less than or equal the maximum\
    \ possible weight\n    for ((i=0; i<len; i++)); do\n        sum=$((sum+arr[i]))\n\
    \    done\n    if [[ $sum -gt $w ]]; then\n        is_less_than_max_weight=false\n\
    \    fi\n\n    if [[ $is_balanced == true && $is_less_than_max_weight == true\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=0\n    local len=0\n    local is_balanced=0\n\
    \    local is_light=0\n    local will_fly=0\n    local result=0\n    len=${#q}\n\
    \    for ((i=0; i<len; i++)); do\n        sum=$((sum + ${q:i:1}))\n    done\n\
    \    if [[ $sum -le $w ]]; then\n        is_light=1\n    fi\n    for ((i=0, j=len-1;\
    \ i<len/2; i++, j--)); do\n        if [[ ${q:i:1} -ne ${q:j:1} ]]; then\n    \
    \        is_balanced=0\n            break\n        else\n            is_balanced=1\n\
    \        fi\n    done\n    if [[ $is_light -eq 1 && $is_balanced -eq 1 ]]; then\n\
    \        will_fly=1\n    fi\n    if [[ $will_fly -eq 1 ]]; then\n        result=true\n\
    \    else\n        result=false\n    fi\n    echo $result\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzd3cmh_s.sh: line 30: sum +  : syntax error: operand expected
    (error token is "+  ")\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n\
    \  local q_array=($q)\n  for (( i=0; i<$q_half; i++ )); do\n    if [[ ${q_array[$i]}\
    \ -ne ${q_array[$((q_len-i-1))]} ]]; then\n      balanced=false\n      break\n\
    \    fi\n  done\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [[ $sum -le\
    \ $w && $balanced == true ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_len_half=0\n    local q_len_half_plus_one=0\n\
    \    local q_len_half_minus_one=0\n    local q_first_half=0\n    local q_second_half=0\n\
    \    local q_first_half_rev=0\n    local q_second_half_rev=0\n    local q_first_half_rev_sum=0\n\
    \    local q_second_half_rev_sum=0\n    local q_first_half_sum=0\n    local q_second_half_sum=0\n\
    \    local q_first_half_rev_sum_plus_q_second_half_rev_sum=0\n    local q_first_half_sum_plus_q_second_half_sum=0\n\
    \    local q_first_half_rev_sum_plus_q_second_half_rev_sum_plus_q_first_half_sum_plus_q_second_half_sum=0\n\
    \    local q_first_half_rev_sum_plus_q_second_half_rev_sum_plus_q_first_half_sum_plus_q_second_half_sum_plus_q_first_half_rev_sum_plus_q_second_half_rev_sum=0\n\
    \    local q_first_half_rev_sum_plus_q_second_half_rev_sum_plus_q_first_half_sum_plus_q_second_half_sum_plus_q_first_half_rev_sum_plus_q_second_half_rev_sum_plus_q_first_half_sum_plus_q_second_half_sum=0\n\
    \    local q_first_half_rev_sum_plus_q_second_half_rev_sum_plus_q_first_half_sum_plus_q_second_half_sum_plus_q_first_half_rev_sum_plus_q_second_half_rev_sum_plus_q_first_half_sum_plus_q_second_half_sum_plus_q_first_half_rev\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=$(echo $q | wc -w)\n    local q_half=$((q_len/2))\n\
    \    local q_half_len=$((q_half+1))\n    local q_half_rev=$(echo $q | cut -d \"\
    \ \" -f 1-$q_half_len | rev)\n    local q_half_len_rev=$(echo $q_half_rev | wc\
    \ -w)\n    local q_half_len_rev_half=$((q_half_len_rev/2))\n    local q_half_len_rev_half_len=$((q_half_len_rev_half+1))\n\
    \    local q_half_len_rev_half_rev=$(echo $q_half_rev | cut -d \" \" -f 1-$q_half_len_rev_half_len\
    \ | rev)\n    local q_half_len_rev_half_rev_len=$(echo $q_half_len_rev_half_rev\
    \ | wc -w)\n    local q_half_len_rev_half_rev_half=$((q_half_len_rev_half_rev_len/2))\n\
    \    local q_half_len_rev_half_rev_half_len=$((q_half_len_rev_half_rev_half+1))\n\
    \    local q_half_len_rev_half_rev_half_rev=$(echo $q_half_len_rev_half_rev |\
    \ cut -d \" \" -f 1-$q_half_len_rev_half_rev_half_len | rev)\n    local q_half_len_rev_half_rev_half_rev_len=$(echo\
    \ $q_half_len_rev_half_rev_half_rev | wc -w)\n    local q_half_len_rev_half_rev_half_rev_half=$((q_half_len_rev_half_rev_half_rev_len/2))\n\
    \    local q_half_len_rev_half_rev_half_rev_half_len=$((q_half_len_rev_half_rev_half\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpdn2brpry.sh: line 35: unexpected EOF while looking for matching
    `)''\n/tmp/tmpdn2brpry.sh: line 53: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # To access\
    \ arguments use variables $1, $2, etc.\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  local i=0\n  local j=$((${#q}-1))\n  while [\
    \ $i -lt $j ]; do\n    if [ ${q:$i:1} -ne ${q:$j:1} ]; then\n      balanced=false\n\
    \      break\n    fi\n    i=$((i+1))\n    j=$((j-1))\n  done\n  for i in $q; do\n\
    \    sum=$((sum+i))\n  done\n  if [ $sum -le $w ] && $balanced; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local balanced=true\n    local i=0\n    local j=$((${#q}-1))\n\
    \    while [ $i -lt $j ]; do\n        if [ \"${q:$i:1}\" != \"${q:$j:1}\" ]; then\n\
    \            balanced=false\n            break\n        fi\n        ((i++))\n\
    \        ((j--))\n    done\n    for i in $q; do\n        ((sum+=$i))\n    done\n\
    \    if [ $sum -le $w ] && $balanced; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_first=$(echo $q | cut -d \" \" -f 1-$q_half)\n  local q_last=$(echo $q | cut\
    \ -d \" \" -f $((q_len-q_half+1))-$q_len)\n  local q_first_rev=$(echo $q_first\
    \ | rev)\n  if [ \"$q_first_rev\" != \"$q_last\" ]; then\n    echo \"false\"\n\
    \    return\n  fi\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [ $sum\
    \ -le $w ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: 'b"cut: invalid decreasing range\nTry ''cut --help'' for more information.\ncut:
    invalid decreasing range\nTry ''cut --help'' for more information.\ncut: invalid
    decreasing range\nTry ''cut --help'' for more information.\ncut: invalid decreasing
    range\nTry ''cut --help'' for more information.\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local reverse=$(echo $q | tr ' ' '\\\
    n' | tac | tr '\\n' ' ')\n    if [[ $sum -le $w ]] && [[ $q == $reverse ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | tac | tr '\\n' ' ')\n    if [[ $sum -le $w ]] && [[ $q == $rev ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # To access\
    \ arguments use variables $1, $2, etc.\n    echo \"false\"\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local j=0\n  local len=0\n  local arr=()\n  local is_palindrome=0\n\
    \  local is_balanced=0\n  local is_under_weight=0\n  local will_fly=0\n\n  # check\
    \ if the object is balanced\n  len=${#q}\n  for ((i=0; i<len; i++)); do\n    arr[$i]=${q:$i:1}\n\
    \  done\n  for ((i=0; i<len; i++)); do\n    if [[ ${arr[$i]} == ${arr[$len-1-$i]}\
    \ ]]; then\n      is_palindrome=1\n    else\n      is_palindrome=0\n      break\n\
    \    fi\n  done\n  if [[ $is_palindrome -eq 1 ]]; then\n    is_balanced=1\n  else\n\
    \    is_balanced=0\n  fi\n\n  # check if the object is under weight\n  for ((i=0;\
    \ i<len; i++)); do\n    sum=$((sum+${arr[$i]}))\n  done\n  if [[ $sum -le $w ]];\
    \ then\n    is_under_weight=1\n  else\n    is_under_weight=0\n  fi\n\n  # check\
    \ if the object will fly\n  if [[ $is_balanced -eq 1 && $is_under_weight -eq 1\
    \ ]]; then\n    will_fly=1\n  else\n    will_fly=0\n  fi\n\n  # return the result\n\
    \  if [[ $will_fly -eq 1 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxy0p7u8t.sh: line 51: sum+ : syntax error: operand expected
    (error token is "+ ")\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local balanced=true\n    local i=0\n    local j=$((${#q}-1))\n\
    \    while [ $i -lt $j ]; do\n        if [ ${q:$i:1} -ne ${q:$j:1} ]; then\n \
    \           balanced=false\n            break\n        fi\n        ((i++))\n \
    \       ((j--))\n    done\n    for i in $q; do\n        ((sum+=i))\n    done\n\
    \    if [ $sum -le $w ] && $balanced; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ q_sum=$(echo $q | tr ' ' '+')\n  if [[ $q_sum -le $w ]]; then\n    local q_rev=$(echo\
    \ $q | tr ' ' '\\n' | tac | tr '\\n' ' ')\n    if [[ $q == $q_rev ]]; then\n \
    \     echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local q_sum=$(echo $q | tr ' ' '+')\n    local q_rev=$(echo $q | tr ' ' '\\\
    n' | tac | tr '\\n' ' ')\n    if [ $q_sum -le $w ] && [ \"$q\" == \"$q_rev\" ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp1jb968cl.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_rev=\n  local q_rev_len=0\n  local i=0\n \
    \ local j=0\n  local q_arr=($q)\n  local q_rev_arr=()\n  local balanced=0\n  local\
    \ fly=0\n\n  for i in ${q_arr[@]}; do\n    sum=$((sum + i))\n  done\n\n  if [\
    \ $sum -le $w ]; then\n    q_len=${#q_arr[@]}\n    q_rev=${q_arr[@]::-1}\n   \
    \ q_rev_arr=($q_rev)\n    q_rev_len=${#q_rev_arr[@]}\n\n    if [ $q_len -eq $q_rev_len\
    \ ]; then\n      for (( i=0; i<$q_len; i++ )); do\n        if [ ${q_arr[$i]} -eq\
    \ ${q_rev_arr[$i]} ]; then\n          balanced=1\n        else\n          balanced=0\n\
    \          break\n        fi\n      done\n    fi\n  fi\n\n  if [ $balanced -eq\
    \ 1 ]; then\n    fly=1\n  fi\n\n  echo $fly\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpi1_9uxo7.sh: line 37: -1: substring expression < 0\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [[ $sum -le $w ]] && [[ $q == $rev ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local rev=\"\"\n    for i in $q; do\n        sum=$((sum+i))\n\
    \        rev=\"$i $rev\"\n    done\n    if [[ $sum -gt $w ]]; then\n        echo\
    \ \"false\"\n    elif [[ \"$q\" == \"$rev\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | rev | tr '\\n' ' ')\n    if [[ $q == $rev ]] && [[ $sum -le $w ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    q=$1\n    w=$2\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world\"\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=0\n    local len=0\n    local arr=()\n\
    \    local is_palindrome=1\n    for i in $q; do\n        arr[$j]=$i\n        ((j++))\n\
    \    done\n    len=${#arr[@]}\n    for ((i=0; i<len/2; i++)); do\n        if [[\
    \ ${arr[$i]} -ne ${arr[$((len-i-1))]} ]]; then\n            is_palindrome=0\n\
    \            break\n        fi\n    done\n    for i in $q; do\n        ((sum+=i))\n\
    \    done\n    if [[ $sum -le $w && $is_palindrome -eq 1 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_len_half=0\n    local q_len_half_plus_one=0\n\
    \    local q_len_half_minus_one=0\n    local q_len_half_plus_one_val=0\n    local\
    \ q_len_half_minus_one_val=0\n    local q_len_half_val=0\n    local q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_minus_one_val_sum=0\n    local q_len_half_val_sum=0\n  \
    \  local q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum=0\n   \
    \ local q_len_half_minus_one_val_sum_plus_q_len_half_val_sum=0\n    local q_len_half_val_sum_plus_q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum_plus_q_len_half_val_sum=0\n\
    \    local q_len_half_minus_one_val_sum_plus_q_len_half_val_sum_plus_q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_val_sum_plus_q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum=0\n\
    \    local q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum_plus_q_len_half_val_sum_plus_q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_minus_one_val_sum_plus_q_len_half_val_sum_plus_q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local q_array=($q)\n\
    \    local q_len=${#q_array[@]}\n    while [ $i -lt $j ]; do\n        if [ ${q_array[$i]}\
    \ -ne ${q_array[$j]} ]; then\n            echo \"false\"\n            return\n\
    \        fi\n        i=$((i+1))\n        j=$((j-1))\n    done\n    for i in ${q_array[@]};\
    \ do\n        sum=$((sum+i))\n    done\n    if [ $sum -le $w ]; then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp4l5tjvbb.sh: line 26: [: 3: unary operator expected\n/tmp/tmp4l5tjvbb.sh:
    line 26: [: 2: unary operator expected\n/tmp/tmp4l5tjvbb.sh: line 26: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | tac | tr '\\n' ' ')\n    if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpnjkqzqfb.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_rev=\"\"\n  for i in $q; do\n    ((sum+=i))\n\
    \    ((q_len++))\n    q_rev=\"$i $q_rev\"\n  done\n  if [[ $sum -gt $w ]]; then\n\
    \    echo \"false\"\n  elif [[ $q == $q_rev ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=${#q}\n    local q_len_half=$((q_len/2))\n \
    \   local q_len_half_plus_1=$((q_len_half+1))\n    local q_len_half_minus_1=$((q_len_half-1))\n\
    \    local q_half_1=${q:0:q_len_half}\n    local q_half_2=${q:q_len_half_plus_1}\n\
    \    local q_half_2_rev=$(echo $q_half_2 | rev)\n    for i in $(echo $q | tr \"\
    \ \" \"\\n\"); do\n        sum=$((sum+i))\n    done\n    if [ $q_len -eq 1 ];\
    \ then\n        if [ $q -le $w ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    elif [ $q_half_1 = $q_half_2_rev\
    \ ] && [ $sum -le $w ]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [[ $q == $rev ]] && [[ $sum -le $w ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_first=$(echo $q | cut -d \" \" -f 1-$q_half)\n  local q_second=$(echo $q |\
    \ cut -d \" \" -f $((q_half+1))-$q_len)\n  local q_second_rev=$(echo $q_second\
    \ | rev)\n  local q_first_sum=0\n  local q_second_sum=0\n  for i in $q_first;\
    \ do\n    q_first_sum=$((q_first_sum+i))\n  done\n  for i in $q_second; do\n \
    \   q_second_sum=$((q_second_sum+i))\n  done\n  if [ $q_first_sum -eq $q_second_sum\
    \ ] && [ $q_second_rev == $q_second ]; then\n    for i in $q; do\n      sum=$((sum+i))\n\
    \    done\n    if [ $sum -le $w ]; then\n      echo \"true\"\n    else\n     \
    \ echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_len_half=0\n    local q_len_half_plus_one=0\n\
    \    local q_len_half_minus_one=0\n    local q_len_half_plus_one_val=0\n    local\
    \ q_len_half_minus_one_val=0\n    local q_len_half_val=0\n    local q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_minus_one_val_sum=0\n    local q_len_half_val_sum=0\n  \
    \  local q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum=0\n   \
    \ local q_len_half_minus_one_val_sum_plus_q_len_half_val_sum=0\n    local q_len_half_val_sum_plus_q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum_plus_q_len_half_val_sum=0\n\
    \    local q_len_half_minus_one_val_sum_plus_q_len_half_val_sum_plus_q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_val_sum_plus_q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum=0\n\
    \    local q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum_plus_q_len_half_val_sum_plus_q_len_half_plus_one_val_sum=0\n\
    \    local q_len_half_minus_one_val_sum_plus_q_len_half_val_sum_plus_q_len_half_plus_one_val_sum_plus_q_len_half_minus_one_val_sum\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_plus_one=0\n\
    \  local q_len_half_minus_one=0\n  local q_len_half_plus_one_index=0\n  local\
    \ q_len_half_minus_one_index=0\n  local q_len_half_plus_one_value=0\n  local q_len_half_minus_one_value=0\n\
    \  local q_len_half_plus_one_value_sum=0\n  local q_len_half_minus_one_value_sum=0\n\
    \  local q_len_half_plus_one_value_sum_plus_w=0\n  local q_len_half_minus_one_value_sum_plus_w=0\n\
    \  local q_len_half_plus_one_value_sum_plus_w_less_than_sum=0\n  local q_len_half_minus_one_value_sum_plus_w_less_than_sum=0\n\
    \  local q_len_half_plus_one_value_sum_plus_w_less_than_sum_and_q_len_half_plus_one_value_sum_plus_w_less_than_sum=0\n\
    \  local q_len_half_minus_one_value_sum_plus_w_less_than_sum_and_q_len_half_plus_one_value_sum_plus_w_less_than_sum=0\n\
    \  local q_len_half_plus_one_value_sum_plus_w_less_than_sum_and_q_len_half_plus_one_value_sum_plus_w_less_than_sum_and_q_len_half_plus_one_value_sum_plus_w_less_than_sum=0\n\
    \  local q_len_half_minus_one_value_sum_plus_w_less_than_sum_and_q_len_half_plus_one_value_sum_plus_w_less_than_sum_and_q_len_half\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=0\n  local i=0\n  local j=0\n  local is_palindrome=1\n  for\
    \ i in $q; do\n    ((sum+=i))\n    ((len++))\n  done\n  if ((sum>w)); then\n \
    \   echo \"false\"\n    return\n  fi\n  for ((i=0, j=len-1; i<j; i++, j--)); do\n\
    \    if [[ ${q[i]} -ne ${q[j]} ]]; then\n      is_palindrome=0\n      break\n\
    \    fi\n  done\n  if ((is_palindrome)); then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp9rtsz2o.sh: line 34: [[: 3 2 3: syntax error in expression
    (error token is "2 3")\n/tmp/tmpp9rtsz2o.sh: line 34: [[: 1 2: syntax error in
    expression (error token is "2")\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    local i=0\n    local j=0\n    local q_arr=()\n\
    \    local q_rev_arr=()\n    local q_arr_len=0\n    local q_rev_arr_len=0\n  \
    \  local q_arr_str=\"\"\n    local q_rev_arr_str=\"\"\n    local q_arr_str_len=0\n\
    \    local q_rev_arr_str_len=0\n    local q_arr_str_rev=\"\"\n    local q_rev_arr_str_rev=\"\
    \"\n    local q_arr_str_rev_len=0\n    local q_rev_arr_str_rev_len=0\n    local\
    \ q_arr_str_rev_len_diff=0\n    local q_rev_arr_str_rev_len_diff=0\n    local\
    \ q_arr_str_rev_len_diff_abs=0\n    local q_rev_arr_str_rev_len_diff_abs=0\n \
    \   local q_arr_str_rev_len_diff_abs_sum=0\n    local q_rev_arr_str_rev_len_diff_abs_sum=0\n\
    \    local q_arr_str_rev_len_diff_abs_sum_diff=0\n    local q_rev_arr_str_rev_len_diff_abs_sum_diff=0\n\
    \    local q_arr_str_rev_len_diff_abs_sum_diff_abs=0\n    local q_rev_arr_str_rev_len_diff_abs_sum_diff_abs=0\n\
    \    local q_arr_str_rev_len_diff_abs_sum_diff_abs_sum=0\n    local q_rev_arr_str_rev_len_diff_abs_sum_diff_abs_sum=0\n\
    \    local q_arr_str_rev_len_diff_abs_sum_diff_abs_sum_diff=0\n    local q_rev_arr_str_rev_len_diff_abs_sum_diff_abs_sum_diff=0\n\
    \    local q_arr_str_rev_len_diff\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_plus_one=0\n\
    \  local q_len_half_minus_one=0\n  local q_len_half_plus_one_rev=0\n  local q_len_half_minus_one_rev=0\n\
    \  local q_len_half_plus_one_rev_rev=0\n  local q_len_half_minus_one_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=$(echo $q | rev)\n    if [ \"$q\" != \"$q_rev\"\
    \ ]; then\n        echo \"false\"\n        return\n    fi\n    for i in $q; do\n\
    \        sum=$((sum+i))\n    done\n    if [ $sum -le $w ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local balanced=true\n\
    \    for ((i=0; i<${#q}; i++)); do\n        sum=$(($sum+${q:$i:1}))\n        if\
    \ [[ ${q:$i:1} -ne ${q:$j:1} ]]; then\n            balanced=false\n        fi\n\
    \        j=$(($j-1))\n    done\n    if [[ $sum -le $w && $balanced == true ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmow9bzyr.sh: line 25: 3+ : syntax error: operand expected (error
    token is "+ ")\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half_len=$((q_len/2))\n \
    \ local q_half_len_rem=$((q_len%2))\n  local q_half_len_rem_comp=$((q_half_len_rem+1))\n\
    \  local q_half_len_comp=$((q_half_len+q_half_len_rem_comp))\n  local q_half_len_comp_minus_one=$((q_half_len_comp-1))\n\
    \  local q_half_len_comp_minus_two=$((q_half_len_comp-2))\n  local q_half_len_comp_minus_three=$((q_half_len_comp-3))\n\
    \  local q_half_len_comp_minus_four=$((q_half_len_comp-4))\n  local q_half_len_comp_minus_five=$((q_half_len_comp-5))\n\
    \  local q_half_len_comp_minus_six=$((q_half_len_comp-6))\n  local q_half_len_comp_minus_seven=$((q_half_len_comp-7))\n\
    \  local q_half_len_comp_minus_eight=$((q_half_len_comp-8))\n  local q_half_len_comp_minus_nine=$((q_half_len_comp-9))\n\
    \  local q_half_len_comp_minus_ten=$((q_half_len_comp-10))\n  local q_half_len_comp_minus_eleven=$((q_half_len_comp-11))\n\
    \  local q_half_len_comp_minus_twelve=$((q_half_len_comp-12))\n  local q_half_len_comp_minus_thirteen=$((q_half_len_comp-13))\n\
    \  local q_half_len_comp_minus_fourteen=$((q_half_len_comp-14))\n  local q_half_len_comp_minus_fifteen=$((q_half_len_\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpt9p7ic49.sh: line 40: unexpected EOF while looking for matching
    `)''\n/tmp/tmpt9p7ic49.sh: line 58: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  # Write your code here\n  # Use\
    \ echo to print result, e.g.\n  # echo \"true\"\n  # echo \"false\"\n  q=$1\n\
    \  w=$2\n  sum=0\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [[ $sum\
    \ -le $w ]]; then\n    if [[ $q == $(echo $q | rev) ]]; then\n      echo \"true\"\
    \n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  if [ $(echo $q | rev) = $q ] && [ $(($sum)) -le\
    \ $w ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpjidbraa9.sh: line 21: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=$(echo $q | wc -w)\n    local i=1\n    local\
    \ j=$((q_len-1))\n    while [ $i -le $j ]; do\n        local q_i=$(echo $q | cut\
    \ -d \" \" -f $i)\n        local q_j=$(echo $q | cut -d \" \" -f $j)\n       \
    \ if [ $q_i -ne $q_j ]; then\n            echo \"false\"\n            return\n\
    \        fi\n        ((i++))\n        ((j--))\n    done\n    for i in $q; do\n\
    \        ((sum+=$i))\n    done\n    if [ $sum -le $w ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local is_balanced=$(echo $q | tr ' ' '\\n' |\
    \ sort | tr '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$is_balanced\" ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpwayph_ui.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=$(echo $q | wc -w)\n  local i=1\n  local j=$((len/2))\n \
    \ while [ $i -le $j ]; do\n    local a=$(echo $q | cut -d \" \" -f $i)\n    local\
    \ b=$(echo $q | cut -d \" \" -f $((len-i+1)))\n    if [ $a -ne $b ]; then\n  \
    \    echo \"false\"\n      return\n    fi\n    let i++\n  done\n  for i in $q;\
    \ do\n    let sum+=$i\n  done\n  if [ $sum -le $w ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_rev=\"\"\n  local q_len=0\n  local i=0\n  local j=0\n  local\
    \ is_balanced=1\n  local is_under_weight=1\n  for i in $q; do\n    ((sum+=i))\n\
    \    ((q_len++))\n  done\n  if ((sum>w)); then\n    is_under_weight=0\n  fi\n\
    \  for ((i=0; i<q_len; i++)); do\n    j=$((q_len-i-1))\n    q_rev+=\"${q:$j:1}\
    \ \"\n  done\n  if [[ \"$q\" != \"$q_rev\" ]]; then\n    is_balanced=0\n  fi\n\
    \  if ((is_balanced==1 && is_under_weight==1)); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local len=${#q}\n    for ((i=0; i<len; i++));\
    \ do\n        local num=${q:i:1}\n        sum=$((sum+num))\n    done\n    if [\
    \ $sum -gt $w ]; then\n        echo \"false\"\n    else\n        local j=$((len-1))\n\
    \        for ((i=0; i<len; i++)); do\n            local num1=${q:i:1}\n      \
    \      local num2=${q:j:1}\n            if [ $num1 -ne $num2 ]; then\n       \
    \         echo \"false\"\n                return\n            fi\n           \
    \ j=$((j-1))\n        done\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n\
    \    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local j=$((${#q}-1))\n  local q_array=($q)\n  while [\
    \ $i -lt $j ]; do\n    if [ ${q_array[$i]} -ne ${q_array[$j]} ]; then\n      echo\
    \ \"false\"\n      return\n    fi\n    ((i++))\n    ((j--))\n  done\n  for i in\
    \ ${q_array[@]}; do\n    ((sum+=i))\n  done\n  if [ $sum -le $w ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp2r_1qgyq.sh: line 25: [: 3: unary operator expected\n/tmp/tmp2r_1qgyq.sh:
    line 25: [: 2: unary operator expected\n/tmp/tmp2r_1qgyq.sh: line 25: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    local i=0\n    local j=0\n    local mid=0\n\
    \    local left=0\n    local right=0\n    local balanced=0\n    local weight=0\n\
    \    local fly=0\n    len=${#q}\n    mid=$((len/2))\n    left=${q:0:mid}\n   \
    \ right=${q:mid:len}\n    if [ $((len%2)) -eq 1 ]; then\n        right=${right:1:len}\n\
    \    fi\n    for i in $left; do\n        sum=$((sum+i))\n    done\n    for j in\
    \ $right; do\n        sum=$((sum+j))\n    done\n    if [ $sum -le $w ]; then\n\
    \        weight=1\n    fi\n    if [ \"$left\" == \"$(rev <<< \"$right\")\" ];\
    \ then\n        balanced=1\n    fi\n    if [ $weight -eq 1 ] && [ $balanced -eq\
    \ 1 ]; then\n        fly=1\n    fi\n    if [ $fly -eq 1 ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_rev=\"\"\n    local i=0\n   \
    \ local j=0\n    local q_len_half=0\n    local q_len_half_plus_one=0\n    local\
    \ q_len_half_minus_one=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \    local q_len_half_rev=0\n    local q_len_half_plus_one_rev=0\n    local q_len_half_minus_one_rev=0\n\
    \n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_first=$(echo $q | cut -d ' ' -f 1-$q_half)\n  local q_second=$(echo $q | cut\
    \ -d ' ' -f $((q_half+1))-$q_len)\n  local q_second_rev=$(echo $q_second | rev)\n\
    \  if [ \"$q_first\" != \"$q_second_rev\" ]; then\n    echo \"false\"\n    return\n\
    \  fi\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [ $sum -le $w ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    if [[ $(echo $q | rev) == $q ]] &&\
    \ [[ $sum -le $w ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_half_floor=$((q_half-1))\n  local q_half_ceil=$((q_half+1))\n  local q_half_floor_val=$(echo\
    \ $q | cut -d \" \" -f $q_half_floor)\n  local q_half_ceil_val=$(echo $q | cut\
    \ -d \" \" -f $q_half_ceil)\n  local q_half_floor_val_rev=$(echo $q | cut -d \"\
    \ \" -f $q_half_ceil | rev)\n  local q_half_ceil_val_rev=$(echo $q | cut -d \"\
    \ \" -f $q_half_floor | rev)\n  local q_half_floor_val_rev_len=$(echo $q_half_floor_val_rev\
    \ | wc -w)\n  local q_half_ceil_val_rev_len=$(echo $q_half_ceil_val_rev | wc -w)\n\
    \  local q_half_floor_val_rev_len_half=$((q_half_floor_val_rev_len/2))\n  local\
    \ q_half_ceil_val_rev_len_half=$((q_half_ceil_val_rev_len/2))\n  local q_half_floor_val_rev_len_half_floor=$((q_half_floor_val_rev_len_half-1))\n\
    \  local q_half_ceil_val_rev_len_half_floor=$((q_half_ceil_val_rev_len_half-1))\n\
    \  local q_half_floor_val_rev_len_half_ceil=$((q_half_floor_val_rev_len_half+1))\n\
    \  local q_half_ceil_val_rev_len_half_ceil=$((q_half_ceil_val_rev_len_half+1))\n\
    \  local q_half_floor_val_rev_len\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"cut: fields are numbered from 1\nTry ''cut --help'' for more information.\ncut:
    fields are numbered from 1\nTry ''cut --help'' for more information.\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local arr=($q)\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=$((len-1))\n    local balanced=1\n    while [ $i -lt $j ]; do\n \
    \       if [ ${arr[$i]} -ne ${arr[$j]} ]; then\n            balanced=0\n     \
    \       break\n        fi\n        i=$((i+1))\n        j=$((j-1))\n    done\n\
    \    for i in ${arr[@]}; do\n        sum=$((sum+i))\n    done\n    if [ $sum -le\
    \ $w ] && [ $balanced -eq 1 ]; then\n        echo \"true\"\n    else\n       \
    \ echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # To access\
    \ arguments use variables $1, $2, etc.\n    q=$1\n    w=$2\n    sum=0\n    for\
    \ i in $q; do\n        sum=$((sum+i))\n    done\n    if [ $sum -le $w ]; then\n\
    \        if [ \"$q\" == \"$(echo $q | rev)\" ]; then\n            echo \"true\"\
    \n        else\n            echo \"false\"\n        fi\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=$(echo $q | tr ' ' '+')\n    local rev=$(echo $q | tr ' ' '\\n'\
    \ | rev | tr '\\n' ' ')\n    if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp3firpjt2.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=\"\"\n    for i in $q; do\n        sum=$((sum+i))\n\
    \        q_rev=\"$i $q_rev\"\n    done\n    if [[ \"$q\" == \"$q_rev\" ]] && [[\
    \ $sum -le $w ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=\"$1\"\n  local w=\"\
    $2\"\n  local sum=0\n  local balanced=true\n  for i in $q; do\n    sum=$((sum+i))\n\
    \    if [ $((sum > w)) = 1 ]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  local reversed=$(echo $q | rev)\n  if [ \"$q\" != \"$reversed\" ];\
    \ then\n    balanced=false\n  fi\n  if [ \"$balanced\" = true ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    local i=0\n    for i in $q; do\n      \
    \  let sum+=$i\n        let len+=1\n    done\n    if [ $sum -gt $w ]; then\n \
    \       echo \"false\"\n        return\n    fi\n    local mid=$((len/2))\n   \
    \ local left=${q:0:$mid}\n    local right=${q:$mid:$len}\n    if [ $((len%2))\
    \ -eq 1 ]; then\n        right=${right:1:$len}\n    fi\n    if [ \"$left\" !=\
    \ \"$(echo $right | rev)\" ]; then\n        echo \"false\"\n        return\n \
    \   fi\n    echo \"true\"\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_plus_one=0\n\
    \  local q_len_half_minus_one=0\n  local q_len_half_plus_one_rev=0\n  local q_len_half_minus_one_rev=0\n\
    \  local q_len_half_plus_one_rev_rev=0\n  local q_len_half_minus_one_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_plus_one_rev_rev\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_len_half=0\n  local q_len_half_floor=0\n \
    \ local q_len_half_ceil=0\n  local q_len_half_floor_rev=0\n  local q_len_half_ceil_rev=0\n\
    \  local q_len_half_floor_rev_rev=0\n  local q_len_half_ceil_rev_rev=0\n  local\
    \ q_len_half_floor_rev_rev_rev=0\n  local q_len_half_ceil_rev_rev_rev=0\n  local\
    \ q_len_half_floor_rev_rev_rev_rev=0\n  local q_len_half_ceil_rev_rev_rev_rev=0\n\
    \  local q_len_half_floor_rev_rev_rev_rev_rev=0\n  local q_len_half_ceil_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_floor_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_ceil_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_floor_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_ceil_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_floor_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_ceil_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_floor_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_ceil_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \  local q_len_half_floor_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n  local q_len_half_ceil_rev_\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=$(echo $q | rev)\n    for i in $q; do\n    \
    \    sum=$((sum+i))\n    done\n    if [ $sum -le $w ] && [ \"$q\" == \"$q_rev\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=$(echo $q | wc -w)\n    local q_half=$((q_len/2))\n\
    \    local q_left=$(echo $q | cut -d \" \" -f -$q_half)\n    local q_right=$(echo\
    \ $q | cut -d \" \" -f $((q_half+1))-)\n    local q_left_rev=$(echo $q_left |\
    \ rev)\n    if [[ $q_left_rev != $q_right ]]; then\n        echo \"false\"\n \
    \       return\n    fi\n    for i in $q; do\n        ((sum+=i))\n    done\n  \
    \  if [[ $sum -le $w ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local is_balanced=true\n    local i=0\n    local j=$((${#q}-1))\n\
    \    while [ $i -lt $j ]; do\n        if [ ${q:$i:1} -ne ${q:$j:1} ]; then\n \
    \           is_balanced=false\n            break\n        fi\n        i=$(($i+1))\n\
    \        j=$(($j-1))\n    done\n    for i in $q; do\n        sum=$(($sum+$i))\n\
    \    done\n    if [ $sum -le $w ] && $is_balanced; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local q_array=($q)\n\
    \    while [ $i -lt $j ]; do\n        if [ ${q_array[$i]} -ne ${q_array[$j]} ];\
    \ then\n            echo \"false\"\n            return\n        fi\n        let\
    \ i++\n        let j--\n    done\n    for i in ${q_array[@]}; do\n        let\
    \ sum+=$i\n    done\n    if [ $sum -le $w ]; then\n        echo \"true\"\n   \
    \ else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"\
    3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\"\
    \ \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpg07gy3vh.sh: line 25: [: 3: unary operator expected\n/tmp/tmpg07gy3vh.sh:
    line 25: [: 2: unary operator expected\n/tmp/tmpg07gy3vh.sh: line 25: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_len_half=0\n    local q_len_half_plus_one=0\n\
    \    local q_len_half_minus_one=0\n    local q_len_half_plus_one_rev=0\n    local\
    \ q_len_half_minus_one_rev=0\n    local q_len_half_plus_one_rev_rev=0\n    local\
    \ q_len_half_minus_one_rev_rev=0\n    local q_len_half_plus_one_rev_rev_rev=0\n\
    \    local q_len_half_minus_one_rev_rev_rev=0\n    local q_len_half_plus_one_rev_rev_rev_rev=0\n\
    \    local q_len_half_minus_one_rev_rev_rev_rev=0\n    local q_len_half_plus_one_rev_rev_rev_rev_rev=0\n\
    \    local q_len_half_minus_one_rev_rev_rev_rev_rev=0\n    local q_len_half_plus_one_rev_rev_rev_rev_rev_rev=0\n\
    \    local q_len_half_minus_one_rev_rev_rev_rev_rev_rev=0\n    local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev=0\n\
    \    local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev=0\n    local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \    local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev=0\n    local q_len_half_plus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n\
    \    local q_len_half_minus_one_rev_rev_rev_rev_rev_rev_rev_rev_rev=0\n    local\
    \ q_len_half_plus_one_rev_rev\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n  \
    \  [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  q=\"$1\"\n  w=\"$2\"\n  if [[\
    \ \"$q\" == $(echo \"$q\" | rev) ]] && [[ $(echo \"$q\" | tr ' ' '+') -le \"$w\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  list=$1\n  weight=$2\n  list_sum=$(echo\
    \ $list | tr ' ' '+')\n  if [[ $list_sum -le $weight ]]; then\n    if [[ $(echo\
    \ $list | rev) == $list ]]; then\n      echo \"true\"\n    else\n      echo \"\
    false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=$((${#q}-1))\n    local q_array=($q)\n\
    \    while [ $i -lt $j ]; do\n        if [ ${q_array[$i]} -ne ${q_array[$j]} ];\
    \ then\n            echo \"false\"\n            return\n        fi\n        ((i++))\n\
    \        ((j--))\n    done\n    for i in ${q_array[@]}; do\n        ((sum+=i))\n\
    \    done\n    if [ $sum -le $w ]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp7lp94xmj.sh: line 25: [: 3: unary operator expected\n/tmp/tmp7lp94xmj.sh:
    line 25: [: 2: unary operator expected\n/tmp/tmp7lp94xmj.sh: line 25: [: 1: unary
    operator expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_rev=''\n  local q_len=0\n  local i=0\n  local is_balanced=false\n\
    \  local will_fly=false\n\n  for i in $q; do\n    sum=$((sum + i))\n    q_rev=\"\
    $i $q_rev\"\n  done\n\n  q_len=$(echo $q | wc -w)\n\n  if [ \"$q\" = \"$q_rev\"\
    \ ]; then\n    is_balanced=true\n  fi\n\n  if [ $sum -le $w ] && $is_balanced;\
    \ then\n    will_fly=true\n  fi\n\n  echo $will_fly\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local balanced=true\n    for i in $q; do\n        sum=$((sum+i))\n\
    \    done\n    if [ $sum -gt $w ]; then\n        echo \"false\"\n        return\n\
    \    fi\n    for ((i=0; i<${#q}; i++)); do\n        if [ \"${q:$i:1}\" != \"${q:${#q}-1-i:1}\"\
    \ ]; then\n            balanced=false\n            break\n        fi\n    done\n\
    \    if $balanced; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local len=${#q}\n  local mid=$((len/2))\n  local left=${q:0:mid}\n\
    \  local right=${q:mid+1}\n  for i in $(seq 0 $mid); do\n    if [[ ${left:i:1}\
    \ != ${right:$((len-1-i)):1} ]]; then\n      echo \"false\"\n      return\n  \
    \  fi\n  done\n  for i in $(seq 0 $((len-1))); do\n    sum=$((sum+${q:i:1}))\n\
    \  done\n  if [[ $sum -le $w ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local balanced=true\n  for i in $q; do\n    sum=$((sum+i))\n    if\
    \ [[ $i -gt $w ]]; then\n      balanced=false\n    fi\n  done\n  if [[ $sum -gt\
    \ $w ]]; then\n    balanced=false\n  fi\n  if [[ $balanced == \"true\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_rev=\n    local q_len=\n    local i=0\n    for i\
    \ in $q; do\n        sum=$((sum+i))\n    done\n    if [ $sum -gt $w ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    q_rev=$(echo $q | rev)\n\
    \    if [ \"$q\" != \"$q_rev\" ]; then\n        echo \"false\"\n        return\n\
    \    fi\n    echo \"true\"\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_rev=\"\"\n    local q_arr=($q)\n\
    \    local i=0\n    local j=0\n    local is_palindrome=0\n    local is_balanced=0\n\
    \    local is_under_weight=0\n    local is_flying=0\n\n    # Check if the sum\
    \ of the elements is less than or equal the maximum possible weight.\n    for\
    \ i in ${q_arr[@]}; do\n        sum=$((sum + i))\n    done\n    if [[ $sum -le\
    \ $w ]]; then\n        is_under_weight=1\n    fi\n\n    # Check if the object\
    \ is balanced.\n    q_len=${#q_arr[@]}\n    for ((i=0; i<q_len; i++)); do\n  \
    \      q_rev=\"${q_rev}${q_arr[$((q_len-i-1))]}\"\n    done\n    if [[ $q == $q_rev\
    \ ]]; then\n        is_balanced=1\n    fi\n\n    # Check if the object will fly.\n\
    \    if [[ $is_under_weight -eq 1 && $is_balanced -eq 1 ]]; then\n        is_flying=1\n\
    \    fi\n\n    if [[ $is_flying -eq 1 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_first=$(echo $q | cut -d ' ' -f 1-$q_half)\n  local q_last=$(echo $q | cut\
    \ -d ' ' -f $((q_len-q_half+1))-$q_len)\n  local q_first_rev=$(echo $q_first |\
    \ rev)\n  if [ \"$q_first\" != \"$q_first_rev\" ]; then\n    echo \"false\"\n\
    \    return\n  fi\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [ $sum\
    \ -le $w ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    for i in $q; do\n        sum=$((sum+i))\n\
    \        len=$((len+1))\n    done\n    if [ $sum -gt $w ]; then\n        echo\
    \ \"false\"\n    else\n        if [ $((len%2)) -eq 0 ]; then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2\
    \ 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n\
    \    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=0\n  local half_len=0\n  local i=0\n  local j=0\n  local\
    \ q_arr=()\n  local q_arr_len=0\n  local q_arr_half_len=0\n  local is_balanced=0\n\
    \  local is_balanced_half=0\n  local is_balanced_other_half=0\n  local is_balanced_other_half_len=0\n\
    \  local is_balanced_other_half_half_len=0\n  local is_balanced_other_half_i=0\n\
    \  local is_balanced_other_half_j=0\n  local is_balanced_other_half_arr=()\n \
    \ local is_balanced_other_half_arr_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_i=0\n  local is_balanced_other_half_arr_j=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n  local is_balanced_other_half_arr_half_len=0\n\
    \  local is_balanced_other_half_arr_half_len=0\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    # Write your code here\n  \
    \  # To print results to the standard output you can use echo\n    # To access\
    \ arguments use variables $1, $2, etc.\n    sum=0\n    for i in $1; do\n     \
    \   sum=$((sum+i))\n    done\n    if [ $sum -le $2 ]; then\n        if [ \"$1\"\
    \ == \"$(echo $1 | rev)\" ]; then\n            echo \"true\"\n        else\n \
    \           echo \"false\"\n        fi\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  q=$1\n  w=$2\n  if [[ $(echo\
    \ $q | rev) == $q ]]; then\n    if [[ $(echo $q | tr \" \" \"+\" | bc) -le $w\
    \ ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half_len=$((q_len/2))\n \
    \ local q_half_len_remainder=$((q_len%2))\n  local q_half_len_remainder_index=$((q_half_len+q_half_len_remainder))\n\
    \  local q_half_len_index=$((q_half_len-1))\n  local q_half_len_remainder_index_index=$((q_half_len_remainder_index-1))\n\
    \  local q_half_len_remainder_index_index_index=$((q_half_len_remainder_index_index-1))\n\
    \  local q_half_len_remainder_index_index_index_index=$((q_half_len_remainder_index_index_index-1))\n\
    \  local q_half_len_remainder_index_index_index_index_index=$((q_half_len_remainder_index_index_index_index-1))\n\
    \  local q_half_len_remainder_index_index_index_index_index_index=$((q_half_len_remainder_index_index_index_index_index-1))\n\
    \  local q_half_len_remainder_index_index_index_index_index_index_index=$((q_half_len_remainder_index_index_index_index_index_index-1))\n\
    \  local q_half_len_remainder_index_index_index_index_index_index_index_index=$((q_half_len_remainder_index_index_index_index_index_index_index-1))\n\
    \  local q_half_len_remainder_index_index_index_index_index_index_index_index_index=$((q_half_len_remainder_index_index_index_index_index_index_index_index-1))\n\
    \  local q_half_len_remainder_index_index_index_index_\n}\n\ncandidate() {\n \
    \   will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\"\
    \ \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate\
    \ \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local i=0\n  local j=0\n  local len=0\n  local arr=()\n  local is_balanced=true\n\
    \  local is_light=true\n  # Check if the object is balanced\n  arr=($q)\n  len=${#arr[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    j=$((len-i-1))\n    if [ ${arr[i]} -ne ${arr[j]}\
    \ ]; then\n      is_balanced=false\n      break\n    fi\n  done\n  # Check if\
    \ the object is light\n  for ((i=0; i<len; i++)); do\n    sum=$((sum+arr[i]))\n\
    \  done\n  if [ $sum -gt $w ]; then\n    is_light=false\n  fi\n  # Return the\
    \ result\n  if [ $is_balanced = true ] && [ $is_light = true ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ q_sum=$(echo $q | tr \" \" \"+\" | bc)\n  local q_rev=$(echo $q | tr \" \" \"\
    \\n\" | tac | tr \"\\n\" \" \")\n  if [ $q_sum -le $w ] && [ \"$q\" == \"$q_rev\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local is_balanced=true\n  local is_weight_ok=false\n  local q_length=${#q}\n\
    \  local q_half_length=$((q_length/2))\n  local q_half_length_plus_one=$((q_half_length+1))\n\
    \  local q_half_length_minus_one=$((q_half_length-1))\n  local q_half_length_plus_one_minus_one=$((q_half_length_plus_one-1))\n\
    \  local q_half_length_minus_one_plus_one=$((q_half_length_minus_one+1))\n  local\
    \ q_half_length_minus_one_plus_one_plus_one=$((q_half_length_minus_one_plus_one+1))\n\
    \  local q_half_length_minus_one_plus_one_plus_one_plus_one=$((q_half_length_minus_one_plus_one_plus_one+1))\n\
    \  local q_half_length_minus_one_plus_one_plus_one_plus_one_plus_one=$((q_half_length_minus_one_plus_one_plus_one_plus_one+1))\n\
    \  local q_half_length_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_half_length_minus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \  local q_half_length_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_half_length_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one+1))\n\
    \  local q_half_length_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=$((q_half_length_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpnqx3aw9n.sh: line 34: unexpected EOF while looking for matching
    `)''\n/tmp/tmpnqx3aw9n.sh: line 52: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=$(echo $q | wc -w)\n    local q_arr=($q)\n \
    \   local i=0\n    local j=$((q_len-1))\n    local is_balanced=1\n    while [\
    \ $i -lt $j ]; do\n        if [ ${q_arr[$i]} -ne ${q_arr[$j]} ]; then\n      \
    \      is_balanced=0\n            break\n        fi\n        i=$((i+1))\n    \
    \    j=$((j-1))\n    done\n    for i in $q; do\n        sum=$((sum+i))\n    done\n\
    \    if [ $sum -le $w ] && [ $is_balanced -eq 1 ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [[ $sum -le $w ]] && [[ $q == $rev ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local reverse=$(echo $q | tr ' ' '\\n' | tac\
    \ | tr '\\n' ' ')\n  if [[ $q == $reverse ]] && [[ $sum -le $w ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp5zqs_xvs.sh: line 22: [: 3+2+3: integer expression expected\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half=$((q_len/2))\n  local\
    \ q_half_floor=$((q_half-1))\n  local q_half_ceil=$((q_half+1))\n  local q_half_floor_val=$(echo\
    \ $q | cut -d' ' -f$q_half_floor)\n  local q_half_ceil_val=$(echo $q | cut -d'\
    \ ' -f$q_half_ceil)\n  local q_half_val=$(echo $q | cut -d' ' -f$q_half)\n  local\
    \ q_half_val_len=$(echo $q_half_val | wc -c)\n  local q_half_val_len_floor=$((q_half_val_len-1))\n\
    \  local q_half_val_len_ceil=$((q_half_val_len+1))\n  local q_half_val_floor=$(echo\
    \ $q_half_val | cut -c1-$q_half_val_len_floor)\n  local q_half_val_ceil=$(echo\
    \ $q_half_val | cut -c2-$q_half_val_len_ceil)\n  local q_half_val_floor_len=$(echo\
    \ $q_half_val_floor | wc -c)\n  local q_half_val_ceil_len=$(echo $q_half_val_ceil\
    \ | wc -c)\n  local q_half_val_floor_len_floor=$((q_half_val_floor_len-1))\n \
    \ local q_half_val_ceil_len_ceil=$((q_half_val_ceil_len+1))\n  local q_half_val_floor_floor=$(echo\
    \ $q_half_val_floor | cut -c1-$q_half_val_floor_len_floor)\n  local q_half_val_ceil_ceil=$(echo\
    \ $q_half_val_ceil | cut -c2-$q_half_\n}\n\ncandidate() {\n    will_it_fly \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"\
    3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\"\
    \ \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp3n_vs8w1.sh: line 38: unexpected EOF while looking for matching
    `)''\n/tmp/tmp3n_vs8w1.sh: line 56: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ q_sum=$(echo $q | tr ' ' '+')\n  if [ $(echo \"$q_sum <= $w\" | bc) -eq 1 ]\
    \ && [ $(echo \"$q\" | rev) == \"$q\" ]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp35_qd3_k.sh: line 21: [: too many arguments\n'''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=0\n  local q_rev=\"\"\n  local i=0\n  local q_arr=($q)\n\
    \  local q_arr_len=${#q_arr[@]}\n  for ((i=0; i<q_arr_len; i++)); do\n    sum=$((sum+q_arr[i]))\n\
    \  done\n  if [ $sum -gt $w ]; then\n    echo \"false\"\n    return\n  fi\n  q_len=${#q}\n\
    \  for ((i=q_len-1; i>=0; i--)); do\n    q_rev+=\"${q:$i:1}\"\n  done\n  if [\
    \ \"$q\" == \"$q_rev\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local q_len=0\n    local q_len_half=0\n    local q_len_half_floor=0\n\
    \    local q_len_half_ceil=0\n    local q_len_half_floor_sum=0\n    local q_len_half_ceil_sum=0\n\
    \    local q_len_half_floor_sum_str=\"\"\n    local q_len_half_ceil_sum_str=\"\
    \"\n    local q_len_half_floor_sum_str_rev=\"\"\n    local q_len_half_ceil_sum_str_rev=\"\
    \"\n    local q_len_half_floor_sum_str_rev_len=0\n    local q_len_half_ceil_sum_str_rev_len=0\n\
    \    local q_len_half_floor_sum_str_rev_len_half=0\n    local q_len_half_ceil_sum_str_rev_len_half=0\n\
    \    local q_len_half_floor_sum_str_rev_len_half_floor=0\n    local q_len_half_ceil_sum_str_rev_len_half_floor=0\n\
    \    local q_len_half_floor_sum_str_rev_len_half_ceil=0\n    local q_len_half_ceil_sum_str_rev_len_half_ceil=0\n\
    \    local q_len_half_floor_sum_str_rev_len_half_floor_str=\"\"\n    local q_len_half_ceil_sum_str_rev_len_half_floor_str=\"\
    \"\n    local q_len_half_floor_sum_str_rev_len_half_ceil_str=\"\"\n    local q_len_half_ceil_sum_str_rev_len_half_ceil_str=\"\
    \"\n    local q_len_half_floor_sum_str_rev_len_half_floor_str_rev=\"\"\n    local\
    \ q_len_half_ceil_sum_str_rev_len_half_floor_str_rev=\"\"\n    local q_len_half_floor_\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_rev=$(echo $q | rev)\n  for i in $q; do\n    sum=$((sum+i))\n\
    \  done\n  if [ $sum -le $w ] && [ \"$q\" == \"$q_rev\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_rev=$(echo $q | rev)\n  for i in $q; do\n    sum=$((sum+i))\n\
    \  done\n  if [[ $q == $q_rev && $sum -le $w ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local len=0\n  local i=0\n  local j=0\n  local balanced=true\n  local\
    \ q_array=($q)\n  for i in \"${q_array[@]}\"; do\n    ((sum+=i))\n    ((len++))\n\
    \  done\n  ((len--))\n  for ((i=0; i<len; i++)); do\n    ((j=len-i))\n    if [[\
    \ ${q_array[i]} -ne ${q_array[j]} ]]; then\n      balanced=false\n      break\n\
    \    fi\n  done\n  if [[ $sum -le $w && $balanced == true ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr ' ' '+')\n  local rev=$(echo $q | tr ' ' '\\n' | tac | tr\
    \ '\\n' ' ')\n  if [[ $sum -le $w ]] && [[ $q == $rev ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local len=0\n    local i=0\n    local j=0\n    local q_arr=()\n\
    \    local q_rev=()\n    local q_rev_str=''\n    local q_str=''\n    local balanced=false\n\
    \    local will_fly=false\n\n    # split q into an array\n    IFS=' ' read -r\
    \ -a q_arr <<< \"$q\"\n\n    # get the length of the array\n    len=${#q_arr[@]}\n\
    \n    # get the sum of the array\n    for i in \"${q_arr[@]}\"; do\n        sum=$((sum\
    \ + i))\n    done\n\n    # check if the sum is less than or equal to w\n    if\
    \ [ $sum -le $w ]; then\n        # check if the array is a palindrome\n      \
    \  for ((i = 0; i < len; i++)); do\n            q_rev[$i]=${q_arr[$((len - i -\
    \ 1))]}\n        done\n\n        q_rev_str=$(printf \"%s \" \"${q_rev[@]}\")\n\
    \        q_str=$(printf \"%s \" \"${q_arr[@]}\")\n\n        if [ \"$q_rev_str\"\
    \ == \"$q_str\" ]; then\n            balanced=true\n        fi\n    fi\n\n   \
    \ if [ $balanced == true ]; then\n        will_fly=true\n    fi\n\n    echo $will_fly\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr \" \" \"+\" | bc)\n  local rev=$(echo $q | tr \" \" \"\\\
    n\" | tac | tr \"\\n\" \" \")\n  if [ $sum -le $w ] && [ \"$q\" == \"$rev\" ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  # Write your code here\n  # Use\
    \ echo to print result, e.g.\n  # echo \"true\"\n  # echo \"false\"\n  echo \"\
    false\"\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=${#q}\n  local q_half=$((q_len/2))\n  local q_len_odd=$((q_len%2))\n\
    \  local q_first_half=${q:0:q_half}\n  local q_second_half=${q:q_half+q_len_odd}\n\
    \  local q_second_half_rev=$(echo $q_second_half | rev)\n  for i in $q; do\n \
    \   sum=$((sum+i))\n  done\n  if [ $sum -le $w ] && [ \"$q_first_half\" == \"\
    $q_second_half_rev\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local i=0\n    local j=0\n    local len=0\n    local arr=()\n\
    \    local balanced=true\n    local fly=false\n\n    # check if the sum of the\
    \ elements is less than the maximum possible weight\n    for i in $q; do\n   \
    \     sum=$((sum + i))\n    done\n    if [ $sum -le $w ]; then\n        fly=true\n\
    \    fi\n\n    # check if the list is palindromic\n    arr=($q)\n    len=${#arr[@]}\n\
    \    for ((i=0; i<len/2; i++)); do\n        j=$((len - i - 1))\n        if [ ${arr[i]}\
    \ -ne ${arr[j]} ]; then\n            balanced=false\n            break\n     \
    \   fi\n    done\n\n    if [ $balanced = true ] && [ $fly = true ]; then\n   \
    \     echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    if [ $# -ne 2 ]; then\n   \
    \     echo \"Usage: $0 <list> <max_weight>\"\n        return 1\n    fi\n    local\
    \ list=\"$1\"\n    local max_weight=\"$2\"\n    local list_sum=$(echo \"$list\"\
    \ | tr ' ' '\\n' | paste -sd+ - | bc)\n    if [ \"$list_sum\" -gt \"$max_weight\"\
    \ ]; then\n        echo \"false\"\n        return 0\n    fi\n    local list_len=$(echo\
    \ \"$list\" | wc -w)\n    if [ $((list_len % 2)) -eq 0 ]; then\n        echo \"\
    false\"\n        return 0\n    fi\n    local list_rev=$(echo \"$list\" | tr '\
    \ ' '\\n' | tac | tr '\\n' ' ')\n    if [ \"$list\" != \"$list_rev\" ]; then\n\
    \        echo \"false\"\n        return 0\n    fi\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n\
    \    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"\
    1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[\
    \ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local rev=\"\"\n  local q_len=${#q}\n  local i=0\n  local j=$((q_len-1))\n\
    \  local q_arr=($q)\n  while [ $i -lt $q_len ]; do\n    sum=$((sum+q_arr[i]))\n\
    \    rev=\"$rev${q_arr[j]}\"\n    i=$((i+1))\n    j=$((j-1))\n  done\n  if [ $sum\
    \ -le $w ] && [ \"$q\" == \"$rev\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\"\
    \ \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  # Write your code here\n  # Use\
    \ echo to print result, e.g.\n  # echo \"true\"\n  # echo \"false\"\n  q=$1\n\
    \  w=$2\n  q_arr=($q)\n  q_len=${#q_arr[@]}\n  q_sum=0\n  for (( i=0; i<${q_len};\
    \ i++ ));\n  do\n    q_sum=$(($q_sum+${q_arr[$i]}))\n  done\n  if [ $q_sum -gt\
    \ $w ]; then\n    echo \"false\"\n  else\n    for (( i=0; i<${q_len}; i++ ));\n\
    \    do\n      if [ ${q_arr[$i]} -ne ${q_arr[$(($q_len-1-$i))]} ]; then\n    \
    \    echo \"false\"\n        return\n      fi\n    done\n    echo \"true\"\n \
    \ fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\"\
    \ \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"\
    6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local balanced=true\n    local q_len=${#q}\n    local q_half=$((q_len/2))\n\
    \    local q_half_ceil=$((q_half+1))\n    local q_half_floor=$((q_len-q_half))\n\
    \    local q_half_ceil_arr=(${q:0:$q_half_ceil})\n    local q_half_floor_arr=(${q:$q_half_floor})\n\
    \    local q_half_ceil_len=${#q_half_ceil_arr[@]}\n    local q_half_floor_len=${#q_half_floor_arr[@]}\n\
    \    local q_half_ceil_last=$((q_half_ceil_len-1))\n    local q_half_floor_last=$((q_half_floor_len-1))\n\
    \    local q_half_ceil_last_elem=${q_half_ceil_arr[$q_half_ceil_last]}\n    local\
    \ q_half_floor_last_elem=${q_half_floor_arr[$q_half_floor_last]}\n    local q_half_ceil_last_elem_len=${#q_half_ceil_last_elem}\n\
    \    local q_half_floor_last_elem_len=${#q_half_floor_last_elem}\n    local q_half_ceil_last_elem_len_half=$((q_half_ceil_last_elem_len/2))\n\
    \    local q_half_floor_last_elem_len_half=$((q_half_floor_last_elem_len/2))\n\
    \    local q_half_ceil_last_elem_half_ceil=$((q_half_ceil_last_elem_len_half+1))\n\
    \    local q_half_floor_last_elem_half_ceil=$((q_half_floor_last_elem_len_half+1))\n\
    \    local q_half_ceil_last_elem_\n}\n\ncandidate() {\n    will_it_fly \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_len=$(echo $q | wc -w)\n  local q_half_len=$((q_len/2))\n \
    \ local q_half_len_ceil=$((q_half_len+1))\n  local q_half_len_floor=$((q_half_len))\n\
    \  local q_half_len_ceil_sum=0\n  local q_half_len_floor_sum=0\n  local q_half_len_ceil_sum_str=\"\
    \"\n  local q_half_len_floor_sum_str=\"\"\n  local q_half_len_ceil_sum_str_rev=\"\
    \"\n  local q_half_len_floor_sum_str_rev=\"\"\n  local q_half_len_ceil_sum_str_rev_len=0\n\
    \  local q_half_len_floor_sum_str_rev_len=0\n  local q_half_len_ceil_sum_str_rev_len_diff=0\n\
    \  local q_half_len_floor_sum_str_rev_len_diff=0\n  local q_half_len_ceil_sum_str_rev_len_diff_str=\"\
    \"\n  local q_half_len_floor_sum_str_rev_len_diff_str=\"\"\n  local q_half_len_ceil_sum_str_rev_len_diff_str_rev=\"\
    \"\n  local q_half_len_floor_sum_str_rev_len_diff_str_rev=\"\"\n  local q_half_len_ceil_sum_str_rev_len_diff_str_rev_len=0\n\
    \  local q_half_len_floor_sum_str_rev_len_diff_str_rev_len=0\n  local q_half_len_ceil_sum_str_rev_len_diff_str_rev_len_diff=0\n\
    \  local q_half_len_floor_sum_str_rev_len_diff_str_rev_len_diff=0\n  local q_half_len_ceil_sum_str_rev_len_diff_str_rev\n\
    }\n\ncandidate() {\n    will_it_fly \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n    [[ $(candidate \"1 2\" \"5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 3\" \"1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\"\
    \ ]]\n    [[ $(candidate \"5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n    local q=$1\n    local w=$2\n\
    \    local sum=0\n    local rev=\"\"\n    for i in $q; do\n        sum=$((sum+i))\n\
    \        rev=\"$i $rev\"\n    done\n    if [[ $sum -gt $w ]]; then\n        echo\
    \ \"false\"\n    elif [[ \"$q\" == \"$rev\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=0\n  local q_rev=$(echo $q | rev)\n  for i in $q; do\n    sum=$((sum+i))\n\
    \  done\n  if [ $sum -le $w ] && [ \"$q\" == \"$q_rev\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate \"3\" \"\
    5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\" ]]\n    [[\
    \ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"5\" \"5\"\
    ) = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660359503
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that returns true if the object q will\
    \ fly, and false otherwise.\n# The object q will fly if it's balanced (it is a\
    \ palindromic list) and the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\
    \n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>>\
    \ $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is\
    \ more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\"\
    )\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    # >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible\
    \ weight, and it's balanced.\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local\
    \ sum=$(echo $q | tr \" \" \"+\" | bc)\n  local len=$(echo $q | wc -w)\n  local\
    \ half=$(echo $len/2 | bc)\n  local first=$(echo $q | cut -d \" \" -f 1-$half)\n\
    \  local second=$(echo $q | cut -d \" \" -f $((half+1))-$len)\n  local rev=$(echo\
    \ $second | rev)\n  if [[ $sum -le $w && $first == $rev ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    will_it_fly\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 3\" \"9\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2\" \"5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3\" \"5\") = \"true\" ]]\n    [[ $(candidate \"3 2 3\" \"1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3\" \"6\") = \"false\" ]]\n    [[ $(candidate \"\
    5\" \"5\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660359503
