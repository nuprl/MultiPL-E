name: HumanEval_41_car_race_collision
language: sh
prompt: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
  \ line.\n# n cars are driving left to right;  simultaneously, a different set of\
  \ n cars\n# are driving right to left.   The two sets of cars start out being very\
  \ far from\n# each other.  All cars move in the same speed.  Two cars are said to\
  \ collide\n# when a car that's moving left to right hits a car that's moving right\
  \ to left.\n# However, the cars are infinitely sturdy and strong; as a result, they\
  \ continue moving\n# in their trajectory as if they did not collide.\n# This function\
  \ outputs the number of such collisions.\ncar_race_collision() {\n"
tests: "}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
  \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
  \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
completions: ["    local -a left_to_right\n    local -a right_to_left\n    local -i\
    \ i\n    local -i j\n    local -i n\n    local -i collision\n    local -i left_to_right_index\n\
    \    local -i right_to_left_index\n    local -i left_to_right_length\n    local\
    \ -i right_to_left_length\n    local -i left_to_right_value\n    local -i right_to_left_value\n\
    \n    collision=0\n    n=$1\n    left_to_right=($(echo \"$2\" | tr ' ' '\\n'))\n\
    \    right_to_left=($(echo \"$3\" | tr ' ' '\\n'))\n    left_to_right_length=${#left_to_right[@]}\n\
    \    right_to_left_length=${#right_to_left[@]}\n    left_to_right_index=0\n  \
    \  right_to_left_index=0\n    while [ $left_to_right_index -lt $left_to_right_length\
    \ ] && [ $right_to_left_index -lt $right_to_left_length ]; do\n        left_to_right_value=${left_to_right[$left_to_right_index]}\n\
    \        right_to_left_value=${right_to_left[$right_to_left_index]}\n        if\
    \ [ $left_to_right_value -lt $right_to_left_value ]; then\n            left_to_right_index=$((left_to_right_index\
    \ + 1))\n        elif [ $left_to_right_value -gt $right_to_left_value ]; then\n\
    \            right_to_left_index=$((right_to_left_index + 1))\n        else\n\
    \            collision=$((collision + 1))\n            left_to_right_index=$((left_to_right_index\
    \ + 1))\n            right_to_left_index=$((right_to_left_index + 1))\n      \
    \  fi\n    done\n    echo $collision", "    # The first line of the input is the\
    \ number of cars\n    read n\n    # The second line of the input is the n numbers\
    \ that represent the positions\n    # of the cars that are moving left to right.\n\
    \    read -a left_to_right\n    # The third line of the input is the n numbers\
    \ that represent the positions\n    # of the cars that are moving right to left.\n\
    \    read -a right_to_left\n    # Sort the two arrays\n    left_to_right=($(printf\
    \ '%s\\n' \"${left_to_right[@]}\" | sort -n))\n    right_to_left=($(printf '%s\\\
    n' \"${right_to_left[@]}\" | sort -n))\n    # The number of collisions is the\
    \ number of times the two arrays have the same\n    # element.  This is the same\
    \ as the number of times the two arrays have the same\n    # element when you\
    \ subtract the elements of the second array from the elements\n    # of the first\
    \ array.\n    # The command below is a bit complicated.  It's a one-liner that\
    \ does the following:\n    # 1. Subtract the elements of the second array from\
    \ the elements of the first array.\n    # 2. Sort the resulting array.\n    #\
    \ 3. Count the number of times the resulting array has the same element.\n   \
    \ # 4. Print the result.\n    printf '%s\\n' \"${left_to_right[@]}\" | paste -d\
    \ ' ' - \"${right_to_left[@]}\" | awk '{print $1-$2}' | sort -n | uniq -c | awk\
    \ '{print $1-1}' | paste -sd+ - | bc", "    # Write your code here\n    #\n  \
    \  # Input:\n    #   $1: a string of n space-separated integers, each in the range\
    \ [0, n-1]\n    #   $2: a string of n space-separated integers, each in the range\
    \ [0, n-1]\n    # Output:\n    #   a single integer, the number of collisions\n\
    \    #\n    # Example:\n    #   $1: \"0 1 2 3 4 5 6 7 8 9\"\n    #   $2: \"9 8\
    \ 7 6 5 4 3 2 1 0\"\n    #   Output:\n    #   45\n    #\n    # Example:\n    #\
    \   $1: \"0 1 2 3 4 5 6 7 8 9\"\n    #   $2: \"0 1 2 3 4 5 6 7 8 9\"\n    #  \
    \ Output:\n    #   0\n    #\n    # Example:\n    #   $1: \"0 1 2 3 4 5 6 7 8 9\"\
    \n    #   $2: \"9 8 7 6 5 4 3 2 1\"\n    #   Output:\n    #   -1\n    #\n    #\
    \ Note:\n    #   - The input strings will not have leading or trailing whitespace.\n\
    \    #   - The input strings will not have any extra whitespace.\n    #   - The\
    \ input strings will not have any empty strings.\n    #   - The input strings\
    \ will not have any leading zeros.\n    #   - The input strings will not have\
    \ any negative numbers.\n    #   - The input strings will not have any non-integer\
    \ numbers.\n    #   - The input strings will not have any non-numeric characters.\n\
    \    #   - The input strings will not have any leading or trailing whitespace.\n\
    \    #   - The input strings will not have any extra whitespace.\n    #   - The\
    \ input strings will not have any empty strings.\n    #   - The input strings\
    \ will not have any leading zeros.\n    #   - The input strings will not have\
    \ any negative numbers.\n    #   - The input strings will not have any non-integer\
    \ numbers.\n    #   - The input strings will not have any non-numeric characters.\n\
    \    #   - The input strings will not have any leading or trailing whites", " \
    \   # The input is a string of n numbers, each number representing the position\n\
    \    # of a car that's moving left to right.  The input is also a string of n\
    \ numbers,\n    # each number representing the position of a car that's moving\
    \ right to left.\n    # The output is the number of collisions.\n    #\n    #\
    \ For example, if the input is \"1 2 3\" and \"3 2 1\", the output is 2.\n   \
    \ #\n    # The input is guaranteed to be valid.\n    #\n    # The input is guaranteed\
    \ to be sorted.\n    #\n    # The input is guaranteed to have no duplicates.\n\
    \    #\n    # The input is guaranteed to have no negative numbers.\n    #\n  \
    \  # The input is guaranteed to have no zeros.\n    #\n    # The input is guaranteed\
    \ to have at least one number.\n    #\n    # The input is guaranteed to have at\
    \ most 100 numbers.\n    #\n    # The input is guaranteed to have the same number\
    \ of numbers.\n    #\n    # The input is guaranteed to have at least one collision.\n\
    \    #\n    # The input is guaranteed to have at most 100 collisions.\n    #\n\
    \    # The input is guaranteed to have at least one number that's at least 1.\n\
    \    #\n    # The input is guaranteed to have at least one number that's at most\
    \ 100.\n    #\n    # The input is guaranteed to have at least one number that's\
    \ at least 1.\n    #\n    # The input is guaranteed to have at least one number\
    \ that's at most 100.\n    #\n    # The input is guaranteed to have at least one\
    \ number that's at least 1.\n    #\n    # The input is guaranteed to have at least\
    \ one number that's at most 100.\n    #\n    # The input is guaranteed to have\
    \ at least one number that's at least 1.\n    #\n    # The input is guaranteed\
    \ to have at least one number that's at most 100.\n    #\n    # The input is guaranteed\
    \ to have at least one number that's at least 1.\n    #\n    # The input is guaranteed\
    \ to have at least one number that's at most 100.\n    #\n    # The input is guaranteed\
    \ to have at least one number that's at least 1.\n    #\n    # The input is",
  "    local n=$1\n    local left_to_right_cars=($(echo $2 | tr ' ' '\\n' | sort -n))\n\
    \    local right_to_left_cars=($(echo $3 | tr ' ' '\\n' | sort -n))\n    local\
    \ collisions=0\n    local i=0\n    local j=0\n    while [ $i -lt $n ] && [ $j\
    \ -lt $n ]; do\n        if [ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]}\
    \ ]; then\n            ((i++))\n        elif [ ${left_to_right_cars[$i]} -gt ${right_to_left_cars[$j]}\
    \ ]; then\n            ((j++))\n        else\n            ((collisions++))\n \
    \           ((i++))\n            ((j++))\n        fi\n    done\n    echo $collisions",
  "    # The input is a string of n numbers separated by spaces.\n    # The first\
    \ n numbers are the speeds of the cars moving left to right.\n    # The last n\
    \ numbers are the speeds of the cars moving right to left.\n    # The output is\
    \ the number of collisions.\n    # The function should be able to handle any number\
    \ of cars.\n    # The function should be able to handle any speed of cars.\n \
    \   # The function should be able to handle any order of cars.\n    # The function\
    \ should be able to handle any order of speeds.\n    # The function should be\
    \ able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds.\n    # The function should\
    \ be able to handle any combination of cars and speeds", "    # The input is a\
    \ string of n numbers, each number representing the position of a car\n    # that's\
    \ moving left to right.  The numbers are separated by a space.\n    # The second\
    \ input is a string of n numbers, each number representing the position of a car\n\
    \    # that's moving right to left.  The numbers are separated by a space.\n \
    \   # The output is the number of collisions.\n    # For example, if the input\
    \ is \"1 2 3 4\" and \"5 6 7 8\", then the output is 0.\n    # If the input is\
    \ \"1 2 3 4\" and \"4 5 6 7\", then the output is 1.\n    # If the input is \"\
    1 2 3 4\" and \"3 4 5 6\", then the output is 2.\n    # If the input is \"1 2\
    \ 3 4\" and \"2 3 4 5\", then the output is 3.\n    # If the input is \"1 2 3\
    \ 4\" and \"1 2 3 4\", then the output is 4.\n    # If the input is \"1 2 3 4\"\
    \ and \"0 1 2 3\", then the output is 5.\n    # If the input is \"1 2 3 4\" and\
    \ \"0 0 0 0\", then the output is 6.\n    # If the input is \"1 2 3 4\" and \"\
    0 0 0 0 0\", then the output is 6.\n    # If the input is \"1 2 3 4\" and \"0\
    \ 0 0 0 0 0\", then the output is 6.\n    # If the input is \"1 2 3 4\" and \"\
    0 0 0 0 0 0 0\", then the output is 6.\n    # If the input is \"1 2 3 4\" and\
    \ \"0 0 0 0 0 0 0 0\", then the output is 6.\n    # If the input is \"1 2 3 4\"\
    \ and \"0 0 0 0 0 0 0 0 0\", then the output is 6.\n    # If the input is \"1\
    \ 2 3 4\" and \"0 0 0 0 0 0 0 0 0 0\", then the output is 6.\n    # If the input\
    \ is \"1 2 3 4\" and \"0 0 0 0 0 0 0 0 0 0 0\", then the output is 6.\n    # If\
    \ the input is \"1 2 3 4\" and \"0 0 0 0 0 0 0 0 0 0 0 0", "    # $1 is the number\
    \ of cars moving left to right\n    # $2 is the number of cars moving right to\
    \ left\n    # $3 is the speed of the cars moving left to right\n    # $4 is the\
    \ speed of the cars moving right to left\n    # $5 is the starting position of\
    \ the cars moving left to right\n    # $6 is the starting position of the cars\
    \ moving right to left\n    # $7 is the ending position of the cars moving left\
    \ to right\n    # $8 is the ending position of the cars moving right to left\n\
    \    # $9 is the number of collisions\n    # $10 is the number of cars moving\
    \ left to right that have collided\n    # $11 is the number of cars moving right\
    \ to left that have collided\n    # $12 is the number of cars moving left to right\
    \ that have not collided\n    # $13 is the number of cars moving right to left\
    \ that have not collided\n    # $14 is the number of cars moving left to right\
    \ that have not collided and are still moving\n    # $15 is the number of cars\
    \ moving right to left that have not collided and are still moving\n    # $16\
    \ is the number of cars moving left to right that have collided and are still\
    \ moving\n    # $17 is the number of cars moving right to left that have collided\
    \ and are still moving\n    # $18 is the number of cars moving left to right that\
    \ have collided and are still moving and are moving left to right\n    # $19 is\
    \ the number of cars moving right to left that have collided and are still moving\
    \ and are moving left to right\n    # $20 is the number of cars moving left to\
    \ right that have collided and are still moving and are moving right to left\n\
    \    # $21 is the number of cars moving right to left that have collided and are\
    \ still moving and are moving right to left\n    # $22 is the number of cars moving\
    \ left to right that have not collided and are still moving and are moving left\
    \ to right\n    # $23 is the number of cars moving right to left that have not\
    \ collided and are still moving and are moving left to right\n    # $24 is the\
    \ number of cars moving left to right that have not collided and are still moving\
    \ and are moving right to left\n    # $25 is the number of cars moving right to\
    \ left that have not collided and are still moving and are moving right to left\n\
    \    # $", "    # We'll use the fact that the cars are infinitely sturdy and strong\
    \ to our advantage.\n    # We'll assume that the cars are points on a line.  We'll\
    \ assume that the cars\n    # that are moving left to right are at positions 1,\
    \ 2, ..., n, and the cars\n    # that are moving right to left are at positions\
    \ -1, -2, ..., -n.\n    # We'll assume that the cars that are moving left to right\
    \ are moving at speed 1,\n    # and the cars that are moving right to left are\
    \ moving at speed -1.\n    # We'll assume that the cars start out at time 0.\n\
    \    # We'll assume that the cars are infinitely small.\n    # We'll assume that\
    \ the cars are infinitely strong.\n    # We'll assume that the cars are infinitely\
    \ sturdy.\n    # We'll assume that the cars are infinitely fast.\n    # We'll\
    \ assume that the cars are infinitely precise.\n    # We'll assume that the cars\
    \ are infinitely accurate.\n    # We'll assume that the cars are infinitely precise.\n\
    \    # We'll assume that the cars are infinitely accurate.\n    # We'll assume\
    \ that the cars are infinitely precise.\n    # We'll assume that the cars are\
    \ infinitely accurate.\n    # We'll assume that the cars are infinitely precise.\n\
    \    # We'll assume that the cars are infinitely accurate.\n    # We'll assume\
    \ that the cars are infinitely precise.\n    # We'll assume that the cars are\
    \ infinitely accurate.\n    # We'll assume that the cars are infinitely precise.\n\
    \    # We'll assume that the cars are infinitely accurate.\n    # We'll assume\
    \ that the cars are infinitely precise.\n    # We'll assume that the cars are\
    \ infinitely accurate.\n    # We'll assume that the cars are infinitely precise.\n\
    \    # We'll assume that the cars are infinitely accurate.\n    # We'll assume\
    \ that the cars are infinitely precise.\n    # We'll assume that the cars are\
    \ infinitely accurate.\n    # We'll assume that the cars are infinitely precise.\n\
    \    # We'll assume that the cars are infinitely accurate.\n    # We'll assume\
    \ that the cars are infinitely precise.\n    # We'll assume that the cars are\
    \ infinitely accurate.\n    # We'll assume that the cars are infinitely precise.\n\
    \    # We'll assume that the cars are infinitely accurate.\n    # We'll", "  \
    \  # The first line is the number of cars.\n    read n\n    # The second line\
    \ is the speed of the cars moving left to right.\n    read -a left_to_right\n\
    \    # The third line is the speed of the cars moving right to left.\n    read\
    \ -a right_to_left\n    # The fourth line is the starting position of the cars\
    \ moving left to right.\n    read -a left_to_right_start\n    # The fifth line\
    \ is the starting position of the cars moving right to left.\n    read -a right_to_left_start\n\
    \    # The sixth line is the time of the race.\n    read time\n    # The seventh\
    \ line is the length of the road.\n    read road_length\n    # The eighth line\
    \ is the width of the road.\n    read road_width\n    # The ninth line is the\
    \ width of the cars.\n    read car_width\n    # The tenth line is the length of\
    \ the cars.\n    read car_length\n    # The eleventh line is the height of the\
    \ cars.\n    read car_height\n    # The twelfth line is the width of the tires.\n\
    \    read tire_width\n    # The thirteenth line is the length of the tires.\n\
    \    read tire_length\n    # The fourteenth line is the height of the tires.\n\
    \    read tire_height\n    # The fifteenth line is the width of the wheels.\n\
    \    read wheel_width\n    # The sixteenth line is the length of the wheels.\n\
    \    read wheel_length\n    # The seventeenth line is the height of the wheels.\n\
    \    read wheel_height\n    # The eighteenth line is the width of the axles.\n\
    \    read axle_width\n    # The nineteenth line is the length of the axles.\n\
    \    read axle_length\n    # The twentieth line is the height of the axles.\n\
    \    read axle_height\n    # The twenty-first line is the width of the bumpers.\n\
    \    read bumper_width\n    # The twenty-second line is the length of the bumpers.\n\
    \    read bumper_length\n    # The twenty-third line is the height of the bumpers.\n\
    \    read bumper_height\n    # The twenty-fourth line is the width of the headlights.\n\
    \    read headlight_width", "    # The first line of the input is the number of\
    \ cars.\n    read n\n    # The second line of the input is the positions of the\
    \ cars moving left to right.\n    read -a left_to_right\n    # The third line\
    \ of the input is the positions of the cars moving right to left.\n    read -a\
    \ right_to_left\n    # Sort the two arrays.\n    left_to_right=($(printf \"%s\\\
    n\" \"${left_to_right[@]}\" | sort -n))\n    right_to_left=($(printf \"%s\\n\"\
    \ \"${right_to_left[@]}\" | sort -n))\n    # The number of collisions is the number\
    \ of cars that are in the same position.\n    # This can be computed by comparing\
    \ the two sorted arrays.\n    collisions=0\n    for ((i=0; i<n; i++)); do\n  \
    \      if [[ ${left_to_right[i]} -eq ${right_to_left[i]} ]]; then\n          \
    \  collisions=$((collisions+1))\n        fi\n    done\n    echo $collisions",
  "    # The cars are represented as a string of numbers.  The left-to-right cars\
    \ are\n    # represented by the first n characters of the string, and the right-to-left\
    \ cars\n    # are represented by the last n characters of the string.  The cars\
    \ are sorted\n    # in ascending order.\n    # For example, if the input is \"\
    1 2 3 4 5 6 7 8 9 10 9 8 7 6 5 4 3 2 1\", then\n    # the left-to-right cars are\
    \ \"1 2 3 4 5 6 7 8 9 10\" and the right-to-left cars\n    # are \"9 8 7 6 5 4\
    \ 3 2 1\".\n    # The function outputs the number of collisions.  In the above\
    \ example, there are\n    # 5 collisions: 1-9, 2-8, 3-7, 4-6, and 5-5.\n    #\n\
    \    # Write your code here.\n    #\n    # The following code is an example of\
    \ how to read the input.\n    # The first line of the input is the number of cars.\n\
    \    n=$(head -n 1)\n    # The second line of the input is the string of numbers.\n\
    \    cars=$(tail -n 1)\n    # The following code is an example of how to output\
    \ the result.\n    # The output is a single number.\n    echo \"5\"", "    # The\
    \ input is a string of numbers separated by spaces.\n    # The first n numbers\
    \ are the positions of the cars moving left to right.\n    # The next n numbers\
    \ are the positions of the cars moving right to left.\n    # The positions are\
    \ in increasing order.\n    # The output is the number of collisions.\n    # For\
    \ example, if the input is \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    # then the output is \"0\".\n    # If the input is \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3\
    \ 2 1\"\n    # then the output is \"20\".\n    # If the input is \"1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14 13 12 11 10 9 8\
    \ 7 6 5 4 3 2\"\n    # then the output is \"19\".\n    # If the input is \"1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14 13 12 11\
    \ 10 9 8 7 6 5 4 3\"\n    # then the output is \"18\".\n    # If the input is\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14 13\
    \ 12 11 10 9 8 7 6 5 4\"\n    # then the output is \"17\".\n    # If the input\
    \ is \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14\
    \ 13 12 11 10 9 8 7 6 5\"\n    # then the output is \"16\".\n    # If the input\
    \ is \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14\
    \ 13 12 11 10 9 8 7 6\"\n    # then the output is \"15\".\n    # If the input\
    \ is \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14\
    \ 13 12 11 10 9 8 7\"\n    # then the output is \"14\".\n    # If the input is",
  "    # The input is a string of the form \"1 2 3 4 5 6 7 8 9 10\"\n    # where the\
    \ numbers are the positions of the cars moving left to right.\n    # The input\
    \ is the same for the cars moving right to left.\n    # The output is the number\
    \ of collisions.\n    #\n    # For example, if the input is \"1 2 3 4 5 6 7 8\
    \ 9 10\" and \"10 9 8 7 6 5 4 3 2 1\",\n    # then the output is 9.\n    #\n \
    \   # The input is guaranteed to be a string of the form \"1 2 3 4 5 6 7 8 9 10\"\
    \n    # where the numbers are the positions of the cars moving left to right.\n\
    \    # The input is the same for the cars moving right to left.\n    # The output\
    \ is the number of collisions.\n    #\n    # For example, if the input is \"1\
    \ 2 3 4 5 6 7 8 9 10\" and \"10 9 8 7 6 5 4 3 2 1\",\n    # then the output is\
    \ 9.\n    #\n    # The input is guaranteed to be a string of the form \"1 2 3\
    \ 4 5 6 7 8 9 10\"\n    # where the numbers are the positions of the cars moving\
    \ left to right.\n    # The input is the same for the cars moving right to left.\n\
    \    # The output is the number of collisions.\n    #\n    # For example, if the\
    \ input is \"1 2 3 4 5 6 7 8 9 10\" and \"10 9 8 7 6 5 4 3 2 1\",\n    # then\
    \ the output is 9.\n    #\n    # The input is guaranteed to be a string of the\
    \ form \"1 2 3 4 5 6 7 8 9 10\"\n    # where the numbers are the positions of\
    \ the cars moving left to right.\n    # The input is the same for the cars moving\
    \ right to left.\n    # The output is the number of collisions.\n    #\n    #\
    \ For example, if the input is \"1 2 3 4 5 6 7 8 9 10\" and \"10 9 8 7 6 5 4 3\
    \ 2 1\",\n    # then the output is 9.\n    #\n    # The input is guaranteed to\
    \ be a string of the form \"1 2 3 4 5 6 7 8 9 10\"\n    # where the numbers are\
    \ the positions", "    # This function takes two arguments:\n    # $1: a string\
    \ of n numbers separated by spaces, where the ith number represents\n    #   \
    \  the position of the ith car that's moving left to right.\n    # $2: a string\
    \ of n numbers separated by spaces, where the ith number represents\n    #   \
    \  the position of the ith car that's moving right to left.\n    # The function\
    \ outputs the number of collisions.\n    #\n    # For example, if $1 is \"1 2\
    \ 3\" and $2 is \"2 3 4\", then the output should be 2.\n    # This is because\
    \ the first car moving left to right will collide with the second\n    # car moving\
    \ right to left, and the second car moving left to right will collide\n    # with\
    \ the third car moving right to left.\n    #\n    # If $1 is \"1 2 3\" and $2\
    \ is \"3 2 1\", then the output should be 3.\n    # This is because all three\
    \ cars moving left to right will collide with the cars\n    # moving right to\
    \ left.\n    #\n    # If $1 is \"1 2 3\" and $2 is \"4 5 6\", then the output\
    \ should be 0.\n    # This is because no cars will collide.\n    #\n    # If $1\
    \ is \"1 2 3\" and $2 is \"1 2 3\", then the output should be 0.\n    # This is\
    \ because no cars will collide.\n    #\n    # If $1 is \"1 2 3\" and $2 is \"\
    1 3 2\", then the output should be 1.\n    # This is because the first car moving\
    \ left to right will collide with the\n    # third car moving right to left.\n\
    \    #\n    # If $1 is \"1 2 3\" and $2 is \"2 1 3\", then the output should be\
    \ 1.\n    # This is because the second car moving left to right will collide with\
    \ the\n    # first car moving right to left.\n    #\n    # If $1 is \"1 2 3\"\
    \ and $2 is \"3 1 2\", then the output should be 1.\n    # This is because the\
    \ third car moving left to right will collide with the\n    # first car moving\
    \ right to left.\n    #\n    # If $1 is \"1 2 3\" and", "    # Write your code\
    \ here\n    # To get the value of the argument passed to the function, use the\
    \ variable $1\n    # For example, passing \"5\" as argument, the value of $1 inside\
    \ the function will be \"5\"\n    # To print the value of an expression to the\
    \ standard output, use the echo command\n    # For example, to print \"Hello World\"\
    , use the following command:\n    # echo \"Hello World\"\n    # To get the number\
    \ of elements in an array, use the following syntax:\n    # ${#array_name[@]}\n\
    \    # For example, if the array cars is declared as\n    # cars=(a b \"c d\"\
    \ e)\n    # The number of elements in the array can be retrieved by ${#cars[@]}\n\
    \    # which evaluates to 4.\n    # To access the i-th element of an array, use\
    \ the following syntax:\n    # ${array_name[i]}\n    # For example, to get the\
    \ first element of the array cars, use ${cars[0]}\n    # which evaluates to \"\
    a\"\n    # To sort an array in ascending order, use the following syntax:\n  \
    \  # read -a sorted_cars <<< $(for a in \"${cars[@]}\"; do echo \"$a\"; done |\
    \ sort)\n    # For example, if cars is declared as\n    # cars=(b a d c)\n   \
    \ # Then, after executing the command above, the array sorted_cars will be\n \
    \   # sorted_cars=(a b c d)\n    # To sort an array in descending order, use the\
    \ following syntax:\n    # read -a sorted_cars <<< $(for a in \"${cars[@]}\";\
    \ do echo \"$a\"; done | sort -r)\n    # For example, if cars is declared as\n\
    \    # cars=(b a d c)\n    # Then, after executing the command above, the array\
    \ sorted_cars will be\n    # sorted_cars=(d c b a)\n    # To get the absolute\
    \ value of a number, use the following syntax:\n    # echo \"$(( number >= 0 ?\
    \ number : -number ))\"\n    # For example, to get the absolute value of -5, use\
    \ the following command:\n    # echo \"$(( -5 >= 0 ? -5 : --5 ))\"\n    #", " \
    \ # Write your code here\n  # You can use the following variables:\n  # - left_to_right_cars:\
    \ an array of integers representing the positions of the cars\n  #   that are\
    \ moving left to right.  The positions are given in ascending order.\n  # - right_to_left_cars:\
    \ an array of integers representing the positions of the cars\n  #   that are\
    \ moving right to left.  The positions are given in descending order.\n  # - n:\
    \ the number of cars in each set.\n  #\n  # You can use the following functions:\n\
    \  # - echo: to output the answer.\n  # - read: to read the input.\n  #\n  # You\
    \ can use any other functions you want.\n  #\n  # The input will be given in the\
    \ following format:\n  # n\n  # left_to_right_car_1 left_to_right_car_2 ... left_to_right_car_n\n\
    \  # right_to_left_car_1 right_to_left_car_2 ... right_to_left_car_n\n  #\n  #\
    \ The output should be a single integer representing the number of collisions.\n\
    \  #\n  # Example:\n  # Input:\n  # 3\n  # 1 2 3\n  # 3 2 1\n  #\n  # Output:\n\
    \  # 2\n  #\n  # Explanation:\n  # The cars at positions 1 and 3 collide.\n  #\
    \ The cars at positions 2 and 2 collide.\n  #\n  # Note:\n  # - The input will\
    \ always be valid.\n  # - The input will always have a solution.\n  # - The input\
    \ will always have a unique solution.\n  # - The input will always have a solution\
    \ that can be computed in O(n) time.\n  # - The input will always have a solution\
    \ that can be computed in O(1) space.\n  #\n  # Hint:\n  # You can use the following\
    \ command to read the input:\n  # read n\n  # read -a left_to_right_cars\n  #\
    \ read -a right_to_left_cars\n  #\n  # You can use the following command to output\
    \ the answer:\n  # echo $answer\n  #\n  # Start", "    # The input is a string\
    \ of n numbers separated by spaces.\n    # The first n numbers represent the left-to-right\
    \ cars, and the next n numbers\n    # represent the right-to-left cars.\n    #\
    \ The numbers represent the position of the cars at the start of the race.\n \
    \   # The cars are numbered from 1 to n.\n    # The cars are sorted in the order\
    \ of their positions.\n    # The cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n    # in their trajectory as if they did not collide.\n\
    \    # The function outputs the number of collisions.\n    #\n    # Example:\n\
    \    # car_race_collision \"1 2 3 4 5 6 7 8 9 10\" \"10 9 8 7 6 5 4 3 2 1\"\n\
    \    #\n    # Explanation:\n    # The left-to-right cars are at positions 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10.\n    # The right-to-left cars are at positions 10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1.\n    # The cars are sorted in the order of their\
    \ positions.\n    # The cars are infinitely sturdy and strong; as a result, they\
    \ continue moving\n    # in their trajectory as if they did not collide.\n   \
    \ # The function outputs the number of collisions.\n    # The answer is 5.\n \
    \   # The collisions are between cars 1 and 10, 2 and 9, 3 and 8, 4 and 7, 5 and\
    \ 6.\n    #\n    # Example:\n    # car_race_collision \"1 2 3 4 5 6 7 8 9 10\"\
    \ \"10 9 8 7 6 5 4 3 2 1\"\n    #\n    # Explanation:\n    # The left-to-right\
    \ cars are at positions 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\n    # The right-to-left\
    \ cars are at positions 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.\n    # The cars are sorted\
    \ in the order of their positions.\n    # The cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    # in their trajectory as if they did\
    \ not collide.\n    # The function outputs the number of", "    # The input is\
    \ a string of n numbers separated by spaces.\n    # The first n numbers are the\
    \ positions of the cars moving left to right.\n    # The next n numbers are the\
    \ positions of the cars moving right to left.\n    # The positions are given in\
    \ ascending order.\n    # The output is the number of collisions.\n    #\n   \
    \ # Example:\n    # input: \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    # output: 0\n    #\n    # input: \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\"\n    # output:\
    \ 20\n    #\n    # input: \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\
    \ 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2\"\n    # output: 19\n    #\n\
    \    # input: \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17\
    \ 16 15 14 13 12 11 10 9 8 7 6 5 4 3\"\n    # output: 18\n    #\n    # input:\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14 13\
    \ 12 11 10 9 8 7 6 5 4\"\n    # output: 17\n    #\n    # input: \"1 2 3 4 5 6\
    \ 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14 13 12 11 10 9 8\
    \ 7 6 5\"\n    # output: 16\n    #\n    # input: \"1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19 20 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6\"\n    # output:\
    \ 15\n    #\n    # input: \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\
    \ 20 19 18 17 16 15 14 13 12 11 10 9 8 7\"\n    # output: 14\n    #\n    # input:\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18", "    # $1 is the number of\
    \ cars driving left to right\n    # $2 is the number of cars driving right to\
    \ left\n    # $3 is the speed of the cars\n    # $4 is the distance between the\
    \ two sets of cars\n    # $5 is the distance between the cars in each set\n  \
    \  # $6 is the distance between the cars in each set\n    # $7 is the distance\
    \ between the cars in each set\n    # $8 is the distance between the cars in each\
    \ set\n    # $9 is the distance between the cars in each set\n    # $10 is the\
    \ distance between the cars in each set\n    # $11 is the distance between the\
    \ cars in each set\n    # $12 is the distance between the cars in each set\n \
    \   # $13 is the distance between the cars in each set\n    # $14 is the distance\
    \ between the cars in each set\n    # $15 is the distance between the cars in\
    \ each set\n    # $16 is the distance between the cars in each set\n    # $17\
    \ is the distance between the cars in each set\n    # $18 is the distance between\
    \ the cars in each set\n    # $19 is the distance between the cars in each set\n\
    \    # $20 is the distance between the cars in each set\n    # $21 is the distance\
    \ between the cars in each set\n    # $22 is the distance between the cars in\
    \ each set\n    # $23 is the distance between the cars in each set\n    # $24\
    \ is the distance between the cars in each set\n    # $25 is the distance between\
    \ the cars in each set\n    # $26 is the distance between the cars in each set\n\
    \    # $27 is the distance between the cars in each set\n    # $28 is the distance\
    \ between the cars in each set\n    # $29 is the distance between the cars in\
    \ each set\n    # $30 is the distance between the cars in each set\n    # $31\
    \ is the distance between the cars in each set\n    # $32 is the distance between\
    \ the cars in each set\n    # $33 is the distance between the cars in each set\n\
    \    # $34 is the distance between the cars in each set\n    # $35 is the distance\
    \ between the cars in each set\n    # $36 is the distance between the cars in\
    \ each set\n    # $37 is the distance between the cars", "    # $1 is the number\
    \ of cars moving left to right\n    # $2 is the number of cars moving right to\
    \ left\n    # $3 is the speed of the cars moving left to right\n    # $4 is the\
    \ speed of the cars moving right to left\n    # $5 is the distance between the\
    \ two sets of cars\n    # $6 is the distance between the cars in each set\n  \
    \  # $7 is the distance between the cars in each set\n    # $8 is the distance\
    \ between the cars in each set\n    # $9 is the distance between the cars in each\
    \ set\n    # $10 is the distance between the cars in each set\n    # $11 is the\
    \ distance between the cars in each set\n    # $12 is the distance between the\
    \ cars in each set\n    # $13 is the distance between the cars in each set\n \
    \   # $14 is the distance between the cars in each set\n    # $15 is the distance\
    \ between the cars in each set\n    # $16 is the distance between the cars in\
    \ each set\n    # $17 is the distance between the cars in each set\n    # $18\
    \ is the distance between the cars in each set\n    # $19 is the distance between\
    \ the cars in each set\n    # $20 is the distance between the cars in each set\n\
    \    # $21 is the distance between the cars in each set\n    # $22 is the distance\
    \ between the cars in each set\n    # $23 is the distance between the cars in\
    \ each set\n    # $24 is the distance between the cars in each set\n    # $25\
    \ is the distance between the cars in each set\n    # $26 is the distance between\
    \ the cars in each set\n    # $27 is the distance between the cars in each set\n\
    \    # $28 is the distance between the cars in each set\n    # $29 is the distance\
    \ between the cars in each set\n    # $30 is the distance between the cars in\
    \ each set\n    # $31 is the distance between the cars in each set\n    # $32\
    \ is the distance between the cars in each set\n    # $33 is the distance between\
    \ the cars in each set\n    # $34 is the distance between the cars in each set\n\
    \    # $35 is the distance between the cars in each set\n    # $36 is the distance\
    \ between the cars in each set\n    # $37 is", "    # Write your code here\n \
    \   # This function takes in two arrays of integers\n    # It should return an\
    \ integer\n    # The first array is the speeds of the cars moving from left to\
    \ right\n    # The second array is the speeds of the cars moving from right to\
    \ left\n    # For example, car_race_collision [1,2,3] [3,2,1] should return 2\n\
    \    # because the cars with speed 2 from the left and the right will collide\n\
    \    # The cars with speed 3 from the left and the right will collide\n    # The\
    \ cars with speed 1 from the left and the right will not collide\n    # because\
    \ the car from the left will have passed the car from the right\n    # before\
    \ they collide\n    # You can assume that the input arrays will always have the\
    \ same length\n    # You can assume that the input arrays will always have at\
    \ least one element\n    # You can assume that the input arrays will always have\
    \ positive integers\n    # You can assume that the input arrays will not have\
    \ duplicate elements\n    # You can assume that the input arrays will be sorted\
    \ in ascending order\n    # You can assume that the input arrays will not be empty\n\
    \    # You can assume that the input arrays will not be null\n    # You can assume\
    \ that the input arrays will not contain null elements\n    # You can assume that\
    \ the input arrays will not contain non-integer elements\n    # You can assume\
    \ that the input arrays will not contain negative integers\n    # You can assume\
    \ that the input arrays will not contain non-unique elements\n    # You can assume\
    \ that the input arrays will not contain non-sorted elements\n    # You can assume\
    \ that the input arrays will not contain non-positive elements\n    # You can\
    \ assume that the input arrays will not contain non-ascending elements\n    #\
    \ You can assume that the input arrays will not contain non-descending elements\n\
    \    # You can assume that the input arrays will not contain non-numeric elements\n\
    \    # You can assume that the input arrays will not contain non-integer elements\n\
    \    # You can assume that the input arrays will not contain non-number elements\n\
    \    # You can assume that the input arrays will not contain non-real elements\n\
    \    # You can assume that the input arrays will not contain non-whole elements\n\
    \    # You can assume that the input arrays will not contain non-natural elements\n\
    \    # You", "    local -i n=$1\n    local -i i j\n    local -i collisions=0\n\
    \    local -a left_to_right=($(echo \"$2\" | tr ' ' '\\n' | sort -n))\n    local\
    \ -a right_to_left=($(echo \"$3\" | tr ' ' '\\n' | sort -n))\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n; j++)); do\n            if (( left_to_right[i]\
    \ > right_to_left[j] )); then\n                (( collisions++ ))\n          \
    \  fi\n        done\n    done\n    echo $collisions", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"Hello world\"", "    # The first line of the\
    \ input contains the number of test cases.\n    # Each test case consists of two\
    \ lines.  The first line contains the number of cars\n    # in the left-to-right\
    \ set.  The second line contains the number of cars in the\n    # right-to-left\
    \ set.\n    # The number of cars in each set is between 1 and 100,000, inclusive.\n\
    \    # The number of test cases is between 1 and 100, inclusive.\n    local n_test_cases=`head\
    \ -n 1`\n    local n_cars_left_to_right\n    local n_cars_right_to_left\n    local\
    \ n_collisions\n    local i\n    for ((i=1; i<=n_test_cases; i++)); do\n     \
    \   n_cars_left_to_right=`head -n $((2*i-1)) | tail -n 1`\n        n_cars_right_to_left=`head\
    \ -n $((2*i)) | tail -n 1`\n        n_collisions=$((n_cars_left_to_right * n_cars_right_to_left))\n\
    \        echo $n_collisions\n    done", "    local n=$1\n    local left_to_right_cars=$2\n\
    \    local right_to_left_cars=$3\n    local collisions=0\n    local i=0\n    local\
    \ j=0\n    local left_to_right_car=0\n    local right_to_left_car=0\n    for ((i=0;\
    \ i<n; i++)); do\n        left_to_right_car=${left_to_right_cars[$i]}\n      \
    \  for ((j=0; j<n; j++)); do\n            right_to_left_car=${right_to_left_cars[$j]}\n\
    \            if [[ $left_to_right_car -eq $right_to_left_car ]]; then\n      \
    \          collisions=$((collisions+1))\n            fi\n        done\n    done\n\
    \    echo $collisions", "    local -a left_to_right_cars\n    local -a right_to_left_cars\n\
    \    local -i i\n    local -i j\n    local -i num_collisions\n    local -i num_cars\n\
    \    local -i left_to_right_car_position\n    local -i right_to_left_car_position\n\
    \n    if [[ $# -ne 2 ]]; then\n        echo \"Usage: car_race_collision <num_cars>\
    \ <max_position>\"\n        return 1\n    fi\n\n    num_cars=$1\n    max_position=$2\n\
    \n    if [[ $num_cars -le 0 ]]; then\n        echo \"num_cars must be positive\"\
    \n        return 1\n    fi\n\n    if [[ $max_position -le 0 ]]; then\n       \
    \ echo \"max_position must be positive\"\n        return 1\n    fi\n\n    # Generate\
    \ the positions of the cars\n    for ((i=0; i<num_cars; i++)); do\n        left_to_right_cars[i]=$((RANDOM\
    \ % max_position))\n        right_to_left_cars[i]=$((RANDOM % max_position))\n\
    \    done\n\n    # Sort the cars\n    left_to_right_cars=($(printf \"%s\\n\" \"\
    ${left_to_right_cars[@]}\" | sort -n))\n    right_to_left_cars=($(printf \"%s\\\
    n\" \"${right_to_left_cars[@]}\" | sort -n))\n\n    # Count the number of collisions\n\
    \    num_collisions=0\n    for ((i=0, j=num_cars-1; i<num_cars; i++, j--)); do\n\
    \        left_to_right_car_position=${left_to_right_cars[i]}\n        right_to_left_car_position=${right_to_left_cars[j]}\n\
    \        if [[ $left_to_right_car_position -gt $right_to_left_car_position ]];\
    \ then\n            ((num_collisions++))\n        fi\n    done\n\n    echo $num_collisions",
  "    # The input is a string of n numbers separated by spaces.\n    # The first\
    \ n numbers are the positions of the cars moving left to right.\n    # The last\
    \ n numbers are the positions of the cars moving right to left.\n    # The positions\
    \ are in the range [0, 1000000].\n    # The output is the number of collisions.\n\
    \    #\n    # For example, if the input is:\n    #\n    # 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\
    \ 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\
    \ 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88\
    \ 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110\
    \ 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129\
    \ 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148\
    \ 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167\
    \ 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186\
    \ 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205\
    \ 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224\
    \ 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243\
    \ 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262\
    \ 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281\
    \ 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300\
    \ 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319\
    \ 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338\
    \ 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357\
    \ 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376\
    \ 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395\
    \ 396 397 398 399 400 401 402 403 404 405 406 407 408", "    # Write your code\
    \ here\n    # To get the value of the argument passed to the function, use the\
    \ variable $1\n    # For example, passing \"5\" as an argument to this function\
    \ would make $1 equal to 5\n    # You can use echo to print to the standard output\
    \ stream\n    # For example, to print the number of collisions, you can use the\
    \ following command:\n    # echo $collisions\n    # You can use the command \"\
    read\" to read from the standard input stream\n    # For example, to read the\
    \ number of cars, you can use the following command:\n    # read n\n    # To read\
    \ the speed of the cars, you can use the following command:\n    # read speed\n\
    \    # To read the position of the cars, you can use the following command:\n\
    \    # read -a positions\n    # The above command will read the position of the\
    \ cars into an array called positions\n    # To access the first element of the\
    \ array, use ${positions[0]}\n    # To access the second element of the array,\
    \ use ${positions[1]}\n    # and so on\n    # You can use bc -l to do floating\
    \ point arithmetic\n    # For example, to calculate 5/2, you can use the following\
    \ command:\n    # echo \"5/2\" | bc -l\n    # To calculate the square root of\
    \ 5, you can use the following command:\n    # echo \"sqrt(5)\" | bc -l\n    #\
    \ To calculate 5^2, you can use the following command:\n    # echo \"5^2\" | bc\
    \ -l\n    # To calculate the sine of pi, you can use the following command:\n\
    \    # echo \"s(pi)\" | bc -l\n    # To calculate the cosine of pi, you can use\
    \ the following command:\n    # echo \"c(pi)\" | bc -l\n    # To calculate the\
    \ tangent of pi, you can use the following command:\n    # echo \"s(pi)/c(pi)\"\
    \ | bc -l\n    # To calculate the inverse sine of 0.5, you can use the following\
    \ command:\n    # echo \"a(0.5)\" | bc -l\n    # To calculate the inverse cosine\
    \ of 0.5, you can use the following command:\n    # echo \"acos", "    local n=$1\n\
    \    local left_to_right_cars=($(echo $2 | tr ' ' '\\n' | sort -n))\n    local\
    \ right_to_left_cars=($(echo $3 | tr ' ' '\\n' | sort -n))\n    local i=0\n  \
    \  local j=0\n    local collisions=0\n    while [ $i -lt $n ] && [ $j -lt $n ];\
    \ do\n        if [ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]} ];\
    \ then\n            ((i++))\n        elif [ ${left_to_right_cars[$i]} -gt ${right_to_left_cars[$j]}\
    \ ]; then\n            ((j++))\n        else\n            ((collisions++))\n \
    \           ((i++))\n            ((j++))\n        fi\n    done\n    echo $collisions",
  "    # The input is a string of n numbers, each number representing the position\
    \ of a car\n    # moving left to right.  The input is also a string of n numbers,\
    \ each number\n    # representing the position of a car moving right to left.\n\
    \    # The output is the number of collisions.\n    #\n    # Example:\n    # Input:\
    \  \"1 2 3 4 5 6 7 8 9 10\", \"10 9 8 7 6 5 4 3 2 1\"\n    # Output: 10\n    #\n\
    \    # Input:  \"1 2 3 4 5 6 7 8 9 10\", \"1 2 3 4 5 6 7 8 9 10\"\n    # Output:\
    \ 0\n    #\n    # Input:  \"1 2 3 4 5 6 7 8 9 10\", \"1 1 1 1 1 1 1 1 1 1\"\n\
    \    # Output: 10\n    #\n    # Input:  \"1 1 1 1 1 1 1 1 1 1\", \"1 2 3 4 5 6\
    \ 7 8 9 10\"\n    # Output: 10\n    #\n    # Input:  \"1 2 3 4 5 6 7 8 9 10\"\
    , \"1 1 1 1 1 1 1 1 1 1\"\n    # Output: 10\n    #\n    # Input:  \"1 2 3 4 5\
    \ 6 7 8 9 10\", \"1 1 1 1 1 1 1 1 1 1\"\n    # Output: 10\n    #\n    # Input:\
    \  \"1 2 3 4 5 6 7 8 9 10\", \"1 1 1 1 1 1 1 1 1 1\"\n    # Output: 10\n    #\n\
    \    # Input:  \"1 2 3 4 5 6 7 8 9 10\", \"1 1 1 1 1 1 1 1 1 1\"\n    # Output:\
    \ 10\n    #\n    # Input:  \"1 2 3 4 5 6 7 8 9 10\", \"1 1 1 1 1 1 1 1 1 1\"\n\
    \    # Output: 10\n    #\n    # Input:  \"1 2 3 4 5 6 7 8 9 10\", \"1 1 1 1 1\
    \ 1 1 1 1 1\"\n    # Output: 10\n    #\n    # Input:  \"1 2 3 4 5 6 7 8 9 10\"\
    , \"1 1 1 1 1 1 1 1 1 1\"\n    # Output: 10\n    #\n    # Input:  \"1 2", "  \
    \  # The following line is a placeholder.  You should replace it with your answer.\n\
    \    echo \"0\"", "    # The first argument is the number of cars moving left\
    \ to right.\n    # The second argument is the number of cars moving right to left.\n\
    \    # The third argument is the speed of the cars.\n    # The fourth argument\
    \ is the distance between the two sets of cars.\n    # The fifth argument is the\
    \ time it takes for the cars to reach the other set of cars.\n    # The sixth\
    \ argument is the time it takes for the cars to reach the end of the road.\n \
    \   # The seventh argument is the time it takes for the cars to reach the starting\
    \ point of the road.\n    # The eighth argument is the time it takes for the cars\
    \ to reach the starting point of the road.\n    # The ninth argument is the time\
    \ it takes for the cars to reach the starting point of the road.\n    # The tenth\
    \ argument is the time it takes for the cars to reach the starting point of the\
    \ road.\n    # The eleventh argument is the time it takes for the cars to reach\
    \ the starting point of the road.\n    # The twelfth argument is the time it takes\
    \ for the cars to reach the starting point of the road.\n    # The thirteenth\
    \ argument is the time it takes for the cars to reach the starting point of the\
    \ road.\n    # The fourteenth argument is the time it takes for the cars to reach\
    \ the starting point of the road.\n    # The fifteenth argument is the time it\
    \ takes for the cars to reach the starting point of the road.\n    # The sixteenth\
    \ argument is the time it takes for the cars to reach the starting point of the\
    \ road.\n    # The seventeenth argument is the time it takes for the cars to reach\
    \ the starting point of the road.\n    # The eighteenth argument is the time it\
    \ takes for the cars to reach the starting point of the road.\n    # The nineteenth\
    \ argument is the time it takes for the cars to reach the starting point of the\
    \ road.\n    # The twentieth argument is the time it takes for the cars to reach\
    \ the starting point of the road.\n    # The twenty-first argument is the time\
    \ it takes for the cars to reach the starting point of the road.\n    # The twenty-second\
    \ argument is the time it takes for the cars to reach the starting point of the\
    \ road.\n    # The twenty-third argument is the time it takes for the cars to\
    \ reach the starting point of the road.\n   ", "    local -a left_to_right_cars\n\
    \    local -a right_to_left_cars\n    local -i i\n    local -i j\n    local -i\
    \ n\n    local -i num_collisions\n    local -i num_left_to_right_cars\n    local\
    \ -i num_right_to_left_cars\n    local -i tmp\n    local -i x\n    local -i y\n\
    \n    # Read the number of cars\n    read n\n\n    # Read the left-to-right cars\n\
    \    read -a left_to_right_cars\n\n    # Read the right-to-left cars\n    read\
    \ -a right_to_left_cars\n\n    # Sort the left-to-right cars\n    num_left_to_right_cars=${#left_to_right_cars[@]}\n\
    \    for ((i=0; i<num_left_to_right_cars; i++)); do\n        for ((j=i+1; j<num_left_to_right_cars;\
    \ j++)); do\n            if [[ ${left_to_right_cars[i]} -gt ${left_to_right_cars[j]}\
    \ ]]; then\n                tmp=${left_to_right_cars[i]}\n                left_to_right_cars[i]=${left_to_right_cars[j]}\n\
    \                left_to_right_cars[j]=$tmp\n            fi\n        done\n  \
    \  done\n\n    # Sort the right-to-left cars\n    num_right_to_left_cars=${#right_to_left_cars[@]}\n\
    \    for ((i=0; i<num_right_to_left_cars; i++)); do\n        for ((j=i+1; j<num_right_to_left_cars;\
    \ j++)); do\n            if [[ ${right_to_left_cars[i]} -gt ${right_to_left_cars[j]}\
    \ ]]; then\n                tmp=${right_to_left_cars[i]}\n                right_to_left_cars[i]=${right_to_left_cars[j]}\n\
    \                right_to_left_cars[j]=$tmp\n            fi\n        done\n  \
    \  done\n\n    #", "    # Write your code here\n    # This function takes in two\
    \ arguments:\n    # 1. A string of the form \"a1,a2,a3,...,an\" where ai is the\
    \ ith car's starting position\n    # 2. A string of the form \"b1,b2,b3,...,bn\"\
    \ where bi is the ith car's starting position\n    # The function should output\
    \ the number of collisions.\n    # For example, if the input is \"1,2,3,4\" and\
    \ \"5,6,7,8\", then the output is 0.\n    # If the input is \"1,2,3,4\" and \"\
    4,3,2,1\", then the output is 4.\n    # If the input is \"1,2,3,4\" and \"2,3,4,5\"\
    , then the output is 2.\n    # If the input is \"1,2,3,4\" and \"3,4,5,6\", then\
    \ the output is 1.\n    # If the input is \"1,2,3,4\" and \"4,5,6,7\", then the\
    \ output is 0.\n    # If the input is \"1,2,3,4\" and \"5,6,7,8\", then the output\
    \ is 0.\n    # If the input is \"1,2,3,4\" and \"6,7,8,9\", then the output is\
    \ 0.\n    # If the input is \"1,2,3,4\" and \"7,8,9,10\", then the output is 0.\n\
    \    # If the input is \"1,2,3,4\" and \"8,9,10,11\", then the output is 0.\n\
    \    # If the input is \"1,2,3,4\" and \"9,10,11,12\", then the output is 0.\n\
    \    # If the input is \"1,2,3,4\" and \"10,11,12,13\", then the output is 0.\n\
    \    # If the input is \"1,2,3,4\" and \"11,12,13,14\", then the output is 0.\n\
    \    # If the input is \"1,2,3,4\" and \"12,13,14,15\", then the output", "  \
    \  # The input is a string of the form \"a1,a2,a3,...,an;b1,b2,b3,...,bn\"\n \
    \   # where a1,a2,a3,...,an are the positions of the cars moving left to right\n\
    \    # and b1,b2,b3,...,bn are the positions of the cars moving right to left.\n\
    \    # The cars are numbered from 1 to n.\n    # The output is the number of collisions.\n\
    \    # For example, if the input is \"1,2,3;4,5,6\", then the output is 0.\n \
    \   # If the input is \"1,2,3;3,2,1\", then the output is 3.\n    # If the input\
    \ is \"1,2,3;1,2,3\", then the output is 3.\n    # If the input is \"1,2,3;2,3,4\"\
    , then the output is 3.\n    # If the input is \"1,2,3;3,4,5\", then the output\
    \ is 3.\n    # If the input is \"1,2,3;4,5,6\", then the output is 0.\n    # If\
    \ the input is \"1,2,3;6,5,4\", then the output is 3.\n    # If the input is \"\
    1,2,3;7,6,5\", then the output is 3.\n    # If the input is \"1,2,3;8,7,6\", then\
    \ the output is 3.\n    # If the input is \"1,2,3;9,8,7\", then the output is\
    \ 3.\n    # If the input is \"1,2,3;10,9,8\", then the output is 3.\n    # If\
    \ the input is \"1,2,3;11,10,9\", then the output is 3.\n    # If the input is\
    \ \"1,2,3;12,11,10\", then the output is 3.\n    # If the input is \"1,2,3;13,12,11\"\
    , then the output is 3.\n    # If the input is \"1,2,3;14,13,12\", then the output\
    \ is 3.\n    # If the input is \"1", "    # Write your code here\n    # This function\
    \ takes in two arrays of integers\n    # It should return an integer\n    #\n\
    \    # For example, if the input arrays are\n    # left_to_right = [1, 2, 3, 4,\
    \ 5]\n    # right_to_left = [5, 4, 3, 2, 1]\n    # Then the output should be 4\n\
    \    #\n    # If the input arrays are\n    # left_to_right = [1, 2, 3, 4, 5]\n\
    \    # right_to_left = [1, 2, 3, 4, 5]\n    # Then the output should be 0\n  \
    \  #\n    # If the input arrays are\n    # left_to_right = [1, 2, 3, 4, 5]\n \
    \   # right_to_left = [1, 2, 3, 4, 6]\n    # Then the output should be 5\n   \
    \ #\n    # If the input arrays are\n    # left_to_right = [1, 2, 3, 4, 5]\n  \
    \  # right_to_left = [6, 5, 4, 3, 2]\n    # Then the output should be 5\n    #\n\
    \    # If the input arrays are\n    # left_to_right = [1, 2, 3, 4, 5]\n    # right_to_left\
    \ = [6, 5, 4, 3, 1]\n    # Then the output should be 4\n    #\n    # If the input\
    \ arrays are\n    # left_to_right = [1, 2, 3, 4, 5]\n    # right_to_left = [6,\
    \ 5, 4, 2, 1]\n    # Then the output should be 3\n    #\n    # If the input arrays\
    \ are\n    # left_to_right = [1, 2, 3, 4, 5]\n    # right_to_left = [6, 5, 3,\
    \ 2, 1]\n    # Then the output should be 2\n    #\n    # If the input arrays are\n\
    \    # left_to_right = [1, 2, 3, 4, 5]\n    # right_to_left = [6, 4, 3, 2, 1]\n\
    \    # Then the output should be 1\n    #", "    # Write your code here\n    #\
    \ This function takes in two arguments:\n    # 1. a string that represents the\
    \ cars moving left to right\n    # 2. a string that represents the cars moving\
    \ right to left\n    #\n    # The output should be the number of collisions\n\
    \    #\n    # For example, if the input is \"ABC\" and \"CBA\", there is one collision\n\
    \    # because the car at index 0 (A) collides with the car at index 2 (A)\n \
    \   #\n    # If the input is \"ABC\" and \"ABC\", there are three collisions\n\
    \    # because the car at index 0 (A) collides with the car at index 2 (A),\n\
    \    # the car at index 1 (B) collides with the car at index 1 (B),\n    # and\
    \ the car at index 2 (C) collides with the car at index 0 (C)\n    #\n    # If\
    \ the input is \"ABC\" and \"DEF\", there are no collisions\n    #\n    # If the\
    \ input is \"ABC\" and \"CDE\", there are two collisions\n    # because the car\
    \ at index 0 (A) collides with the car at index 2 (E),\n    # and the car at index\
    \ 2 (C) collides with the car at index 0 (E)\n    #\n    # If the input is \"\
    ABC\" and \"CBD\", there are two collisions\n    # because the car at index 0\
    \ (A) collides with the car at index 2 (D),\n    # and the car at index 2 (C)\
    \ collides with the car at index 1 (B)\n    #\n    # If the input is \"ABC\" and\
    \ \"CBD\", there are two collisions\n    # because the car at index 0 (A) collides\
    \ with the car at index 2 (D),\n    # and the car at index 2 (C) collides with\
    \ the car at index 1 (B)\n    #\n    # If the input is \"ABC\" and \"CBD\", there\
    \ are two collisions\n    # because the car at index 0 (A) collides with the car\
    \ at index 2 (D),\n    # and the car at index 2 (C) collides with the car at index\
    \ 1 (B)\n    #\n    # If the input is \"ABC\" and \"CBD\", there are two", " \
    \   local -a left_to_right\n    local -a right_to_left\n    local -i i\n    local\
    \ -i j\n    local -i n\n    local -i collisions\n    local -i left_to_right_car_position\n\
    \    local -i right_to_left_car_position\n    local -i left_to_right_car_speed\n\
    \    local -i right_to_left_car_speed\n    local -i left_to_right_car_time\n \
    \   local -i right_to_left_car_time\n    local -i time_to_collision\n    local\
    \ -i time_to_collision_min\n    local -i time_to_collision_min_index\n    local\
    \ -i time_to_collision_min_index_2\n    local -i time_to_collision_min_index_3\n\
    \    local -i time_to_collision_min_index_4\n    local -i time_to_collision_min_index_5\n\
    \    local -i time_to_collision_min_index_6\n    local -i time_to_collision_min_index_7\n\
    \    local -i time_to_collision_min_index_8\n    local -i time_to_collision_min_index_9\n\
    \    local -i time_to_collision_min_index_10\n    local -i time_to_collision_min_index_11\n\
    \    local -i time_to_collision_min_index_12\n    local -i time_to_collision_min_index_13\n\
    \    local -i time_to_collision_min_index_14\n    local -i time_to_collision_min_index_15\n\
    \    local -i time_to_collision_min_index_16\n    local -i time_to_collision_min_index_17\n\
    \    local -i time_to_collision_min_index_18\n    local -i time_to_collision_min_index_19\n\
    \    local -i time_to_collision_min_index_20\n    local -i time_to_collision_min_index_21\n\
    \    local -i", "    # This function takes in two arrays of numbers, each of which\
    \ represents\n    # the starting position of a car.  The first array represents\
    \ the cars\n    # moving left to right, and the second array represents the cars\
    \ moving\n    # right to left.\n    # The function outputs the number of collisions.\n\
    \    #\n    # For example, if the first array is [1, 3, 5, 7] and the second array\
    \ is\n    # [2, 4, 6, 8], then the function should output 4.\n    #\n    # If\
    \ the first array is [1, 3, 5, 7] and the second array is [2, 4, 6, 8, 10],\n\
    \    # then the function should output 5.\n    #\n    # If the first array is\
    \ [1, 3, 5, 7] and the second array is [2, 4, 6, 8, 10, 12],\n    # then the function\
    \ should output 6.\n    #\n    # If the first array is [1, 3, 5, 7] and the second\
    \ array is [2, 4, 6, 8, 10, 12, 14],\n    # then the function should output 7.\n\
    \    #\n    # If the first array is [1, 3, 5, 7] and the second array is [2, 4,\
    \ 6, 8, 10, 12, 14, 16],\n    # then the function should output 8.\n    #\n  \
    \  # If the first array is [1, 3, 5, 7] and the second array is [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18],\n    # then the function should output 9.\n    #\n    # If\
    \ the first array is [1, 3, 5, 7] and the second array is [2, 4, 6, 8, 10, 12,\
    \ 14, 16, 18, 20],\n    # then the function should output 10.\n    #\n    # If\
    \ the first array is [1, 3, 5, 7] and the second array is [2, 4, 6, 8, 10, 12,\
    \ 14, 16, 18, 20, 22],\n    # then the function should output 11.\n    #\n   \
    \ # If the first array is [1, 3, 5, 7] and the second array is [2, 4, 6, 8,",
  "    local -a left_to_right_cars\n    local -a right_to_left_cars\n    local -i\
    \ num_cars\n    local -i i\n    local -i j\n    local -i num_collisions\n    local\
    \ -i left_to_right_car_position\n    local -i right_to_left_car_position\n\n \
    \   # Read the input\n    read num_cars\n    for ((i=0; i<num_cars; i++)); do\n\
    \        read left_to_right_cars[i]\n    done\n    for ((i=0; i<num_cars; i++));\
    \ do\n        read right_to_left_cars[i]\n    done\n\n    # Sort the cars\n  \
    \  left_to_right_cars=($(printf \"%s\\n\" \"${left_to_right_cars[@]}\" | sort\
    \ -n))\n    right_to_left_cars=($(printf \"%s\\n\" \"${right_to_left_cars[@]}\"\
    \ | sort -n))\n\n    # Count the collisions\n    num_collisions=0\n    for ((i=0,\
    \ j=0; i<num_cars && j<num_cars;)); do\n        left_to_right_car_position=${left_to_right_cars[i]}\n\
    \        right_to_left_car_position=${right_to_left_cars[j]}\n        if ((left_to_right_car_position\
    \ < right_to_left_car_position)); then\n            ((i++))\n        elif ((left_to_right_car_position\
    \ > right_to_left_car_position)); then\n            ((j++))\n        else\n  \
    \          ((num_collisions++))\n            ((i++))\n            ((j++))\n  \
    \      fi\n    done\n\n    echo $num_collisions", "    # This function takes in\
    \ two arrays of numbers;\n    # the first array represents the positions of the\
    \ cars moving left to right,\n    # and the second array represents the positions\
    \ of the cars moving right to left.\n    # The function outputs the number of\
    \ collisions.\n    #\n    # The function assumes that the two arrays are sorted\
    \ in ascending order.\n    #\n    # The function assumes that the two arrays are\
    \ of the same length.\n    #\n    # The function assumes that the two arrays are\
    \ of length at least 1.\n    #\n    # The function assumes that the two arrays\
    \ are of length at most 100.\n    #\n    # The function assumes that the two arrays\
    \ are of length at most 100.\n    #\n    # The function assumes that the numbers\
    \ in the two arrays are integers.\n    #\n    # The function assumes that the\
    \ numbers in the two arrays are between -1000000 and 1000000.\n    #\n    # The\
    \ function assumes that the numbers in the two arrays are distinct.\n    #\n \
    \   # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function assumes that the numbers in the two arrays are distinct.\n\
    \    #\n    # The function", "    # This function is a stub.  It is not complete.\n\
    \    # You need to write the code that will compute the number of collisions.\n\
    \    # You can assume that the input is a list of numbers.\n    # The first number\
    \ is the number of cars in the left to right race.\n    # The second number is\
    \ the number of cars in the right to left race.\n    # The remaining numbers are\
    \ the starting positions of the cars in the left to right race.\n    # The remaining\
    \ numbers are the starting positions of the cars in the right to left race.\n\
    \    # The starting positions are all distinct.\n    # The starting positions\
    \ are all non-negative.\n    # The starting positions are all integers.\n    #\
    \ The starting positions are all less than 1000000.\n    # The number of cars\
    \ in the left to right race is less than or equal to the number of cars in the\
    \ right to left race.\n    # The number of cars in the left to right race is less\
    \ than or equal to 100.\n    # The number of cars in the right to left race is\
    \ less than or equal to 100.\n    # The number of cars in the left to right race\
    \ is greater than 0.\n    # The number of cars in the right to left race is greater\
    \ than 0.\n    # The number of cars in the left to right race is an integer.\n\
    \    # The number of cars in the right to left race is an integer.\n    # The\
    \ number of cars in the left to right race is greater than or equal to the number\
    \ of cars in the right to left race.\n    # The number of cars in the left to\
    \ right race is less than or equal to the number of cars in the right to left\
    \ race.\n    # The number of cars in the left to right race is less than or equal\
    \ to the number of cars in the right to left race.\n    # The number of cars in\
    \ the left to right race is less than or equal to the number of cars in the right\
    \ to left race.\n    # The number of cars in the left to right race is less than\
    \ or equal to the number of cars in the right to left race.\n    # The number\
    \ of cars in the left to right race is less than or equal to the number of cars\
    \ in the right to left race.\n    # The number of cars in the left to right race\
    \ is less than or equal to the number of", "    # Write your code here\n    #\
    \ This function takes in two arrays of integers\n    # It should return an integer\n\
    \    #\n    # For example:\n    # left_to_right=(2 5 6 8)\n    # right_to_left=(4\
    \ 7 9 10)\n    # car_race_collision left_to_right right_to_left\n    # should\
    \ return 2\n    #\n    # left_to_right=(1 2 3 4)\n    # right_to_left=(5 6 7 8)\n\
    \    # car_race_collision left_to_right right_to_left\n    # should return 0\n\
    \    #\n    # left_to_right=(1 2 3 4)\n    # right_to_left=(4 3 2 1)\n    # car_race_collision\
    \ left_to_right right_to_left\n    # should return 4\n    #\n    # left_to_right=(1\
    \ 2 3 4)\n    # right_to_left=(4 4 4 4)\n    # car_race_collision left_to_right\
    \ right_to_left\n    # should return 4\n    #\n    # left_to_right=(1 2 3 4)\n\
    \    # right_to_left=(1 2 3 4)\n    # car_race_collision left_to_right right_to_left\n\
    \    # should return 4\n    #\n    # left_to_right=(1 2 3 4)\n    # right_to_left=(2\
    \ 3 4 5)\n    # car_race_collision left_to_right right_to_left\n    # should return\
    \ 4\n    #\n    # left_to_right=(1 2 3 4)\n    # right_to_left=(5 4 3 2)\n   \
    \ # car_race_collision left_to_right right_to_left\n    # should return 4\n  \
    \  #\n    # left_to_right=(1 2 3 4)\n    # right_to_left=(1 1 1 1)\n    # car_race_collision\
    \ left_to_right right_to_left\n    # should return 0\n    #\n    # left_to_right=(1\
    \ 2 3 4)\n    # right_to_left=(1 2 3 4)\n", "    # Write your code here\n    #\
    \ This function takes in one parameter:\n    #   $1: a string of the form \"x1\
    \ x2 x3 ... xn y1 y2 y3 ... yn\"\n    #       where x1, x2, ..., xn are the positions\
    \ of the cars moving left to right\n    #       and y1, y2, ..., yn are the positions\
    \ of the cars moving right to left.\n    #       The positions are given in increasing\
    \ order.\n    #       For example, \"1 2 3 4 5 6 7 8 9 10\" means that there are\
    \ 10 cars,\n    #       and the cars moving left to right are at positions 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10.\n    #       The cars moving right to left are at\
    \ positions 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.\n    #       The positions are always\
    \ integers.\n    #       The positions are always distinct.\n    #       The positions\
    \ are always positive.\n    #       The positions are always less than or equal\
    \ to 100,000.\n    #       The number of cars is always less than or equal to\
    \ 100,000.\n    #       The number of cars is always even.\n    #       The number\
    \ of cars is always greater than 0.\n    #       The number of cars is always\
    \ less than or equal to the number of positions.\n    #       The positions are\
    \ always given in increasing order.\n    #       The positions are always given\
    \ in increasing order.\n    #       The positions are always given in increasing\
    \ order.\n    #       The positions are always given in increasing order.\n  \
    \  #       The positions are always given in increasing order.\n    #       The\
    \ positions are always given in increasing order.\n    #       The positions are\
    \ always given in increasing order.\n    #       The positions are always given\
    \ in increasing order.\n    #       The positions are always given in increasing\
    \ order.\n    #       The positions are always given in increasing order.\n  \
    \  #       The positions are always given in increasing order.\n    #       The\
    \ positions are always given in increasing order.\n    #       The positions are\
    \ always given in increasing order.\n    #       The positions are always given\
    \ in increasing order.\n    #       The positions are always given in increasing\
    \ order.", "    local n=$1\n    local left_to_right=($(echo $2 | tr ' ' '\\n'\
    \ | sort -n))\n    local right_to_left=($(echo $3 | tr ' ' '\\n' | sort -n))\n\
    \    local i=0\n    local j=0\n    local count=0\n    while [ $i -lt $n ] && [\
    \ $j -lt $n ]; do\n        if [ ${left_to_right[$i]} -lt ${right_to_left[$j]}\
    \ ]; then\n            ((i++))\n        elif [ ${left_to_right[$i]} -gt ${right_to_left[$j]}\
    \ ]; then\n            ((j++))\n        else\n            ((count++))\n      \
    \      ((i++))\n            ((j++))\n        fi\n    done\n    echo $count", " \
    \   local -a left_to_right\n    local -a right_to_left\n    local -i i\n    local\
    \ -i j\n    local -i n\n    local -i collisions\n    local -i left_to_right_car_position\n\
    \    local -i right_to_left_car_position\n    local -i left_to_right_car_speed\n\
    \    local -i right_to_left_car_speed\n    local -i left_to_right_car_position_at_collision\n\
    \    local -i right_to_left_car_position_at_collision\n    local -i left_to_right_car_speed_at_collision\n\
    \    local -i right_to_left_car_speed_at_collision\n    local -i left_to_right_car_position_at_collision_at_collision\n\
    \    local -i right_to_left_car_position_at_collision_at_collision\n    local\
    \ -i left_to_right_car_speed_at_collision_at_collision\n    local -i right_to_left_car_speed_at_collision_at_collision\n\
    \    local -i left_to_right_car_position_at_collision_at_collision_at_collision\n\
    \    local -i right_to_left_car_position_at_collision_at_collision_at_collision\n\
    \    local -i left_to_right_car_speed_at_collision_at_collision_at_collision\n\
    \    local -i right_to_left_car_speed_at_collision_at_collision_at_collision\n\
    \    local -i left_to_right_car_position_at_collision_at_collision_at_collision_at_collision\n\
    \    local -i right_to_left_car_position_at_collision_at_collision_at_collision_at_collision\n\
    \    local -i left_to_right_car_speed_at_collision_at_collision_at_collision_at_collision\n\
    \    local -i right_to_left_car_speed_at_collision_at_", "    # $1 is the number\
    \ of cars driving left to right\n    # $2 is the number of cars driving right\
    \ to left\n    # $3 is the speed of the cars\n    # $4 is the distance between\
    \ the two sets of cars\n    # $5 is the distance between the cars in each set\n\
    \    # $6 is the number of seconds the cars have been driving\n    # $7 is the\
    \ number of seconds the cars will continue driving\n    # $8 is the number of\
    \ seconds between collisions\n    # $9 is the number of seconds between collisions\n\
    \    # $10 is the number of seconds between collisions\n    # $11 is the number\
    \ of seconds between collisions\n    # $12 is the number of seconds between collisions\n\
    \    # $13 is the number of seconds between collisions\n    # $14 is the number\
    \ of seconds between collisions\n    # $15 is the number of seconds between collisions\n\
    \    # $16 is the number of seconds between collisions\n    # $17 is the number\
    \ of seconds between collisions\n    # $18 is the number of seconds between collisions\n\
    \    # $19 is the number of seconds between collisions\n    # $20 is the number\
    \ of seconds between collisions\n    # $21 is the number of seconds between collisions\n\
    \    # $22 is the number of seconds between collisions\n    # $23 is the number\
    \ of seconds between collisions\n    # $24 is the number of seconds between collisions\n\
    \    # $25 is the number of seconds between collisions\n    # $26 is the number\
    \ of seconds between collisions\n    # $27 is the number of seconds between collisions\n\
    \    # $28 is the number of seconds between collisions\n    # $29 is the number\
    \ of seconds between collisions\n    # $30 is the number of seconds between collisions\n\
    \    # $31 is the number of seconds between collisions\n    # $32 is the number\
    \ of seconds between collisions\n    # $33 is the number of seconds between collisions\n\
    \    # $34 is the number of seconds between collisions\n    # $35 is the number\
    \ of seconds between collisions\n    # $36 is the number of seconds between collisions\n\
    \    # $37 is the number of seconds between collisions\n    # $38 is the number\
    \ of seconds between collisions\n    # $39 is the number of seconds between collisions\n\
    \    # $40 is the number of seconds between collisions\n    # $41 is the number\
    \ of seconds between collisions\n    # $42 is the", "    # The first line of input\
    \ is the number of cars.\n    # The second line of input is the speed of the cars\
    \ moving left to right.\n    # The third line of input is the speed of the cars\
    \ moving right to left.\n    # The fourth line of input is the starting positions\
    \ of the cars moving left to right.\n    # The fifth line of input is the starting\
    \ positions of the cars moving right to left.\n    # The starting positions are\
    \ given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.\n    # The\
    \ starting positions are given in ascending order.\n    # The starting positions\
    \ are given in ascending order.\n    # The starting positions are given in ascending\
    \ order.\n    # The starting positions are given in ascending order.", "    #\
    \ $1 is the number of cars moving left to right\n    # $2 is the number of cars\
    \ moving right to left\n    # $3 is the speed of the cars\n    # $4 is the distance\
    \ between the two sets of cars\n    # $5 is the distance between the cars within\
    \ each set\n    # $6 is the distance between the cars in the two sets\n    # $7\
    \ is the number of times the cars are allowed to collide\n    # $8 is the number\
    \ of times the cars are allowed to collide\n    # $9 is the number of times the\
    \ cars are allowed to collide\n    # $10 is the number of times the cars are allowed\
    \ to collide\n    # $11 is the number of times the cars are allowed to collide\n\
    \    # $12 is the number of times the cars are allowed to collide\n    # $13 is\
    \ the number of times the cars are allowed to collide\n    # $14 is the number\
    \ of times the cars are allowed to collide\n    # $15 is the number of times the\
    \ cars are allowed to collide\n    # $16 is the number of times the cars are allowed\
    \ to collide\n    # $17 is the number of times the cars are allowed to collide\n\
    \    # $18 is the number of times the cars are allowed to collide\n    # $19 is\
    \ the number of times the cars are allowed to collide\n    # $20 is the number\
    \ of times the cars are allowed to collide\n    # $21 is the number of times the\
    \ cars are allowed to collide\n    # $22 is the number of times the cars are allowed\
    \ to collide\n    # $23 is the number of times the cars are allowed to collide\n\
    \    # $24 is the number of times the cars are allowed to collide\n    # $25 is\
    \ the number of times the cars are allowed to collide\n    # $26 is the number\
    \ of times the cars are allowed to collide\n    # $27 is the number of times the\
    \ cars are allowed to collide\n    # $28 is the number of times the cars are allowed\
    \ to collide\n    # $29 is the number of times the cars are allowed to collide\n\
    \    # $30 is the number of times the cars are allowed to collide\n    # $31 is\
    \ the number of times the cars are allowed to collide\n    # $32 is the number\
    \ of times the cars are allowed to collide\n    # $33 is the number of times the\
    \ cars are allowed", "    # Write your code here\n    # This function takes in\
    \ two arrays of integers\n    # It should return an integer\n    # The first array\
    \ is the starting positions of the cars moving left to right\n    # The second\
    \ array is the starting positions of the cars moving right to left\n    # The\
    \ function should output the number of collisions\n    # For example, if the cars\
    \ moving left to right are at positions [1, 2, 3, 4]\n    # and the cars moving\
    \ right to left are at positions [3, 1, 4, 2]\n    # then there are 2 collisions\
    \ (between 3 and 4, and between 1 and 2)\n    # so the function should return\
    \ 2\n    # Note that the cars are infinitely strong and sturdy, so they won't\
    \ stop\n    # moving even after a collision.\n    # Also note that the cars are\
    \ moving at the same speed, so they will all\n    # reach the same position at\
    \ the same time.\n    #\n    # You can assume that the input arrays are sorted\
    \ in ascending order.\n    # You can assume that the input arrays are not empty.\n\
    \    # You can assume that the input arrays are of the same length.\n    # You\
    \ can assume that the input arrays contain only positive integers.\n    # You\
    \ can assume that the input arrays contain unique elements.\n    #\n    # You\
    \ can use any programming language that you want.\n    # You can use any built-in\
    \ functions or libraries that you want.\n    # You can write additional functions\
    \ if you want.\n    # You can submit a link to a GitHub repo or to a compressed\
    \ file.\n    # You can write up to 500 lines of code.\n    # You can submit up\
    \ to 5 times per day.\n    #\n    # Example 1:\n    # Input:\n    # left_to_right\
    \ = [1, 2, 3, 4]\n    # right_to_left = [3, 1, 4, 2]\n    # Output: 2\n    #\n\
    \    # Example 2:\n    # Input:\n    # left_to_right = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]\n    # right_to_left = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    # Output:\
    \ 5\n    #\n", "    # The input is a string of the form \"1 2 3 4 5 6 7 8 9 10\"\
    \n    # where the first n numbers are the positions of the cars moving left to\
    \ right\n    # and the last n numbers are the positions of the cars moving right\
    \ to left.\n    # The positions are in ascending order.\n    # The output is the\
    \ number of collisions.\n    # For example, if the input is \"1 2 3 4 5 6 7 8\
    \ 9 10 9 8 7 6 5 4 3 2 1\"\n    # then the output is 5.\n    #\n    # Your solution\
    \ here:\n    echo \"Your solution here\"", "  # Input:\n  #   $1: a string of\
    \ n numbers, separated by spaces.  The i-th number is the\n  #       position\
    \ of the i-th car that's driving left to right.\n  #   $2: a string of n numbers,\
    \ separated by spaces.  The i-th number is the\n  #       position of the i-th\
    \ car that's driving right to left.\n  # Output:\n  #   The number of collisions.\n\
    \  # Example:\n  #   car_race_collision \"1 2 3\" \"4 5 6\"\n  #   0\n  #   car_race_collision\
    \ \"1 2 3\" \"3 2 1\"\n  #   2\n  #   car_race_collision \"1 2 3\" \"2 3 1\"\n\
    \  #   3\n  #   car_race_collision \"1 2 3\" \"1 2 3\"\n  #   3\n  #   car_race_collision\
    \ \"1 2 3\" \"3 2 1\"\n  #   2\n  #   car_race_collision \"1 2 3\" \"2 3 1\"\n\
    \  #   3\n  #   car_race_collision \"1 2 3\" \"1 2 3\"\n  #   3\n  #   car_race_collision\
    \ \"1 2 3\" \"3 2 1\"\n  #   2\n  #   car_race_collision \"1 2 3\" \"2 3 1\"\n\
    \  #   3\n  #   car_race_collision \"1 2 3\" \"1 2 3\"\n  #   3\n  #   car_race_collision\
    \ \"1 2 3\" \"3 2 1\"\n  #   2\n  #   car_race_collision \"1 2 3\" \"2 3 1\"\n\
    \  #   3\n  #   car_race_collision \"1 2 3\" \"1 2 3\"\n  #   3\n  #   car_race_collision\
    \ \"1 2 3\" \"3 2 1\"\n  #   2\n  #   car_race_collision \"1 2 3\" \"2 3 1\"\n\
    \  #   3\n  #   car_race_collision \"1 2 3\" \"1 2 3\"\n  #   3\n ", "    # The\
    \ input is a list of integers.  The first n integers are the starting\n    # positions\
    \ of the cars that are moving left to right.  The next n integers\n    # are the\
    \ starting positions of the cars that are moving right to left.\n    # The positions\
    \ are given in ascending order.\n    # The output is the number of collisions.\n\
    \    # Example:\n    #   car_race_collision 1 3 5 7 9 11 2 4 6 8 10 12\n    #\
    \     returns 6\n    #   car_race_collision 1 3 5 7 9 11 2 4 6 8 10 12 14\n  \
    \  #     returns 7\n    #   car_race_collision 1 3 5 7 9 11 2 4 6 8 10 12 14 16\n\
    \    #     returns 8\n    #   car_race_collision 1 3 5 7 9 11 2 4 6 8 10 12 14\
    \ 16 18\n    #     returns 9\n    #   car_race_collision 1 3 5 7 9 11 2 4 6 8\
    \ 10 12 14 16 18 20\n    #     returns 10\n    #   car_race_collision 1 3 5 7\
    \ 9 11 2 4 6 8 10 12 14 16 18 20 22\n    #     returns 11\n    #   car_race_collision\
    \ 1 3 5 7 9 11 2 4 6 8 10 12 14 16 18 20 22 24\n    #     returns 12\n    #  \
    \ car_race_collision 1 3 5 7 9 11 2 4 6 8 10 12 14 16 18 20 22 24 26\n    #  \
    \   returns 13\n    #   car_race_collision 1 3 5 7 9 11 2 4 6 8 10 12 14 16 18\
    \ 20 22 24 26 28\n    #     returns 14\n    #   car_race_collision 1 3 5 7 9 11\
    \ 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30\n    #     returns 15\n    #   car_race_collision\
    \ 1 3 5 7 9 11 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32\n    #     returns\
    \ 16\n    #   car_race_collision 1 3 5 7 9 11 2 4 6 8 10 12 14 16 18 20 22 24\
    \ 26 28 30 32 34\n    #     returns 17\n    #   car_race_collision 1 3 5 7 9 11\
    \ 2 4 6 8 10 12 14 16 18 20 22 24", "    # Write your code here\n    # To get\
    \ the value of an input, use the following syntax:\n    #     input_variable_name=$1\n\
    \    # For example, if the input is \"1 2 3 4 5\",\n    # the first argument can\
    \ be retrieved by \"$1\" and will have a value of \"1\".\n    # The second argument\
    \ can be retrieved by \"$2\" and will have a value of \"2\".\n    # The third\
    \ argument can be retrieved by \"$3\" and will have a value of \"3\".\n    # The\
    \ fourth argument can be retrieved by \"$4\" and will have a value of \"4\".\n\
    \    # The fifth argument can be retrieved by \"$5\" and will have a value of\
    \ \"5\".\n    # Please use the following syntax to print to standard output:\n\
    \    #     echo \"output_variable_name=$output_variable_name\"\n    # For example,\
    \ if the output is \"1 2 3 4 5\",\n    # the output should be \"echo \"output_variable_name=1\
    \ 2 3 4 5\"\"\n    # Note that there is no space after \"=\".\n    # Please refrain\
    \ from using print statements that are incompatible with the\n    # test data\
    \ format (i.e. do not use print statements that prompt the user for input,\n \
    \   # do not print question marks, etc.)\n    # You can write your own test cases\
    \ in the section below.\n    # Your code starts here\n    # Your code ends here",
  "    # Write your code here\n    # This function takes in two arguments, the first\
    \ is an array of integers\n    # representing the positions of the cars moving\
    \ left to right, and the second\n    # is an array of integers representing the\
    \ positions of the cars moving right to left.\n    # The positions are given in\
    \ ascending order.\n    # The function should output the number of collisions.\n\
    \    # For example, if the first array is [1, 2, 3, 4, 5] and the second array\
    \ is [6, 7, 8, 9, 10],\n    # then there are no collisions.  If the first array\
    \ is [1, 2, 3, 4, 5] and the second array is [4, 5, 6, 7, 8],\n    # then there\
    \ are two collisions.\n    # You can assume that the arrays are non-empty and\
    \ have the same length.\n    # You can also assume that the arrays are sorted\
    \ in ascending order.\n    # You can assume that the arrays contain only positive\
    \ integers.\n    # You can assume that the arrays are not null.\n    # You can\
    \ assume that the arrays are not empty.\n    # You can assume that the arrays\
    \ have the same length.\n    # You can assume that the arrays contain only positive\
    \ integers.\n    # You can assume that the arrays are sorted in ascending order.\n\
    \    # You can assume that the arrays are not null.\n    # You can assume that\
    \ the arrays are not empty.\n    # You can assume that the arrays have the same\
    \ length.\n    # You can assume that the arrays contain only positive integers.\n\
    \    # You can assume that the arrays are sorted in ascending order.\n    # You\
    \ can assume that the arrays are not null.\n    # You can assume that the arrays\
    \ are not empty.\n    # You can assume that the arrays have the same length.\n\
    \    # You can assume that the arrays contain only positive integers.\n    # You\
    \ can assume that the arrays are sorted in ascending order.\n    # You can assume\
    \ that the arrays are not null.\n    # You can assume that the arrays are not\
    \ empty.\n    # You can assume that the arrays have the same length.\n    # You\
    \ can assume that the arrays contain only positive integers.\n    # You can assume\
    \ that the arrays are sorted in ascending order.\n    # You can assume that the\
    \ arrays are not null.\n   ", "    local -a left_to_right=($1)\n    local -a right_to_left=($2)\n\
    \    local i\n    local j\n    local count=0\n    for ((i=0; i<${#left_to_right[@]};\
    \ i++)); do\n        for ((j=0; j<${#right_to_left[@]}; j++)); do\n          \
    \  if [[ ${left_to_right[i]} -eq ${right_to_left[j]} ]]; then\n              \
    \  ((count++))\n            fi\n        done\n    done\n    echo $count", "  \
    \  local -a left_to_right_cars\n    local -a right_to_left_cars\n    local -i\
    \ i\n    local -i j\n    local -i n\n    local -i collisions\n    local -i left_to_right_car_speed\n\
    \    local -i right_to_left_car_speed\n    local -i left_to_right_car_position\n\
    \    local -i right_to_left_car_position\n    local -i left_to_right_car_index\n\
    \    local -i right_to_left_car_index\n    local -i left_to_right_car_collision_time\n\
    \    local -i right_to_left_car_collision_time\n    local -i collision_time\n\
    \    local -i left_to_right_car_collision_position\n    local -i right_to_left_car_collision_position\n\
    \    local -i collision_position\n    local -i left_to_right_car_collision_index\n\
    \    local -i right_to_left_car_collision_index\n    local -i collision_index\n\
    \    local -i left_to_right_car_collision_speed\n    local -i right_to_left_car_collision_speed\n\
    \    local -i collision_speed\n    local -i left_to_right_car_collision_distance\n\
    \    local -i right_to_left_car_collision_distance\n    local -i collision_distance\n\
    \    local -i left_to_right_car_collision_distance_squared\n    local -i right_to_left_car_collision_distance_squared\n\
    \    local -i collision_distance_squared\n    local -i left_to_right_car_collision_distance_squared_sum\n\
    \    local -i right_to_left_car_collision_distance_squared_sum\n    local -i collision_distance_squared_sum\n\
    \    local -i left_to_right_car_collision_distance_squared_sum_squared\n    local\
    \ -i right_to_left_car_collision_distance_squared_sum_squared\n    local -i collision_distance_squared_",
  "    local -a left_to_right=($1)\n    local -a right_to_left=($2)\n    local -i\
    \ i j\n    local -i collisions=0\n    for ((i=0; i<${#left_to_right[@]}; i++));\
    \ do\n        for ((j=0; j<${#right_to_left[@]}; j++)); do\n            if ((left_to_right[i]\
    \ == right_to_left[j])); then\n                ((collisions++))\n            fi\n\
    \        done\n    done\n    echo $collisions", "    # Write your code here\n\
    \    # To get the value of an input, use the following syntax:\n    #     input_variable_name=$1\n\
    \    # For example, if the input is \"1 2 3 4 5\",\n    # the value of input_variable_name\
    \ is \"1 2 3 4 5\"\n    #\n    # To store a value to output variable, use the\
    \ following syntax:\n    #     output_variable_name=$variable_name\n    # For\
    \ example,\n    #     output_variable_name=\"Hello world\"\n    #\n    # To store\
    \ a value to output variable, use the following syntax:\n    #     output_variable_name=$variable_name\n\
    \    # For example,\n    #     output_variable_name=\"Hello world\"\n    #\n \
    \   # To store a value to output variable, use the following syntax:\n    #  \
    \   output_variable_name=$variable_name\n    # For example,\n    #     output_variable_name=\"\
    Hello world\"\n    #\n    # To store a value to output variable, use the following\
    \ syntax:\n    #     output_variable_name=$variable_name\n    # For example,\n\
    \    #     output_variable_name=\"Hello world\"\n    #\n    # To store a value\
    \ to output variable, use the following syntax:\n    #     output_variable_name=$variable_name\n\
    \    # For example,\n    #     output_variable_name=\"Hello world\"\n    #\n \
    \   # To store a value to output variable, use the following syntax:\n    #  \
    \   output_variable_name=$variable_name\n    # For example,\n    #     output_variable_name=\"\
    Hello world\"\n    #\n    # To store a value to output variable, use the following\
    \ syntax:\n    #     output_variable_name=$variable_name\n    # For example,\n\
    \    #     output_variable_name=\"Hello world\"\n    #\n    # To store a value\
    \ to output variable, use the following syntax:\n    #     output_variable_name=$variable_name\n\
    \    # For example,\n    #     output_variable_name=\"Hello world\"\n    #\n \
    \   # To store a value to output variable, use the following syntax:\n    #  \
    \   output_variable_name=$variable_name\n   ", "    # The input is a string of\
    \ n numbers, each number representing the position\n    # of a car that's moving\
    \ left to right.  The second line is a string of n numbers,\n    # each number\
    \ representing the position of a car that's moving right to left.\n    # The output\
    \ is the number of collisions.\n    # Example:\n    # Input:\n    # 1 2 3 4 5\
    \ 6 7 8 9 10\n    # 10 9 8 7 6 5 4 3 2 1\n    # Output:\n    # 10\n    # Explanation:\n\
    \    # The first car moving left to right collides with the first car moving right\
    \ to left.\n    # The second car moving left to right collides with the second\
    \ car moving right to left.\n    # The third car moving left to right collides\
    \ with the third car moving right to left.\n    # The fourth car moving left to\
    \ right collides with the fourth car moving right to left.\n    # The fifth car\
    \ moving left to right collides with the fifth car moving right to left.\n   \
    \ # The sixth car moving left to right collides with the sixth car moving right\
    \ to left.\n    # The seventh car moving left to right collides with the seventh\
    \ car moving right to left.\n    # The eighth car moving left to right collides\
    \ with the eighth car moving right to left.\n    # The ninth car moving left to\
    \ right collides with the ninth car moving right to left.\n    # The tenth car\
    \ moving left to right collides with the tenth car moving right to left.\n   \
    \ # The total number of collisions is 10.\n    #\n    # Note:\n    # The input\
    \ is guaranteed to be valid.\n    # The input is guaranteed to have the same number\
    \ of cars moving left to right\n    # as the number of cars moving right to left.\n\
    \    # The input is guaranteed to have at least one car moving left to right and\n\
    \    # at least one car moving right to left.\n    # The input is guaranteed to\
    \ have at least one collision.\n    #\n    # You can assume that the input is\
    \ a string of n numbers, each number representing\n    # the position of a car\
    \ that's moving left to right.  The second line is a string of n numbers,\n  \
    \  # each number representing the position of a car that's moving right to left.\n\
    \    #\n    # You can assume that", "    # Write your code here\n    # This function\
    \ is called with one argument: an array of integers\n    # representing the speeds\
    \ of the cars.  The array is sorted in ascending order.\n    # The first half\
    \ of the array represents the cars moving left to right;\n    # the second half\
    \ of the array represents the cars moving right to left.\n    # For example, if\
    \ the input array is [1, 2, 3, 4, 4, 3, 2, 1],\n    # the first half is [1, 2,\
    \ 3, 4] and the second half is [4, 3, 2, 1].\n    # The function should output\
    \ the number of collisions.\n    # For example, if the input array is [1, 2, 3,\
    \ 4, 4, 3, 2, 1],\n    # the output should be 4.\n    #\n    # Hint:\n    # 1.\
    \ You can use the following command to read the input array:\n    #    input_array=($(cat))\n\
    \    #    This command will read the input and save it into an array.\n    # 2.\
    \ You can use the following command to print the output:\n    #    echo $output\n\
    \    #    This command will print the output.\n    # 3. You can use the following\
    \ command to sort the input array:\n    #    input_array=($(printf '%s\\n' \"\
    ${input_array[@]}\" | sort -n))\n    #    This command will sort the input array\
    \ in ascending order.\n    # 4. You can use the following command to get the length\
    \ of the input array:\n    #    input_array_length=${#input_array[@]}\n    # \
    \   This command will assign the length of the input array to the variable\n \
    \   #    input_array_length.\n    # 5. You can use the following command to get\
    \ the first half of the input array:\n    #    first_half_input_array=(\"${input_array[@]:0:$((input_array_length/2))}\"\
    )\n    #    This command will assign the first half of the input array to the\
    \ variable\n    #    first_half_input_array.\n    # 6. You can use the following\
    \ command to get the second half of the input array:\n    #    second_half", " \
    \   local n=$1\n    local -a left_to_right=($(echo $2 | tr ' ' '\\n' | sort -n))\n\
    \    local -a right_to_left=($(echo $3 | tr ' ' '\\n' | sort -n))\n    local i=0\n\
    \    local j=0\n    local count=0\n    while [ $i -lt $n ] && [ $j -lt $n ]; do\n\
    \        if [ ${left_to_right[$i]} -lt ${right_to_left[$j]} ]; then\n        \
    \    ((i++))\n        elif [ ${left_to_right[$i]} -gt ${right_to_left[$j]} ];\
    \ then\n            ((j++))\n        else\n            ((count++))\n         \
    \   ((i++))\n            ((j++))\n        fi\n    done\n    echo $count", "  \
    \  # The input is a string of n numbers separated by spaces.\n    # The first\
    \ n numbers are the positions of the cars moving left to right.\n    # The last\
    \ n numbers are the positions of the cars moving right to left.\n    # The positions\
    \ are given in ascending order.\n    # The output is the number of collisions.\n\
    \    #\n    # Example:\n    #   car_race_collision \"1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\
    \ 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64\
    \ 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90\
    \ 91 92 93 94 95 96 97 98 99 100\"\n    #   => 4950\n    #\n    # Hint:\n    #\
    \   You can use the following command to get the first n numbers:\n    #     first_n_numbers=$(echo\
    \ $1 | cut -d ' ' -f 1-$n)\n    #   You can use the following command to get the\
    \ last n numbers:\n    #     last_n_numbers=$(echo $1 | cut -d ' ' -f $(($n+1))-100)\n\
    \    #   You can use the following command to get the number of collisions:\n\
    \    #     collisions=$(comm -12 <(echo $first_n_numbers | tr ' ' '\\n' | sort)\
    \ <(echo $last_n_numbers | tr ' ' '\\n' | sort) | wc -l)\n    #   You can use\
    \ the following command to print the output:\n    #     echo $collisions\n   \
    \ #\n    # Your solution starts here:\n    n=$(echo $1 | wc -w)\n    n=$(($n/2))\n\
    \    first_n_numbers=$(echo $1 | cut -d ' ' -f 1-$n)\n    last_n_numbers=$(echo\
    \ $1 | cut -d ' ' -f $(($n+1))-100)\n    collisions=$(comm -12 <(echo $first_n_numbers\
    \ | tr ' '", "    # Write your code here\n    # This function takes in two arrays\
    \ of integers\n    # It should return an integer\n    #\n    # For example:\n\
    \    # left_to_right_cars=(2 5 6 8)\n    # right_to_left_cars=(4 7 9)\n    # car_race_collision\
    \ left_to_right_cars[@] right_to_left_cars[@]\n    # should return 2\n    #\n\
    \    # Hint: You can use the sort command to sort an array\n    #       You can\
    \ use the join command to join an array with a delimiter\n    #       You can\
    \ use the wc command to count the number of lines in a file\n    #       You can\
    \ use the tr command to replace characters\n    #       You can redirect the output\
    \ of a command to a file\n    #       You can use the rm command to delete a file\n\
    \    #       You can use the mv command to rename a file\n    #       You can\
    \ use the cat command to print the contents of a file\n    #       You can use\
    \ the echo command to print a string\n    #       You can use the printf command\
    \ to format a string\n    #       You can use the seq command to generate a sequence\
    \ of numbers\n    #       You can use the head command to print the first few\
    \ lines of a file\n    #       You can use the tail command to print the last\
    \ few lines of a file\n    #       You can use the diff command to compare two\
    \ files\n    #       You can use the wc command to count the number of lines in\
    \ a file\n    #       You can use the bc command to do basic arithmetic\n    #\
    \       You can use the factor command to factorize a number\n    #       You\
    \ can use the tee command to print to both stdout and a file\n    #       You\
    \ can use the paste command to merge lines of files\n    #       You can use the\
    \ uniq command to remove duplicate lines from a file\n    #       You can use\
    \ the cut command to select columns from a file\n    #       You can use the tr\
    \ command to translate characters\n    #       You can use the grep command to\
    \ find lines that match a pattern\n    #       You can use the sed command to\
    \ replace text\n    #       You can use the tr command to delete characters\n\
    \    #       You can use the wc command", "    # The first line of input contains\
    \ an integer n, the number of cars.\n    # The second line contains n integers,\
    \ the position of the cars that are moving left to right.\n    # The third line\
    \ contains n integers, the position of the cars that are moving right to left.\n\
    \    # The position of the cars are integers in the range [0, 1000000000].\n \
    \   # The positions are given in increasing order.\n    # The output is the number\
    \ of collisions.\n    # Example:\n    # Input:\n    # 3\n    # 1 3 5\n    # 2\
    \ 4 8\n    # Output:\n    # 2\n    # Explanation:\n    # The first car moving\
    \ left to right collides with the first car moving right to left.\n    # The third\
    \ car moving left to right collides with the second car moving right to left.\n\
    \    # There are no other collisions.\n    read n\n    read -a left_to_right\n\
    \    read -a right_to_left\n    collisions=0\n    for i in $(seq 0 $((n-1)));\
    \ do\n        if [[ ${left_to_right[$i]} -lt ${right_to_left[$i]} ]]; then\n \
    \           collisions=$((collisions+1))\n        fi\n    done\n    echo $collisions",
  "    # The first argument is the number of cars moving left to right.\n    # The\
    \ second argument is the number of cars moving right to left.\n    # The third\
    \ argument is the speed of the cars.\n    # The fourth argument is the distance\
    \ between the two sets of cars.\n    local n1=$1\n    local n2=$2\n    local speed=$3\n\
    \    local distance=$4\n    local time=$(echo \"scale=2; $distance / $speed\"\
    \ | bc)\n    local collisions=$(echo \"$n1 * $n2\" | bc)\n    echo \"$collisions\
    \ collisions in $time seconds\"", "    # The first line of input is the number\
    \ of cars.\n    local n=$(head -n 1)\n    # The rest of the input is the starting\
    \ positions of the cars.\n    # The first n lines are the starting positions of\
    \ the cars moving left to right.\n    # The next n lines are the starting positions\
    \ of the cars moving right to left.\n    local left_to_right=$(tail -n $n)\n \
    \   local right_to_left=$(tail -n $((n * 2)) | head -n $n)\n    # Sort the cars\
    \ moving left to right.\n    local sorted_left_to_right=$(echo \"$left_to_right\"\
    \ | sort -n)\n    # Sort the cars moving right to left.\n    local sorted_right_to_left=$(echo\
    \ \"$right_to_left\" | sort -n)\n    # The number of collisions is the number\
    \ of cars that are in the same position\n    # in the sorted lists.\n    echo\
    \ \"$sorted_left_to_right\" | paste -d ' ' - \"$sorted_right_to_left\" |\n   \
    \     awk '{if ($1 == $2) print $1}' | wc -l", "    # The idea is to sort the\
    \ cars by their position on the road.\n    # Then, we can count the number of\
    \ collisions by counting the number of cars\n    # that are moving in the opposite\
    \ direction of the car in front of them.\n    # We can do this in O(n) time.\n\
    \    #\n    # The following code is a bit tricky.  It's a bit hard to explain,\
    \ but the idea is\n    # to sort the cars by their position on the road.  Then,\
    \ we can count the number of\n    # collisions by counting the number of cars\
    \ that are moving in the opposite direction\n    # of the car in front of them.\
    \  We can do this in O(n) time.\n    #\n    # The following code is a bit tricky.\
    \  It's a bit hard to explain, but the idea is\n    # to sort the cars by their\
    \ position on the road.  Then, we can count the number of\n    # collisions by\
    \ counting the number of cars that are moving in the opposite direction\n    #\
    \ of the car in front of them.  We can do this in O(n) time.\n    #\n    # The\
    \ following code is a bit tricky.  It's a bit hard to explain, but the idea is\n\
    \    # to sort the cars by their position on the road.  Then, we can count the\
    \ number of\n    # collisions by counting the number of cars that are moving in\
    \ the opposite direction\n    # of the car in front of them.  We can do this in\
    \ O(n) time.\n    #\n    # The following code is a bit tricky.  It's a bit hard\
    \ to explain, but the idea is\n    # to sort the cars by their position on the\
    \ road.  Then, we can count the number of\n    # collisions by counting the number\
    \ of cars that are moving in the opposite direction\n    # of the car in front\
    \ of them.  We can do this in O(n) time.\n    #\n    # The following code is a\
    \ bit tricky.  It's a bit hard to explain, but the idea is\n    # to sort the\
    \ cars by their position on the road.  Then, we can count the number of\n    #\
    \ collisions by counting the number of cars that are moving in the opposite direction\n\
    \    # of the car in front of them.  We can do this in O", "    # $1 is the number\
    \ of cars moving left to right\n    # $2 is the number of cars moving right to\
    \ left\n    # $3 is the speed of the cars\n    # $4 is the distance between the\
    \ two sets of cars\n    # $5 is the length of the road\n    # $6 is the number\
    \ of collisions\n    # $7 is the number of cars that have reached the end of the\
    \ road\n    # $8 is the number of cars that have reached the end of the road\n\
    \    # $9 is the number of cars that have reached the end of the road\n    # $10\
    \ is the number of cars that have reached the end of the road\n    # $11 is the\
    \ number of cars that have reached the end of the road\n    # $12 is the number\
    \ of cars that have reached the end of the road\n    # $13 is the number of cars\
    \ that have reached the end of the road\n    # $14 is the number of cars that\
    \ have reached the end of the road\n    # $15 is the number of cars that have\
    \ reached the end of the road\n    # $16 is the number of cars that have reached\
    \ the end of the road\n    # $17 is the number of cars that have reached the end\
    \ of the road\n    # $18 is the number of cars that have reached the end of the\
    \ road\n    # $19 is the number of cars that have reached the end of the road\n\
    \    # $20 is the number of cars that have reached the end of the road\n    #\
    \ $21 is the number of cars that have reached the end of the road\n    # $22 is\
    \ the number of cars that have reached the end of the road\n    # $23 is the number\
    \ of cars that have reached the end of the road\n    # $24 is the number of cars\
    \ that have reached the end of the road\n    # $25 is the number of cars that\
    \ have reached the end of the road\n    # $26 is the number of cars that have\
    \ reached the end of the road\n    # $27 is the number of cars that have reached\
    \ the end of the road\n    # $28 is the number of cars that have reached the end\
    \ of the road\n    # $29 is the number of cars that have reached the end of the\
    \ road\n    # $30 is the number of cars that have reached the end of the road\n\
    \    # $31 is", "    # Write your code here\n    # To get the value of the argument\
    \ passed to the function, use the variable $1\n    # For example, passing \"5\"\
    \ as argument, would make $1=5\n    # You can access all arguments using $1, $2,\
    \ $3 etc.\n    # To output the result, use the echo command.\n    # For example,\
    \ if your result is \"5\", use the following command:\n    # echo 5\n    # echo\
    \ \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n    # return\n\
    \    # echo \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n\
    \    # return\n    # echo \"Not implemented\"\n    # return\n    # echo \"Not\
    \ implemented\"\n    # return\n    # echo \"Not implemented\"\n    # return\n\
    \    # echo \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n\
    \    # return\n    # echo \"Not implemented\"\n    # return\n    # echo \"Not\
    \ implemented\"\n    # return\n    # echo \"Not implemented\"\n    # return\n\
    \    # echo \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n\
    \    # return\n    # echo \"Not implemented\"\n    # return\n    # echo \"Not\
    \ implemented\"\n    # return\n    # echo \"Not implemented\"\n    # return\n\
    \    # echo \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n\
    \    # return\n    # echo \"Not implemented\"\n    # return\n    # echo \"Not\
    \ implemented\"\n    # return\n    # echo \"Not implemented\"\n    # return\n\
    \    # echo \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n\
    \    # return\n    # echo \"Not implemented\"\n    # return\n    # echo \"Not\
    \ implemented\"\n    # return\n    # echo \"Not implemented\"\n    # return\n\
    \    # echo \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n\
    \    # return\n    # echo \"Not implemented\"\n    # return\n    # echo \"Not\
    \ implemented\"\n    # return\n    # echo \"Not implemented\"\n    # return\n\
    \    # echo \"Not implemented\"\n    # return\n    # echo \"Not implemented\"\n\
    \    # return\n    #", "    local -a left_to_right\n    local -a right_to_left\n\
    \    local -i i\n    local -i j\n    local -i n\n    local -i collision_count\n\
    \    local -i left_to_right_size\n    local -i right_to_left_size\n    local -i\
    \ left_to_right_index\n    local -i right_to_left_index\n    local -i left_to_right_value\n\
    \    local -i right_to_left_value\n\n    collision_count=0\n    left_to_right_size=0\n\
    \    right_to_left_size=0\n    left_to_right_index=0\n    right_to_left_index=0\n\
    \    left_to_right_value=0\n    right_to_left_value=0\n\n    read n\n    for ((i=0;\
    \ i<n; i++)); do\n        read left_to_right[i]\n    done\n    for ((i=0; i<n;\
    \ i++)); do\n        read right_to_left[i]\n    done\n\n    left_to_right_size=${#left_to_right[@]}\n\
    \    right_to_left_size=${#right_to_left[@]}\n\n    while [[ $left_to_right_index\
    \ -lt $left_to_right_size && $right_to_left_index -lt $right_to_left_size ]];\
    \ do\n        left_to_right_value=${left_to_right[$left_to_right_index]}\n   \
    \     right_to_left_value=${right_to_left[$right_to_left_index]}\n        if [[\
    \ $left_to_right_value -lt $right_to_left_value ]]; then\n            left_to_right_index=$((left_to_right_index+1))\n\
    \        elif [[ $left_to_right_value -gt $right_to_left_value ]]; then\n    \
    \        right_to_left_index=$((right_to_left_index+1))\n        else\n      \
    \      collision_count=$((collision_count+1))\n            left_to_right_index=$((",
  "  local -a left_to_right_cars\n  local -a right_to_left_cars\n  local -i i\n  local\
    \ -i j\n  local -i collisions=0\n  local -i n\n  local -i tmp\n\n  # Read the\
    \ number of cars\n  read n\n\n  # Read the left-to-right cars\n  for ((i=0; i<n;\
    \ i++)); do\n    read tmp\n    left_to_right_cars[i]=$tmp\n  done\n\n  # Read\
    \ the right-to-left cars\n  for ((i=0; i<n; i++)); do\n    read tmp\n    right_to_left_cars[i]=$tmp\n\
    \  done\n\n  # Sort the left-to-right cars\n  for ((i=0; i<n; i++)); do\n    for\
    \ ((j=i+1; j<n; j++)); do\n      if ((left_to_right_cars[i] > left_to_right_cars[j]));\
    \ then\n        tmp=${left_to_right_cars[i]}\n        left_to_right_cars[i]=${left_to_right_cars[j]}\n\
    \        left_to_right_cars[j]=$tmp\n      fi\n    done\n  done\n\n  # Sort the\
    \ right-to-left cars\n  for ((i=0; i<n; i++)); do\n    for ((j=i+1; j<n; j++));\
    \ do\n      if ((right_to_left_cars[i] < right_to_left_cars[j])); then\n     \
    \   tmp=${right_to_left_cars[i]}\n        right_to_left_cars[i]=${right_to_left_cars[j]}\n\
    \        right_to_left_cars[j]=$tmp\n      fi\n    done\n  done\n\n  # Count the\
    \ number of collisions\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++));\
    \ do\n      if ((left_to_right_cars[i] < right_to_left_cars[j])); then\n     \
    \   break\n      fi\n      collisions=$((collisions+1", "    # The input is a\
    \ string of n numbers, each number is the position of a car\n    # that's moving\
    \ left to right.  The input is followed by a string of n numbers,\n    # each\
    \ number is the position of a car that's moving right to left.\n    # The output\
    \ is the number of collisions.\n    #\n    # Example:\n    #\n    #   car_race_collision\
    \ \"1 2 3\" \"4 5 6\"\n    #\n    # should output 0 because the cars are too far\
    \ from each other.\n    #\n    #   car_race_collision \"1 2 3\" \"3 4 5\"\n  \
    \  #\n    # should output 1 because the car at position 3 is moving left to right\
    \ and the car\n    # at position 3 is moving right to left.\n    #\n    #   car_race_collision\
    \ \"1 2 3\" \"3 4 5\"\n    #\n    # should output 2 because the car at position\
    \ 2 is moving left to right and the car\n    # at position 4 is moving right to\
    \ left, and the car at position 3 is moving left to right\n    # and the car at\
    \ position 3 is moving right to left.\n    #\n    #   car_race_collision \"1 2\
    \ 3\" \"3 4 5\"\n    #\n    # should output 3 because the car at position 1 is\
    \ moving left to right and the car\n    # at position 5 is moving right to left,\
    \ and the car at position 2 is moving left to right\n    # and the car at position\
    \ 4 is moving right to left, and the car at position 3 is moving left to right\n\
    \    # and the car at position 3 is moving right to left.\n    #\n    #   car_race_collision\
    \ \"1 2 3\" \"3 4 5\"\n    #\n    # should output 3 because the car at position\
    \ 1 is moving left to right and the car\n    # at position 5 is moving right to\
    \ left, and the car at position 2 is moving left to right\n    # and the car at\
    \ position 4 is moving right to left, and the car at position 3 is moving left\
    \ to right\n    # and the car at position 3 is moving right to left.\n    #\n\
    \    #   car_race_collision \"1 2 3\" \"3 4 5\"\n    #\n    #", "    # Write your\
    \ code here\n    # This function takes in two arguments:\n    # $1: the first\
    \ line of the input file\n    # $2: the second line of the input file\n    # The\
    \ first line of the input file contains the number of cars n\n    # The second\
    \ line of the input file contains n integers, each integer\n    # represents the\
    \ position of a car that's moving left to right\n    # The third line of the input\
    \ file contains n integers, each integer\n    # represents the position of a car\
    \ that's moving right to left\n    # The output of this function should be a single\
    \ integer, which is the\n    # number of collisions.\n    # Example:\n    # If\
    \ the input file is:\n    # 4\n    # 1 2 3 4\n    # 5 6 7 8\n    # Then the output\
    \ of this function should be:\n    # 0\n    # If the input file is:\n    # 4\n\
    \    # 1 2 3 4\n    # 4 3 2 1\n    # Then the output of this function should be:\n\
    \    # 4\n    # If the input file is:\n    # 4\n    # 1 2 3 4\n    # 3 4 5 6\n\
    \    # Then the output of this function should be:\n    # 2\n    # If the input\
    \ file is:\n    # 4\n    # 1 2 3 4\n    # 2 3 4 5\n    # Then the output of this\
    \ function should be:\n    # 1\n    # If the input file is:\n    # 4\n    # 1\
    \ 2 3 4\n    # 2 4 6 8\n    # Then the output of this function should be:\n  \
    \  # 0\n    # If the input file is:\n    # 4\n    # 1 2 3 4\n    # 2 4 8 16\n\
    \    # Then the output of this function should be:\n    # 0\n    # If the input\
    \ file is:\n    # 4\n    # 1 2 3 4\n    # 2 4 16 8\n    # Then the output of this\
    \ function should be:\n    # 1\n    # If the input file is:\n    # 4\n    # 1\
    \ 2 3 4\n    # 2 4 16 32\n    # Then the output of this function should be:\n\
    \    # 0\n    # If the input file is:\n    # 4\n    # 1 2", "    # The input is\
    \ a string of numbers separated by spaces.  The first n numbers\n    # are the\
    \ starting positions of the cars moving left to right.  The next n numbers\n \
    \   # are the starting positions of the cars moving right to left.\n    # The\
    \ starting positions are given in increasing order.\n    # The function outputs\
    \ the number of collisions.\n    #\n    # Example:\n    # car_race_collision \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    #\n    # Output:\n \
    \   # 10\n    #\n    # Explanation:\n    # The cars moving left to right are at\
    \ positions 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\n    # The cars moving right to left\
    \ are at positions 20, 19, 18, 17, 16, 15, 14, 13, 12, 11.\n    # The cars moving\
    \ left to right collide with the cars moving right to left at positions\n    #\
    \ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.\n    #\n    # Example:\n    # car_race_collision\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\
    \ 29 30\"\n    #\n    # Output:\n    # 15\n    #\n    # Explanation:\n    # The\
    \ cars moving left to right are at positions 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15.\n    # The cars moving right to left are at positions 30, 29,\
    \ 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16.\n    # The cars moving left\
    \ to right collide with the cars moving right to left at positions\n    # 15,\
    \ 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.\n    #\n    # Example:\n    #\
    \ car_race_collision \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\
    \ 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\"\n    #\n", "    # Write\
    \ your code here\n    # This function takes in one argument, which is an array\
    \ of integers\n    # representing the positions of the cars.  The positions are\
    \ given in\n    # ascending order.\n    # Example:\n    # car_race_collision [1,2,3,4,5,6,7,8,9,10]\n\
    \    # should output 5\n    # car_race_collision [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \    # should output 10\n    # car_race_collision [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n\
    \    # should output 15\n    # car_race_collision [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\n\
    \    # should output 20\n    # car_race_collision [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n\
    \    # should output 25\n    # car_race_collision [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,",
  "    # Write your code here\n    # To get the value of the argument passed to the\
    \ function, use the variable $1\n    # For example, passing \"5\" as argument,\
    \ would make $1=5\n    # Store the output in the variable $output (use the assignment\
    \ operator)\n    # For example, if the output is \"5\", then use: output=\"5\"\
    \n    # You can use echo to print the output variable\n    # For example, if the\
    \ output is \"5\", then use: echo $output\n    # You can use the return keyword\
    \ to return the output variable\n    # For example, if the output is \"5\", then\
    \ use: return $output\n    # You can use the return keyword to return the output\
    \ variable\n    # For example, if the output is \"5\", then use: return $output\n\
    \    # You can use the return keyword to return the output variable\n    # For\
    \ example, if the output is \"5\", then use: return $output\n    # You can use\
    \ the return keyword to return the output variable\n    # For example, if the\
    \ output is \"5\", then use: return $output\n    # You can use the return keyword\
    \ to return the output variable\n    # For example, if the output is \"5\", then\
    \ use: return $output\n    # You can use the return keyword to return the output\
    \ variable\n    # For example, if the output is \"5\", then use: return $output\n\
    \    # You can use the return keyword to return the output variable\n    # For\
    \ example, if the output is \"5\", then use: return $output\n    # You can use\
    \ the return keyword to return the output variable\n    # For example, if the\
    \ output is \"5\", then use: return $output\n    # You can use the return keyword\
    \ to return the output variable\n    # For example, if the output is \"5\", then\
    \ use: return $output\n    # You can use the return keyword to return the output\
    \ variable\n    # For example, if the output is \"5\", then use: return $output\n\
    \    # You can use the return keyword to return the output variable\n    # For\
    \ example, if the output is \"5\", then use: return $output\n    # You can use\
    \ the return keyword to return the output variable\n    # For example, if the\
    \ output is \"5\", then use: return $output\n   ", "    local n=$1\n    local\
    \ left_to_right_cars=($(echo $2 | tr ' ' '\\n' | sort -n))\n    local right_to_left_cars=($(echo\
    \ $3 | tr ' ' '\\n' | sort -n))\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    while [ $i -lt $n ] && [ $j -lt $n ]; do\n        if [ ${left_to_right_cars[$i]}\
    \ -lt ${right_to_left_cars[$j]} ]; then\n            ((i++))\n        elif [ ${left_to_right_cars[$i]}\
    \ -gt ${right_to_left_cars[$j]} ]; then\n            ((j++))\n        else\n \
    \           ((collisions++))\n            ((i++))\n            ((j++))\n     \
    \   fi\n    done\n    echo $collisions", "    # Write your code here\n    # This\
    \ function takes in one argument, which is a string that represents the\n    #\
    \ positions of the cars.  The positions are separated by spaces.  The first\n\
    \    # half of the positions are the positions of the cars that are moving left\
    \ to right.\n    # The second half of the positions are the positions of the cars\
    \ that are moving\n    # right to left.\n    # For example, if the input is \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\",\n    # then the first 10\
    \ numbers are the positions of the cars that are moving left to right.\n    #\
    \ The last 10 numbers are the positions of the cars that are moving right to left.\n\
    \    # The cars that are moving left to right are at positions 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10.\n    # The cars that are moving right to left are at positions\
    \ 20, 19, 18, 17, 16, 15, 14, 13, 12, 11.\n    # The cars that are moving left\
    \ to right are moving to the right.\n    # The cars that are moving right to left\
    \ are moving to the left.\n    # The cars that are moving left to right are moving\
    \ faster than the cars that are moving\n    # right to left.\n    # The cars that\
    \ are moving left to right are infinitely sturdy and strong.\n    # The cars that\
    \ are moving right to left are infinitely sturdy and strong.\n    # The cars that\
    \ are moving left to right are infinitely small.\n    # The cars that are moving\
    \ right to left are infinitely small.\n    # The cars that are moving left to\
    \ right are infinitely light.\n    # The cars that are moving right to left are\
    \ infinitely light.\n    # The cars that are moving left to right are infinitely\
    \ fast.\n    # The cars that are moving right to left are infinitely fast.\n \
    \   # The cars that are moving left to right are infinitely precise.\n    # The\
    \ cars that are moving right to left are infinitely precise.\n    # The cars that\
    \ are moving left to right are infinitely agile.\n    # The cars that are moving\
    \ right to left are infinitely agile.\n    # The cars that are moving left to\
    \ right are infinitely accurate.\n    # The cars that are moving right to left\
    \ are infinitely accurate.\n    # The cars that are moving", "    # The first\
    \ line of the input is n, the number of cars.\n    # The next n lines are the\
    \ starting positions of the cars moving left to right.\n    # The next n lines\
    \ are the starting positions of the cars moving right to left.\n    # All positions\
    \ are integers.\n    # The cars are numbered from 1 to n.\n    # The cars are\
    \ ordered by their starting positions.\n    # The cars are infinitely strong and\
    \ sturdy.\n    # The cars are infinitely small.\n    # The cars move at the same\
    \ speed.\n    # The cars move in a straight line.\n    # The cars move in opposite\
    \ directions.\n    # The cars start out very far from each other.\n    # The cars\
    \ do not change direction.\n    # The cars do not change speed.\n    # The cars\
    \ do not change lanes.\n    # The cars do not change their starting positions.\n\
    \    # The cars do not change their starting directions.\n    # The cars do not\
    \ change their starting speeds.\n    # The cars do not change their starting lanes.\n\
    \    # The cars do not change their ending positions.\n    # The cars do not change\
    \ their ending directions.\n    # The cars do not change their ending speeds.\n\
    \    # The cars do not change their ending lanes.\n    # The cars do not change\
    \ their trajectories.\n    # The cars do not change their sizes.\n    # The cars\
    \ do not change their strengths.\n    # The cars do not change their sturdiness.\n\
    \    # The cars do not change their colors.\n    # The cars do not change their\
    \ models.\n    # The cars do not change their brands.\n    # The cars do not change\
    \ their types.\n    # The cars do not change their weights.\n    # The cars do\
    \ not change their lengths.\n    # The cars do not change their widths.\n    #\
    \ The cars do not change their heights.\n    # The cars do not change their volumes.\n\
    \    # The cars do not change their speeds.\n    # The cars do not change their\
    \ accelerations.\n    # The cars do not change their decelerations.\n    # The\
    \ cars do not change their turning rates.\n    # The cars do not change their\
    \ turning angles.\n    # The cars do not change their turning radii.\n    # The\
    \ cars do not change their turning speeds.\n   ", "    # The first argument is\
    \ the number of cars that are moving left to right.\n    # The second argument\
    \ is the number of cars that are moving right to left.\n    # The third argument\
    \ is the speed of the cars.\n    # The fourth argument is the distance between\
    \ the two sets of cars.\n    # The fifth argument is the length of the road.\n\
    \    # The sixth argument is the time interval between each car's position.\n\
    \    # The seventh argument is the time interval between each car's position.\n\
    \    # The eighth argument is the time interval between each car's position.\n\
    \    # The ninth argument is the time interval between each car's position.\n\
    \    # The tenth argument is the time interval between each car's position.\n\
    \    # The eleventh argument is the time interval between each car's position.\n\
    \    # The twelfth argument is the time interval between each car's position.\n\
    \    # The thirteenth argument is the time interval between each car's position.\n\
    \    # The fourteenth argument is the time interval between each car's position.\n\
    \    # The fifteenth argument is the time interval between each car's position.\n\
    \    # The sixteenth argument is the time interval between each car's position.\n\
    \    # The seventeenth argument is the time interval between each car's position.\n\
    \    # The eighteenth argument is the time interval between each car's position.\n\
    \    # The nineteenth argument is the time interval between each car's position.\n\
    \    # The twentieth argument is the time interval between each car's position.\n\
    \    # The twenty-first argument is the time interval between each car's position.\n\
    \    # The twenty-second argument is the time interval between each car's position.\n\
    \    # The twenty-third argument is the time interval between each car's position.\n\
    \    # The twenty-fourth argument is the time interval between each car's position.\n\
    \    # The twenty-fifth argument is the time interval between each car's position.\n\
    \    # The twenty-sixth argument is the time interval between each car's position.\n\
    \    # The twenty-seventh argument is the time interval between each car's position.\n\
    \    # The twenty-eighth argument is the time interval between each car's position.\n\
    \    # The twenty-ninth argument is the time interval between each car's position.\n\
    \    # The thirtieth argument is the time interval between each car's position.\n\
    \   ", "    # Write your code here\n    # This function takes in two arguments:\n\
    \    # 1. The number of cars driving left to right\n    # 2. The number of cars\
    \ driving right to left\n    # The function should output the number of collisions\n\
    \    # For example, if the function is called like this:\n    # car_race_collision\
    \ 3 4\n    # Then the function should output:\n    # 3\n    # If the function\
    \ is called like this:\n    # car_race_collision 4 3\n    # Then the function\
    \ should output:\n    # 3\n    # If the function is called like this:\n    # car_race_collision\
    \ 3 3\n    # Then the function should output:\n    # 3\n    # If the function\
    \ is called like this:\n    # car_race_collision 4 4\n    # Then the function\
    \ should output:\n    # 6\n    # If the function is called like this:\n    # car_race_collision\
    \ 1 1\n    # Then the function should output:\n    # 0\n    # If the function\
    \ is called like this:\n    # car_race_collision 0 0\n    # Then the function\
    \ should output:\n    # 0\n    # If the function is called like this:\n    # car_race_collision\
    \ 0 1\n    # Then the function should output:\n    # 0\n    # If the function\
    \ is called like this:\n    # car_race_collision 1 0\n    # Then the function\
    \ should output:\n    # 0\n    # If the function is called like this:\n    # car_race_collision\
    \ 0 2\n    # Then the function should output:\n    # 0\n    # If the function\
    \ is called like this:\n    # car_race_collision 2 0\n    # Then the function\
    \ should output:\n    # 0\n    # If the function is called like this:\n    # car_race_collision\
    \ 0 3\n    # Then the function should output:\n    # 0\n    # If the function\
    \ is called like this:\n    # car_race_collision 3 0\n    # Then the function\
    \ should output:\n    # 0\n    # If the function is called like this:\n    # car_race_collision\
    \ 0 4\n    # Then the function should output:\n    # 0", "    # Write your code\
    \ here\n    # This function takes in two parameters:\n    # 1. An array of integers,\
    \ which represents the speed of the cars moving left to right\n    # 2. An array\
    \ of integers, which represents the speed of the cars moving right to left\n \
    \   # The function should output the number of collisions\n    # For example,\
    \ if the input is:\n    # [1,2,3,4,5]\n    # [5,4,3,2,1]\n    # Then the output\
    \ should be:\n    # 5\n    # Because all the cars collide with each other.\n \
    \   # If the input is:\n    # [1,2,3,4,5]\n    # [1,2,3,4,5]\n    # Then the output\
    \ should be:\n    # 0\n    # Because no cars collide with each other.\n    # If\
    \ the input is:\n    # [1,2,3,4,5]\n    # [5,4,3,2,1,6]\n    # Then the output\
    \ should be:\n    # 5\n    # Because the 6th car on the right side does not collide\
    \ with any car on the left side.\n    # If the input is:\n    # [1,2,3,4,5]\n\
    \    # [5,4,3,2,1,6,7]\n    # Then the output should be:\n    # 6\n    # Because\
    \ the 6th and 7th cars on the right side do not collide with any car on the left\
    \ side.\n    # If the input is:\n    # [1,2,3,4,5]\n    # [5,4,3,2,1,6,7,8]\n\
    \    # Then the output should be:\n    # 6\n    # Because the 6th, 7th, and 8th\
    \ cars on the right side do not collide with any car on the left side.\n    #\
    \ If the input is:\n    # [1,2,3,4,5]\n    # [5,4,3,2,1,6,7,8,9]\n    # Then the\
    \ output should be:\n    # 7\n    # Because the 6th, 7th, and 8th cars on the\
    \ right side do not collide with", "    # The input is a list of n integers, where\
    \ the ith integer represents the\n    # position of the ith car that's moving\
    \ left to right.\n    # The input is also a list of n integers, where the ith\
    \ integer represents the\n    # position of the ith car that's moving right to\
    \ left.\n    # The output is the number of collisions.\n    #\n    # For example,\
    \ if the input is\n    # [1, 2, 3, 4]\n    # [5, 6, 7, 8]\n    # then the output\
    \ is 0.\n    #\n    # If the input is\n    # [1, 2, 3, 4]\n    # [4, 3, 2, 1]\n\
    \    # then the output is 4.\n    #\n    # If the input is\n    # [1, 2, 3, 4]\n\
    \    # [3, 2, 1, 0]\n    # then the output is 2.\n    #\n    # If the input is\n\
    \    # [1, 2, 3, 4]\n    # [2, 3, 4, 5]\n    # then the output is 1.\n    #\n\
    \    # If the input is\n    # [1, 2, 3, 4]\n    # [1, 2, 3, 4]\n    # then the\
    \ output is 4.\n    #\n    # If the input is\n    # [1, 2, 3, 4]\n    # [1, 2,\
    \ 3, 5]\n    # then the output is 3.\n    #\n    # If the input is\n    # [1,\
    \ 2, 3, 4]\n    # [1, 2, 3, 6]\n    # then the output is 2.\n    #\n    # If the\
    \ input is\n    # [1, 2, 3, 4]\n    # [1, 2, 3, 7]\n    # then the output is 1.\n\
    \    #\n    # If the input is\n    # [1, 2, 3, 4]\n    # [1, 2, 3, 8]\n    # then\
    \ the output is 0.\n    #\n    # If the input is\n    # [1, 2, 3, 4]\n    # [1,\
    \ 2, 3, 9]\n    # then the output", "    local n=$1\n    local left_to_right_cars=($(echo\
    \ $2 | tr \" \" \"\\n\"))\n    local right_to_left_cars=($(echo $3 | tr \" \"\
    \ \"\\n\"))\n    local collisions=0\n    local i=0\n    local j=0\n    while [\
    \ $i -lt $n ] && [ $j -lt $n ]; do\n        if [ ${left_to_right_cars[$i]} -lt\
    \ ${right_to_left_cars[$j]} ]; then\n            i=$((i+1))\n        elif [ ${left_to_right_cars[$i]}\
    \ -gt ${right_to_left_cars[$j]} ]; then\n            j=$((j+1))\n        else\n\
    \            collisions=$((collisions+1))\n            i=$((i+1))\n          \
    \  j=$((j+1))\n        fi\n    done\n    echo $collisions", "    local n=$1\n\
    \    local left_to_right=$2\n    local right_to_left=$3\n    local collisions=0\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n          \
    \  if [[ ${left_to_right[$i]} -eq ${right_to_left[$j]} ]]; then\n            \
    \    collisions=$((collisions+1))\n            fi\n        done\n    done\n  \
    \  echo $collisions", "    # Write your code here\n    # This function takes in\
    \ one parameter:\n    # $1: a string that represents the cars' positions and directions.\n\
    \    #     The string is formatted as follows:\n    #     The first n characters\
    \ are the positions of the cars moving left to right.\n    #     The last n characters\
    \ are the positions of the cars moving right to left.\n    #     The positions\
    \ are integers between 0 and 9, inclusive.\n    #     The positions are separated\
    \ by a single space.\n    #     The cars are sorted by their positions.\n    #\
    \     For example, the string \"1 2 3 4 5 6 7 8 9 0\" represents 9 cars moving\
    \ left to right\n    #     and 9 cars moving right to left.  The first car moving\
    \ left to right is at position 1,\n    #     the second car moving left to right\
    \ is at position 2, etc.\n    #     The first car moving right to left is at position\
    \ 0, the second car moving right to left\n    #     is at position 9, etc.\n \
    \   #     The string \"1 2 3 4 5 6 7 8 9 0\" does not represent a valid input\
    \ because the cars\n    #     moving left to right and right to left are not sorted.\n\
    \    #     The string \"1 2 3 4 5 6 7 8 9\" does not represent a valid input because\
    \ there are\n    #     not enough cars moving right to left.\n    #     The string\
    \ \"1 2 3 4 5 6 7 8 9 0 1\" does not represent a valid input because there are\n\
    \    #     too many cars moving right to left.\n    #     The string \"1 2 3 4\
    \ 5 6 7 8 9 0 1\" does not represent a valid input because there are\n    #  \
    \   too many cars moving right to left.\n    #     The string \"1 2 3 4 5 6 7\
    \ 8 9 0 1\" does not represent a valid input because there are\n    #     too\
    \ many cars moving right to left.\n    #     The string \"1 2 3 4 5 6 7 8 9 0\
    \ 1\" does not represent a valid input because there are\n    #     too many cars\
    \ moving right to left.\n    #     The string \"1 2 3 4 5 6 7 8 9 0 1\" does not\
    \ represent a valid input because there are\n    #     too many cars moving right\
    \ to left.\n    #", "    local -a left_to_right_cars\n    local -a right_to_left_cars\n\
    \    local -i i\n    local -i j\n    local -i num_collisions=0\n    local -i num_cars=$1\n\
    \    local -i left_to_right_car_speed\n    local -i right_to_left_car_speed\n\
    \    local -i left_to_right_car_position\n    local -i right_to_left_car_position\n\
    \    local -i left_to_right_car_time\n    local -i right_to_left_car_time\n  \
    \  local -i left_to_right_car_time_to_collision\n    local -i right_to_left_car_time_to_collision\n\
    \    local -i left_to_right_car_time_to_collision_min\n    local -i right_to_left_car_time_to_collision_min\n\
    \    local -i left_to_right_car_time_to_collision_min_index\n    local -i right_to_left_car_time_to_collision_min_index\n\
    \    local -i left_to_right_car_time_to_collision_min_index_min\n    local -i\
    \ right_to_left_car_time_to_collision_min_index_min\n    local -i left_to_right_car_time_to_collision_min_index_min_index\n\
    \    local -i right_to_left_car_time_to_collision_min_index_min_index\n    local\
    \ -i left_to_right_car_time_to_collision_min_index_min_index_min\n    local -i\
    \ right_to_left_car_time_to_collision_min_index_min_index_min\n    local -i left_to_right_car_time_to_collision_min_index_min_index_min_index\n\
    \    local -i right_to_left_car_time_to_collision_min_index_min_index_min_index\n\
    \    local -i left_to_right_car_time_to_collision_min", "  # The input is a string\
    \ of the form \"1 2 3 4 5 6 7 8 9\"\n  # where the first n numbers are the positions\
    \ of the cars\n  # moving left to right, and the last n numbers are the positions\n\
    \  # of the cars moving right to left.\n  # The positions are given in increasing\
    \ order.\n  # The output is the number of collisions.\n  # For example, if the\
    \ input is \"1 2 3 4 5 6 7 8 9\", then the output is 0.\n  # If the input is \"\
    1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\", then the output is 8.\n  # If the input\
    \ is \"1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9\", then the output\
    \ is 16.\n  # If the input is \"1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3 4 5\
    \ 6 7 8 9 9 8 7 6 5 4 3 2 1\", then the output is 32.\n  # If the input is \"\
    1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3\
    \ 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\", then the output is 64.\n  # If the input is\
    \ \"1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1\
    \ 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\", then\
    \ the output is 128.\n  # If the input is \"1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2\
    \ 1 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1\
    \ 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\", then\
    \ the output is 256.\n  # If the input is \"1 2 3 4 5", "    # The first line\
    \ of the input contains the number of test cases.\n    # Each test case consists\
    \ of two lines.\n    # The first line contains the number of cars n.\n    # The\
    \ second line contains n integers, the positions of the cars moving left to right.\n\
    \    # The third line contains n integers, the positions of the cars moving right\
    \ to left.\n    # The positions are given in increasing order.\n    # The cars\
    \ are infinitely strong and sturdy, so they do not stop when they collide.\n \
    \   # The output is the number of collisions.\n    #\n    # Example input:\n \
    \   # 2\n    # 3\n    # 1 4 5\n    # 2 3 6\n    # 3\n    # 1 4 5\n    # 2 3 7\n\
    \    #\n    # Example output:\n    # 1\n    # 2\n    #\n    # Explanation:\n \
    \   # In the first test case, the cars moving left to right are at positions 1,\
    \ 4, and 5.\n    # The cars moving right to left are at positions 2, 3, and 6.\n\
    \    # The car moving left to right at position 4 collides with the car moving\
    \ right to left at position 3.\n    # In the second test case, the cars moving\
    \ left to right are at positions 1, 4, and 5.\n    # The cars moving right to\
    \ left are at positions 2, 3, and 7.\n    # The car moving left to right at position\
    \ 4 collides with the car moving right to left at position 3.\n    # The car moving\
    \ left to right at position 5 collides with the car moving right to left at position\
    \ 7.\n    #\n    # Constraints:\n    # 1 <= n <= 100,000\n    # 1 <= position\
    \ of car <= 1,000,000,000\n    #\n    # Challenge:\n    # Solve this problem in\
    \ O(n) time.\n    #\n    ################################################################################\n\
    \    #\n    # This is a solution to the problem that runs in O(n) time.\n    #\n\
    \    # The idea is to use two pointers, one for each direction.\n    # We start\
    \ with the pointers at the beginning of each line.\n    # We then move the pointer\
    \ for the left-to-right line forward until we find a car\n    # that is at a position\
    \ greater", "    local n=$1\n    local left_to_right_cars=($(echo $2 | tr ' '\
    \ '\\n' | sort -n))\n    local right_to_left_cars=($(echo $3 | tr ' ' '\\n' |\
    \ sort -n))\n    local i=0\n    local j=0\n    local count=0\n    while [ $i -lt\
    \ $n ] && [ $j -lt $n ]; do\n        if [ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]}\
    \ ]; then\n            ((i++))\n        elif [ ${left_to_right_cars[$i]} -gt ${right_to_left_cars[$j]}\
    \ ]; then\n            ((j++))\n        else\n            ((count++))\n      \
    \      ((i++))\n            ((j++))\n        fi\n    done\n    echo $count", " \
    \   local n=$1\n    local left_to_right=($(echo $2 | tr ' ' '\\n' | sort -n))\n\
    \    local right_to_left=($(echo $3 | tr ' ' '\\n' | sort -n))\n    local i=0\n\
    \    local j=0\n    local count=0\n    while [ $i -lt $n ] && [ $j -lt $n ]; do\n\
    \        if [ ${left_to_right[$i]} -lt ${right_to_left[$j]} ]; then\n        \
    \    (( i++ ))\n        elif [ ${left_to_right[$i]} -gt ${right_to_left[$j]} ];\
    \ then\n            (( j++ ))\n        else\n            (( count++ ))\n     \
    \       (( i++ ))\n            (( j++ ))\n        fi\n    done\n    echo $count",
  "    local n=$1\n    local left_to_right_cars=($(echo $2 | tr ' ' '\\n' | sort -n))\n\
    \    local right_to_left_cars=($(echo $3 | tr ' ' '\\n' | sort -n))\n    local\
    \ i=0\n    local j=0\n    local collisions=0\n    while [ $i -lt $n ] && [ $j\
    \ -lt $n ]; do\n        if [ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]}\
    \ ]; then\n            i=$((i+1))\n        elif [ ${left_to_right_cars[$i]} -gt\
    \ ${right_to_left_cars[$j]} ]; then\n            j=$((j+1))\n        else\n  \
    \          collisions=$((collisions+1))\n            i=$((i+1))\n            j=$((j+1))\n\
    \        fi\n    done\n    echo $collisions", "    # $1: the number of cars moving\
    \ left to right\n    # $2: the number of cars moving right to left\n    # $3:\
    \ the speed of each car\n    # $4: the position of the first car moving left to\
    \ right\n    # $5: the position of the first car moving right to left\n    # $6:\
    \ the distance between two consecutive cars moving left to right\n    # $7: the\
    \ distance between two consecutive cars moving right to left\n    # $8: the number\
    \ of collisions\n    # $9: the number of cars moving left to right that have already\
    \ collided\n    # $10: the number of cars moving right to left that have already\
    \ collided\n    # $11: the position of the last car moving left to right\n   \
    \ # $12: the position of the last car moving right to left\n    # $13: the time\
    \ it takes for the last car moving left to right to reach the last car moving\
    \ right to left\n    # $14: the time it takes for the last car moving right to\
    \ left to reach the last car moving left to right\n    # $15: the time it takes\
    \ for the last car moving left to right to reach the first car moving right to\
    \ left\n    # $16: the time it takes for the last car moving right to left to\
    \ reach the first car moving left to right\n    # $17: the time it takes for the\
    \ first car moving left to right to reach the first car moving right to left\n\
    \    # $18: the time it takes for the first car moving right to left to reach\
    \ the first car moving left to right\n    # $19: the time it takes for the first\
    \ car moving left to right to reach the last car moving right to left\n    # $20:\
    \ the time it takes for the first car moving right to left to reach the last car\
    \ moving left to right\n    # $21: the time it takes for the first car moving\
    \ left to right to reach the first car moving left to right\n    # $22: the time\
    \ it takes for the first car moving right to left to reach the first car moving\
    \ right to left\n    # $23: the time it takes for the last car moving left to\
    \ right to reach the last car moving left to right\n    # $24: the time it takes\
    \ for the last car moving right to left to reach the last car moving right to\
    \ left\n    # $25: the", "  local n=$1\n  local left_to_right_cars=$2\n  local\
    \ right_to_left_cars=$3\n  local i=0\n  local j=0\n  local collisions=0\n  while\
    \ [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n      if [ ${left_to_right_cars[$i]}\
    \ -eq ${right_to_left_cars[$j]} ]; then\n        collisions=$((collisions+1))\n\
    \      fi\n      j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  echo $collisions",
  "    # Write your code here\n    # This function takes in one parameter:\n    #\
    \ $1: a string of the form \"a1,a2,a3,...,an;b1,b2,b3,...,bn\"\n    # where a1,a2,a3,...,an\
    \ are the positions of the cars moving left to right\n    # and b1,b2,b3,...,bn\
    \ are the positions of the cars moving right to left.\n    # The positions are\
    \ given in increasing order.\n    #\n    # For example, if the input is \"1,3,5;2,4,6\"\
    , it means that there are 3 cars\n    # moving left to right and their positions\
    \ are 1, 3, and 5.  There are also\n    # 3 cars moving right to left and their\
    \ positions are 2, 4, and 6.\n    #\n    # The output of this function should\
    \ be the number of collisions.\n    # For example, if the input is \"1,3,5;2,4,6\"\
    , the output should be 3.\n    #\n    # You can assume that the input is always\
    \ valid.\n    #\n    # Hint: You can use the following command to split the input\
    \ into left and right:\n    # IFS=';' read -ra leftright <<< \"$1\"\n    # This\
    \ command splits the input into an array called leftright.\n    # leftright[0]\
    \ will contain the positions of the cars moving left to right\n    # leftright[1]\
    \ will contain the positions of the cars moving right to left\n    #\n    # Hint:\
    \ You can use the following command to split the left and right into an array\
    \ of positions:\n    # IFS=',' read -ra left <<< \"${leftright[0]}\"\n    # IFS=','\
    \ read -ra right <<< \"${leftright[1]}\"\n    # This command splits the positions\
    \ into an array called left and right.\n    # left[0] will contain the first position\
    \ of the cars moving left to right\n    # left[1] will contain the second position\
    \ of the cars moving left to right\n    # ...\n    # right[0] will contain the\
    \ first position of the cars moving right to left\n    # right[1] will contain\
    \ the second position of the cars moving right to", "    # The first line of input\
    \ is the number of cars.\n    read n\n    # The second line of input is the speed\
    \ of the cars moving left to right.\n    read -a left_to_right\n    # The third\
    \ line of input is the speed of the cars moving right to left.\n    read -a right_to_left\n\
    \    # The output is the number of collisions.\n    # The number of collisions\
    \ is the number of cars that are moving left to right\n    # whose speed is greater\
    \ than the speed of the car that's moving right to left\n    # that's closest\
    \ to it.\n    # The cars moving left to right are sorted in ascending order.\n\
    \    # The cars moving right to left are sorted in descending order.\n    # The\
    \ cars moving left to right are indexed from 0 to n-1.\n    # The cars moving\
    \ right to left are indexed from 0 to n-1.\n    # The car moving left to right\
    \ at index i collides with the car moving right to left\n    # at index i.\n \
    \   # The car moving left to right at index i collides with the car moving right\
    \ to left\n    # at index i if and only if the speed of the car moving left to\
    \ right at index i\n    # is greater than the speed of the car moving right to\
    \ left at index i.\n    # The number of collisions is the number of cars moving\
    \ left to right whose speed\n    # is greater than the speed of the car moving\
    \ right to left that's closest to it.\n    # The number of collisions is the number\
    \ of cars moving left to right whose speed\n    # is greater than the speed of\
    \ the car moving right to left at index i.\n    # The number of collisions is\
    \ the number of cars moving left to right whose speed\n    # is greater than the\
    \ speed of the car moving right to left at index i\n    # for i from 0 to n-1.\n\
    \    # The number of collisions is the number of cars moving left to right whose\
    \ speed\n    # is greater than the speed of the car moving right to left at index\
    \ i\n    # for i from 0 to n-1\n    # summed over i.\n    # The number of collisions\
    \ is the sum of the number of cars moving left to right\n    # whose speed is\
    \ greater than the speed of the car moving right to left at index i\n    # for\
    \ i from", "    # $1 is the number of cars moving left to right\n    # $2 is the\
    \ number of cars moving right to left\n    # $3 is the speed of the cars\n   \
    \ # $4 is the distance between the two sets of cars\n    # $5 is the number of\
    \ seconds to simulate\n    # $6 is the number of seconds between each simulation\n\
    \    # $7 is the name of the output file\n    # $8 is the name of the gnuplot\
    \ script\n    # $9 is the name of the gnuplot output file\n    # $10 is the name\
    \ of the gnuplot data file\n    # $11 is the name of the gnuplot title\n    #\
    \ $12 is the name of the gnuplot x-axis label\n    # $13 is the name of the gnuplot\
    \ y-axis label\n    # $14 is the name of the gnuplot x-axis range\n    # $15 is\
    \ the name of the gnuplot y-axis range\n    # $16 is the name of the gnuplot line\
    \ type\n    # $17 is the name of the gnuplot line color\n    # $18 is the name\
    \ of the gnuplot line width\n    # $19 is the name of the gnuplot point type\n\
    \    # $20 is the name of the gnuplot point color\n    # $21 is the name of the\
    \ gnuplot point size\n    # $22 is the name of the gnuplot point fill\n    # $23\
    \ is the name of the gnuplot point fill color\n    # $24 is the name of the gnuplot\
    \ point fill pattern\n    # $25 is the name of the gnuplot point fill density\n\
    \    # $26 is the name of the gnuplot point fill transparency\n    # $27 is the\
    \ name of the gnuplot point line type\n    # $28 is the name of the gnuplot point\
    \ line color\n    # $29 is the name of the gnuplot point line width\n    # $30\
    \ is the name of the gnuplot point line dashtype\n    # $31 is the name of the\
    \ gnuplot point line dashlength\n    # $32 is the name of the gnuplot point line\
    \ dashspace\n    # $33 is the name of the gnuplot point line dashphase\n    #\
    \ $34 is the name of the gn", "    # Write your code here\n    # To get the value\
    \ of an input, use the following syntax: value=$1\n    # For example, value=$1\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo \"hello\")\n\
    \    # To store the output of a command in a variable, use the following syntax:\
    \ output=$(eval $command)\n    # For example, output=$(eval echo", "    # $1 is\
    \ the number of cars moving left to right\n    # $2 is the number of cars moving\
    \ right to left\n    # $3 is the speed of the cars moving left to right\n    #\
    \ $4 is the speed of the cars moving right to left\n    # $5 is the distance between\
    \ the two sets of cars\n    # $6 is the distance between the cars in the same\
    \ set\n    # $7 is the number of seconds to simulate\n    # $8 is the number of\
    \ seconds to wait before starting the simulation\n    # $9 is the number of seconds\
    \ to wait before starting the simulation\n    # $10 is the number of seconds to\
    \ wait before starting the simulation\n    # $11 is the number of seconds to wait\
    \ before starting the simulation\n    # $12 is the number of seconds to wait before\
    \ starting the simulation\n    # $13 is the number of seconds to wait before starting\
    \ the simulation\n    # $14 is the number of seconds to wait before starting the\
    \ simulation\n    # $15 is the number of seconds to wait before starting the simulation\n\
    \    # $16 is the number of seconds to wait before starting the simulation\n \
    \   # $17 is the number of seconds to wait before starting the simulation\n  \
    \  # $18 is the number of seconds to wait before starting the simulation\n   \
    \ # $19 is the number of seconds to wait before starting the simulation\n    #\
    \ $20 is the number of seconds to wait before starting the simulation\n    # $21\
    \ is the number of seconds to wait before starting the simulation\n    # $22 is\
    \ the number of seconds to wait before starting the simulation\n    # $23 is the\
    \ number of seconds to wait before starting the simulation\n    # $24 is the number\
    \ of seconds to wait before starting the simulation\n    # $25 is the number of\
    \ seconds to wait before starting the simulation\n    # $26 is the number of seconds\
    \ to wait before starting the simulation\n    # $27 is the number of seconds to\
    \ wait before starting the simulation\n    # $28 is the number of seconds to wait\
    \ before starting the simulation\n    # $29 is the number of seconds to wait before\
    \ starting the simulation\n    # $30 is the number of seconds to wait before starting\
    \ the simulation\n    # $31 is the number of seconds to wait before starting the\
    \ simulation\n    # $32 is the number of seconds to wait before starting the simulation\n\
    \    # $33 is the number of seconds to wait before", "    # The input is a string\
    \ of n integers, each in the range [0, n-1].\n    # The i-th integer represents\
    \ the position of the i-th car that's moving left to right.\n    # The j-th integer\
    \ represents the position of the j-th car that's moving right to left.\n    #\
    \ The cars are numbered from 0 to n-1.\n    # The cars are moving at the same\
    \ speed.\n    # The cars are infinitely sturdy and strong.\n    # The cars are\
    \ infinitely long.\n    # The cars are infinitely wide.\n    # The cars are infinitely\
    \ tall.\n    # The cars are perfectly straight.\n    # The cars are perfectly\
    \ flat.\n    # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n\
    \    # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n  \
    \  # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    #\
    \ The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    # The\
    \ cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    # The cars\
    \ are perfectly rigid.\n    # The cars are perfectly rigid.\n    # The cars are\
    \ perfectly rigid.\n    # The cars are perfectly rigid.\n    # The cars are perfectly\
    \ rigid.\n    # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n\
    \    # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n  \
    \  # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    #\
    \ The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    # The\
    \ cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    # The cars\
    \ are perfectly rigid.\n    # The cars are perfectly rigid.\n    # The cars are\
    \ perfectly rigid.\n    # The cars are perfectly rigid.\n    # The cars are perfectly\
    \ rigid.\n    # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n\
    \    # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n  \
    \  # The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    #\
    \ The cars are perfectly rigid.\n    # The cars are perfectly rigid.\n    # The\
    \ cars are perfectly rigid.\n    # The cars are perfectly rigid", "    # The first\
    \ line of the input is an integer n, the number of cars.\n    # The next n lines\
    \ are the positions of the cars that are moving left to right.\n    # The next\
    \ n lines are the positions of the cars that are moving right to left.\n    #\
    \ The positions are integers between 0 and 1000000.\n    # The cars are sorted\
    \ in the order they are moving.\n    # The output is the number of collisions.\n\
    \    # For example, if the input is:\n    #   3\n    #   1\n    #   3\n    # \
    \  5\n    #   2\n    #   4\n    #   6\n    # then the output is:\n    #   2\n\
    \    # because the cars at positions 1 and 2 collide, and the cars at positions\
    \ 3 and 4 collide.\n    #\n    # Hint:  sort the cars in each direction.\n   \
    \ #        Then, use a greedy algorithm to count the number of collisions.\n \
    \   #        The greedy algorithm is:\n    #        1.  Start with the leftmost\
    \ car in the left-to-right direction.\n    #        2.  Find the rightmost car\
    \ in the right-to-left direction that collides with the car in step 1.\n    #\
    \        3.  Count the number of cars in the right-to-left direction that collide\
    \ with the car in step 1.\n    #        4.  Repeat steps 1-3 for the next car\
    \ in the left-to-right direction.\n    #        5.  Repeat steps 1-4 for the next\
    \ car in the left-to-right direction.\n    #        6.  Repeat steps 1-5 until\
    \ there are no more cars in the left-to-right direction.\n    #        7.  Output\
    \ the total number of collisions.\n    #        The greedy algorithm is correct\
    \ because:\n    #        1.  The algorithm always counts the number of collisions\
    \ for each car in the left-to-right direction.\n    #        2.  The algorithm\
    \ never counts a collision twice.\n    #        3.  The algorithm never counts\
    \ a collision that doesn't exist.\n    #        4.  Therefore, the algorithm counts\
    \ the total number of collisions.\n    #        The greedy algorithm is efficient\
    \ because:\n    #        1.  The algorithm only needs to sort the cars once.\n",
  "    # Write your code here\n    #\n    # The following lines read input from the\
    \ standard input.\n    # DO NOT MODIFY THEM.\n    read n\n    read -a left_to_right\n\
    \    read -a right_to_left\n    #\n    # Write your code above.\n    #\n    #\
    \ The following line prints the output.\n    # DO NOT MODIFY IT.\n    echo \"\
    0\"", "    # The first line of the input is the number of cars.\n    read n\n\
    \    # The next n lines are the positions of the cars moving left to right.\n\
    \    # The next n lines are the positions of the cars moving right to left.\n\
    \    # The positions are integers.\n    # The positions are sorted in ascending\
    \ order.\n    # The positions are unique.\n    # The positions are between 0 and\
    \ 10^9, inclusive.\n    # The positions are given in the same order as the cars\
    \ are moving.\n    # The cars are moving at the same speed.\n    # The cars are\
    \ infinitely sturdy and strong.\n    # The cars are infinitely small.\n    # The\
    \ cars are infinitely thin.\n    # The cars are infinitely long.\n    # The cars\
    \ are infinitely wide.\n    # The cars are infinitely tall.\n    # The cars are\
    \ infinitely heavy.\n    # The cars are infinitely light.\n    # The cars are\
    \ infinitely dense.\n    # The cars are infinitely sparse.\n    # The cars are\
    \ infinitely hard.\n    # The cars are infinitely soft.\n    # The cars are infinitely\
    \ elastic.\n    # The cars are infinitely inelastic.\n    # The cars are infinitely\
    \ rigid.\n    # The cars are infinitely flexible.\n    # The cars are infinitely\
    \ strong.\n    # The cars are infinitely weak.\n    # The cars are infinitely\
    \ fast.\n    # The cars are infinitely slow.\n    # The cars are infinitely quick.\n\
    \    # The cars are infinitely agile.\n    # The cars are infinitely nimble.\n\
    \    # The cars are infinitely dexterous.\n    # The cars are infinitely adroit.\n\
    \    # The cars are infinitely skillful.\n    # The cars are infinitely deft.\n\
    \    # The cars are infinitely clever.\n    # The cars are infinitely cunning.\n\
    \    # The cars are infinitely sly.\n    # The cars are infinitely wily.\n   \
    \ # The cars are infinitely tricky.\n    # The cars are infinitely tricky.\n \
    \   # The cars are infinitely tricky.\n    # The cars are infinitely tricky.\n\
    \    # The cars are infinitely tricky.\n    # The cars are infinitely tricky.\n\
    \    # The cars are infinitely tricky.\n    # The cars are infinitely tricky.\n\
    \    # The cars are infinitely tricky.\n    # The cars are infinitely tricky.\n\
    \    # The cars are infinitely tricky", "    # $1 is the number of cars in each\
    \ direction\n    # $2 is the speed of each car\n    # $3 is the starting position\
    \ of the cars moving left to right\n    # $4 is the starting position of the cars\
    \ moving right to left\n    # $5 is the number of collisions\n    # $6 is the\
    \ number of cars that have moved\n    # $7 is the number of cars that have moved\
    \ left to right\n    # $8 is the number of cars that have moved right to left\n\
    \    # $9 is the number of cars that have moved left to right and collided\n \
    \   # $10 is the number of cars that have moved right to left and collided\n \
    \   # $11 is the number of cars that have moved left to right and not collided\n\
    \    # $12 is the number of cars that have moved right to left and not collided\n\
    \    # $13 is the number of cars that have moved left to right and collided and\
    \ not moved\n    # $14 is the number of cars that have moved right to left and\
    \ collided and not moved\n    # $15 is the number of cars that have moved left\
    \ to right and not collided and not moved\n    # $16 is the number of cars that\
    \ have moved right to left and not collided and not moved\n    # $17 is the number\
    \ of cars that have moved left to right and collided and moved\n    # $18 is the\
    \ number of cars that have moved right to left and collided and moved\n    # $19\
    \ is the number of cars that have moved left to right and not collided and moved\n\
    \    # $20 is the number of cars that have moved right to left and not collided\
    \ and moved\n    # $21 is the number of cars that have moved left to right and\
    \ collided and not moved and not collided\n    # $22 is the number of cars that\
    \ have moved right to left and collided and not moved and not collided\n    #\
    \ $23 is the number of cars that have moved left to right and not collided and\
    \ not moved and not collided\n    # $24 is the number of cars that have moved\
    \ right to left and not collided and not moved and not collided\n    # $25 is\
    \ the number of cars that have moved left to right and collided and moved and\
    \ not collided\n    # $26 is the number of cars that have moved right to left\
    \ and collided and moved and not collided\n    # $27 is the number of cars that\
    \ have moved left to", "    # $1 is the number of cars driving left to right\n\
    \    # $2 is the number of cars driving right to left\n    # $3 is the speed of\
    \ the cars\n    # $4 is the distance between the two sets of cars\n    # $5 is\
    \ the maximum distance between two cars in the same set\n    # $6 is the minimum\
    \ distance between two cars in the same set\n    # $7 is the maximum distance\
    \ between two cars in the same set\n    # $8 is the minimum distance between two\
    \ cars in the same set\n    # $9 is the number of times to run the simulation\n\
    \    # $10 is the number of cars to be randomly selected to be tracked\n    #\
    \ $11 is the number of times to run the simulation\n    # $12 is the number of\
    \ cars to be randomly selected to be tracked\n    # $13 is the number of times\
    \ to run the simulation\n    # $14 is the number of cars to be randomly selected\
    \ to be tracked\n    # $15 is the number of times to run the simulation\n    #\
    \ $16 is the number of cars to be randomly selected to be tracked\n    # $17 is\
    \ the number of times to run the simulation\n    # $18 is the number of cars to\
    \ be randomly selected to be tracked\n    # $19 is the number of times to run\
    \ the simulation\n    # $20 is the number of cars to be randomly selected to be\
    \ tracked\n    # $21 is the number of times to run the simulation\n    # $22 is\
    \ the number of cars to be randomly selected to be tracked\n    # $23 is the number\
    \ of times to run the simulation\n    # $24 is the number of cars to be randomly\
    \ selected to be tracked\n    # $25 is the number of times to run the simulation\n\
    \    # $26 is the number of cars to be randomly selected to be tracked\n    #\
    \ $27 is the number of times to run the simulation\n    # $28 is the number of\
    \ cars to be randomly selected to be tracked\n    # $29 is the number of times\
    \ to run the simulation\n    # $30 is the number of cars to be randomly selected\
    \ to be tracked\n    # $31 is the number of times to run the simulation\n    #\
    \ $32 is the number of cars to be randomly selected to be tracked\n    # $33 is\
    \ the number of times to run the simulation\n    # $34 is the number of", "  \
    \  if [ $# -ne 2 ]; then\n        echo \"Usage: car_race_collision <left_to_right_cars>\
    \ <right_to_left_cars>\"\n        return 1\n    fi\n    local left_to_right_cars=\"\
    $1\"\n    local right_to_left_cars=\"$2\"\n    local left_to_right_cars_sorted\n\
    \    local right_to_left_cars_sorted\n    local left_to_right_cars_sorted_array\n\
    \    local right_to_left_cars_sorted_array\n    local left_to_right_cars_sorted_array_length\n\
    \    local right_to_left_cars_sorted_array_length\n    local left_to_right_cars_sorted_array_index\n\
    \    local right_to_left_cars_sorted_array_index\n    local left_to_right_cars_sorted_array_value\n\
    \    local right_to_left_cars_sorted_array_value\n    local collision_count\n\
    \    left_to_right_cars_sorted=$(echo \"$left_to_right_cars\" | tr ' ' '\\n' |\
    \ sort -n)\n    right_to_left_cars_sorted=$(echo \"$right_to_left_cars\" | tr\
    \ ' ' '\\n' | sort -n)\n    left_to_right_cars_sorted_array=($left_to_right_cars_sorted)\n\
    \    right_to_left_cars_sorted_array=($right_to_left_cars_sorted)\n    left_to_right_cars_sorted_array_length=${#left_to_right_cars_sorted_array[@]}\n\
    \    right_to_left_cars_sorted_array_length=${#right_to_left_cars_sorted_array[@]}\n\
    \    left_to_right_cars_sorted_array_index=0\n    right_to_left_cars_sorted_array_index=$((right_to_left_cars_sorted_array_length\
    \ - 1))\n    collision_count=0\n    while [ $left_to_right_cars_sorted_", "  \
    \  # Write your code here\n    # This function takes in two arrays of integers,\
    \ and outputs an integer\n    # Example:\n    # car_race_collision [1,2,3,4] [3,4,1,2]\n\
    \    # should output 2\n    # because the cars at position 1 and position 3 collide,\
    \ as do the cars at position 2 and position 4.\n    # Note that the cars at position\
    \ 1 and position 3 do not collide with each other, because they are moving in\
    \ the same direction.\n    # Similarly, the cars at position 2 and position 4\
    \ do not collide with each other.\n    # Also note that the cars at position 3\
    \ and position 4 do not collide with each other, because they are moving in the\
    \ same direction.\n    #\n    # You can assume that the arrays are of the same\
    \ length.\n    # You can assume that the arrays are non-empty.\n    # You can\
    \ assume that the arrays contain only positive integers.\n    # You can assume\
    \ that the arrays contain only unique integers.\n    # You can assume that the\
    \ arrays are sorted in ascending order.\n    #\n    # You can use any language\
    \ you want.\n    # You can use any built-in functions you want.\n    # You can\
    \ use any data structures you want.\n    # You can write auxiliary functions if\
    \ you want.\n    # You can import libraries if you want.\n    # You can submit\
    \ a link to a GitHub repo if you want.\n    # You can submit a link to a repl.it\
    \ if you want.\n    # You can submit a link to a Codepen if you want.\n    # You\
    \ can submit a link to a JSFiddle if you want.\n    # You can submit a link to\
    \ a CodeSandbox if you want.\n    # You can submit a link to a GitLab repo if\
    \ you want.\n    # You can submit a link to a Bitbucket repo if you want.\n  \
    \  # You can submit a link to a Glitch app if you want.\n    # You can submit\
    \ a link to a Codeanywhere if you want.\n    # You can submit a link to a Cloud9\
    \ if you want.\n    # You can submit a link to a Koding if you want.\n    # You\
    \ can submit a link to a Ideone if you want.\n    # You can submit a link", " \
    \ # This function is a stub.  Replace it with your code.\n  echo 0", "    # The\
    \ following is a naive implementation that runs in O(n^2) time.\n    # It is possible\
    \ to solve this problem in O(n log n) time.\n    #\n    # The following is a naive\
    \ implementation that runs in O(n^2) time.\n    # It is possible to solve this\
    \ problem in O(n log n) time.\n    #\n    # The following is a naive implementation\
    \ that runs in O(n^2) time.\n    # It is possible to solve this problem in O(n\
    \ log n) time.\n    #\n    # The following is a naive implementation that runs\
    \ in O(n^2) time.\n    # It is possible to solve this problem in O(n log n) time.\n\
    \    #\n    # The following is a naive implementation that runs in O(n^2) time.\n\
    \    # It is possible to solve this problem in O(n log n) time.\n    #\n    #\
    \ The following is a naive implementation that runs in O(n^2) time.\n    # It\
    \ is possible to solve this problem in O(n log n) time.\n    #\n    # The following\
    \ is a naive implementation that runs in O(n^2) time.\n    # It is possible to\
    \ solve this problem in O(n log n) time.\n    #\n    # The following is a naive\
    \ implementation that runs in O(n^2) time.\n    # It is possible to solve this\
    \ problem in O(n log n) time.\n    #\n    # The following is a naive implementation\
    \ that runs in O(n^2) time.\n    # It is possible to solve this problem in O(n\
    \ log n) time.\n    #\n    # The following is a naive implementation that runs\
    \ in O(n^2) time.\n    # It is possible to solve this problem in O(n log n) time.\n\
    \    #\n    # The following is a naive implementation that runs in O(n^2) time.\n\
    \    # It is possible to solve this problem in O(n log n) time.\n    #\n    #\
    \ The following is a naive implementation that runs in O(n^2) time.\n    # It\
    \ is possible to solve this problem in O(n log n) time.\n    #\n    # The following\
    \ is a naive", "    # Given a list of numbers, this function outputs the number\
    \ of collisions\n    # between the numbers in the list.  The list is sorted in\
    \ ascending order.\n    # This function assumes that the list is sorted in ascending\
    \ order.\n    # The function is implemented using a divide-and-conquer approach.\n\
    \    # The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-conquer approach.\n    #\
    \ The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-conquer approach.\n    #\
    \ The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-conquer approach.\n    #\
    \ The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-conquer approach.\n    #\
    \ The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-conquer approach.\n    #\
    \ The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-conquer approach.\n    #\
    \ The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-conquer approach.\n    #\
    \ The function is implemented recursively.\n    # The function is implemented\
    \ using a divide-and-conquer approach.\n    # The function is implemented recursively.\n\
    \    # The function is implemented using a divide-and-con", "    # The first line\
    \ of input is the number of cars.\n    read n\n    # The next n lines of input\
    \ are the positions of the cars moving left to right.\n    # The next n lines\
    \ of input are the positions of the cars moving right to left.\n    # The positions\
    \ are integers.\n    # The cars are sorted in the order they appear on the road.\n\
    \    # The cars are numbered from 1 to n.\n    # The cars are infinitely small\
    \ and can be treated as points.\n    # The cars are infinitely strong and can\
    \ be treated as lines.\n    # The cars are infinitely fast and can be treated\
    \ as lines.\n    # The cars are infinitely long and can be treated as lines.\n\
    \    # The cars are infinitely wide and can be treated as lines.\n    # The cars\
    \ are infinitely tall and can be treated as lines.\n    # The cars are infinitely\
    \ heavy and can be treated as lines.\n    # The cars are infinitely light and\
    \ can be treated as lines.\n    # The cars are infinitely dense and can be treated\
    \ as lines.\n    # The cars are infinitely sparse and can be treated as lines.\n\
    \    # The cars are infinitely elastic and can be treated as lines.\n    # The\
    \ cars are infinitely rigid and can be treated as lines.\n    # The cars are infinitely\
    \ flexible and can be treated as lines.\n    # The cars are infinitely strong\
    \ and can be treated as lines.\n    # The cars are infinitely weak and can be\
    \ treated as lines.\n    # The cars are infinitely hard and can be treated as\
    \ lines.\n    # The cars are infinitely soft and can be treated as lines.\n  \
    \  # The cars are infinitely sharp and can be treated as lines.\n    # The cars\
    \ are infinitely blunt and can be treated as lines.\n    # The cars are infinitely\
    \ pointy and can be treated as lines.\n    # The cars are infinitely round and\
    \ can be treated as lines.\n    # The cars are infinitely smooth and can be treated\
    \ as lines.\n    # The cars are infinitely rough and can be treated as lines.\n\
    \    # The cars are infinitely slippery and can be treated as lines.\n    # The\
    \ cars are infinitely sticky and can be treated as lines.\n    # The cars are\
    \ infinitely wet and can be treated as lines.\n    # The cars are infinitely dry\
    \ and can be treated as lines.\n    # The cars are infinitely hot and can be treated",
  "    # The first line of the input contains the number of cars n.\n    # The second\
    \ line contains n integers, the positions of the cars moving left to right.\n\
    \    # The third line contains n integers, the positions of the cars moving right\
    \ to left.\n    # The positions are given in increasing order.\n    # The output\
    \ is the number of collisions.\n    # Example:\n    # Input:\n    # 3\n    # 1\
    \ 2 3\n    # 3 2 1\n    # Output:\n    # 2\n    # Explanation:\n    # The cars\
    \ moving left to right are at positions 1, 2, 3.\n    # The cars moving right\
    \ to left are at positions 3, 2, 1.\n    # The first collision happens when the\
    \ car at position 1 meets the car at position 3.\n    # The second collision happens\
    \ when the car at position 2 meets the car at position 2.\n    # The car at position\
    \ 3 never meets any car.\n    #\n    # Your solution here\n    read n\n    read\
    \ -a left\n    read -a right\n    collisions=0\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=0; j<n; j++)); do\n            if [[ ${left[$i]} -gt ${right[$j]}\
    \ ]]; then\n                ((collisions++))\n            fi\n        done\n \
    \   done\n    echo $collisions", "    # Write your code here\n    #\n    # Input:\n\
    \    #   $1 - a string of n numbers, separated by spaces, where each number represents\n\
    \    #        the position of a car moving left to right.\n    #   $2 - a string\
    \ of n numbers, separated by spaces, where each number represents\n    #     \
    \   the position of a car moving right to left.\n    #\n    # Output:\n    # \
    \  A single number, the number of collisions.\n    #\n    # Example:\n    #  \
    \ car_race_collision \"1 2 3 4 5\" \"5 4 3 2 1\"\n    #   > 0\n    #\n    #  \
    \ car_race_collision \"1 2 3 4 5\" \"4 3 2 1\"\n    #   > 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 4 3 2\"\n    #   > 2\n    #\n    #   car_race_collision \"\
    1 2 3 4 5\" \"5 4 3 2 0\"\n    #   > 3\n    #\n    #   car_race_collision \"1\
    \ 2 3 4 5\" \"5 4 3 2 1 0\"\n    #   > 4\n    #\n    #   car_race_collision \"\
    1 2 3 4 5\" \"5 4 3 2 1 0 -1\"\n    #   > 5\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 4 3 2 1 0 -1 -2\"\n    #   > 6\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 4 3 2 1 0 -1 -2 -3\"\n    #   > 7\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 4 3 2 1 0 -1 -2 -3 -4\"\n    #   > 8\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 4 3 2 1 0 -1 -2 -3 -4 -5\"\n    #   > 9\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 4 3 2 1 0 -1 -2 -3 -4 -5", "    # Write your code here\n \
    \   #\n    # Input:\n    #   $1: a string of n integers, separated by space, representing\
    \ the positions of the cars\n    #   moving left to right.\n    #   $2: a string\
    \ of n integers, separated by space, representing the positions of the cars\n\
    \    #   moving right to left.\n    # Output:\n    #   The number of collisions.\n\
    \    # Example:\n    #   car_race_collision \"1 2 3 4\" \"5 6 7 8\"\n    #   returns\
    \ 0.\n    #   car_race_collision \"1 2 3 4\" \"5 4 3 2\"\n    #   returns 2.\n\
    \    # Note:\n    #   You may assume that the input is always valid.\n    #  \
    \ You may assume that the input is always valid.\n    #   You may assume that\
    \ the input is always valid.\n    #   You may assume that the input is always\
    \ valid.\n    #   You may assume that the input is always valid.\n    #   You\
    \ may assume that the input is always valid.\n    #   You may assume that the\
    \ input is always valid.\n    #   You may assume that the input is always valid.\n\
    \    #   You may assume that the input is always valid.\n    #   You may assume\
    \ that the input is always valid.\n    #   You may assume that the input is always\
    \ valid.\n    #   You may assume that the input is always valid.\n    #   You\
    \ may assume that the input is always valid.\n    #   You may assume that the\
    \ input is always valid.\n    #   You may assume that the input is always valid.\n\
    \    #   You may assume that the input is always valid.\n    #   You may assume\
    \ that the input is always valid.\n    #   You may assume that the input is always\
    \ valid.\n    #   You may assume that the input is always valid.\n    #   You\
    \ may assume that the input is always valid.\n    #   You may assume that the\
    \ input is always valid.\n    #   You may assume that the input is always valid.\n\
    \    #   You may assume that the input is always valid.\n    #   You may assume\
    \ that the input is always valid.\n    #   You may assume that the input is always\
    \ valid.\n", "    # Write your code here\n    # To get the value of the argument\
    \ passed to the function, use the variable $1\n    # For example, passing \"5\"\
    \ as argument, to this function would make $1=5\n    # You can write to the standard\
    \ output using 'echo'\n    # To debug / print intermediate calculations, use '>&2\
    \ echo' instead of 'echo'\n    # The last line of output will be considered as\
    \ the output of the function\n    # The standard output of the function will be\
    \ printed by the test script\n    # The standard error of the function will be\
    \ ignored by the test script\n    # The function is expected to return an integer\
    \ value\n    # The test script will check if the output of the function is an\
    \ integer\n    # If the output is not an integer, the test script will print an\
    \ error message\n    # and the test case will fail\n    # The test script will\
    \ check if the output of the function is correct\n    # If the output is not correct,\
    \ the test script will print an error message\n    # and the test case will fail\n\
    \    # The test script will check if the function runs in the expected time\n\
    \    # If the function takes too long to run, the test script will print an error\
    \ message\n    # and the test case will fail\n    # The test script will check\
    \ if the function uses too much memory\n    # If the function uses too much memory,\
    \ the test script will print an error message\n    # and the test case will fail\n\
    \    # The test script will check if the function uses too much disk space\n \
    \   # If the function uses too much disk space, the test script will print an\
    \ error message\n    # and the test case will fail\n    # The test script will\
    \ check if the function uses too much network bandwidth\n    # If the function\
    \ uses too much network bandwidth, the test script will print an error message\n\
    \    # and the test case will fail\n    # The test script will check if the function\
    \ uses too much CPU time\n    # If the function uses too much CPU time, the test\
    \ script will print an error message\n    # and the test case will fail\n    #\
    \ The test script will check if the function uses too much CPU instructions\n\
    \    # If the function uses too much CPU instructions, the test script will print\
    \ an error message\n    # and the test case will fail\n    # The test script will\
    \ check if the", "    # $1 is the number of cars moving left to right\n    # $2\
    \ is the number of cars moving right to left\n    # $3 is the speed of the cars\
    \ moving left to right\n    # $4 is the speed of the cars moving right to left\n\
    \    # $5 is the starting position of the cars moving left to right\n    # $6\
    \ is the starting position of the cars moving right to left\n    # $7 is the time\
    \ at which the cars start moving\n    # $8 is the time at which the cars stop\
    \ moving\n    # $9 is the time interval at which the position of the cars is recorded\n\
    \    # $10 is the time interval at which the collision is checked\n    # $11 is\
    \ the output file\n    # $12 is the output file for the collision\n    # $13 is\
    \ the output file for the collision count\n    # $14 is the output file for the\
    \ collision time\n    # $15 is the output file for the collision position\n  \
    \  # $16 is the output file for the collision speed\n    # $17 is the output file\
    \ for the collision acceleration\n    # $18 is the output file for the collision\
    \ jerk\n    # $19 is the output file for the collision snap\n    # $20 is the\
    \ output file for the collision crackle\n    # $21 is the output file for the\
    \ collision pop\n    # $22 is the output file for the collision collision\n  \
    \  # $23 is the output file for the collision collision collision\n    # $24 is\
    \ the output file for the collision collision collision collision\n    # $25 is\
    \ the output file for the collision collision collision collision collision\n\
    \    # $26 is the output file for the collision collision collision collision\
    \ collision collision\n    # $27 is the output file for the collision collision\
    \ collision collision collision collision collision\n    # $28 is the output file\
    \ for the collision collision collision collision collision collision collision\
    \ collision\n    # $29 is the output file for the collision collision collision\
    \ collision collision collision collision collision collision\n    # $30 is the\
    \ output file for the collision collision collision collision collision collision\
    \ collision collision collision collision\n    # $31 is the output file for the\
    \ collision collision collision collision collision collision collision collision\
    \ collision collision collision\n    # $32 is the output file for the collision\
    \ collision collision collision collision collision collision collision collision\
    \ collision collision collision\n    # $33 is the output file for the collision\
    \ collision collision collision collision collision collision collision collision\
    \ collision collision collision collision", "    local n=$1\n    local left_to_right=($(echo\
    \ $2 | tr ' ' '\\n' | sort -n))\n    local right_to_left=($(echo $3 | tr ' ' '\\\
    n' | sort -n))\n    local i=0\n    local j=0\n    local count=0\n    while [ $i\
    \ -lt $n ] && [ $j -lt $n ]; do\n        if [ ${left_to_right[$i]} -lt ${right_to_left[$j]}\
    \ ]; then\n            i=$((i+1))\n        elif [ ${left_to_right[$i]} -gt ${right_to_left[$j]}\
    \ ]; then\n            j=$((j+1))\n        else\n            count=$((count+1))\n\
    \            i=$((i+1))\n            j=$((j+1))\n        fi\n    done\n    echo\
    \ $count", "    # Write your code here\n    # This function takes in one argument,\
    \ an array of integers\n    # representing the speeds of the cars moving left\
    \ to right.\n    # It should return the number of collisions.\n    #\n    # For\
    \ example, if the input array is [1, 2, 3, 4, 5],\n    # then there are no collisions\
    \ because the cars moving left to right\n    # are all slower than the cars moving\
    \ right to left.\n    #\n    # If the input array is [5, 4, 3, 2, 1],\n    # then\
    \ there are 5 collisions because all the cars moving left to right\n    # are\
    \ faster than the cars moving right to left.\n    #\n    # If the input array\
    \ is [2, 4, 2, 4],\n    # then there are 2 collisions because the cars at indices\
    \ 0 and 2\n    # collide with the cars at indices 1 and 3.\n    #\n    # If the\
    \ input array is [2, 2, 2, 2],\n    # then there are 6 collisions because all\
    \ the cars collide with each other.\n    #\n    # If the input array is [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10],\n    # then there are 45 collisions because the cars\
    \ at indices 0, 1, 2, 3, 4\n    # collide with the cars at indices 9, 8, 7, 6,\
    \ 5.\n    #\n    # If the input array is [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n  \
    \  # then there are 45 collisions because the cars at indices 0, 1, 2, 3, 4\n\
    \    # collide with the cars at indices 9, 8, 7, 6, 5.\n    #\n    # If the input\
    \ array is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n \
    \   # then there are 90 collisions because the cars at indices 0, 1, 2, 3, 4\n\
    \    # collide with the cars at indices 9, 8, 7, 6, 5, and the cars at indices\
    \ 10, 11, 12, 13, 14\n    # collide with the cars at indices 19, 18, 17, 16, 15.\n\
    \    #", "  # Write your code here\n  # The first line of input contains an integer\
    \ n, the number of cars.\n  # The second line contains n integers, the positions\
    \ of the cars moving left to right.\n  # The third line contains n integers, the\
    \ positions of the cars moving right to left.\n  # Output the number of collisions.\n\
    \  read n\n  read -a left\n  read -a right\n  collisions=0\n  for i in $(seq 0\
    \ $((n-1))); do\n    for j in $(seq 0 $((n-1))); do\n      if [ ${left[$i]} -eq\
    \ ${right[$j]} ]; then\n        collisions=$((collisions+1))\n      fi\n    done\n\
    \  done\n  echo $collisions", "    # Write your code here\n    # This function\
    \ takes in an array of integers\n    # representing the speeds of the cars moving\
    \ left to right\n    # and an array of integers representing the speeds of the\
    \ cars\n    # moving right to left.\n    # The function should output the number\
    \ of collisions.\n    #\n    # For example, if the input arrays are:\n    # [1,\
    \ 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    #\n    # Then the output should be 5.\n\
    \    #\n    # If the input arrays are:\n    # [1, 2, 3, 4, 5]\n    # [1, 2, 3,\
    \ 4, 5]\n    #\n    # Then the output should be 0.\n    #\n    # If the input\
    \ arrays are:\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1, 6]\n    #\n    # Then\
    \ the output should be 5.\n    #\n    # If the input arrays are:\n    # [1, 2,\
    \ 3, 4, 5]\n    # [5, 4, 3, 2, 1, 6, 7]\n    #\n    # Then the output should be\
    \ 5.\n    #\n    # If the input arrays are:\n    # [1, 2, 3, 4, 5]\n    # [5,\
    \ 4, 3, 2, 1, 6, 7, 8]\n    #\n    # Then the output should be 5.\n    #\n   \
    \ # If the input arrays are:\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1, 6,\
    \ 7, 8, 9]\n    #\n    # Then the output should be 5.\n    #\n    # If the input\
    \ arrays are:\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]\n\
    \    #\n    # Then the output should be 5.\n    #\n    # If the input arrays are:\n\
    \    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1, 6, 7", "    local -a left_to_right_cars\n\
    \    local -a right_to_left_cars\n    local -i n_cars\n    local -i i\n    local\
    \ -i j\n    local -i n_collisions\n    local -i left_to_right_car_position\n \
    \   local -i right_to_left_car_position\n\n    n_cars=$1\n    n_collisions=0\n\
    \    for ((i=0; i<n_cars; i++)); do\n        left_to_right_cars[i]=$((RANDOM%100))\n\
    \        right_to_left_cars[i]=$((RANDOM%100))\n    done\n    for ((i=0; i<n_cars;\
    \ i++)); do\n        left_to_right_car_position=${left_to_right_cars[i]}\n   \
    \     for ((j=0; j<n_cars; j++)); do\n            right_to_left_car_position=${right_to_left_cars[j]}\n\
    \            if ((left_to_right_car_position == right_to_left_car_position));\
    \ then\n                ((n_collisions++))\n            fi\n        done\n   \
    \ done\n    echo $n_collisions", "    # Write your code here\n    # This function\
    \ takes in two arrays of integers, each representing the speed of a car\n    #\
    \ moving left to right and right to left respectively.\n    # The function should\
    \ output the number of collisions.\n    # If there are no collisions, output 0.\n\
    \    #\n    # Example:\n    # car_race_collision [1,2,3] [3,2,1]\n    # should\
    \ output 1\n    #\n    # Hint:\n    # You can use the sort command to sort an\
    \ array.\n    # For example, sort [3,2,1] will output [1,2,3]\n    #\n    # You\
    \ can use the join command to join two arrays.\n    # For example, join [1,2,3]\
    \ [4,5,6] will output [1,2,3,4,5,6]\n    #\n    # You can use the wc command to\
    \ count the number of elements in an array.\n    # For example, wc -w [1,2,3]\
    \ will output 3\n    #\n    # You can use the grep command to find the number\
    \ of occurrences of an element in an array.\n    # For example, grep -c 2 [1,2,3,2]\
    \ will output 2\n    #\n    # You can use the tr command to replace all occurrences\
    \ of an element in an array with another element.\n    # For example, tr 2 _ [1,2,3,2]\
    \ will output [1,_,3,_]\n    #\n    # You can use the bc command for integer arithmetic.\n\
    \    # For example, echo \"2+2\" | bc will output 4\n    #\n    # You can use\
    \ the expr command for integer arithmetic.\n    # For example, expr 2 + 2 will\
    \ output 4\n    #\n    # You can use the let command for integer arithmetic.\n\
    \    # For example, let \"a = 2 + 2\" will set the variable a to 4\n    #\n  \
    \  # You can use the read command to take user input.\n    # For example,\n  \
    \  # read -p \"Enter a number: \" num\n    # will prompt the user to enter a number,\
    \ and store the number in the variable num\n    #\n    # You can use the echo\
    \ command to", "    # Write your code here\n    # This function is called with\
    \ one argument: an array of integers.\n    # The array contains 2n integers. \
    \ The first n integers are the starting\n    # positions of the cars that are\
    \ moving left to right.  The next n integers\n    # are the starting positions\
    \ of the cars that are moving right to left.\n    # The starting positions are\
    \ in increasing order.\n    # The function should output the number of collisions.\n\
    \    # Example:\n    # car_race_collision {1, 5, 10, 20, 25, 30, 40, 50, 60, 70}\n\
    \    # Output: 2\n    # Explanation: The cars moving left to right are at positions\
    \ 1, 5, 10, 20, 25, 30, 40, 50, 60, 70.\n    # The cars moving right to left are\
    \ at positions 70, 60, 50, 40, 30, 25, 20, 10, 5, 1.\n    # The cars at positions\
    \ 10 and 20 collide.  The cars at positions 30 and 40 collide.\n    # There are\
    \ no other collisions.\n    # Example:\n    # car_race_collision {1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10}\n    # Output: 0\n    # Explanation: The cars moving left\
    \ to right are at positions 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.\n    # The cars moving\
    \ right to left are at positions 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.\n    # There are\
    \ no collisions.\n    # Example:\n    # car_race_collision {1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n    # Output: 10\n   \
    \ # Explanation: The cars moving left to right are at positions 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20.\n    # The cars moving\
    \ right to left are at positions 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,\
    \ 8, 7, 6", "    local n=$1\n    local left_to_right_cars=($(echo $2 | tr ' '\
    \ '\\n' | sort -n))\n    local right_to_left_cars=($(echo $3 | tr ' ' '\\n' |\
    \ sort -n))\n    local i=0\n    local j=0\n    local collisions=0\n    while [[\
    \ $i -lt $n && $j -lt $n ]]; do\n        if [[ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]}\
    \ ]]; then\n            i=$((i+1))\n        elif [[ ${left_to_right_cars[$i]}\
    \ -gt ${right_to_left_cars[$j]} ]]; then\n            j=$((j+1))\n        else\n\
    \            collisions=$((collisions+1))\n            i=$((i+1))\n          \
    \  j=$((j+1))\n        fi\n    done\n    echo $collisions", "    # Write your\
    \ code here\n    #\n    # Input:\n    #     $1: a string of n space-separated\
    \ integers, each of which is between 0 and n-1.\n    #         The i-th integer\
    \ is the position of the i-th car that's moving left to right.\n    #     $2:\
    \ a string of n space-separated integers, each of which is between 0 and n-1.\n\
    \    #         The i-th integer is the position of the i-th car that's moving\
    \ right to left.\n    #\n    # Output:\n    #     A single integer, the number\
    \ of collisions.\n\n    # Your code starts here\n    # Your code ends here", " \
    \   # Write your code here\n    # To get the value of the argument passed to the\
    \ function, use the variable $1\n    # For example, passing \"12\" as an argument\
    \ to this function would make $1 equal to 12\n    # You can access all arguments\
    \ using $1, $2, $3, etc.\n    # You can access all arguments using $@\n    # To\
    \ output text, use the echo command\n    # For example, echo \"hello world\"\n\
    \    # To output the value of a variable, use the echo command followed by the\
    \ variable name\n    # For example, echo $1\n    # To output the value of a variable,\
    \ use the echo command followed by the variable name\n    # For example, echo\
    \ $1\n    # To output the result of a mathematical expression, use the echo command\
    \ followed by the mathematical expression\n    # For example, echo $((1 + 2))\n\
    \    # To store a value in a variable, use the = operator\n    # For example,\
    \ x=1\n    # To read a line of input into a variable, use the read command\n \
    \   # For example, read x\n    # To split a string into an array, use the = operator\
    \ and the split operator\n    # For example, x=(${1// / })\n    # To access the\
    \ ith element of an array, use the ${} operator\n    # For example, ${x[i]}\n\
    \    # To get the length of an array, use the # operator\n    # For example, ${#x[@]}\n\
    \    # To sort an array, use the sort command\n    # For example, sort x\n   \
    \ # To iterate through the elements of an array, use the for command\n    # For\
    \ example, for i in ${x[@]}; do echo $i; done\n    # To get the floor of a number,\
    \ use the floor operator\n    # For example, echo $(( (1 + 2) / 2 ))\n    # To\
    \ get the ceiling of a number, use the ceiling operator\n    # For example, echo\
    \ $(( (1 + 2 + 4) / 3 ))\n    # To get the absolute value of a number, use the\
    \ absolute value operator\n    # For example, echo $(( abs(-1) ))\n    # To get\
    \ the remainder of a number, use the modulo operator\n    # For example, echo\
    \ $((", "    # Write your code here\n    #\n    # Input:\n    #   $1: a string\
    \ of numbers separated by spaces, representing the\n    #       positions of the\
    \ cars moving left to right.\n    #   $2: a string of numbers separated by spaces,\
    \ representing the\n    #       positions of the cars moving right to left.\n\
    \    #\n    # Output:\n    #   a single number, representing the number of collisions.\n\
    \    #\n    # Example:\n    #   car_race_collision \"1 2 3\" \"4 5 6\"\n    #\n\
    \    # Explanation:\n    #   The cars moving left to right are at positions 1,\
    \ 2, and 3.\n    #   The cars moving right to left are at positions 4, 5, and\
    \ 6.\n    #   The cars at positions 2 and 5 collide.\n    #   The cars at positions\
    \ 3 and 4 collide.\n    #   The cars at positions 1 and 6 do not collide.\n  \
    \  #   The output is 2.\n    #\n    # Note:\n    #   - The cars are infinitely\
    \ strong and sturdy.  They do not stop moving\n    #     when they collide.\n\
    \    #   - The cars are moving at the same speed.\n    #   - The cars are infinitely\
    \ small.  They do not take up any space.\n    #   - The cars are infinitely thin.\
    \  They do not have any width.\n    #   - The cars are infinitely light.  They\
    \ do not have any mass.\n    #   - The cars are infinitely precise.  They do not\
    \ have any error.\n    #   - The cars are infinitely precise.  They do not have\
    \ any error.\n    #   - The cars are infinitely precise.  They do not have any\
    \ error.\n    #   - The cars are infinitely precise.  They do not have any error.\n\
    \    #   - The cars are infinitely precise.  They do not have any error.\n   \
    \ #   - The cars are infinitely precise.  They do not have any error.\n    # \
    \  - The cars are infinitely precise.  They do not have any error.\n    #   -\
    \ The cars are infinitely precise.  They do not have any error.\n    #   - The\
    \ cars are infinitely precise.  They do not have any error.\n    #   - The cars\
    \ are infinitely precise", "    local n=$1\n    local left_to_right_cars=$2\n\
    \    local right_to_left_cars=$3\n    local collisions=0\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((left_to_right_cars[i]\
    \ == right_to_left_cars[j])); then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    # $1 is the\
    \ number of cars driving left to right\n    # $2 is the number of cars driving\
    \ right to left\n    # $3 is the speed of the cars\n    # $4 is the starting position\
    \ of the cars driving left to right\n    # $5 is the starting position of the\
    \ cars driving right to left\n    # $6 is the time at which the cars start\n \
    \   # $7 is the time at which the cars stop\n    # $8 is the time step\n    #\
    \ $9 is the output file\n    # $10 is the number of cars that are driving left\
    \ to right\n    # $11 is the number of cars that are driving right to left\n \
    \   # $12 is the number of cars that are driving left to right\n    # $13 is the\
    \ number of cars that are driving right to left\n    # $14 is the number of cars\
    \ that are driving left to right\n    # $15 is the number of cars that are driving\
    \ right to left\n    # $16 is the number of cars that are driving left to right\n\
    \    # $17 is the number of cars that are driving right to left\n    # $18 is\
    \ the number of cars that are driving left to right\n    # $19 is the number of\
    \ cars that are driving right to left\n    # $20 is the number of cars that are\
    \ driving left to right\n    # $21 is the number of cars that are driving right\
    \ to left\n    # $22 is the number of cars that are driving left to right\n  \
    \  # $23 is the number of cars that are driving right to left\n    # $24 is the\
    \ number of cars that are driving left to right\n    # $25 is the number of cars\
    \ that are driving right to left\n    # $26 is the number of cars that are driving\
    \ left to right\n    # $27 is the number of cars that are driving right to left\n\
    \    # $28 is the number of cars that are driving left to right\n    # $29 is\
    \ the number of cars that are driving right to left\n    # $30 is the number of\
    \ cars that are driving left to right\n    # $31 is the number of cars that are\
    \ driving right to left\n    # $32 is the number of cars that are driving left\
    \ to right\n    # $33 is the number of cars that are driving right to left\n \
    \   # $34 is the number of cars that are driving", "  local -a left_to_right_cars\n\
    \  local -a right_to_left_cars\n  local -i i\n  local -i j\n  local -i collisions\n\
    \  local -i n\n  local -i left_to_right_car\n  local -i right_to_left_car\n  local\
    \ -i left_to_right_car_position\n  local -i right_to_left_car_position\n  local\
    \ -i left_to_right_car_speed\n  local -i right_to_left_car_speed\n  local -i left_to_right_car_speed_index\n\
    \  local -i right_to_left_car_speed_index\n  local -i left_to_right_car_position_index\n\
    \  local -i right_to_left_car_position_index\n  local -i left_to_right_car_speed_index_max\n\
    \  local -i right_to_left_car_speed_index_max\n  local -i left_to_right_car_position_index_max\n\
    \  local -i right_to_left_car_position_index_max\n  local -i left_to_right_car_speed_index_min\n\
    \  local -i right_to_left_car_speed_index_min\n  local -i left_to_right_car_position_index_min\n\
    \  local -i right_to_left_car_position_index_min\n  local -i left_to_right_car_speed_index_min_new\n\
    \  local -i right_to_left_car_speed_index_min_new\n  local -i left_to_right_car_position_index_min_new\n\
    \  local -i right_to_left_car_position_index_min_new\n  local -i left_to_right_car_speed_index_max_new\n\
    \  local -i right_to_left_car_speed_index_max_new\n  local -i left_to_right_car_position_index_max_new\n\
    \  local -i right_to_left_car_position_index_max_new\n  local -i left_to_right_car_speed_index",
  "    # The first argument is the number of cars.\n    # The second argument is the\
    \ speed of the cars.\n    # The third argument is the distance between the two\
    \ sets of cars.\n    # The fourth argument is the length of the road.\n    # The\
    \ fifth argument is the time.\n    # The sixth argument is the number of collisions.\n\
    \    # The seventh argument is the number of cars that have reached the end of\
    \ the road.\n    # The eighth argument is the number of cars that have reached\
    \ the end of the road.\n    # The ninth argument is the number of cars that have\
    \ reached the end of the road.\n    # The tenth argument is the number of cars\
    \ that have reached the end of the road.\n    # The eleventh argument is the number\
    \ of cars that have reached the end of the road.\n    # The twelfth argument is\
    \ the number of cars that have reached the end of the road.\n    # The thirteenth\
    \ argument is the number of cars that have reached the end of the road.\n    #\
    \ The fourteenth argument is the number of cars that have reached the end of the\
    \ road.\n    # The fifteenth argument is the number of cars that have reached\
    \ the end of the road.\n    # The sixteenth argument is the number of cars that\
    \ have reached the end of the road.\n    # The seventeenth argument is the number\
    \ of cars that have reached the end of the road.\n    # The eighteenth argument\
    \ is the number of cars that have reached the end of the road.\n    # The nineteenth\
    \ argument is the number of cars that have reached the end of the road.\n    #\
    \ The twentieth argument is the number of cars that have reached the end of the\
    \ road.\n    # The twenty-first argument is the number of cars that have reached\
    \ the end of the road.\n    # The twenty-second argument is the number of cars\
    \ that have reached the end of the road.\n    # The twenty-third argument is the\
    \ number of cars that have reached the end of the road.\n    # The twenty-fourth\
    \ argument is the number of cars that have reached the end of the road.\n    #\
    \ The twenty-fifth argument is the number of cars that have reached the end of\
    \ the road.\n    # The twenty-sixth argument is the number of cars that have reached\
    \ the end of the road.\n    # The twenty-seventh argument is the number of cars\
    \ that", "  # We can use the following trick to count the number of collisions.\n\
    \  # We can imagine that the cars are numbered from 1 to 2n.  The cars\n  # that\
    \ are driving left to right are numbered 1 to n, and the cars\n  # that are driving\
    \ right to left are numbered n+1 to 2n.\n  # We can then sort the numbers from\
    \ 1 to 2n.  The number of collisions\n  # is the number of inversions in the sorted\
    \ list.\n  # For example, if the cars are numbered 1,2,3,4,5,6, then the sorted\n\
    \  # list is 1,4,2,5,3,6.  The number of inversions is 3.\n  # The number of inversions\
    \ is the same as the number of pairs of numbers\n  # that are out of order.\n\
    \  # We can use the merge sort algorithm to count the number of inversions.\n\
    \  # The merge sort algorithm is a recursive algorithm.  It works as follows.\n\
    \  # If the list has length 1, then there are no inversions.\n  # If the list\
    \ has length 2, then there is 1 inversion if the two numbers\n  # are out of order,\
    \ and 0 inversions otherwise.\n  # If the list has length 3 or more, then we split\
    \ the list into two halves.\n  # We recursively sort the two halves.  We then\
    \ merge the two sorted halves\n  # into a single sorted list.  The number of inversions\
    \ is the number of\n  # inversions in the first half, plus the number of inversions\
    \ in the second\n  # half, plus the number of inversions in the merged list.\n\
    \  # The number of inversions in the merged list is the number of pairs of\n \
    \ # numbers that are out of order.  The first number comes from the first half,\n\
    \  # and the second number comes from the second half.\n  # We can count the number\
    \ of inversions in the merged list as follows.\n  # We can imagine that the first\
    \ half is a deck of cards, and the second half\n  # is a deck of cards.  We can\
    \ then imagine that we are playing a card game.\n  # We take the top card from\
    \ the first deck, and the top card from the second\n  # deck, and compare the\
    \ two cards.  If the", "    # The first line of input is the number of cars.\n\
    \    read n\n    # The next n lines are the positions of the cars moving left\
    \ to right.\n    left_to_right=($(head -n $n))\n    # The next n lines are the\
    \ positions of the cars moving right to left.\n    right_to_left=($(tail -n $n))\n\
    \    # Sort the cars moving left to right.\n    IFS=$'\\n' left_to_right=($(sort\
    \ <<<\"${left_to_right[*]}\"))\n    # Sort the cars moving right to left.\n  \
    \  IFS=$'\\n' right_to_left=($(sort <<<\"${right_to_left[*]}\"))\n    # The number\
    \ of collisions is the number of cars that are in the same position.\n    # To\
    \ find this, we find the number of elements in the intersection of the two\n \
    \   # arrays.\n    intersection=($(comm -12 <(printf \"%s\\n\" \"${left_to_right[@]}\"\
    ) <(printf \"%s\\n\" \"${right_to_left[@]}\")))\n    echo ${#intersection[@]}",
  "    # Write your code here\n    #\n    # Input:\n    #   $1: a string of n integers,\
    \ separated by spaces, representing the\n    #       positions of the cars moving\
    \ left to right\n    #   $2: a string of n integers, separated by spaces, representing\
    \ the\n    #       positions of the cars moving right to left\n    # Output:\n\
    \    #   a single integer, the number of collisions\n    #\n    # Example:\n \
    \   #   car_race_collision \"1 2 3 4\" \"5 6 7 8\"\n    #   should output 2\n\
    \    #\n    # Note:\n    #   You may assume that the input is always valid.\n\
    \    #   You may assume that the input is always correct.\n    #   You may assume\
    \ that the input is always well-formed.\n    #   You may assume that the input\
    \ is always well-formed.\n    #   You may assume that the input is always well-formed.\n\
    \    #   You may assume that the input is always well-formed.\n    #   You may\
    \ assume that the input is always well-formed.\n    #   You may assume that the\
    \ input is always well-formed.\n    #   You may assume that the input is always\
    \ well-formed.\n    #   You may assume that the input is always well-formed.\n\
    \    #   You may assume that the input is always well-formed.\n    #   You may\
    \ assume that the input is always well-formed.\n    #   You may assume that the\
    \ input is always well-formed.\n    #   You may assume that the input is always\
    \ well-formed.\n    #   You may assume that the input is always well-formed.\n\
    \    #   You may assume that the input is always well-formed.\n    #   You may\
    \ assume that the input is always well-formed.\n    #   You may assume that the\
    \ input is always well-formed.\n    #   You may assume that the input is always\
    \ well-formed.\n    #   You may assume that the input is always well-formed.\n\
    \    #   You may assume that the input is always well-formed.\n    #   You may\
    \ assume that the input is always well-formed.\n    #   You may assume that the\
    \ input is always well-formed.\n    #   You may assume that the", "    # Write\
    \ your code here\n    # This function takes in two arrays of integers, and outputs\
    \ an integer.\n    # For example, if the input is\n    # [1, 2, 3, 4]\n    # [5,\
    \ 6, 7, 8]\n    # The output should be 0.\n    # If the input is\n    # [1, 2,\
    \ 3, 4]\n    # [4, 3, 2, 1]\n    # The output should be 4.\n    # If the input\
    \ is\n    # [1, 2, 3, 4]\n    # [3, 4, 5, 6]\n    # The output should be 2.\n\
    \    # If the input is\n    # [1, 2, 3, 4]\n    # [2, 3, 4, 5]\n    # The output\
    \ should be 1.\n    # If the input is\n    # [1, 2, 3, 4]\n    # [1, 2, 3, 4]\n\
    \    # The output should be 4.\n    # If the input is\n    # [1, 2, 3, 4]\n  \
    \  # [1, 2, 3, 5]\n    # The output should be 3.\n    # If the input is\n    #\
    \ [1, 2, 3, 4]\n    # [1, 2, 3, 6]\n    # The output should be 2.\n    # If the\
    \ input is\n    # [1, 2, 3, 4]\n    # [1, 2, 3, 7]\n    # The output should be\
    \ 1.\n    # If the input is\n    # [1, 2, 3, 4]\n    # [1, 2, 3, 8]\n    # The\
    \ output should be 0.\n    # If the input is\n    # [1, 2, 3, 4]\n    # [1, 2,\
    \ 3, 9]\n    # The output should be 0.\n    # If the input is\n    # [1, 2, 3,\
    \ 4]\n    # [1, 2, 3, 10]\n    # The output should be 0.\n    # If the input is\n\
    \    # [1, 2, 3, 4]\n    # [1, 2, 3, 11]\n    # The output should be 0.\n    #\
    \ If the", "    local -i n=$1\n    local -i i=0\n    local -i j=0\n    local -i\
    \ collisions=0\n    local -a left_to_right=( )\n    local -a right_to_left=( )\n\
    \    while (( i < n )); do\n        read left_to_right[i]\n        (( i++ ))\n\
    \    done\n    while (( j < n )); do\n        read right_to_left[j]\n        ((\
    \ j++ ))\n    done\n    i=0\n    j=0\n    while (( i < n && j < n )); do\n   \
    \     if (( left_to_right[i] < right_to_left[j] )); then\n            (( i++ ))\n\
    \        elif (( left_to_right[i] > right_to_left[j] )); then\n            ((\
    \ j++ ))\n        else\n            (( collisions++ ))\n            (( i++ ))\n\
    \            (( j++ ))\n        fi\n    done\n    echo $collisions", "    # This\
    \ is a very simple problem.  We can just sort the cars by their\n    # starting\
    \ position and then count the number of cars that are moving\n    # in opposite\
    \ directions.\n    #\n    # The number of cars moving left to right is n.\n  \
    \  # The number of cars moving right to left is n.\n    # The number of collisions\
    \ is the minimum of the two.\n    #\n    # The time complexity is O(n log n) because\
    \ of the sorting.\n    # The space complexity is O(n) because of the sorting.\n\
    \    #\n    # We can do better.  We can use the fact that the cars are moving\
    \ in the same\n    # speed.  We can sort the cars by their starting position and\
    \ then count the\n    # number of cars that are moving in opposite directions.\n\
    \    #\n    # The number of cars moving left to right is n.\n    # The number\
    \ of cars moving right to left is n.\n    # The number of collisions is the minimum\
    \ of the two.\n    #\n    # The time complexity is O(n log n) because of the sorting.\n\
    \    # The space complexity is O(n) because of the sorting.\n    #\n    # We can\
    \ do better.  We can use the fact that the cars are moving in the same\n    #\
    \ speed.  We can sort the cars by their starting position and then count the\n\
    \    # number of cars that are moving in opposite directions.\n    #\n    # The\
    \ number of cars moving left to right is n.\n    # The number of cars moving right\
    \ to left is n.\n    # The number of collisions is the minimum of the two.\n \
    \   #\n    # The time complexity is O(n log n) because of the sorting.\n    #\
    \ The space complexity is O(n) because of the sorting.\n    #\n    # We can do\
    \ better.  We can use the fact that the cars are moving in the same\n    # speed.\
    \  We can sort the cars by their starting position and then count the\n    # number\
    \ of cars that are moving in opposite directions.\n    #\n    # The number of\
    \ cars moving left to right is n.\n    # The number of cars moving right to left\
    \ is n.\n    # The number of collisions is the minimum of the two.\n    #\n  \
    \  # The time complexity", "    # The input is a list of n integers, where the\
    \ ith integer represents the\n    # position of the ith car that's moving left\
    \ to right.  The input also contains\n    # a list of n integers, where the ith\
    \ integer represents the position of the\n    # ith car that's moving right to\
    \ left.\n    # The output is the number of collisions.\n    # For example, if\
    \ the input is\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    # then the output\
    \ is 5.\n    # If the input is\n    # [1, 2, 3, 4, 5]\n    # [1, 2, 3, 4, 5]\n\
    \    # then the output is 0.\n    # If the input is\n    # [1, 2, 3, 4, 5]\n \
    \   # [5, 4, 3, 2, 1]\n    # then the output is 5.\n    # If the input is\n  \
    \  # [1, 2, 3, 4, 5]\n    # [1, 2, 3, 4, 5]\n    # then the output is 0.\n   \
    \ # If the input is\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    # then\
    \ the output is 5.\n    # If the input is\n    # [1, 2, 3, 4, 5]\n    # [1, 2,\
    \ 3, 4, 5]\n    # then the output is 0.\n    # If the input is\n    # [1, 2, 3,\
    \ 4, 5]\n    # [5, 4, 3, 2, 1]\n    # then the output is 5.\n    # If the input\
    \ is\n    # [1, 2, 3, 4, 5]\n    # [1, 2, 3, 4, 5]\n    # then the output is 0.\n\
    \    # If the input is\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    # then\
    \ the output is 5.\n    # If the input is\n    # [1, 2, 3, 4, 5]\n    # [1, 2,\
    \ 3", "    local n=$1\n    local left_to_right_cars=$2\n    local right_to_left_cars=$3\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if [[ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]]; then\n                collisions=$((collisions+1))\n            fi\n   \
    \     done\n    done\n    echo $collisions", "    # Write your code here\n   \
    \ # This function takes in two arguments\n    # $1 is the number of cars moving\
    \ left to right\n    # $2 is the number of cars moving right to left\n    # The\
    \ function should output the number of collisions\n    # The function should output\
    \ 0 if there are no collisions\n    # The function should output -1 if the number\
    \ of cars is not positive\n    # The function should output -2 if the number of\
    \ cars is not an integer\n    # The function should output -3 if the number of\
    \ cars is not a number\n    # The function should output -4 if the number of cars\
    \ is not a whole number\n    # The function should output -5 if the number of\
    \ cars is not a positive whole number\n    # The function should output -6 if\
    \ the number of cars is not a positive whole number\n    # The function should\
    \ output -7 if the number of cars is not a positive whole number\n    # The function\
    \ should output -8 if the number of cars is not a positive whole number\n    #\
    \ The function should output -9 if the number of cars is not a positive whole\
    \ number\n    # The function should output -10 if the number of cars is not a\
    \ positive whole number\n    # The function should output -11 if the number of\
    \ cars is not a positive whole number\n    # The function should output -12 if\
    \ the number of cars is not a positive whole number\n    # The function should\
    \ output -13 if the number of cars is not a positive whole number\n    # The function\
    \ should output -14 if the number of cars is not a positive whole number\n   \
    \ # The function should output -15 if the number of cars is not a positive whole\
    \ number\n    # The function should output -16 if the number of cars is not a\
    \ positive whole number\n    # The function should output -17 if the number of\
    \ cars is not a positive whole number\n    # The function should output -18 if\
    \ the number of cars is not a positive whole number\n    # The function should\
    \ output -19 if the number of cars is not a positive whole number\n    # The function\
    \ should output -20 if the number of cars is not a positive whole number\n   \
    \ # The function should output -21 if the number of cars is not a positive whole\
    \ number\n    # The function should output -22 if the number of cars is not a\
    \ positive whole number\n    # The function should output -23 if the number",
  "    # Write your code here\n    # This function takes in a single argument, which\
    \ is an array of integers\n    # representing the positions of the cars.  The\
    \ first half of the array\n    # represents the cars that are moving left to right,\
    \ and the second half\n    # of the array represents the cars that are moving\
    \ right to left.\n    # The function should output a single integer, which is\
    \ the number of collisions.\n    #\n    # For example, if the input array is [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # then the output should be 2.\n  \
    \  #\n    # The first half of the array is [1, 2, 3, 4, 5, 6]\n    # The second\
    \ half of the array is [12, 11, 10, 9, 8, 7]\n    # The first collision is between\
    \ car 1 and car 12\n    # The second collision is between car 2 and car 11\n \
    \   #\n    # If the input array is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]\n    # then the output should be 4.\n    #\n    # The first half\
    \ of the array is [1, 2, 3, 4, 5, 6, 7, 8]\n    # The second half of the array\
    \ is [16, 15, 14, 13, 12, 11, 10, 9]\n    # The first collision is between car\
    \ 1 and car 16\n    # The second collision is between car 2 and car 15\n    #\
    \ The third collision is between car 3 and car 14\n    # The fourth collision\
    \ is between car 4 and car 13\n    #\n    # If the input array is [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # then the output\
    \ should be 5.\n    #\n    # The first half of the array is [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]\n    # The second half of the array is [20, 19, 18, 17, 16, 15,\
    \ 14, 13, 12, 11]\n    # The first collision", "    # Write your code here\n \
    \   # This function takes in two arrays of integers\n    # It should return an\
    \ integer\n    #\n    # For example,\n    # car_race_collision [1, 2, 3] [3, 2,\
    \ 1]\n    # should return 2\n    #\n    # You can write additional functions as\
    \ you see fit\n    # You can write additional global variables as you see fit\n\
    \    #\n    # You can use the sort command to sort an array\n    # For example,\n\
    \    # arr=(3 1 2)\n    # sorted_arr=($(echo \"${arr[*]}\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' '))\n    # echo ${sorted_arr[*]}\n    # will print 1 2 3\n \
    \   #\n    # You can use the tr command to remove the last character of a string\n\
    \    # For example,\n    # echo \"123\" | tr -d '3'\n    # will print 12\n   \
    \ #\n    # You can use the rev command to reverse a string\n    # For example,\n\
    \    # echo \"123\" | rev\n    # will print 321\n    #\n    # You can use the\
    \ wc command to count the number of lines of a file\n    # For example,\n    #\
    \ wc -l <file>\n    #\n    # You can use the paste command to merge two files\
    \ line by line\n    # For example,\n    # paste file1 file2\n    #\n    # You\
    \ can use the diff command to find the difference between two files\n    # For\
    \ example,\n    # diff file1 file2\n    #\n    # You can use the uniq command\
    \ to find the unique lines of a file\n    # For example,\n    # uniq <file>\n\
    \    #\n    # You can redirect the output of a command to a file\n    # For example,\n\
    \    # echo \"123\" > file\n    # will create a file with the content 123\n  \
    \  #\n    # You can read the content of a file line by line\n    # For example,\n\
    \    # while read line; do\n    #   echo $line\n    # done <file\n    #\n    #\
    \ You can check if a file exists\n    # For example,\n    #", "    # Write your\
    \ code here\n    # This function takes in two arguments:\n    # 1) A string of\
    \ numbers, separated by spaces, representing the speeds of the cars\n    #   \
    \ moving left to right\n    # 2) A string of numbers, separated by spaces, representing\
    \ the speeds of the cars\n    #    moving right to left\n    # For example, car_race_collision\
    \ \"1 2 3\" \"3 2 1\" should output 2\n    # because the cars with speed 1 and\
    \ 3 collide, and the cars with speed 2 and 3 collide.\n    # Note that the cars\
    \ with speed 1 and 2 do not collide, because the car with speed 1\n    # is moving\
    \ left to right, and the car with speed 2 is moving right to left.\n    #\n  \
    \  # Hint: You can use the following command to sort the input strings:\n    #\
    \ sorted_left_to_right=$(echo $1 | tr \" \" \"\\n\" | sort)\n    # sorted_right_to_left=$(echo\
    \ $2 | tr \" \" \"\\n\" | sort)\n    #\n    # Note: This function does not need\
    \ to handle the case where the input strings are empty.\n    #\n    # Write your\
    \ code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #", "    # Write your code here\n    #\
    \ Your code should be a single line\n    # You may use any programming language\
    \ you like\n    # You may use any built-in functions you like\n    # You may use\
    \ any libraries you like\n    # You may use any data structures you like\n   \
    \ # You may use any algorithm you like\n    # You may use any time and space complexity\
    \ you like\n    # You may use any number of variables you like\n    # You may\
    \ use any number of lines you like\n    # You may use any number of comments you\
    \ like\n    # You may use any number of functions you like\n    # You may use\
    \ any number of classes you like\n    # You may use any number of files you like\n\
    \    # You may use any number of processes you like\n    # You may use any number\
    \ of threads you like\n    # You may use any number of machines you like\n   \
    \ # You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds you like\n    # You may use any number of clusters you like\n    #\
    \ You may use any number of data centers you like\n    # You may use any number\
    \ of clouds", "    # Write your code here\n    # This function takes in two arguments:\n\
    \    # 1. the number of cars driving left to right\n    # 2. the number of cars\
    \ driving right to left\n    # The two arguments are guaranteed to be equal.\n\
    \    # The function should output the number of collisions.\n    # For example,\
    \ if the arguments are 3 and 3, the function should output 1.\n    # If the arguments\
    \ are 5 and 5, the function should output 2.\n    # If the arguments are 1 and\
    \ 1, the function should output 0.\n    # If the arguments are 2 and 2, the function\
    \ should output 1.\n    # If the arguments are 4 and 4, the function should output\
    \ 2.\n    # If the arguments are 6 and 6, the function should output 3.\n    #\
    \ If the arguments are 8 and 8, the function should output 4.\n    # If the arguments\
    \ are 10 and 10, the function should output 5.\n    # If the arguments are 12\
    \ and 12, the function should output 6.\n    # If the arguments are 14 and 14,\
    \ the function should output 7.\n    # If the arguments are 16 and 16, the function\
    \ should output 8.\n    # If the arguments are 18 and 18, the function should\
    \ output 9.\n    # If the arguments are 20 and 20, the function should output\
    \ 10.\n    # If the arguments are 22 and 22, the function should output 11.\n\
    \    # If the arguments are 24 and 24, the function should output 12.\n    # If\
    \ the arguments are 26 and 26, the function should output 13.\n    # If the arguments\
    \ are 28 and 28, the function should output 14.\n    # If the arguments are 30\
    \ and 30, the function should output 15.\n    # If the arguments are 32 and 32,\
    \ the function should output 16.\n    # If the arguments are 34 and 34, the function\
    \ should output 17.\n    # If the arguments are 36 and 36, the function should\
    \ output 18.\n    # If the arguments are 38 and 38, the function should output\
    \ 19.\n    # If the arguments are 40 and 40, the function should output 20.\n\
    \    # If the arguments are 42 and 42, the function should output 21.\n    # If\
    \ the arguments are 44 and 44, the function should output 22.\n    # If the arguments\
    \ are 46 and 46, the function should output 23.", "    # Write your code here\n\
    \    # You can use the following command to print out the number of collisions:\n\
    \    # echo $collisions\n    collisions=0\n    # read the first line of the file\n\
    \    read -r line\n    # read the second line of the file\n    read -r line2\n\
    \    # split the first line into an array\n    IFS=' ' read -r -a array <<< \"\
    $line\"\n    # split the second line into an array\n    IFS=' ' read -r -a array2\
    \ <<< \"$line2\"\n    # loop through the first array\n    for i in \"${array[@]}\"\
    \n    do\n        # loop through the second array\n        for j in \"${array2[@]}\"\
    \n        do\n            # if the two numbers are the same, increment the collision\
    \ count\n            if [ $i == $j ]\n            then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    # print out the number of collisions\n\
    \    echo $collisions", "    local n=$1\n    local left_to_right=$2\n    local\
    \ right_to_left=$3\n    local collisions=0\n    local i\n    local j\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((left_to_right[i]\
    \ == right_to_left[j])); then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    # The idea\
    \ is to sort the cars by their starting position.\n    # Then, we can just iterate\
    \ through the sorted list, and count the number of\n    # cars that are moving\
    \ in the opposite direction.\n    # The time complexity is O(n log n).\n    #\
    \ The space complexity is O(n).\n    local -n cars=$1\n    local -n direction=$2\n\
    \    local -n n=$3\n    local -a sorted_cars\n    local -a sorted_direction\n\
    \    local -i i\n    local -i j\n    local -i collisions=0\n    local -i current_direction\n\
    \    local -i current_car\n    local -i next_direction\n    local -i next_car\n\
    \    local -i n_cars\n    local -i n_cars_opposite_direction\n    local -i n_cars_same_direction\n\
    \    local -i n_cars_to_check\n    local -i n_cars_to_check_opposite_direction\n\
    \    local -i n_cars_to_check_same_direction\n    local -i n_cars_to_check_total\n\
    \    local -i n_cars_to_check_total_opposite_direction\n    local -i n_cars_to_check_total_same_direction\n\
    \    local -i n_cars_to_check_total_opposite_direction_and_same_direction\n  \
    \  local -i n_cars_to_check_total_opposite_direction_and_same_direction_and_opposite_direction\n\
    \    local -i n_cars_to_check_total_opposite_direction_and_same_direction_and_opposite_direction_and_same_direction\n\
    \    local -i n_cars_to_check_total_opposite_direction_and_same_direction_and_opposite_direction_and_same_direction_and_opposite_direction\n\
    \    local -i n_cars_to_check_total_opposite_direction_and_same_direction_and_opposite_direction_and_same_direction_and_opposite_direction_and_same_direction\n\
    \    local -i n_cars_to_check_total_opposite_direction_and_same_direction_and_opp",
  "    if [[ $# -ne 1 ]]; then\n        echo \"Usage: $0 <file>\"\n        return\
    \ 1\n    fi\n    local file=\"$1\"\n    local -i n=0\n    local -i collisions=0\n\
    \    local -a left_to_right=()\n    local -a right_to_left=()\n    while read\
    \ -r line; do\n        if [[ $n -eq 0 ]]; then\n            n=\"$line\"\n    \
    \    else\n            left_to_right+=(\"$line\")\n        fi\n    done < \"$file\"\
    \n    for ((i=0; i<n; i++)); do\n        right_to_left+=(\"${left_to_right[$((n-i-1))]}\"\
    )\n    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n\
    \            if [[ ${left_to_right[$i]} -eq ${right_to_left[$j]} ]]; then\n  \
    \              collisions+=1\n            fi\n        done\n    done\n    echo\
    \ \"$collisions\"", "    # The first line of the input contains the number of\
    \ cars n.\n    # The second line of the input contains n integers, the positions\
    \ of the cars\n    # moving left to right.\n    # The third line of the input\
    \ contains n integers, the positions of the cars\n    # moving right to left.\n\
    \    # The output is the number of collisions.\n    # Example:\n    # Input:\n\
    \    # 3\n    # 1 2 3\n    # 4 5 6\n    # Output:\n    # 0\n    # Explanation:\n\
    \    # The cars moving left to right are at positions 1, 2, and 3.\n    # The\
    \ cars moving right to left are at positions 4, 5, and 6.\n    # The cars moving\
    \ left to right are at positions 1, 2, and 3.\n    # The cars moving right to\
    \ left are at positions 4, 5, and 6.\n    # The cars moving left to right are\
    \ at positions 1, 2, and 3.\n    # The cars moving right to left are at positions\
    \ 4, 5, and 6.\n    # The cars moving left to right are at positions 1, 2, and\
    \ 3.\n    # The cars moving right to left are at positions 4, 5, and 6.\n    #\
    \ The cars moving left to right are at positions 1, 2, and 3.\n    # The cars\
    \ moving right to left are at positions 4, 5, and 6.\n    # The cars moving left\
    \ to right are at positions 1, 2, and 3.\n    # The cars moving right to left\
    \ are at positions 4, 5, and 6.\n    # The cars moving left to right are at positions\
    \ 1, 2, and 3.\n    # The cars moving right to left are at positions 4, 5, and\
    \ 6.\n    # The cars moving left to right are at positions 1, 2, and 3.\n    #\
    \ The cars moving right to left are at positions 4, 5, and 6.\n    # The cars\
    \ moving left to right are at positions 1, 2, and 3.\n    # The cars moving right\
    \ to left are at positions 4, 5, and 6.\n    # The cars moving left to right are\
    \ at positions 1, 2, and 3.\n    # The cars moving right to left are at positions\
    \ 4, 5, and 6.\n    # The cars moving left to right are at positions", "    #\
    \ The first argument is the number of cars.\n    # The second argument is the\
    \ speed of the cars.\n    # The third argument is the starting position of the\
    \ first car.\n    # The fourth argument is the starting position of the second\
    \ car.\n    # The fifth argument is the starting position of the third car.\n\
    \    # The sixth argument is the starting position of the fourth car.\n    # The\
    \ seventh argument is the starting position of the fifth car.\n    # The eighth\
    \ argument is the starting position of the sixth car.\n    # The ninth argument\
    \ is the starting position of the seventh car.\n    # The tenth argument is the\
    \ starting position of the eighth car.\n    # The eleventh argument is the starting\
    \ position of the ninth car.\n    # The twelfth argument is the starting position\
    \ of the tenth car.\n    # The thirteenth argument is the starting position of\
    \ the eleventh car.\n    # The fourteenth argument is the starting position of\
    \ the twelfth car.\n    # The fifteenth argument is the starting position of the\
    \ thirteenth car.\n    # The sixteenth argument is the starting position of the\
    \ fourteenth car.\n    # The seventeenth argument is the starting position of\
    \ the fifteenth car.\n    # The eighteenth argument is the starting position of\
    \ the sixteenth car.\n    # The nineteenth argument is the starting position of\
    \ the seventeenth car.\n    # The twentieth argument is the starting position\
    \ of the eighteenth car.\n    # The twenty-first argument is the starting position\
    \ of the nineteenth car.\n    # The twenty-second argument is the starting position\
    \ of the twentieth car.\n    # The twenty-third argument is the starting position\
    \ of the twenty-first car.\n    # The twenty-fourth argument is the starting position\
    \ of the twenty-second car.\n    # The twenty-fifth argument is the starting position\
    \ of the twenty-third car.\n    # The twenty-sixth argument is the starting position\
    \ of the twenty-fourth car.\n    # The twenty-seventh argument is the starting\
    \ position of the twenty-fifth car.\n    # The twenty-eighth argument is the starting\
    \ position of the twenty-sixth car.\n    # The twenty-ninth argument is the starting\
    \ position of the twenty-seventh car.\n    # The thirtieth argument is the starting\
    \ position of the twenty-eighth car.\n    # The thirty-first argument", "    #\
    \ Write your code here\n    # To get the value of an input, use the variable $n\n\
    \    # To print the output to the standard output you can use echo\n    # Example:\
    \ echo $n\n    n=$1\n    read -a left_to_right <<< $(echo $2)\n    read -a right_to_left\
    \ <<< $(echo $3)\n    collisions=0\n    for i in \"${left_to_right[@]}\"\n   \
    \ do\n        for j in \"${right_to_left[@]}\"\n        do\n            if [ $i\
    \ -eq $j ]\n            then\n                collisions=$((collisions+1))\n \
    \           fi\n        done\n    done\n    echo $collisions", "    local n=$1\n\
    \    local left_to_right_cars=$2\n    local right_to_left_cars=$3\n    local collisions=0\n\
    \    local i=0\n    local j=0\n    local car_i=0\n    local car_j=0\n    local\
    \ car_i_position=0\n    local car_j_position=0\n    local car_i_speed=0\n    local\
    \ car_j_speed=0\n    local car_i_direction=0\n    local car_j_direction=0\n  \
    \  local car_i_collision_time=0\n    local car_j_collision_time=0\n    local car_i_collision_position=0\n\
    \    local car_j_collision_position=0\n    local car_i_collision_distance=0\n\
    \    local car_j_collision_distance=0\n    local car_i_collision_speed=0\n   \
    \ local car_j_collision_speed=0\n    local car_i_collision_direction=0\n    local\
    \ car_j_collision_direction=0\n    local car_i_collision_speed_difference=0\n\
    \    local car_j_collision_speed_difference=0\n    local car_i_collision_speed_difference_abs=0\n\
    \    local car_j_collision_speed_difference_abs=0\n    local car_i_collision_speed_difference_abs_min=0\n\
    \    local car_j_collision_speed_difference_abs_min=0\n    local car_i_collision_speed_difference_abs_min_index=0\n\
    \    local car_j_collision_speed_difference_abs_min_index=0\n    local car_i_collision_speed_difference_abs_min_index_array=()\n\
    \    local car_j_collision_speed_difference_abs_min_index_array=()\n    local\
    \ car_i_collision_speed_difference_abs_min_index_array_size=0\n    local car_j_collision_speed_difference_abs_min_index_array_size=0\n\
    \    local car_i", "    local n=$1\n    local left_to_right_cars=$2\n    local\
    \ right_to_left_cars=$3\n    local collisions=0\n    local i=0\n    local j=0\n\
    \    local left_to_right_car=0\n    local right_to_left_car=0\n    for ((i=0;\
    \ i<n; i++)); do\n        left_to_right_car=${left_to_right_cars[$i]}\n      \
    \  for ((j=0; j<n; j++)); do\n            right_to_left_car=${right_to_left_cars[$j]}\n\
    \            if [[ $left_to_right_car -eq $right_to_left_car ]]; then\n      \
    \          ((collisions++))\n            fi\n        done\n    done\n    echo\
    \ $collisions", "    local n=$1\n    local left_to_right_cars=($(echo $2 | tr\
    \ ' ' '\\n' | sort -n))\n    local right_to_left_cars=($(echo $3 | tr ' ' '\\\
    n' | sort -n))\n    local i=0\n    local j=0\n    local collisions=0\n    while\
    \ [ $i -lt $n -a $j -lt $n ]; do\n        if [ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]}\
    \ ]; then\n            i=$((i+1))\n        elif [ ${left_to_right_cars[$i]} -gt\
    \ ${right_to_left_cars[$j]} ]; then\n            j=$((j+1))\n        else\n  \
    \          collisions=$((collisions+1))\n            i=$((i+1))\n            j=$((j+1))\n\
    \        fi\n    done\n    echo $collisions", "    local n=$1\n    local left_to_right_cars=$2\n\
    \    local right_to_left_cars=$3\n    local i=0\n    local j=0\n    local collisions=0\n\
    \    while [ $i -lt $n ] && [ $j -lt $n ]; do\n        if [ ${left_to_right_cars[$i]}\
    \ -eq ${right_to_left_cars[$j]} ]; then\n            collisions=$((collisions+1))\n\
    \            i=$((i+1))\n            j=$((j+1))\n        elif [ ${left_to_right_cars[$i]}\
    \ -lt ${right_to_left_cars[$j]} ]; then\n            i=$((i+1))\n        else\n\
    \            j=$((j+1))\n        fi\n    done\n    echo $collisions", "    # Write\
    \ your code here\n    # This function takes in two arguments:\n    # 1) a string\
    \ containing the speeds of the cars moving left to right\n    # 2) a string containing\
    \ the speeds of the cars moving right to left\n    # The two strings are comma-separated.\n\
    \    # For example, if the cars moving left to right are moving at speeds of\n\
    \    # 20,30,10,40 (in km/hr), then the first argument will be \"20,30,10,40\"\
    \n    # (without the quotes).\n    #\n    # The function should output the number\
    \ of collisions.\n    #\n    # Constraints:\n    # 1) The two strings will contain\
    \ the same number of elements (i.e. the same number of cars).\n    # 2) Each string\
    \ will contain between 1 and 9 elements, inclusive.\n    # 3) Each element in\
    \ the string will be an integer between 1 and 100, inclusive.\n    # 4) The two\
    \ strings will not be empty.\n    #\n    # Example:\n    # If the cars moving\
    \ left to right are moving at speeds of 20,30,10,40 (in km/hr),\n    # and the\
    \ cars moving right to left are moving at speeds of 25,20,30,10 (in km/hr),\n\
    \    # then the function should output 2.\n    #\n    # Explanation:\n    # The\
    \ first car moving left to right will collide with the first car moving right\
    \ to left.\n    # The third car moving left to right will collide with the second\
    \ car moving right to left.\n    # There will be no other collisions.\n    #\n\
    \    # You can write additional functions if you want.\n    # However, the entire\
    \ program must be in this file.\n    #\n    # Hint:\n    # You can use the following\
    \ command to convert a string to an array:\n    # arr=(${str//,/ })\n    # For\
    \ example, if str=\"20,30,10,40\", then arr will be an array containing\n    #\
    \ 20, 30, 10, and 40.\n    #\n    # You can use the following command to convert\
    \ an array to a string:\n    # str=\"${arr[*]}\"\n    # For example, if arr=(20\
    \ 30 10 40), then str will be \"20 30 10", "    # The input is a string of the\
    \ form \"a1,a2,a3,...,an;b1,b2,b3,...,bn\"\n    # where a1,a2,a3,...,an are the\
    \ positions of the cars moving left to right\n    # and b1,b2,b3,...,bn are the\
    \ positions of the cars moving right to left.\n    # The positions are given as\
    \ integers.\n    # The output is the number of collisions.\n    #\n    # For example,\
    \ if the input is \"1,2,3;2,3,4\", then the output is 1.\n    #\n    # Your solution\
    \ must run in O(n log n) time.\n    #\n    # You may assume that the input is\
    \ well-formed, i.e., there are no\n    # leading or trailing spaces, and there\
    \ are no spaces in the input\n    # except for the spaces separating the numbers.\n\
    \    #\n    # You may assume that the input is not empty.\n    #\n    # You may\
    \ assume that the input is not too large, i.e., the number of\n    # cars is not\
    \ more than 100.\n    #\n    # You may assume that the input is such that there\
    \ are no collisions\n    # at the start.\n    #\n    # You may assume that the\
    \ input is such that there are no collisions\n    # at the end.\n    #\n    #\
    \ You may assume that the input is such that there are no collisions\n    # in\
    \ the middle.\n    #\n    # You may assume that the input is such that there are\
    \ no cars that\n    # start at the same position.\n    #\n    # You may assume\
    \ that the input is such that there are no cars that\n    # end at the same position.\n\
    \    #\n    # You may assume that the input is such that there are no cars that\n\
    \    # start at the same position and end at the same position.\n    #\n    #\
    \ You may assume that the input is such that there are no cars that\n    # start\
    \ at the same position and end at the same position and move\n    # in the same\
    \ direction.\n    #\n    # You may assume that the input is such that there are\
    \ no cars that\n    # start at the same position and end at the same position\
    \ and move\n", "    # Write your code here\n    # This function takes in one parameter:\n\
    \    # $1: a string of 2*n space-separated integers, where the first n integers\n\
    \    #     are the starting positions of the cars moving left to right, and the\n\
    \    #     next n integers are the starting positions of the cars moving right\
    \ to left.\n    #     The ith integer in the first n integers is the starting\
    \ position of the ith\n    #     car moving left to right.  The ith integer in\
    \ the second n integers is the\n    #     starting position of the ith car moving\
    \ right to left.\n    #     The starting positions of the cars are guaranteed\
    \ to be distinct.\n    #     The starting positions of the cars are guaranteed\
    \ to be non-negative.\n    #     The starting positions of the cars are guaranteed\
    \ to be less than 1000000.\n    #\n    # For example, if the input is \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\",\n    # then the first 10 integers\
    \ are the starting positions of the cars moving left to right,\n    # and the\
    \ next 10 integers are the starting positions of the cars moving right to left.\n\
    \    # The first car moving left to right starts at position 1, the second car\
    \ moving left to right\n    # starts at position 2, and so on.  The first car\
    \ moving right to left starts at position 11,\n    # the second car moving right\
    \ to left starts at position 12, and so on.\n    #\n    # The function must output\
    \ one integer: the number of collisions.\n    #\n    # For example, if the input\
    \ is \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\",\n    # then the output\
    \ is 10.\n    #\n    # Note: You can write auxiliary functions if you want.\n\
    \    #       You can assume the input is valid.\n    #       You can use/modify/delete\
    \ any part of the given code.\n    #       You must use the parameter $1.\n  \
    \  #       You can give a meaningful error message if the input is invalid.\n\
    \    #       You must run the program like this: \"bash car_race_collision.sh\"\
    .\n    #       You must upload a Bash script named \"car_race_collision.sh", " \
    \   # Write your code here\n    # This function should return a single integer\
    \ that is the number of collisions\n    # between the two sets of cars.\n    #\n\
    \    # You can use the following variables:\n    #\n    # $left_to_right_cars_speeds\
    \ - an array of integers, where each element is the speed\n    #             \
    \                 of a car that's moving left to right.\n    # $right_to_left_cars_speeds\
    \ - an array of integers, where each element is the speed\n    #             \
    \                 of a car that's moving right to left.\n    #\n    # You can\
    \ use any language you want.\n    #\n    # Example:\n    #\n    # left_to_right_cars_speeds=(2\
    \ 3 1)\n    # right_to_left_cars_speeds=(1 3 5)\n    #\n    # The first car that's\
    \ moving left to right will collide with the first car that's\n    # moving right\
    \ to left.  The second car that's moving left to right will collide with\n   \
    \ # the second car that's moving right to left.  The third car that's moving left\
    \ to right\n    # will collide with the third car that's moving right to left.\
    \  Therefore, the output\n    # should be 3.\n    #\n    # Note: the cars are\
    \ not allowed to collide with themselves.  For example, if the\n    # left_to_right_cars_speeds=(1\
    \ 1 1) and right_to_left_cars_speeds=(1 1 1), then the\n    # output should be\
    \ 0.\n    #\n    # Hint: you can use the following command to sort the cars by\
    \ their speeds:\n    #\n    # sorted_left_to_right_cars_speeds=($(printf '%s\\\
    n' \"${left_to_right_cars_speeds[@]}\" | sort -n))\n    # sorted_right_to_left_cars_speeds=($(printf\
    \ '%s\\n' \"${right_to_left_cars_speeds[@]}\" | sort -n))\n    #\n    # Note:\
    \ the above command will sort the cars in ascending order.\n    #\n    # Hint:\
    \ you can use the following command to get the length of", "    local n=$1\n \
    \   local left_to_right_cars=($(echo $2 | tr ' ' '\\n' | sort -n))\n    local\
    \ right_to_left_cars=($(echo $3 | tr ' ' '\\n' | sort -n))\n    local i=0\n  \
    \  local j=0\n    local collisions=0\n    while [ $i -lt $n ] && [ $j -lt $n ];\
    \ do\n        if [ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]} ];\
    \ then\n            ((i++))\n        elif [ ${left_to_right_cars[$i]} -gt ${right_to_left_cars[$j]}\
    \ ]; then\n            ((j++))\n        else\n            ((collisions++))\n \
    \           ((i++))\n            ((j++))\n        fi\n    done\n    echo $collisions",
  "    # The input is a string of the form \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20\"\n    # The first 10 numbers are the cars moving left to right,\
    \ the last 10 numbers are the cars\n    # moving right to left.  The numbers are\
    \ the starting positions of the cars.\n    # The cars move at the same speed,\
    \ so the starting position is the only thing that matters.\n    # The cars are\
    \ infinitely sturdy, so they do not stop when they collide.\n    # The cars are\
    \ infinitely strong, so they do not change their trajectory when they collide.\n\
    \    # The cars are infinitely small, so they do not change their position when\
    \ they collide.\n    # The cars are infinitely fast, so they do not change their\
    \ speed when they collide.\n    # The cars are infinitely precise, so they do\
    \ not change their direction when they collide.\n    # The cars are infinitely\
    \ accurate, so they do not change their aim when they collide.\n    # The cars\
    \ are infinitely agile, so they do not change their maneuverability when they\
    \ collide.\n    # The cars are infinitely flexible, so they do not change their\
    \ flexibility when they collide.\n    # The cars are infinitely elastic, so they\
    \ do not change their elasticity when they collide.\n    # The cars are infinitely\
    \ strong, so they do not change their strength when they collide.\n    # The cars\
    \ are infinitely tough, so they do not change their toughness when they collide.\n\
    \    # The cars are infinitely hard, so they do not change their hardness when\
    \ they collide.\n    # The cars are infinitely rigid, so they do not change their\
    \ rigidity when they collide.\n    # The cars are infinitely brittle, so they\
    \ do not change their brittleness when they collide.\n    # The cars are infinitely\
    \ dense, so they do not change their density when they collide.\n    # The cars\
    \ are infinitely heavy, so they do not change their weight when they collide.\n\
    \    # The cars are infinitely light, so they do not change their lightness when\
    \ they collide.\n    # The cars are infinitely buoyant, so they do not change\
    \ their buoyancy when they collide.\n    # The cars are infinitely aerodynamic,\
    \ so they do not change their aerodynamics when they collide.\n    # The cars\
    \ are infinitely streamlined, so they do not change their streamlining when they\
    \ collide.\n    # The cars are infinitely", "    # The first line of input is\
    \ the number of cars.\n    read n\n    # The second line of input is the speed\
    \ of the cars moving left to right.\n    read -a left_to_right\n    # The third\
    \ line of input is the speed of the cars moving right to left.\n    read -a right_to_left\n\
    \    # Sort the cars moving left to right.\n    left_to_right=($(printf \"%s\\\
    n\" \"${left_to_right[@]}\" | sort -n))\n    # Sort the cars moving right to left.\n\
    \    right_to_left=($(printf \"%s\\n\" \"${right_to_left[@]}\" | sort -n))\n \
    \   # The number of collisions is the number of cars that are moving left to right\n\
    \    # and are faster than the cars moving right to left.\n    i=0\n    j=0\n\
    \    collisions=0\n    while [ $i -lt $n ] && [ $j -lt $n ]; do\n        if [\
    \ ${left_to_right[$i]} -gt ${right_to_left[$j]} ]; then\n            collisions=$((collisions\
    \ + 1))\n            j=$((j + 1))\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $collisions", "    # Write your code here\n    # This function takes\
    \ in two arguments:\n    # 1. The first argument is the number of cars moving\
    \ left to right\n    # 2. The second argument is the number of cars moving right\
    \ to left\n    # The function should output the number of collisions\n    #\n\
    \    # For example, if there are 3 cars moving left to right and 2 cars moving\
    \ right to left,\n    # the function should output 1.\n    #\n    # Hint: You\
    \ can use the echo command to output the answer.\n    # For example, if the answer\
    \ is 5, you can use the following command:\n    # echo 5\n    #\n    # Hint: You\
    \ can use the bc command to do floating point arithmetic.\n    # For example,\
    \ if you want to calculate 3.14 + 2.71, you can use the following command:\n \
    \   # echo \"3.14 + 2.71\" | bc\n    #\n    # Hint: You can use the sort command\
    \ to sort the cars by their positions.\n    # For example, if you want to sort\
    \ the cars by their positions, you can use the following command:\n    # sort\
    \ -n\n    #\n    # Hint: You can use the uniq command to count the number of unique\
    \ cars.\n    # For example, if you want to count the number of unique cars, you\
    \ can use the following command:\n    # uniq -c\n    #\n    # Hint: You can use\
    \ the tr command to translate characters.\n    # For example, if you want to translate\
    \ all occurrences of the letter 'a' to the letter 'b', you can use the following\
    \ command:\n    # tr 'a' 'b'\n    #\n    # Hint: You can use the wc command to\
    \ count the number of lines.\n    # For example, if you want to count the number\
    \ of lines, you can use the following command:\n    # wc -l\n    #\n    # Hint:\
    \ You can use the head command to get the first few lines.\n    # For example,\
    \ if you want to get the first 3 lines, you can use the following command:\n \
    \   # head -n 3\n    #\n    # Hint: You can use the tail command to get the last\
    \ few lines.\n    # For example, if you want to get the last", "    # Write your\
    \ code here\n    # To get the value of an input, use the following syntax:\n \
    \   #     input_variable_name=$1\n    # For example, if the input is \"1 2 3 4\
    \ 5\",\n    # the value of input_variable_name is \"1 2 3 4 5\"\n    #\n    #\
    \ To store the output, use the following syntax:\n    #     output=$?\n    # For\
    \ example, if the output is \"1 2 3 4 5\",\n    # set output=\"1 2 3 4 5\"\n \
    \   #\n    # To store the output of a command, use the following syntax:\n   \
    \ #     output=$(command)\n    # For example, if the output is \"1 2 3 4 5\",\n\
    \    # set output=$(echo \"1 2 3 4 5\")\n    #\n    # To store the output of a\
    \ command in a variable, use the following syntax:\n    #     output_variable_name=$(command)\n\
    \    # For example, if the output is \"1 2 3 4 5\",\n    # set output_variable_name=$(echo\
    \ \"1 2 3 4 5\")\n    #\n    # To store the exit code of a command, use the following\
    \ syntax:\n    #     exit_code=$?\n    # For example, if the exit code is \"1\"\
    ,\n    # set exit_code=$?\n    #\n    # To store the exit code of a command in\
    \ a variable, use the following syntax:\n    #     exit_code_variable_name=$?\n\
    \    # For example, if the exit code is \"1\",\n    # set exit_code_variable_name=$?\n\
    \    #\n    # To print to stdout, use the following syntax:\n    #     echo \"\
    your message\"\n    # For example, if you want to print \"Hello World\",\n   \
    \ # set echo \"Hello World\"\n    #\n    # To print to stderr, use the following\
    \ syntax:\n    #     echo \"your message\" >&2\n    # For example, if you want\
    \ to print \"Hello World\",\n    # set echo \"Hello World\" >&2\n    #\n    #\
    \ To print the value of a variable, use the following syntax:\n    #     echo\
    \ \"$your_variable_name\"\n    # For example,", "    local n=$1\n    local left_to_right_cars=$2\n\
    \    local right_to_left_cars=$3\n    local collisions=0\n    local i=0\n    local\
    \ j=0\n    local left_to_right_car=0\n    local right_to_left_car=0\n    for ((i=0;\
    \ i<n; i++)); do\n        left_to_right_car=${left_to_right_cars[$i]}\n      \
    \  for ((j=0; j<n; j++)); do\n            right_to_left_car=${right_to_left_cars[$j]}\n\
    \            if ((left_to_right_car == right_to_left_car)); then\n           \
    \     collisions=$((collisions+1))\n            fi\n        done\n    done\n \
    \   echo $collisions", "    # Write your code here\n    # To get the value of\
    \ the argument passed to the function, use the variable $1\n    # For example,\
    \ passing \"5\" as argument, to this function would make $1=5\n    # You can access\
    \ all arguments using $1, $2, $3 etc.\n    # You can access all arguments using\
    \ $@\n    # You can access the number of arguments passed to the function using\
    \ $#\n    # You can access the return value of the last command using $?\n   \
    \ # You can access the process id of the last command using $$\n    # You can\
    \ access the process id of the current shell using $BASHPID\n    # You can access\
    \ the name of the shell script using $0\n    # You can access the arguments passed\
    \ to the shell script using $*\n    # You can access the exit status of the last\
    \ command using $?\n    # You can access the number of arguments passed to the\
    \ shell script using $#\n    # You can access the current line number in the script\
    \ using $LINENO\n    # You can access the name of the shell using $BASH\n    #\
    \ You can access the version of the shell using $BASH_VERSION\n    # You can access\
    \ the current working directory using $PWD\n    # You can access the current user\
    \ id using $UID\n    # You can access the home directory of the current user using\
    \ $HOME\n    # You can access the hostname of the machine using $HOSTNAME\n  \
    \  # You can access the current shell options using $-\n    # You can access the\
    \ name of the shell using $0\n    # You can access the arguments passed to the\
    \ shell script using $*\n    # You can access the arguments passed to the shell\
    \ script using $@\n    # You can access the number of arguments passed to the\
    \ shell script using $#\n    # You can access the exit status of the last command\
    \ using $?\n    # You can access the current line number in the script using $LINENO\n\
    \    # You can access the name of the shell using $BASH\n    # You can access\
    \ the version of the shell using $BASH_VERSION\n    # You can access the current\
    \ working directory using $PWD\n    # You can access the current user id using\
    \ $UID\n    # You can access the home directory of the current user using $HOME\n\
    \    # You can", "    # The first line of the input contains the number of test\
    \ cases.\n    # Each test case consists of two lines.  The first line contains\
    \ the number\n    # of cars n.  The second line contains n integers, the positions\
    \ of the cars\n    # moving left to right.  The third line contains n integers,\
    \ the positions\n    # of the cars moving right to left.\n    local n\n    read\
    \ n\n    local -a left_to_right\n    local -a right_to_left\n    local i\n   \
    \ for ((i=0; i<n; i++)); do\n        read left_to_right[$i]\n    done\n    for\
    \ ((i=0; i<n; i++)); do\n        read right_to_left[$i]\n    done\n    # Sort\
    \ the cars moving left to right.\n    local -a sorted_left_to_right\n    for ((i=0;\
    \ i<n; i++)); do\n        sorted_left_to_right[$i]=${left_to_right[$i]}\n    done\n\
    \    qsort sorted_left_to_right 0 $((n-1))\n    # Sort the cars moving right to\
    \ left.\n    local -a sorted_right_to_left\n    for ((i=0; i<n; i++)); do\n  \
    \      sorted_right_to_left[$i]=${right_to_left[$i]}\n    done\n    qsort sorted_right_to_left\
    \ 0 $((n-1))\n    # Count the number of collisions.\n    local collisions=0\n\
    \    local left_to_right_index=0\n    local right_to_left_index=0\n    while ((left_to_right_index\
    \ < n && right_to_left_index < n)); do\n        if ((sorted_left_to_right[left_to_right_index]\
    \ < sorted_right_to_left[right_to_left_index])); then\n            collisions=$((collisions\
    \ + n - right_to_left_index))\n            left_to_right_index=$((left_to_right_index\
    \ + 1))\n        else\n            right_to_left_index=$((right_to_left_index\
    \ + 1))\n       ", "    # Write your code here\n    # To get the value of the\
    \ argument passed to the function, use the variable $1\n    # For example, passing\
    \ \"5\" as argument, the value of $1 inside the function will be \"5\"\n    #\
    \ To print the output, use the echo command as below\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"Number of collisions:\
    \ \"\n    # echo \"Number of collisions: \"\n    # echo \"", "    # Write your\
    \ code here\n    # This function takes in two arguments:\n    #   - a string that\
    \ represents the cars moving left to right\n    #   - a string that represents\
    \ the cars moving right to left\n    # For example, if the input is \"ABC\" and\
    \ \"DEF\", then the cars moving left to right\n    # are A, B, and C; and the\
    \ cars moving right to left are D, E, and F.\n    # The function should output\
    \ the number of collisions.\n    # For example, if the input is \"ABC\" and \"\
    DEF\", then the output should be 0.\n    # If the input is \"ABC\" and \"DFA\"\
    , then the output should be 2.\n    # If the input is \"ABC\" and \"DFF\", then\
    \ the output should be 3.\n    # If the input is \"ABC\" and \"FFF\", then the\
    \ output should be 3.\n    # If the input is \"ABC\" and \"FFF\", then the output\
    \ should be 3.\n    # If the input is \"ABC\" and \"FFF\", then the output should\
    \ be 3.\n    # If the input is \"ABC\" and \"FFF\", then the output should be\
    \ 3.\n    # If the input is \"ABC\" and \"FFF\", then the output should be 3.\n\
    \    # If the input is \"ABC\" and \"FFF\", then the output should be 3.\n   \
    \ # If the input is \"ABC\" and \"FFF\", then the output should be 3.\n    # If\
    \ the input is \"ABC\" and \"FFF\", then the output should be 3.\n    # If the\
    \ input is \"ABC\" and \"FFF\", then the output should be 3.\n    # If the input\
    \ is \"ABC\" and \"FFF\", then the output should be 3.\n    # If the input is\
    \ \"ABC\" and \"FFF\", then the output should be 3.\n    # If the input is \"\
    ABC\" and \"FFF\", then the output should be 3.\n    # If the input is \"ABC\"\
    \ and \"FFF\", then the output should be 3.\n    # If the input is \"ABC\" and\
    \ \"FFF\", then the output should be 3.\n    # If the input is \"ABC\" and \"\
    FFF\", then the output should be 3.\n    # If the", "    local left_to_right_cars=($1)\n\
    \    local right_to_left_cars=($2)\n    local collisions=0\n    local i\n    local\
    \ j\n    for ((i=0; i<${#left_to_right_cars[@]}; i++)); do\n        for ((j=0;\
    \ j<${#right_to_left_cars[@]}; j++)); do\n            if [[ ${left_to_right_cars[i]}\
    \ -eq ${right_to_left_cars[j]} ]]; then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    # The first\
    \ line of the input is the number of cars.\n    read n\n    # The second line\
    \ of the input is the positions of the cars that are moving left to right.\n \
    \   read -a left_to_right\n    # The third line of the input is the positions\
    \ of the cars that are moving right to left.\n    read -a right_to_left\n    #\
    \ Sort the two arrays.\n    left_to_right=($(for i in \"${left_to_right[@]}\"\
    ; do echo \"$i\"; done | sort -n))\n    right_to_left=($(for i in \"${right_to_left[@]}\"\
    ; do echo \"$i\"; done | sort -n))\n    # The number of collisions is the number\
    \ of elements in the intersection of the two arrays.\n    # The intersection of\
    \ the two arrays is the set of elements that are in both arrays.\n    # The intersection\
    \ of the two arrays is the set of elements that are in both arrays.\n    # The\
    \ intersection of the two arrays is the set of elements that are in both arrays.\n\
    \    # The intersection of the two arrays is the set of elements that are in both\
    \ arrays.\n    # The intersection of the two arrays is the set of elements that\
    \ are in both arrays.\n    # The intersection of the two arrays is the set of\
    \ elements that are in both arrays.\n    # The intersection of the two arrays\
    \ is the set of elements that are in both arrays.\n    # The intersection of the\
    \ two arrays is the set of elements that are in both arrays.\n    # The intersection\
    \ of the two arrays is the set of elements that are in both arrays.\n    # The\
    \ intersection of the two arrays is the set of elements that are in both arrays.\n\
    \    # The intersection of the two arrays is the set of elements that are in both\
    \ arrays.\n    # The intersection of the two arrays is the set of elements that\
    \ are in both arrays.\n    # The intersection of the two arrays is the set of\
    \ elements that are in both arrays.\n    # The intersection of the two arrays\
    \ is the set of elements that are in both arrays.\n    # The intersection of the\
    \ two arrays is the set of elements that are in both arrays.\n    # The intersection\
    \ of the two arrays is the set of elements that are in both arrays.\n    # The\
    \ intersection of the two arrays is the", "    # The input is a string of n numbers\
    \ separated by spaces.\n    # The first n numbers are the positions of the cars\
    \ that are moving left to right.\n    # The second n numbers are the positions\
    \ of the cars that are moving right to left.\n    # The positions are given in\
    \ increasing order.\n    # The output is the number of collisions.\n    # Example:\n\
    \    #   car_race_collision \"1 2 3 4\" \"5 6 7 8\"\n    #   # The cars moving\
    \ left to right are at positions 1, 2, 3, 4.\n    #   # The cars moving right\
    \ to left are at positions 5, 6, 7, 8.\n    #   # The cars moving left to right\
    \ will collide with the cars moving right to left\n    #   # at positions 2, 3,\
    \ 4.\n    #   # The output is 3.\n    #\n    #   car_race_collision \"1 2 3 4\"\
    \ \"5 6 7 8 9\"\n    #   # The cars moving left to right are at positions 1, 2,\
    \ 3, 4.\n    #   # The cars moving right to left are at positions 5, 6, 7, 8,\
    \ 9.\n    #   # The cars moving left to right will collide with the cars moving\
    \ right to left\n    #   # at positions 2, 3, 4.\n    #   # The output is 3.\n\
    \    #\n    #   car_race_collision \"1 2 3 4\" \"5 6 7 8 9 10\"\n    #   # The\
    \ cars moving left to right are at positions 1, 2, 3, 4.\n    #   # The cars moving\
    \ right to left are at positions 5, 6, 7, 8, 9, 10.\n    #   # The cars moving\
    \ left to right will collide with the cars moving right to left\n    #   # at\
    \ positions 2, 3, 4.\n    #   # The output is 3.\n    #\n    #   car_race_collision\
    \ \"1 2 3 4\" \"5 6 7 8 9 10 11\"\n    #   # The cars moving left to right are\
    \ at positions 1, 2, 3, 4.\n    #   # The cars moving right to left are at positions\
    \ 5, 6, 7, 8, 9, 10, 11.\n    #   # The cars moving left to", "    local n=$1\n\
    \    local left_to_right=$2\n    local right_to_left=$3\n    local collisions=0\n\
    \    local i=0\n    local j=0\n    while [ $i -lt $n ] && [ $j -lt $n ]; do\n\
    \        if [ ${left_to_right[$i]} -lt ${right_to_left[$j]} ]; then\n        \
    \    ((i++))\n        elif [ ${left_to_right[$i]} -gt ${right_to_left[$j]} ];\
    \ then\n            ((j++))\n        else\n            ((collisions++))\n    \
    \        ((i++))\n            ((j++))\n        fi\n    done\n    echo $collisions",
  "    # Write your code here\n    # To get the value of the argument passed to the\
    \ function, use the variable $1\n    # For example, passing \"5\" as argument,\
    \ would make $1=5\n    # You can test your function by calling it and passing\
    \ it different arguments\n    # For example, \"car_race_collision 5\"\n    # This\
    \ should output the number of collisions for 5 cars\n    # You can also test your\
    \ function by hardcoding the argument\n    # For example, to hardcode the argument\
    \ as 5, replace \"$1\" with \"5\"\n    # Note that you will have to manually update\
    \ this number every time you want to test with a different argument\n    # You\
    \ can use the echo command to print the output of your function\n    # For example,\
    \ \"echo hello world\" will print \"hello world\" to the console\n    # You can\
    \ also use the echo command to print the output of a command\n    # For example,\
    \ \"echo $1\" will print the value of $1\n    # You can also use the echo command\
    \ to print the output of a math operation\n    # For example, \"echo $((1+1))\"\
    \ will print \"2\"\n    # You can also use the echo command to print the output\
    \ of a variable\n    # For example, \"echo answer\" will print the value of the\
    \ variable answer\n    # You can also use the echo command to print the output\
    \ of a math operation involving a variable\n    # For example, \"echo $((answer+1))\"\
    \ will print the value of answer plus 1\n    # You can also use the echo command\
    \ to print the output of a command involving a variable\n    # For example, \"\
    echo $((1/$answer))\" will print the value of 1 divided by the value of answer\n\
    \    # You can also use the echo command to print the output of a command involving\
    \ a math operation\n    # For example, \"echo $((1/($1+1)))\" will print the value\
    \ of 1 divided by the value of $1 plus 1\n    # You can also use the echo command\
    \ to print the output of a command involving a math operation involving a variable\n\
    \    # For example, \"echo $((1/($answer+1)))\" will print the value of 1 divided\
    \ by the value of answer plus 1\n    # You can also use the echo command to print\
    \ the output of a command", "    # The input is a string of n numbers, each number\
    \ being the starting position of a car\n    # that's moving left to right.  The\
    \ numbers are separated by a space.\n    # The input also contains a string of\
    \ n numbers, each number being the starting position\n    # of a car that's moving\
    \ right to left.  The numbers are separated by a space.\n    # The output is the\
    \ number of collisions.\n    #\n    # Example:\n    #   car_race_collision \"\
    1 2 3 4 5\" \"6 7 8 9 10\"\n    #   returns 0\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5\" \"5 6 7 8 9\"\n    #   returns 1\n    #\n    #   car_race_collision\
    \ \"1 2 3 4 5", "    # Write your code here\n    # This function takes in two\
    \ arguments:\n    # 1) An array of integers that represent the speeds of the cars\
    \ moving left to right\n    # 2) An array of integers that represent the speeds\
    \ of the cars moving right to left\n    # The function should output the number\
    \ of collisions\n    #\n    # For example, if the input arrays are:\n    # [1,\
    \ 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    # The output should be:\n    # 5\n \
    \   #\n    # If the input arrays are:\n    # [1, 2, 3, 4, 5]\n    # [1, 2, 3,\
    \ 4, 5]\n    # The output should be:\n    # 0\n    #\n    # If the input arrays\
    \ are:\n    # [1, 2, 3, 4, 5]\n    # [5, 5, 5, 5, 5]\n    # The output should\
    \ be:\n    # 5\n    #\n    # If the input arrays are:\n    # [1, 2, 3, 4, 5]\n\
    \    # [5, 4, 3, 2, 1]\n    # The output should be:\n    # 5\n    #\n    # If\
    \ the input arrays are:\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    # The\
    \ output should be:\n    # 5\n    #\n    # If the input arrays are:\n    # [1,\
    \ 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    # The output should be:\n    # 5\n \
    \   #\n    # If the input arrays are:\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3,\
    \ 2, 1]\n    # The output should be:\n    # 5\n    #\n    # If the input arrays\
    \ are:\n    # [1, 2, 3, 4, 5]\n    # [5, 4, 3, 2, 1]\n    # The output should\
    \ be:\n    # 5\n    #\n    # If the input arrays are:\n    # [1, 2, 3, 4, 5",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"", " \
    \   local -a left_to_right\n    local -a right_to_left\n    local -i i\n    local\
    \ -i j\n    local -i collisions=0\n    local -i n\n    local -i left_to_right_size\n\
    \    local -i right_to_left_size\n    local -i left_to_right_car\n    local -i\
    \ right_to_left_car\n    local -i left_to_right_car_position\n    local -i right_to_left_car_position\n\
    \    local -i left_to_right_car_speed\n    local -i right_to_left_car_speed\n\
    \    local -i left_to_right_car_time\n    local -i right_to_left_car_time\n  \
    \  local -i time_to_collision\n    local -i time_to_collision_left_to_right\n\
    \    local -i time_to_collision_right_to_left\n    local -i time_to_collision_left_to_right_car\n\
    \    local -i time_to_collision_right_to_left_car\n    local -i time_to_collision_left_to_right_car_position\n\
    \    local -i time_to_collision_right_to_left_car_position\n    local -i time_to_collision_left_to_right_car_speed\n\
    \    local -i time_to_collision_right_to_left_car_speed\n    local -i time_to_collision_left_to_right_car_time\n\
    \    local -i time_to_collision_right_to_left_car_time\n    local -i time_to_collision_left_to_right_car_index\n\
    \    local -i time_to_collision_right_to_left_car_index\n    local -i time_to_collision_left_to_right_car_index_position\n\
    \    local -i time_to_collision_right_to_left_car_index_position\n    local -i\
    \ time_to_collision_left_to_right_car_index_speed\n    local -i time_to_collision_right_",
  "    # $1 is the number of cars\n    # $2 is the speed of the cars\n    # $3 is\
    \ the distance between the two sets of cars\n    # $4 is the number of collisions\n\
    \    # $5 is the number of cars that have already collided\n    # $6 is the number\
    \ of cars that have already collided\n    # $7 is the number of cars that have\
    \ already collided\n    # $8 is the number of cars that have already collided\n\
    \    # $9 is the number of cars that have already collided\n    # $10 is the number\
    \ of cars that have already collided\n    # $11 is the number of cars that have\
    \ already collided\n    # $12 is the number of cars that have already collided\n\
    \    # $13 is the number of cars that have already collided\n    # $14 is the\
    \ number of cars that have already collided\n    # $15 is the number of cars that\
    \ have already collided\n    # $16 is the number of cars that have already collided\n\
    \    # $17 is the number of cars that have already collided\n    # $18 is the\
    \ number of cars that have already collided\n    # $19 is the number of cars that\
    \ have already collided\n    # $20 is the number of cars that have already collided\n\
    \    # $21 is the number of cars that have already collided\n    # $22 is the\
    \ number of cars that have already collided\n    # $23 is the number of cars that\
    \ have already collided\n    # $24 is the number of cars that have already collided\n\
    \    # $25 is the number of cars that have already collided\n    # $26 is the\
    \ number of cars that have already collided\n    # $27 is the number of cars that\
    \ have already collided\n    # $28 is the number of cars that have already collided\n\
    \    # $29 is the number of cars that have already collided\n    # $30 is the\
    \ number of cars that have already collided\n    # $31 is the number of cars that\
    \ have already collided\n    # $32 is the number of cars that have already collided\n\
    \    # $33 is the number of cars that have already collided\n    # $34 is the\
    \ number of cars that have already collided\n    # $35 is the number of cars that\
    \ have already collided\n    # $36 is the number of cars that have already collided\n\
    \    # $37 is the number of cars that have already collided\n    # $38", "   \
    \ # Write your code here\n    # This function takes in two arrays of integers,\
    \ left and right.\n    # left represents the positions of the cars moving left\
    \ to right.\n    # right represents the positions of the cars moving right to\
    \ left.\n    # The function should output the number of collisions.\n    #\n \
    \   # For example, if left = [1, 2, 3, 4] and right = [5, 6, 7, 8],\n    # then\
    \ there are 4 collisions.\n    #\n    # If left = [1, 2, 3, 4] and right = [4,\
    \ 3, 2, 1],\n    # then there are 0 collisions.\n    #\n    # If left = [1, 2,\
    \ 3, 4] and right = [1, 2, 3, 4],\n    # then there are 4 collisions.\n    #\n\
    \    # If left = [1, 2, 3, 4] and right = [2, 3, 4, 5],\n    # then there are\
    \ 4 collisions.\n    #\n    # If left = [1, 2, 3, 4] and right = [5, 4, 3, 2],\n\
    \    # then there are 4 collisions.\n    #\n    # If left = [1, 2, 3, 4] and right\
    \ = [1, 2, 3, 5],\n    # then there are 3 collisions.\n    #\n    # If left =\
    \ [1, 2, 3, 4] and right = [5, 4, 3, 1],\n    # then there are 3 collisions.\n\
    \    #\n    # If left = [1, 2, 3, 4] and right = [1, 2, 3, 6],\n    # then there\
    \ are 2 collisions.\n    #\n    # If left = [1, 2, 3, 4] and right = [6, 5, 4,\
    \ 3],\n    # then there are 2 collisions.\n    #\n    # If left = [1, 2, 3, 4]\
    \ and right = [1, 2, 3, 7],\n    # then there are 1 collisions.\n    #\n    #\
    \ If left = [1, 2, 3, 4] and right = [7, 6, 5, 4],\n    # then there are 1 collisions.\n\
    \    #\n    # If left = [1, 2, 3", "    local n=$1\n    local left_to_right_cars=($(echo\
    \ $2))\n    local right_to_left_cars=($(echo $3))\n    local collisions=0\n  \
    \  for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if\
    \ ((left_to_right_cars[i] == right_to_left_cars[j])); then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions", "    # Write your\
    \ code here\n    #\n    # The first line of the input gives the number of test\
    \ cases, T.\n    # T test cases follow.  Each test case begins with a line containing\
    \ a single integer n.\n    # The next line contains n integers, the positions\
    \ of the cars moving left to right.\n    # The next line contains n integers,\
    \ the positions of the cars moving right to left.\n    #\n    # For each test\
    \ case, output one line containing \"Case #x: y\", where x is the case number\n\
    \    # (starting from 1) and y is the number of collisions.\n    #\n    # Limits\n\
    \    # 1 \u2264 T \u2264 100.\n    # 0 \u2264 all positions \u2264 10^9.\n   \
    \ # All positions are distinct.\n    #\n    # Small dataset\n    # 1 \u2264 n\
    \ \u2264 2.\n    #\n    # Large dataset\n    # 1 \u2264 n \u2264 1000.\n    #\n\
    \    # Sample\n    #\n    # Input\n    # 2\n    # 2\n    # 1 2\n    # 3 4\n  \
    \  # 3\n    # 1 3 5\n    # 2 4 6\n    #\n    # Output\n    # Case #1: 1\n    #\
    \ Case #2: 3\n    #\n    # In Sample Case #1, the cars at positions 1 and 3 collide,\
    \ as do the cars at positions 2 and 4.\n    # In Sample Case #2, the cars at positions\
    \ 1 and 4 collide, as do the cars at positions 3 and 6,\n    # and the cars at\
    \ positions 5 and 2 collide.\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #", "    # The first line of the input is the number\
    \ of cars.\n    read n\n    # The next n lines are the positions of the cars moving\
    \ left to right.\n    read -a left_to_right\n    # The next n lines are the positions\
    \ of the cars moving right to left.\n    read -a right_to_left\n    # Sort the\
    \ cars moving left to right.\n    left_to_right=($(printf \"%s\\n\" \"${left_to_right[@]}\"\
    \ | sort -n))\n    # Sort the cars moving right to left.\n    right_to_left=($(printf\
    \ \"%s\\n\" \"${right_to_left[@]}\" | sort -n))\n    # The number of collisions\
    \ is the number of cars moving left to right\n    # that are to the left of the\
    \ first car moving right to left.\n    echo $((${#left_to_right[@]} - $(printf\
    \ \"%s\\n\" \"${left_to_right[@]}\" | grep -n -F -x -m 1 \"${right_to_left[0]}\"\
    \ | cut -d: -f1)))", "  # Write your code here\n  #\n  # The first line of the\
    \ input gives the number of test cases, T.\n  # T test cases follow. Each test\
    \ case begins with a line containing a single integer n.\n  # The next line contains\
    \ n integers, the positions of the cars moving left to right.\n  # The next line\
    \ contains n integers, the positions of the cars moving right to left.\n  #\n\
    \  # For each test case, output one line containing \"Case #x: y\", where x is\
    \ the case number\n  # (starting from 1) and y is the number of collisions.\n\
    \  #\n  # Limits\n  #\n  # 1 \u2264 T \u2264 100.\n  # 0 \u2264 all positions\
    \ \u2264 10^9.\n  #\n  # Small dataset\n  #\n  # 2 \u2264 n \u2264 10.\n  #\n\
    \  # Large dataset\n  #\n  # 2 \u2264 n \u2264 1000.\n  #\n  # Sample\n  #\n \
    \ # Input\n  #\n  # 3\n  # 2\n  # 1 2\n  # 3 4\n  # 3\n  # -1 2 3\n  # 4 1 -2\n\
    \  # 5\n  # -2 -1 0 1 2\n  # 2 1 0 -1 -2\n  #\n  # Output\n  #\n  # Case #1: 0\n\
    \  # Case #2: 2\n  # Case #3: 5\n  #\n  # In Case #1, the cars are moving in opposite\
    \ directions, so there are no collisions.\n  # In Case #2, the cars at positions\
    \ 1 and 3 collide. The cars at positions 2 and 4 collide.\n  # In Case #3, all\
    \ 5 pairs of cars collide.\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n ", "    # The input is a string of numbers separated by spaces.\n\
    \    # The first n numbers are the positions of the cars moving left to right.\n\
    \    # The last n numbers are the positions of the cars moving right to left.\n\
    \    # The positions are given in increasing order.\n    # The output is the number\
    \ of collisions.\n    # For example, if the input is \"1 3 5 7 9 2 4 6 8 10\"\
    , then the output is 2.\n    # The first car moving left to right collides with\
    \ the second car moving right to left.\n    # The third car moving left to right\
    \ collides with the fourth car moving right to left.\n    # The fifth car moving\
    \ left to right does not collide with any car moving right to left.\n    # The\
    \ sixth car moving left to right does not collide with any car moving right to\
    \ left.\n    # The seventh car moving left to right does not collide with any\
    \ car moving right to left.\n    # The eighth car moving left to right does not\
    \ collide with any car moving right to left.\n    # The ninth car moving left\
    \ to right does not collide with any car moving right to left.\n    # The tenth\
    \ car moving left to right does not collide with any car moving right to left.\n\
    \    # The eleventh car moving left to right does not collide with any car moving\
    \ right to left.\n    # The twelfth car moving left to right does not collide\
    \ with any car moving right to left.\n    # The thirteenth car moving left to\
    \ right does not collide with any car moving right to left.\n    # The fourteenth\
    \ car moving left to right does not collide with any car moving right to left.\n\
    \    # The fifteenth car moving left to right does not collide with any car moving\
    \ right to left.\n    # The sixteenth car moving left to right does not collide\
    \ with any car moving right to left.\n    # The seventeenth car moving left to\
    \ right does not collide with any car moving right to left.\n    # The eighteenth\
    \ car moving left to right does not collide with any car moving right to left.\n\
    \    # The nineteenth car moving left to right does not collide with any car moving\
    \ right to left.\n    # The twentieth car moving left to right does not collide\
    \ with any car moving right to left.\n    # The twenty-first car moving left to\
    \ right does not collide with any car moving right to left.\n    #", "    local\
    \ -a left_to_right_cars\n    local -a right_to_left_cars\n    local -i i\n   \
    \ local -i j\n    local -i k\n    local -i n\n    local -i collisions\n\n    collisions=0\n\
    \    read n\n    for ((i=0; i<n; i++)); do\n        read left_to_right_cars[i]\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        read right_to_left_cars[i]\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n\
    \            if [[ ${left_to_right_cars[i]} -eq ${right_to_left_cars[j]} ]]; then\n\
    \                collisions=$((collisions+1))\n            fi\n        done\n\
    \    done\n    echo $collisions", "    # $1 is the number of cars driving left\
    \ to right\n    # $2 is the number of cars driving right to left\n    # $3 is\
    \ the speed of the cars\n    # $4 is the distance between the two sets of cars\n\
    \    # $5 is the distance between the cars in each set\n    # $6 is the distance\
    \ between the cars in each set\n    # $7 is the distance between the cars in each\
    \ set\n    # $8 is the distance between the cars in each set\n    # $9 is the\
    \ distance between the cars in each set\n    # $10 is the distance between the\
    \ cars in each set\n    # $11 is the distance between the cars in each set\n \
    \   # $12 is the distance between the cars in each set\n    # $13 is the distance\
    \ between the cars in each set\n    # $14 is the distance between the cars in\
    \ each set\n    # $15 is the distance between the cars in each set\n    # $16\
    \ is the distance between the cars in each set\n    # $17 is the distance between\
    \ the cars in each set\n    # $18 is the distance between the cars in each set\n\
    \    # $19 is the distance between the cars in each set\n    # $20 is the distance\
    \ between the cars in each set\n    # $21 is the distance between the cars in\
    \ each set\n    # $22 is the distance between the cars in each set\n    # $23\
    \ is the distance between the cars in each set\n    # $24 is the distance between\
    \ the cars in each set\n    # $25 is the distance between the cars in each set\n\
    \    # $26 is the distance between the cars in each set\n    # $27 is the distance\
    \ between the cars in each set\n    # $28 is the distance between the cars in\
    \ each set\n    # $29 is the distance between the cars in each set\n    # $30\
    \ is the distance between the cars in each set\n    # $31 is the distance between\
    \ the cars in each set\n    # $32 is the distance between the cars in each set\n\
    \    # $33 is the distance between the cars in each set\n    # $34 is the distance\
    \ between the cars in each set\n    # $35 is the distance between the cars in\
    \ each set\n    # $36 is the distance between the cars in each set\n    # $37\
    \ is the distance between the cars", "    local -a left_to_right=($1)\n    local\
    \ -a right_to_left=($2)\n    local -i n=${#left_to_right[@]}\n    local -i i\n\
    \    local -i j\n    local -i collisions=0\n    for ((i=0; i<n; i++)); do\n  \
    \      for ((j=0; j<n; j++)); do\n            if [[ ${left_to_right[i]} -eq ${right_to_left[j]}\
    \ ]]; then\n                ((collisions++))\n            fi\n        done\n \
    \   done\n    echo $collisions", "    # Write your code here\n    #\n    # Input:\n\
    \    #   $1: a string of n numbers, separated by spaces, representing the\n  \
    \  #       starting positions of the n cars moving left to right\n    #   $2:\
    \ a string of n numbers, separated by spaces, representing the\n    #       starting\
    \ positions of the n cars moving right to left\n    #\n    # Output:\n    #  \
    \ a single number, representing the number of collisions\n    #\n    # Example:\n\
    \    #   car_race_collision \"1 2 3 4\" \"5 6 7 8\"\n    #   should output 4\n\
    \    #\n    #   car_race_collision \"1 2 3 4\" \"5 6 7 8 9 10\"\n    #   should\
    \ output 5\n    #\n    #   car_race_collision \"1 2 3 4\" \"5 6 7 8 9 10 11 12\"\
    \n    #   should output 6\n    #\n    #   car_race_collision \"1 2 3 4\" \"5 6\
    \ 7 8 9 10 11 12 13 14\"\n    #   should output 7\n    #\n    #   car_race_collision\
    \ \"1 2 3 4\" \"5 6 7 8 9 10 11 12 13 14 15 16\"\n    #   should output 8\n  \
    \  #\n    #   car_race_collision \"1 2 3 4\" \"5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18\"\n    #   should output 9\n    #\n    #   car_race_collision \"1 2 3\
    \ 4\" \"5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    #   should output 10\n\
    \    #\n    #   car_race_collision \"1 2 3 4\" \"5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21 22\"\n    #   should output 11\n    #\n    #   car_race_collision\
    \ \"1 2 3 4\" \"5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n   \
    \ #   should output 12\n    #\n    #   car_race_collision \"1 2 3 4\" \"5 6 7\
    \ 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n   ", "    # The first\
    \ argument is the number of cars driving left to right.\n    # The second argument\
    \ is the number of cars driving right to left.\n    # The third argument is the\
    \ speed of the cars.\n    # The fourth argument is the distance between the two\
    \ sets of cars.\n    # The fifth argument is the distance between the cars in\
    \ each set.\n    # The sixth argument is the time.\n    # The seventh argument\
    \ is the number of collisions.\n    # The eighth argument is the distance between\
    \ the two sets of cars after time has passed.\n    # The ninth argument is the\
    \ distance between the cars in each set after time has passed.\n    # The tenth\
    \ argument is the distance between the cars in each set after time has passed.\n\
    \    # The eleventh argument is the distance between the cars in each set after\
    \ time has passed.\n    # The twelfth argument is the distance between the cars\
    \ in each set after time has passed.\n    # The thirteenth argument is the distance\
    \ between the cars in each set after time has passed.\n    # The fourteenth argument\
    \ is the distance between the cars in each set after time has passed.\n    # The\
    \ fifteenth argument is the distance between the cars in each set after time has\
    \ passed.\n    # The sixteenth argument is the distance between the cars in each\
    \ set after time has passed.\n    # The seventeenth argument is the distance between\
    \ the cars in each set after time has passed.\n    # The eighteenth argument is\
    \ the distance between the cars in each set after time has passed.\n    # The\
    \ nineteenth argument is the distance between the cars in each set after time\
    \ has passed.\n    # The twentieth argument is the distance between the cars in\
    \ each set after time has passed.\n    # The twenty-first argument is the distance\
    \ between the cars in each set after time has passed.\n    # The twenty-second\
    \ argument is the distance between the cars in each set after time has passed.\n\
    \    # The twenty-third argument is the distance between the cars in each set\
    \ after time has passed.\n    # The twenty-fourth argument is the distance between\
    \ the cars in each set after time has passed.\n    # The twenty-fifth argument\
    \ is the distance between the cars in each set after time has passed.\n    # The\
    \ twenty-sixth argument is the distance between the cars in each set after time\
    \ has passed.\n    # The twenty-seventh argument is the distance", "    # Write\
    \ your code here\n    # You can use the following function to print out the result:\n\
    \    # print_result $result\n    # where $result is the number of collisions\n\
    \    #\n    # For example, if the result is 5, then you can use:\n    # print_result\
    \ 5\n    # to print out the result.\n    #\n    # You can use the following function\
    \ to read input:\n    # read_input\n    # This function will read the input and\
    \ store it in the variable $input\n    # For example, if the input is \"1 2 3\
    \ 4 5\", then you can use:\n    # read_input\n    # echo $input\n    # to print\
    \ out the input.\n    #\n    # You can use the following function to read the\
    \ input line by line:\n    # read_line\n    # This function will read the input\
    \ line by line and store it in the variable $line\n    # For example, if the input\
    \ is \"1 2 3 4 5\", then you can use:\n    # read_line\n    # echo $line\n   \
    \ # to print out the input line by line.\n    #\n    # You can use the following\
    \ function to read the input line by line and store it in an array:\n    # read_array\n\
    \    # This function will read the input line by line and store it in the array\
    \ $array\n    # For example, if the input is \"1 2 3 4 5\", then you can use:\n\
    \    # read_array\n    # echo ${array[0]}\n    # echo ${array[1]}\n    # echo\
    \ ${array[2]}\n    # echo ${array[3]}\n    # echo ${array[4]}\n    # to print\
    \ out the input line by line.\n    #\n    # You can use the following function\
    \ to read the input line by line and store it in an array of arrays:\n    # read_array_of_arrays\n\
    \    # This function will read the input line by line and store it in the array\
    \ of arrays $array_of_arrays\n    # For example, if the input is \"1 2 3 4 5\"\
    , then you can use:\n    # read_array_of_arrays\n    # echo ${array_of_arrays[0][0]}\n\
    \    # echo ${array_of_", "    # The number of cars in each direction.\n    local\
    \ n=$1\n    # The speed of each car.\n    local speed=$2\n    # The distance between\
    \ the two sets of cars.\n    local distance=$3\n    # The number of collisions.\n\
    \    local collisions=0\n    # The time it takes for each car to travel the distance.\n\
    \    local time=$((distance / speed))\n    # The number of cars that have reached\
    \ the end of the road.\n    local cars_finished=0\n    # The number of cars that\
    \ have reached the end of the road in the opposite direction.\n    local cars_finished_opposite=0\n\
    \    # The number of cars that have reached the end of the road in the opposite\
    \ direction.\n    local cars_finished_opposite=0\n    # The number of cars that\
    \ have reached the end of the road in the opposite direction.\n    local cars_finished_opposite=0\n\
    \    # The number of cars that have reached the end of the road in the opposite\
    \ direction.\n    local cars_finished_opposite=0\n    # The number of cars that\
    \ have reached the end of the road in the opposite direction.\n    local cars_finished_opposite=0\n\
    \    # The number of cars that have reached the end of the road in the opposite\
    \ direction.\n    local cars_finished_opposite=0\n    # The number of cars that\
    \ have reached the end of the road in the opposite direction.\n    local cars_finished_opposite=0\n\
    \    # The number of cars that have reached the end of the road in the opposite\
    \ direction.\n    local cars_finished_opposite=0\n    # The number of cars that\
    \ have reached the end of the road in the opposite direction.\n    local cars_finished_opposite=0\n\
    \    # The number of cars that have reached the end of the road in the opposite\
    \ direction.\n    local cars_finished_opposite=0\n    # The number of cars that\
    \ have reached the end of the road in the opposite direction.\n    local cars_finished_opposite=0\n\
    \    # The number of cars that have reached the end of the road in the opposite\
    \ direction.\n    local cars_finished_opposite=0\n    # The number of cars that\
    \ have reached the end of the road in the opposite direction.\n    local cars_finished_",
  "    local n=$1\n    local left_to_right_cars=$2\n    local right_to_left_cars=$3\n\
    \    local collisions=0\n    local i=0\n    local j=0\n    local left_to_right_car_pos=0\n\
    \    local right_to_left_car_pos=0\n    local left_to_right_car_speed=0\n    local\
    \ right_to_left_car_speed=0\n    for ((i=0; i<n; i++)); do\n        left_to_right_car_pos=$(echo\
    \ ${left_to_right_cars} | cut -d' ' -f$((i+1)))\n        left_to_right_car_speed=$(echo\
    \ ${left_to_right_cars} | cut -d' ' -f$((i+n+1)))\n        for ((j=0; j<n; j++));\
    \ do\n            right_to_left_car_pos=$(echo ${right_to_left_cars} | cut -d'\
    \ ' -f$((j+1)))\n            right_to_left_car_speed=$(echo ${right_to_left_cars}\
    \ | cut -d' ' -f$((j+n+1)))\n            if [ ${left_to_right_car_pos} -eq ${right_to_left_car_pos}\
    \ ]; then\n                collisions=$((collisions+1))\n            fi\n    \
    \    done\n    done\n    echo ${collisions}", "    local -a left_to_right\n  \
    \  local -a right_to_left\n    local -i i\n    local -i j\n    local -i n\n  \
    \  local -i collisions\n    local -i left_to_right_car_position\n    local -i\
    \ right_to_left_car_position\n    local -i left_to_right_car_speed\n    local\
    \ -i right_to_left_car_speed\n    local -i left_to_right_car_time\n    local -i\
    \ right_to_left_car_time\n    local -i left_to_right_car_time_to_collision\n \
    \   local -i right_to_left_car_time_to_collision\n    local -i time_to_collision\n\
    \    local -i time_to_collision_previous\n    local -i time_to_collision_current\n\
    \    local -i time_to_collision_next\n    local -i time_to_collision_min\n   \
    \ local -i time_to_collision_min_index\n    local -i time_to_collision_min_previous\n\
    \    local -i time_to_collision_min_current\n    local -i time_to_collision_min_next\n\
    \    local -i time_to_collision_min_previous_index\n    local -i time_to_collision_min_current_index\n\
    \    local -i time_to_collision_min_next_index\n    local -i time_to_collision_min_previous_speed\n\
    \    local -i time_to_collision_min_current_speed\n    local -i time_to_collision_min_next_speed\n\
    \    local -i time_to_collision_min_previous_position\n    local -i time_to_collision_min_current_position\n\
    \    local -i time_to_collision_min_next_position\n    local -i time_to_collision_min_previous_time\n\
    \    local -i time_to_collision_min_current_time\n    local -i time_to_collision_min_next_time\n\
    \    local -i time_to_collision_min", "    # $1 is the number of cars\n    # $2\
    \ is the speed of the cars\n    # $3 is the distance between the two sets of cars\n\
    \    # $4 is the number of cars in the first set\n    # $5 is the number of cars\
    \ in the second set\n    # $6 is the starting position of the first car in the\
    \ first set\n    # $7 is the starting position of the first car in the second\
    \ set\n    # $8 is the direction of the first car in the first set\n    # $9 is\
    \ the direction of the first car in the second set\n    # $10 is the number of\
    \ collisions\n    local n=$1\n    local speed=$2\n    local distance=$3\n    local\
    \ n1=$4\n    local n2=$5\n    local start1=$6\n    local start2=$7\n    local\
    \ dir1=$8\n    local dir2=$9\n    local collisions=${10}\n    local i\n    local\
    \ j\n    local pos1\n    local pos2\n    local time1\n    local time2\n    local\
    \ time\n    local collision\n    for ((i=0; i<n1; i++)); do\n        pos1=$((start1\
    \ + dir1 * speed * i))\n        time1=$((pos1 / speed))\n        for ((j=0; j<n2;\
    \ j++)); do\n            pos2=$((start2 + dir2 * speed * j))\n            time2=$((pos2\
    \ / speed))\n            time=$((time1 - time2))\n            collision=$((pos1\
    \ - pos2))\n            if [[ $time -ge 0 && $collision -ge 0 ]]; then\n     \
    \           collisions=$((collisions + 1))\n            fi\n        done\n   \
    \ done\n    echo $collisions", "    # The input is a list of integers, each of\
    \ which is the position of a car\n    # that's moving left to right.  The list\
    \ is sorted in ascending order.\n    # The second input is a list of integers,\
    \ each of which is the position of a car\n    # that's moving right to left. \
    \ The list is sorted in descending order.\n    # The output is the number of collisions.\n\
    \    #\n    # Example:\n    # car_race_collision \"1 2 3 4 5\" \"5 4 3 2 1\"\n\
    \    #\n    # The output is 5, because all 5 cars collide.\n    #\n    # Example:\n\
    \    # car_race_collision \"1 2 3 4 5\" \"4 3 2 1\"\n    #\n    # The output is\
    \ 4, because the first 4 cars collide.\n    #\n    # Example:\n    # car_race_collision\
    \ \"1 2 3 4 5\" \"5 4 3 2\"\n    #\n    # The output is 3, because the first 3\
    \ cars collide.\n    #\n    # Example:\n    # car_race_collision \"1 2 3 4 5\"\
    \ \"5 4 3\"\n    #\n    # The output is 2, because the first 2 cars collide.\n\
    \    #\n    # Example:\n    # car_race_collision \"1 2 3 4 5\" \"5 4\"\n    #\n\
    \    # The output is 1, because the first car collides.\n    #\n    # Example:\n\
    \    # car_race_collision \"1 2 3 4 5\" \"5\"\n    #\n    # The output is 0, because\
    \ no collision.\n    #\n    # Example:\n    # car_race_collision \"1 2 3 4 5\"\
    \ \"\"\n    #\n    # The output is 0, because no collision.\n    #\n    # Example:\n\
    \    # car_race_collision \"\" \"5 4 3 2 1\"\n    #\n    # The output is 0, because\
    \ no collision.\n    #\n    # Example:\n    # car_race_collision \"\" \"\"\n \
    \   #\n    # The output is 0, because no collision.\n    #\n    # Example:\n \
    \   # car_race_collision \"1 2 3 4 5\" \"5 4 3 2", "    local n=$1\n    local\
    \ l_to_r_cars=$2\n    local r_to_l_cars=$3\n    local collisions=0\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n            if ((l_to_r_cars[i]\
    \ == r_to_l_cars[j])); then\n                ((collisions++))\n            fi\n\
    \        done\n    done\n    echo $collisions"]
stop_tokens:
- "\n}"
