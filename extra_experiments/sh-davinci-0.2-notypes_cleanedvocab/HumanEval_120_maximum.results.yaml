language: sh
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local i=0\n    local j=0\n    local max_index=0\n    local max_value=0\n\
    \    local tmp_value=0\n    local tmp_index=0\n    local tmp_arr=()\n    local\
    \ result=()\n    for i in $(seq 1 \"$k\"); do\n        max_value=-1000\n     \
    \   for j in $(seq 1 \"$arr_len\"); do\n            tmp_value=$(echo \"$arr\"\
    \ | cut -d ' ' -f \"$j\")\n            if [ \"$tmp_value\" -gt \"$max_value\"\
    \ ]; then\n                max_value=\"$tmp_value\"\n                max_index=\"\
    $j\"\n            fi\n        done\n        result+=(\"$max_value\")\n       \
    \ tmp_arr=()\n        for j in $(seq 1 \"$arr_len\"); do\n            tmp_value=$(echo\
    \ \"$arr\" | cut -d ' ' -f \"$j\")\n            if [ \"$j\" -ne \"$max_index\"\
    \ ]; then\n                tmp_arr+=(\"$tmp_value\")\n            fi\n       \
    \ done\n        arr=\"${tmp_arr[@]}\"\n        arr_len=\"$(echo \"$arr\" | wc\
    \ -w)\"\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((k\
    \ - 1))\n    local max_arr_len_min=$((k - arr_len))\n    local max_arr_len_min=$((max_arr_len_min\
    \ < 0 ? 0 : max_arr_len_min))\n    local max_arr_len_min=$((max_arr_len_min >\
    \ max_arr_len_max ? max_arr_len_max : max_arr_len_min))\n    local max_arr_len_max=$((max_arr_len_max\
    \ > arr_len ? arr_len : max_arr_len_max))\n    local max_arr_len_max=$((max_arr_len_max\
    \ < max_arr_len_min ? max_arr_len_min : max_arr_len_max))\n    for i in $arr;\
    \ do\n        if [[ $max_arr_len -lt $max_arr_len_max ]]; then\n            max_arr+=(\"\
    $i\")\n            max_arr_len=$((max_arr_len + 1))\n        else\n          \
    \  local max_arr_len_min_index=$((max_arr_len_min - 1))\n            local max_arr_len_min_index=$((max_arr_len_min_index\
    \ < 0 ? 0 : max_arr_len_min_index))\n            local max_arr_len_min_index=$((max_arr_len_min_index\
    \ > max_arr_len_max ? max_arr_len_max : max_arr_len_min_index))\n            local\
    \ max_arr_len_max_index=$((max_arr_len_max - 1))\n            local max_arr_len_max_index=$((max_arr_len_max_index\
    \ < 0 ? 0 : max_arr_len_max_index))\n            local max_arr_len_max_index=$((max_arr_len_max_index\
    \ > max_arr_len_max ? max\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmptweu8xwo.sh: line 39: unexpected EOF while looking for matching
    `)''\n/tmp/tmptweu8xwo.sh: line 62: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local i\n    local\
    \ j\n    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n    done\n  \
    \  for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n   \
    \         if [[ ${arr[i]} -gt ${result[j]} ]]; then\n                result[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpyk5mgx6z.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=($1)\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=0\n    local tmp=0\n    for ((i=0; i<len; i++)); do\n        for\
    \ ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n\
    \                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n           \
    \     arr[j]=$tmp\n            fi\n        done\n    done\n    echo ${arr[@]:0:$k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    for ((i=0; i<k; i++));\
    \ do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo \"${max[@]}\" | tr ' ' '\\n' | sort\
    \ -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpcinpht07.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -i i=0\n   \
    \ while [[ $i -lt $k ]]; do\n        local -i max=0\n        local -i j=0\n  \
    \      while [[ $j -lt ${#arr[@]} ]]; do\n            if [[ ${arr[$j]} -gt ${arr[$max]}\
    \ ]]; then\n                max=$j\n            fi\n            ((j++))\n    \
    \    done\n        res[$i]=${arr[$max]}\n        unset arr[$max]\n        ((i++))\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpvy45sn_4.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr=($arr)\n    local len=${#arr[@]}\n\
    \    local i=0\n    local j=0\n    local temp=0\n    for ((i=0; i<len; i++))\n\
    \    do\n        for ((j=i+1; j<len; j++))\n        do\n            if [[ ${arr[i]}\
    \ -lt ${arr[j]} ]]\n            then\n                temp=${arr[i]}\n       \
    \         arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n   \
    \     done\n    done\n    echo ${arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=($1)\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=0\n    local max=0\n    local max_idx=0\n    local tmp=0\n    local\
    \ result=()\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_idx=$j\n          \
    \  fi\n        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n   \
    \     arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _i _j _tmp\n    for ((_i=0;\
    \ _i<_k; _i++)); do\n        for ((_j=_i+1; _j<${#_arr[@]}; _j++)); do\n     \
    \       if [[ ${_arr[_i]} -lt ${_arr[_j]} ]]; then\n                _tmp=${_arr[_i]}\n\
    \                _arr[_i]=${_arr[_j]}\n                _arr[_j]=$_tmp\n      \
    \      fi\n        done\n    done\n    echo \"${_arr[@]:0:_k}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp_00v3x89.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i=0\n    local j=0\n    local len=0\n    local max=0\n\
    \    local tmp=0\n    local -a arr_tmp\n    arr_tmp=($arr)\n    len=${#arr_tmp[@]}\n\
    \    if [[ $len -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n\
    \    if [[ $k -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n  \
    \  if [[ $k -gt $len ]]; then\n        echo \"[]\"\n        return\n    fi\n \
    \   for ((i=0; i<$len; i++)); do\n        arr_sorted[$i]=${arr_tmp[$i]}\n    done\n\
    \    for ((i=0; i<$len; i++)); do\n        max=${arr_sorted[$i]}\n        for\
    \ ((j=$i; j<$len; j++)); do\n            if [[ ${arr_sorted[$j]} -gt $max ]];\
    \ then\n                max=${arr_sorted[$j]}\n                tmp=${arr_sorted[$i]}\n\
    \                arr_sorted[$i]=$max\n                arr_sorted[$j]=$tmp\n  \
    \          fi\n        done\n    done\n    for ((i=0; i<$k; i++)); do\n      \
    \  arr_max[$i]=${arr_sorted[$i]}\n    done\n    echo \"[$(join_by \", \" \"${arr_max[@]}\"\
    )]\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
    \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\"\
    \ ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n \
    \   [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate\
    \ \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate\
    \ \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\"\
    ) = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate\
    \ \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\"\
    \ \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpfh4xi93y.sh: line 59: join_by: command not found\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    if [ \"$arr_len\" -lt \"$k\" ]; then\n        echo \"Error:\
    \ k is greater than the length of arr.\"\n        return 1\n    fi\n    local\
    \ arr_sorted=\"$(echo \"$arr\" | tr \" \" \"\\n\" | sort -n)\"\n    local arr_max=\"\
    $(echo \"$arr_sorted\" | tail -n \"$k\")\"\n    echo \"$arr_max\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res=()\n    local -a max=()\n\
    \    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len;\
    \ i++)); do\n        if [[ ${arr[i]} -gt ${max[0]} ]]; then\n            max[0]=${arr[i]}\n\
    \            for ((j=1; j<k; j++)); do\n                if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                    max[j]=${max[j-1]}\n                else\n   \
    \                 max[j]=${arr[i]}\n                    break\n              \
    \  fi\n            done\n        fi\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpsuq3nc9l.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i arr_len\n    local\
    \ -i k_len\n    local -i arr_max_len\n    local -i arr_max_len_prev\n    local\
    \ -i arr_max_len_next\n    local -i arr_max_len_diff\n    local -i arr_max_len_diff_prev\n\
    \    local -i arr_max_len_diff_next\n    local -i arr_max_len_diff_min\n    local\
    \ -i arr_max_len_diff_min_prev\n    local -i arr_max_len_diff_min_next\n    local\
    \ -i arr_max_len_diff_min_prev_idx\n    local -i arr_max_len_diff_min_next_idx\n\
    \    local -i arr_max_len_diff_min_idx\n    local -i arr_max_len_diff_min_idx_prev\n\
    \    local -i arr_max_len_diff_min_idx_next\n    local -i arr_max_len_diff_min_idx_prev_prev\n\
    \    local -i arr_max_len_diff_min_idx_next_next\n    local -i arr_max_len_diff_min_idx_prev_prev_prev\n\
    \    local -i arr_max_len_diff_min_idx_next_next_next\n    local -i arr_max_len_diff_min_idx_prev_prev_prev_prev\n\
    \    local -i arr_max_len_diff_min_idx_next_next_next_next\n    local -i arr_max_len_diff_min_idx_prev_prev_prev_prev_prev\n\
    \    local -i arr_max_len_diff_min_idx_next_next_next_next_next\n    local -i\
    \ arr_max_len_diff_min_idx_prev_prev_prev_prev_prev_prev\n    local -i arr_max_len_diff_min_idx\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=$(echo \"$arr\" |\
    \ wc -w)\n    local max_arr=\"\"\n    local max_arr_len=0\n    local max_arr_len_diff=$((k\
    \ - max_arr_len))\n    local max_arr_len_diff_abs=$((max_arr_len_diff < 0 ? -max_arr_len_diff\
    \ : max_arr_len_diff))\n    local max_arr_len_diff_abs_half=$((max_arr_len_diff_abs\
    \ / 2))\n    local max_arr_len_diff_abs_half_ceil=$((max_arr_len_diff_abs_half\
    \ + (max_arr_len_diff_abs % 2)))\n    local max_arr_len_diff_abs_half_ceil_neg=$((-max_arr_len_diff_abs_half_ceil))\n\
    \    local max_arr_len_diff_abs_half_ceil_neg_abs=$((max_arr_len_diff_abs_half_ceil_neg\
    \ < 0 ? -max_arr_len_diff_abs_half_ceil_neg : max_arr_len_diff_abs_half_ceil_neg))\n\
    \    local max_arr_len_diff_abs_half_ceil_neg_abs_half=$((max_arr_len_diff_abs_half_ceil_neg_abs\
    \ / 2))\n    local max_arr_len_diff_abs_half_ceil_neg_abs_half_ceil=$((max_arr_len_diff_abs_half_ceil_neg_abs_half\
    \ + (max_arr_len_diff_abs_half_ceil_neg_abs % 2)))\n    local max_arr_len_diff_abs_half_ceil_neg_abs_half_ceil_neg=$((-max_arr_len_diff_abs_half_ceil_neg_abs_half_ceil))\n\
    \    local max_arr_len_diff_abs_half_ceil_neg_abs_half_ceil_neg_abs=$((max_arr_len_diff_abs_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp_79xk8q0.sh: line 32: unexpected EOF while looking for matching
    `)''\n/tmp/tmp_79xk8q0.sh: line 55: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res=()\n    for i in ${arr[@]};\
    \ do\n        res+=($i)\n        if [[ ${#res[@]} -gt $k ]]; then\n          \
    \  res=($(printf \"%s\\n\" \"${res[@]}\" | sort -nr | head -n $k))\n        fi\n\
    \    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpxv9r_l1w.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a sorted\n\
    \    local -i i\n    local -i j\n    local -i len=${#arr[@]}\n    for ((i=0; i<len;\
    \ i++)); do\n        sorted[i]=${arr[i]}\n    done\n    for ((i=0; i<len; i++));\
    \ do\n        for ((j=i+1; j<len; j++)); do\n            if (( sorted[i] < sorted[j]\
    \ )); then\n                local tmp=${sorted[i]}\n                sorted[i]=${sorted[j]}\n\
    \                sorted[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        res[i]=${sorted[i]}\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp9igpgc99.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -a sorted\n\
    \    local -a max\n    local -a min\n    local -i i\n    local -i j\n    local\
    \ -i len\n    local -i k_len\n    local -i max_len\n    local -i min_len\n   \
    \ local -i max_index\n    local -i min_index\n    local -i max_value\n    local\
    \ -i min_value\n    local -i value\n    local -i temp\n    local -i temp_index\n\
    \    local -i temp_value\n    local -i temp_len\n    local -i temp_max_index\n\
    \    local -i temp_min_index\n    local -i temp_max_value\n    local -i temp_min_value\n\
    \    local -i temp_max_len\n    local -i temp_min_len\n    local -i temp_k_len\n\
    \    local -i temp_len_len\n    local -i temp_max_len_len\n    local -i temp_min_len_len\n\
    \    local -i temp_k_len_len\n    local -i temp_max_index_len\n    local -i temp_min_index_len\n\
    \    local -i temp_max_value_len\n    local -i temp_min_value_len\n    local -i\
    \ temp_max_index_len_len\n    local -i temp_min_index_len_len\n    local -i temp_max_value_len_len\n\
    \    local -i temp_min_value_len_len\n    local -i temp_max_index_len_len_len\n\
    \    local -i temp_min_index_len_len_len\n    local -i temp_max_value_len_len_len\n\
    \    local -i temp_min_value_len_len_len\n    local -i temp_max_index_len_len_len_len\n\
    \    local -i temp_min_index_len_len_len_len\n    local -i temp_max_value_len_len_len_len\n\
    \    local -i temp_min_value_len_len_len_len\n    local -i temp_max\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp10_z3zdl.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max\n    local _i\n    local\
    \ _j\n    for ((_i=0; _i<_k; _i++)); do\n        _max=${_arr[0]}\n        for\
    \ ((_j=1; _j<${#_arr[@]}; _j++)); do\n            if [[ ${_arr[$_j]} -gt $_max\
    \ ]]; then\n                _max=${_arr[$_j]}\n            fi\n        done\n\
    \        echo -n \"\\\"$_max\\\" \"\n        _arr=(${_arr[@]/$_max})\n    done\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpcixfgl4o.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    if [[ $k -gt $arr_len ]]; then\n        k=$arr_len\n    fi\n\
    \    local max_arr=()\n    local max_arr_len=0\n    local i=0\n    while [[ $i\
    \ -lt $arr_len ]]; do\n        local num=\"$(echo \"$arr\" | cut -d ' ' -f $((i+1)))\"\
    \n        if [[ $max_arr_len -lt $k ]]; then\n            max_arr+=(\"$num\")\n\
    \            max_arr_len=$((max_arr_len+1))\n        else\n            local j=0\n\
    \            while [[ $j -lt $max_arr_len ]]; do\n                local max_num=\"\
    ${max_arr[$j]}\"\n                if [[ $num -gt $max_num ]]; then\n         \
    \           max_arr[$j]=\"$num\"\n                    break\n                fi\n\
    \                j=$((j+1))\n            done\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local i\n    local\
    \ j\n    local max\n    local max_index\n    for ((i=0; i<k; i++)); do\n     \
    \   max=${arr[0]}\n        max_index=0\n        for ((j=1; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        unset arr[$max_index]\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp9umx6jz3.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    if [ \"$arr_len\" -lt \"$k\" ]; then\n        echo \"Error:\
    \ the length of the array is less than k\"\n        return 1\n    fi\n    local\
    \ arr_max=\"$(echo \"$arr\" | sort -n | tail -n \"$k\")\"\n    echo \"$arr_max\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -i i j\n\
    \    for ((i=0; i<k; i++)); do\n        result[i]=${arr[i]}\n    done\n    for\
    \ ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n        \
    \    if [[ ${arr[i]} -gt ${result[j]} ]]; then\n                result[j]=${arr[i]}\n\
    \                break\n            fi\n        done\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp_woql2gw.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i len\n    local -i max_index\n\
    \    local -i max_value\n    local -i tmp\n    arr_sorted=($(echo \"$arr\" | tr\
    \ ' ' '\\n' | sort -n))\n    len=${#arr_sorted[@]}\n    for ((i=0; i<k; i++));\
    \ do\n        max_index=$i\n        max_value=${arr_sorted[$i]}\n        for ((j=i+1;\
    \ j<len; j++)); do\n            tmp=${arr_sorted[$j]}\n            if [[ $tmp\
    \ -gt $max_value ]]; then\n                max_index=$j\n                max_value=$tmp\n\
    \            fi\n        done\n        arr_max[$i]=$max_value\n        arr_sorted[$max_index]=${arr_sorted[$i]}\n\
    \        arr_sorted[$i]=$max_value\n    done\n    echo \"${arr_max[@]}\"\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr=($arr)\n    local len=${#arr[@]}\n\
    \    local max=()\n    local i=0\n    while [ $i -lt $k ]; do\n        local j=0\n\
    \        local max_index=0\n        while [ $j -lt $len ]; do\n            if\
    \ [ ${arr[$j]} -gt ${arr[$max_index]} ]; then\n                max_index=$j\n\
    \            fi\n            j=$((j+1))\n        done\n        max[$i]=${arr[$max_index]}\n\
    \        arr[$max_index]=-1000\n        i=$((i+1))\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=0\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ tmp_arr=()\n    local tmp_arr_len=0\n    local tmp_arr_str=''\n    local max_arr_str=''\n\
    \    local arr_str=''\n    local arr_str_len=0\n    local arr_str_len_1=0\n  \
    \  local arr_str_len_2=0\n    local arr_str_len_3=0\n    local arr_str_len_4=0\n\
    \    local arr_str_len_5=0\n    local arr_str_len_6=0\n    local arr_str_len_7=0\n\
    \    local arr_str_len_8=0\n    local arr_str_len_9=0\n    local arr_str_len_10=0\n\
    \    local arr_str_len_11=0\n    local arr_str_len_12=0\n    local arr_str_len_13=0\n\
    \    local arr_str_len_14=0\n    local arr_str_len_15=0\n    local arr_str_len_16=0\n\
    \    local arr_str_len_17=0\n    local arr_str_len_18=0\n    local arr_str_len_19=0\n\
    \    local arr_str_len_20=0\n    local arr_str_len_21=0\n    local arr_str_len_22=0\n\
    \    local arr_str_len_23=0\n    local arr_str_len_24=0\n    local arr_str_len_25=0\n\
    \    local arr_str_len_26=0\n    local arr_str_len_27=0\n    local arr_str_len_28=0\n\
    \    local arr_str_len_29=0\n    local arr_str_len_30=0\n    local arr_str_len_31=0\n\
    \    local arr_str_len_32=0\n    local arr_str_len_33=0\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo $arr | wc -w)\n  \
    \  local res=()\n    for ((i=0; i<$arr_len; i++)); do\n        local num=$(echo\
    \ $arr | cut -d \" \" -f $((i+1)))\n        if [[ ${#res[@]} -lt $k ]]; then\n\
    \            res+=($num)\n        else\n            local min=$(echo ${res[@]}\
    \ | tr \" \" \"\\n\" | sort -n | head -n 1)\n            if [[ $num -gt $min ]];\
    \ then\n                res[$(echo ${res[@]} | tr \" \" \"\\n\" | grep -n $min\
    \ | cut -d \":\" -f 1)]=$num\n            fi\n        fi\n    done\n    echo ${res[@]}\
    \ | tr \" \" \"\\n\" | sort -n | tail -n $k | tr \"\\n\" \" \"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n __arr=$1\n    local k=$2\n    local -a arr=(\"${__arr[@]}\")\n \
    \   local -a max\n    local -a res\n    local i\n    local j\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<len; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]}\
    \ -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   res[i]=\"\\\"${max[i]}\\\"\"\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpa824v1im.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local i=0\n \
    \   local j=0\n    local max_num=0\n    local max_num_index=0\n    local tmp_num=0\n\
    \    local tmp_num_index=0\n    local tmp_arr=()\n    local tmp_arr_len=0\n  \
    \  local tmp_arr_index=0\n    local tmp_arr_max_num=0\n    local tmp_arr_max_num_index=0\n\
    \    local tmp_arr_max_num_index_in_max_arr=0\n    local tmp_arr_max_num_index_in_max_arr_index=0\n\
    \    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr=0\n    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr_index=0\n\
    \    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr_index_in_max_arr=0\n\
    \    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr_index_in_max_arr_index=0\n\
    \    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr_index_in_max_arr_index_in_tmp_arr=0\n\
    \    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr_index_in_max_arr_index_in_tmp_arr_index=0\n\
    \    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr_index_in_max_arr_index_in_tmp_arr_index_in_max_arr=0\n\
    \    local tmp_arr_max_num_index_in_max_arr_index_in_tmp_arr_index_in_max_arr_index_in_tmp_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local -a arr_sorted\n    local -a arr_sorted_k\n\
    \    local i\n    local j\n    local temp\n    local len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        arr_sorted[i]=${arr[i]}\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr_sorted[i]}\
    \ -lt ${arr_sorted[j]} ]]; then\n                temp=${arr_sorted[i]}\n     \
    \           arr_sorted[i]=${arr_sorted[j]}\n                arr_sorted[j]=$temp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   arr_sorted_k[i]=${arr_sorted[i]}\n    done\n    echo ${arr_sorted_k[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    for i in $arr; do\n        if [[ $max_arr_len -lt $k ]]; then\n         \
    \   max_arr+=($i)\n            max_arr_len=$(($max_arr_len + 1))\n        else\n\
    \            local min_idx=0\n            local min_val=${max_arr[0]}\n      \
    \      for j in $(seq 1 $(($max_arr_len - 1))); do\n                if [[ $min_val\
    \ -gt ${max_arr[$j]} ]]; then\n                    min_idx=$j\n              \
    \      min_val=${max_arr[$j]}\n                fi\n            done\n        \
    \    if [[ $i -gt $min_val ]]; then\n                max_arr[$min_idx]=$i\n  \
    \          fi\n        fi\n    done\n    echo ${max_arr[@]} | tr ' ' ',' | sed\
    \ 's/,/\", \"/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=0\n    local tmp=0\n    local max=0\n    local max_idx=0\n    local\
    \ result=()\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_idx=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max ]];\
    \ then\n                max=${arr[j]}\n                max_idx=$j\n          \
    \  fi\n        done\n        result[i]=$max\n        tmp=${arr[len-i-1]}\n   \
    \     arr[len-i-1]=$max\n        arr[max_idx]=$tmp\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpi0cgrfk5.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n/tmp/tmpi0cgrfk5.sh: line 37: arr: bad array subscript\n/tmp/tmpi0cgrfk5.sh:
    line 38: arr[len-i-1]: bad array subscript\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i k_i\n    local -i arr_len\n\
    \    local -i arr_max_len\n    local -i arr_max_i\n    local -i arr_max_j\n  \
    \  local -i arr_max_k\n    local -i arr_max_k_i\n    local -i arr_max_k_j\n  \
    \  local -i arr_max_k_k\n    local -i arr_max_k_k_i\n    local -i arr_max_k_k_j\n\
    \    local -i arr_max_k_k_k\n    local -i arr_max_k_k_k_i\n    local -i arr_max_k_k_k_j\n\
    \    local -i arr_max_k_k_k_k\n    local -i arr_max_k_k_k_k_i\n    local -i arr_max_k_k_k_k_j\n\
    \    local -i arr_max_k_k_k_k_k\n    local -i arr_max_k_k_k_k_k_i\n    local -i\
    \ arr_max_k_k_k_k_k_j\n    local -i arr_max_k_k_k_k_k_k\n    local -i arr_max_k_k_k_k_k_k_i\n\
    \    local -i arr_max_k_k_k_k_k_k_j\n    local -i arr_max_k_k_k_k_k_k_k\n    local\
    \ -i arr_max_k_k_k_k_k_k_k_i\n    local -i arr_max_k_k_k_k_k_k_k_j\n    local\
    \ -i arr_max_k_k_k_k_k_k_k_k\n    local -i arr_max_k_k_k_k_k_k_k_k_i\n    local\
    \ -i arr_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i len\n    local -i max_len\n\
    \    local -i max_index\n    local -i max_value\n    local -i tmp\n    arr_sorted=($(echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -n))\n    len=${#arr_sorted[@]}\n    max_len=$((len\
    \ - k))\n    for ((i=0; i<max_len; i++)); do\n        max_value=${arr_sorted[0]}\n\
    \        max_index=0\n        for ((j=1; j<len; j++)); do\n            tmp=${arr_sorted[j]}\n\
    \            if [[ $tmp -gt $max_value ]]; then\n                max_value=$tmp\n\
    \                max_index=$j\n            fi\n        done\n        unset arr_sorted[$max_index]\n\
    \        arr_sorted=(${arr_sorted[@]})\n    done\n    echo \"${arr_sorted[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=0\n    local i=0\n    local j=0\n    local num=0\n    local\
    \ max_num=0\n    local max_num_index=0\n    local temp=0\n    for num in $arr;\
    \ do\n        max_arr[$i]=$num\n        i=$((i+1))\n    done\n    arr_len=$i\n\
    \    max_arr_len=$arr_len\n    if [[ $k -lt $arr_len ]]; then\n        max_arr_len=$k\n\
    \    fi\n    for ((i=0; i<max_arr_len; i++)); do\n        max_num=${max_arr[$i]}\n\
    \        max_num_index=$i\n        for ((j=i+1; j<arr_len; j++)); do\n       \
    \     if [[ ${max_arr[$j]} -gt $max_num ]]; then\n                max_num=${max_arr[$j]}\n\
    \                max_num_index=$j\n            fi\n        done\n        temp=${max_arr[$i]}\n\
    \        max_arr[$i]=${max_arr[$max_num_index]}\n        max_arr[$max_num_index]=$temp\n\
    \    done\n    echo ${max_arr[@]:0:$max_arr_len}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local result=()\n    local i=0\n\
    \    local j=0\n    local temp=0\n    local arr_len=0\n    local k_len=0\n   \
    \ local temp_arr=()\n    local temp_arr_len=0\n    local temp_arr_len_1=0\n  \
    \  local temp_arr_len_2=0\n    local temp_arr_len_3=0\n    local temp_arr_len_4=0\n\
    \    local temp_arr_len_5=0\n    local temp_arr_len_6=0\n    local temp_arr_len_7=0\n\
    \    local temp_arr_len_8=0\n    local temp_arr_len_9=0\n    local temp_arr_len_10=0\n\
    \    local temp_arr_len_11=0\n    local temp_arr_len_12=0\n    local temp_arr_len_13=0\n\
    \    local temp_arr_len_14=0\n    local temp_arr_len_15=0\n    local temp_arr_len_16=0\n\
    \    local temp_arr_len_17=0\n    local temp_arr_len_18=0\n    local temp_arr_len_19=0\n\
    \    local temp_arr_len_20=0\n    local temp_arr_len_21=0\n    local temp_arr_len_22=0\n\
    \    local temp_arr_len_23=0\n    local temp_arr_len_24=0\n    local temp_arr_len_25=0\n\
    \    local temp_arr_len_26=0\n    local temp_arr_len_27=0\n    local temp_arr_len_28=0\n\
    \    local temp_arr_len_29=0\n    local temp_arr_len_30=0\n    local temp_arr_len_31=0\n\
    \    local temp_arr_len_32=0\n    local temp_arr_len_33=0\n    local temp_arr_len_34=0\n\
    \    local temp_arr_len_35=0\n    local temp_arr_len_36=0\n    local temp_arr\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    arr=(\"$@\")\n    k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\")\n\
    \    arr=(\"${arr[@]// /}\")\n    arr=(\"${arr[@]//-/}\")\n    arr=(\"${arr[@]//,/}\"\
    )\n    arr=(\"${arr[@]//\\[/}\")\n    arr=(\"${arr[@]//\\]/}\")\n    arr=(\"${arr[@]//\\\
    \"/}\")\n    arr=(\"${arr[@]//\\'/}\")\n    arr=(\"${arr[@]//\\(/}\")\n    arr=(\"\
    ${arr[@]//\\)/}\")\n    arr=(\"${arr[@]//\\{/}\")\n    arr=(\"${arr[@]//\\}/}\"\
    )\n    arr=(\"${arr[@]//\\:/}\")\n    arr=(\"${arr[@]//\\;/}\")\n    arr=(\"${arr[@]//\\\
    !/}\")\n    arr=(\"${arr[@]//\\?/}\")\n    arr=(\"${arr[@]//\\|/}\")\n    arr=(\"\
    ${arr[@]//\\&/}\")\n    arr=(\"${arr[@]//\\*/}\")\n    arr=(\"${arr[@]//\\+/}\"\
    )\n    arr=(\"${arr[@]//\\=/}\")\n    arr=(\"${arr[@]//\\%/}\")\n    arr=(\"${arr[@]//\\\
    ^/}\")\n    arr=(\"${arr[@]//\\~/}\")\n    arr=(\"${arr[@]//\\</}\")\n    arr=(\"\
    ${arr[@]//\\>/}\")\n    arr=(\"${arr[@]//\\@/}\")\n    arr=(\"${arr[@]//\\#/}\"\
    )\n    arr=(\"${arr[@]//\\$/}\")\n    arr=(\"${arr[@]//\\`/}\")\n    arr=(\"${arr[@]//\\\
    |/}\")\n    arr=(\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzwu3_quq.sh: line 70: unexpected EOF while looking for matching
    `"\''\n/tmp/tmpzwu3_quq.sh: line 74: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \  local arr=\"$1\"\n  local k=\"$2\"\n  local -a arr=($arr)\n  local -a result=()\n\
    \  local i\n  local j\n  for ((i=0; i<k; i++)); do\n    local max=${arr[0]}\n\
    \    local max_index=0\n    for ((j=1; j<${#arr[@]}; j++)); do\n      if [[ ${arr[j]}\
    \ -gt $max ]]; then\n        max=${arr[j]}\n        max_index=$j\n      fi\n \
    \   done\n    result+=($max)\n    unset arr[$max_index]\n    arr=(\"${arr[@]}\"\
    )\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr=($arr)\n    local\
    \ -a result=()\n    local -i i=0\n    local -i j=0\n    local -i max=0\n    local\
    \ -i max_index=0\n    local -i len=${#arr[@]}\n    local -i k_len=0\n    local\
    \ -i tmp=0\n    local -i tmp_index=0\n    local -i tmp_max=0\n    local -i tmp_max_index=0\n\
    \    local -i tmp_len=0\n    local -i tmp_k_len=0\n    local -i tmp_i=0\n    local\
    \ -i tmp_j=0\n    local -i tmp_max_index_i=0\n    local -i tmp_max_index_j=0\n\
    \    local -i tmp_max_index_k=0\n    local -i tmp_max_index_l=0\n    local -i\
    \ tmp_max_index_m=0\n    local -i tmp_max_index_n=0\n    local -i tmp_max_index_o=0\n\
    \    local -i tmp_max_index_p=0\n    local -i tmp_max_index_q=0\n    local -i\
    \ tmp_max_index_r=0\n    local -i tmp_max_index_s=0\n    local -i tmp_max_index_t=0\n\
    \    local -i tmp_max_index_u=0\n    local -i tmp_max_index_v=0\n    local -i\
    \ tmp_max_index_w=0\n    local -i tmp_max_index_x=0\n    local -i tmp_max_index_y=0\n\
    \    local -i tmp_max_index_z=0\n    local -i tmp_max_index_aa=0\n    local -i\
    \ tmp_max_index_ab=0\n    local -i tmp_max_index_ac=0\n    local -i tmp_max_index_ad=0\n\
    \    local -i tmp_max_index_ae=0\n    local -i tmp_max_index_af=0\n    local\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr=($arr)\n    local len=${#arr[@]}\n\
    \    local max=()\n    local i=0\n    while [ $i -lt $k ]; do\n        local j=0\n\
    \        local max_index=0\n        while [ $j -lt $len ]; do\n            if\
    \ [ ${arr[$j]} -gt ${arr[$max_index]} ]; then\n                max_index=$j\n\
    \            fi\n            j=$((j+1))\n        done\n        max+=(${arr[$max_index]})\n\
    \        arr[$max_index]=-1001\n        i=$((i+1))\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \  local arr=\"$1\"\n  local k=\"$2\"\n  local max_arr=()\n  local max_arr_len=0\n\
    \  local i=0\n  local j=0\n  local max_i=0\n  local max_j=0\n  local max_num=0\n\
    \  local num=0\n  for i in $arr; do\n    num=$(echo \"$i\" | bc)\n    if [[ $max_arr_len\
    \ -lt $k ]]; then\n      max_arr[$max_arr_len]=$num\n      max_arr_len=$((max_arr_len\
    \ + 1))\n    else\n      max_i=0\n      max_j=0\n      max_num=${max_arr[0]}\n\
    \      for j in $(seq 0 $((max_arr_len - 1))); do\n        if [[ $num -gt $max_num\
    \ ]]; then\n          max_num=$num\n          max_i=$j\n        else\n       \
    \   max_num=${max_arr[$j]}\n        fi\n      done\n      if [[ $max_i -ne 0 ]];\
    \ then\n        max_arr[$max_i]=$num\n      fi\n    fi\n  done\n  echo \"${max_arr[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 0
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    if [[ \"$arr_len\" -lt \"$k\" ]]; then\n        echo \"Error:\
    \ k is greater than the length of arr.\"\n        return 1\n    fi\n    local\
    \ arr_sorted=\"$(echo \"$arr\" | tr ' ' '\\n' | sort -n)\"\n    local arr_max=\"\
    $(echo \"$arr_sorted\" | tail -n \"$k\")\"\n    echo \"$arr_max\" | tr '\\n' '\
    \ ' | sed 's/^ *//g' | sed 's/ *$//g'\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=$(echo \"$arr\" |\
    \ wc -w)\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((arr_len\
    \ - k))\n    local max_arr_len_min=$((arr_len - k - 1))\n    local max_arr_len_max_index=$((arr_len\
    \ - 1))\n    local max_arr_len_min_index=$((arr_len - 2))\n    local max_arr_len_max_index_value=$(echo\
    \ \"$arr\" | cut -d ' ' -f $max_arr_len_max_index)\n    local max_arr_len_min_index_value=$(echo\
    \ \"$arr\" | cut -d ' ' -f $max_arr_len_min_index)\n    local max_arr_len_max_index_value_len=$(echo\
    \ \"$max_arr_len_max_index_value\" | wc -c)\n    local max_arr_len_min_index_value_len=$(echo\
    \ \"$max_arr_len_min_index_value\" | wc -c)\n    local max_arr_len_max_index_value_len_max=$((max_arr_len_max_index_value_len\
    \ - 1))\n    local max_arr_len_min_index_value_len_max=$((max_arr_len_min_index_value_len\
    \ - 1))\n    local max_arr_len_max_index_value_len_min=$((max_arr_len_max_index_value_len\
    \ - 2))\n    local max_arr_len_min_index_value_len_min=$((max_arr_len_min_index_value_len\
    \ - 2))\n    local max_arr_len_max_index_value_len_max_index=$((max_arr_len_max_index_value_len\
    \ - 1))\n    local max_arr_len_min_index_value_len_max_index=$((max_arr_len_min_index_value_len\
    \ - 1))\n    local max_arr_len\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local max_arr_len_max=0\n    local max_arr_len_min=0\n    local max_arr_len_min_index=0\n\
    \    local arr_len=0\n    local arr_len_max=0\n    local arr_len_min=0\n    local\
    \ arr_len_min_index=0\n    local arr_len_max_index=0\n    local arr_len_max_index_prev=0\n\
    \    local arr_len_max_index_prev_prev=0\n    local arr_len_max_index_prev_prev_prev=0\n\
    \    local arr_len_max_index_prev_prev_prev_prev=0\n    local arr_len_max_index_prev_prev_prev_prev_prev=0\n\
    \    local arr_len_max_index_prev_prev_prev_prev_prev_prev=0\n    local arr_len_max_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local arr_len_max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ arr_len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ arr_len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ arr_len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local arr_len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local arr_len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local arr_len_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local arr_len_max_index\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((arr_len\
    \ - k))\n    local i=0\n    local j=0\n    local max_arr_i=0\n    local max_arr_j=0\n\
    \    local max_arr_max=0\n    local max_arr_max_i=0\n    local max_arr_max_j=0\n\
    \    local max_arr_max_k=0\n    local max_arr_max_k_i=0\n    local max_arr_max_k_j=0\n\
    \    local max_arr_max_k_k=0\n    local max_arr_max_k_k_i=0\n    local max_arr_max_k_k_j=0\n\
    \    local max_arr_max_k_k_k=0\n    local max_arr_max_k_k_k_i=0\n    local max_arr_max_k_k_k_j=0\n\
    \    local max_arr_max_k_k_k_k=0\n    local max_arr_max_k_k_k_k_i=0\n    local\
    \ max_arr_max_k_k_k_k_j=0\n    local max_arr_max_k_k_k_k_k=0\n    local max_arr_max_k_k_k_k_k_i=0\n\
    \    local max_arr_max_k_k_k_k_k_j=0\n    local max_arr_max_k_k_k_k_k_k=0\n  \
    \  local max_arr_max_k_k_k_k_k_k_i=0\n    local max_arr_max_k_k_k_k_k_k_j=0\n\
    \    local max_arr_max_k_k_k_k_k_k_k=0\n    local max_arr_max_k_k_k_k_k_k_\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=${#arr[@]}\n    local max_arr=()\n\
    \    local max_arr_len=0\n    local max_arr_index=0\n    local max_arr_index_len=0\n\
    \    local max_arr_index_len_index=0\n    local max_arr_index_len_index_len=0\n\
    \    local max_arr_index_len_index_len_index=0\n    local max_arr_index_len_index_len_index_len=0\n\
    \    local max_arr_index_len_index_len_index_len_index=0\n    local max_arr_index_len_index_len_index_len_index_len=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index=0\n    local\
    \ max_arr_index_len_index_len_index_len_index_len_index_len=0\n    local max_arr_index_len_index_len_index_len_index_len_index_len_index=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index_len_index_len=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index_len_index_len_index=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index_len_index_len_index_len=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index=0\n\
    \    local max_arr_index_len_index_len_index_len_index_len_index_len_\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=(\"$@\")\n    local k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\"\
    )\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n \
    \   local res=()\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n            \
    \    tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   res[i]=${arr[i]}\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -a tmp\n\
    \    local i\n    local j\n    local n\n    local max\n    local max_index\n \
    \   for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n  \
    \      for ((j=1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt $max\
    \ ]]; then\n                max=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        result[i]=$max\n        unset arr[$max_index]\n\
    \        arr=(\"${arr[@]}\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpru2anh9f.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i=0\n    local -i j=0\n    local -i n=0\n    local\
    \ -i m=0\n    local -i len=0\n    local -i len_max=0\n    local -i len_sorted=0\n\
    \    local -i max=0\n    local -i min=0\n    local -i tmp=0\n    local -i tmp_max=0\n\
    \    local -i tmp_min=0\n    local -i tmp_sorted=0\n    local -i tmp_max_sorted=0\n\
    \    local -i tmp_min_sorted=0\n    local -i tmp_max_max=0\n    local -i tmp_min_min=0\n\
    \    local -i tmp_max_min=0\n    local -i tmp_min_max=0\n    local -i tmp_max_max_sorted=0\n\
    \    local -i tmp_min_min_sorted=0\n    local -i tmp_max_min_sorted=0\n    local\
    \ -i tmp_min_max_sorted=0\n    local -i tmp_max_max_max=0\n    local -i tmp_min_min_min=0\n\
    \    local -i tmp_max_min_min=0\n    local -i tmp_min_max_min=0\n    local -i\
    \ tmp_max_max_min=0\n    local -i tmp_min_min_max=0\n    local -i tmp_max_min_max=0\n\
    \    local -i tmp_min_max_max=0\n    local -i tmp_max_max_max_sorted=0\n    local\
    \ -i tmp_min_min_min_sorted=0\n    local -i tmp_max_min_min_sorted=0\n    local\
    \ -i tmp_min_max_min_sorted=0\n    local -i tmp_max_max_min_sorted=0\n    local\
    \ -i tmp_min_min_max_sorted=0\n    local -i tmp_max_min_max_sorted\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max\n    local _max_index\n\
    \    local _result\n    for ((i=0; i<_k; i++)); do\n        _max=${_arr[0]}\n\
    \        _max_index=0\n        for ((j=1; j<${#_arr[@]}; j++)); do\n         \
    \   if ((${_arr[j]} > _max)); then\n                _max=${_arr[j]}\n        \
    \        _max_index=$j\n            fi\n        done\n        _result+=\"\\\"\
    ${_arr[$_max_index]}\\\" \"\n        unset _arr[$_max_index]\n    done\n    echo\
    \ \"[${_result% }]\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmphzlj9jso.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=0\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ tmp_str=''\n    local result=''\n    for i in ${arr[@]}; do\n        max_arr[$max_arr_len]=$i\n\
    \        max_arr_len=$((max_arr_len+1))\n        if [ $max_arr_len -gt $k ]; then\n\
    \            for j in $(seq 0 $((max_arr_len-2))); do\n                if [ ${max_arr[$j]}\
    \ -gt ${max_arr[$((j+1))]} ]; then\n                    tmp=${max_arr[$j]}\n \
    \                   max_arr[$j]=${max_arr[$((j+1))]}\n                    max_arr[$((j+1))]=$tmp\n\
    \                fi\n            done\n            max_arr_len=$((max_arr_len-1))\n\
    \        fi\n    done\n    for i in $(seq 0 $((max_arr_len-1))); do\n        tmp_str=\"\
    $tmp_str \\\"${max_arr[$i]}\\\"\"\n    done\n    result=\"[$tmp_str]\"\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local max_arr_idx=0\n    local arr_len=0\n    local arr_idx=0\n    local\
    \ arr_item=0\n    local arr_item_idx=0\n    local arr_item_len=0\n    local arr_item_idx_max=0\n\
    \    local arr_item_len_max=0\n    local arr_item_max=0\n    local arr_item_max_idx=0\n\
    \    local arr_item_max_len=0\n    local arr_item_max_idx_max=0\n    local arr_item_max_len_max=0\n\
    \    local arr_item_max_max=0\n    local arr_item_max_max_idx=0\n    local arr_item_max_max_len=0\n\
    \    local arr_item_max_max_idx_max=0\n    local arr_item_max_max_len_max=0\n\
    \    local arr_item_max_max_max=0\n    local arr_item_max_max_max_idx=0\n    local\
    \ arr_item_max_max_max_len=0\n    local arr_item_max_max_max_idx_max=0\n    local\
    \ arr_item_max_max_max_len_max=0\n    local arr_item_max_max_max_max=0\n    local\
    \ arr_item_max_max_max_max_idx=0\n    local arr_item_max_max_max_max_len=0\n \
    \   local arr_item_max_max_max_max_idx_max=0\n    local arr_item_max_max_max_max_len_max=0\n\
    \    local arr_item_max_max_max_max_max=0\n    local arr_item_max_max_max_max_max_idx=0\n\
    \    local arr_item_max_max_max_max_max_len=0\n    local arr_item_max_max_max_max_max_idx_max\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo \"$arr\" | wc -w)\n\
    \    local max_arr=()\n    local i=0\n    while [ $i -lt $k ]; do\n        local\
    \ max_num=-1000\n        local max_index=-1\n        local j=0\n        while\
    \ [ $j -lt $arr_len ]; do\n            local num=$(echo \"$arr\" | cut -d \" \"\
    \ -f $((j+1)))\n            if [ $num -gt $max_num ]; then\n                max_num=$num\n\
    \                max_index=$j\n            fi\n            j=$((j+1))\n      \
    \  done\n        max_arr+=($max_num)\n        arr=$(echo \"$arr\" | cut -d \"\
    \ \" -f -$max_index,$((max_index+2))-)\n        arr_len=$((arr_len-1))\n     \
    \   i=$((i+1))\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: 'b"cut: invalid decreasing range\nTry ''cut --help'' for more information.\n/tmp/tmp21wokq0b.sh:
    line 29: [: -gt: unary operator expected\ncut: invalid field range\nTry ''cut
    --help'' for more information.\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_sorted=$(echo $arr | tr \" \"\
    \ \"\\n\" | sort -nr | tr \"\\n\" \" \")\n    local arr_max=$(echo $arr_sorted\
    \ | cut -d \" \" -f 1-$k)\n    echo $arr_max\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res=()\n    for i in ${arr[@]};\
    \ do\n        if [[ ${#res[@]} -lt $k ]]; then\n            res+=($i)\n      \
    \  else\n            local max=${res[0]}\n            local max_idx=0\n      \
    \      for j in ${!res[@]}; do\n                if [[ ${res[$j]} -gt $max ]];\
    \ then\n                    max=${res[$j]}\n                    max_idx=$j\n \
    \               fi\n            done\n            if [[ $i -gt $max ]]; then\n\
    \                res[$max_idx]=$i\n            fi\n        fi\n    done\n    echo\
    \ ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp9j9103hj.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result=()\n    local -a tmp=()\n\
    \    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len;\
    \ i++)); do\n        for ((j=0; j<${#tmp[@]}; j++)); do\n            if [[ ${tmp[j]}\
    \ -lt ${arr[i]} ]]; then\n                tmp=(${tmp[@]:0:j} ${arr[i]} ${tmp[@]:j})\n\
    \                break\n            fi\n        done\n        if [[ ${#tmp[@]}\
    \ -lt $k ]]; then\n            tmp+=(${arr[i]})\n        fi\n    done\n    echo\
    \ ${tmp[@]:0:k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpjg9eadll.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr=($arr)\n    local\
    \ -a max=()\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n\
    \    local -i max_len=0\n    local -i max_index=0\n    local -i max_value=0\n\
    \    local -i value=0\n    local -i tmp=0\n    local -i tmp_index=0\n    local\
    \ -i tmp_value=0\n    for ((i=0; i<len; i++)); do\n        value=${arr[i]}\n \
    \       if ((value > max_value)); then\n            max_value=$value\n       \
    \     max_index=$i\n        fi\n    done\n    max[0]=$max_index\n    max_len=1\n\
    \    for ((i=0; i<len; i++)); do\n        value=${arr[i]}\n        if ((value\
    \ < max_value)); then\n            for ((j=0; j<max_len; j++)); do\n         \
    \       tmp_index=${max[j]}\n                tmp_value=${arr[tmp_index]}\n   \
    \             if ((value > tmp_value)); then\n                    tmp=$tmp_index\n\
    \                    max[j]=$i\n                    for ((k=j+1; k<max_len; k++));\
    \ do\n                        tmp_index=${max[k]}\n                        max[k]=$tmp\n\
    \                        tmp=$tmp_index\n                    done\n          \
    \          max_len+=1\n                    break\n                fi\n       \
    \     done\n        fi\n    done\n    for ((i=0; i<k; i++)); do\n        echo\
    \ -n '\"'${arr[${max[i]}]}'\"'\n        if ((i < k-1)); then\n            echo\
    \ -n ', '\n        fi\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    for num in $arr; do\n        if [[ $max_arr_len -lt $k ]]; then\n       \
    \     max_arr+=(\"$num\")\n            max_arr_len=$((max_arr_len + 1))\n    \
    \    else\n            local min_num=${max_arr[0]}\n            local min_num_idx=0\n\
    \            for ((i = 1; i < ${#max_arr[@]}; i++)); do\n                if [[\
    \ ${max_arr[$i]} -lt $min_num ]]; then\n                    min_num=${max_arr[$i]}\n\
    \                    min_num_idx=$i\n                fi\n            done\n  \
    \          if [[ $num -gt $min_num ]]; then\n                max_arr[$min_num_idx]=\"\
    $num\"\n            fi\n        fi\n    done\n    echo \"${max_arr[@]}\"\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max_arr\n    local max_arr_len=0\n\
    \    local max_arr_idx=0\n    local max_arr_len_limit=$((k - 1))\n    local i=0\n\
    \    local j=0\n    local len=${#arr[@]}\n    local tmp=0\n    local tmp_idx=0\n\
    \    for ((i = 0; i < len; i++)); do\n        if [[ $max_arr_len -lt $k ]]; then\n\
    \            max_arr[$max_arr_len]=${arr[$i]}\n            ((max_arr_len++))\n\
    \        else\n            max_arr_idx=0\n            tmp=${max_arr[0]}\n    \
    \        for ((j = 1; j < k; j++)); do\n                if [[ $tmp -lt ${max_arr[$j]}\
    \ ]]; then\n                    tmp=${max_arr[$j]}\n                    tmp_idx=$j\n\
    \                fi\n            done\n            if [[ ${arr[$i]} -lt $tmp ]];\
    \ then\n                max_arr[$tmp_idx]=${arr[$i]}\n            fi\n       \
    \ fi\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpe215oma5.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n\
    \    local -i i\n    local -i j\n    local -i len_arr\n    local -i len_max\n\
    \    local -i len_sorted\n    local -i max_index\n    local -i max_value\n   \
    \ local -i tmp\n    local -i tmp_index\n    local -i tmp_value\n    arr_sorted=($(echo\
    \ $arr | tr ' ' '\\n' | sort -n))\n    len_arr=${#arr_sorted[@]}\n    len_max=$k\n\
    \    len_sorted=$len_arr\n    for ((i=0; i<len_max; i++)); do\n        max_index=$((len_sorted-1))\n\
    \        max_value=${arr_sorted[$max_index]}\n        arr_max[$i]=$max_value\n\
    \        for ((j=0; j<len_sorted; j++)); do\n            tmp_index=$((len_sorted-1-j))\n\
    \            tmp_value=${arr_sorted[$tmp_index]}\n            if [[ $tmp_value\
    \ -eq $max_value ]]; then\n                unset arr_sorted[$tmp_index]\n    \
    \            arr_sorted=(${arr_sorted[@]})\n                len_sorted=$((len_sorted-1))\n\
    \            fi\n        done\n    done\n    echo ${arr_max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -a arr_max_sorted\n    local -i i\n    local -i j\n  \
    \  local -i k_i\n    local -i arr_len\n    local -i arr_max_len\n    local -i\
    \ arr_max_sorted_len\n    local -i arr_sorted_len\n    local -i arr_max_i\n  \
    \  local -i arr_max_sorted_i\n    local -i arr_sorted_i\n    local -i arr_max_sorted_j\n\
    \    local -i arr_sorted_j\n    local -i arr_max_sorted_k\n    local -i arr_sorted_k\n\
    \    local -i arr_max_sorted_l\n    local -i arr_sorted_l\n    local -i arr_max_sorted_m\n\
    \    local -i arr_sorted_m\n    local -i arr_max_sorted_n\n    local -i arr_sorted_n\n\
    \    local -i arr_max_sorted_o\n    local -i arr_sorted_o\n    local -i arr_max_sorted_p\n\
    \    local -i arr_sorted_p\n    local -i arr_max_sorted_q\n    local -i arr_sorted_q\n\
    \    local -i arr_max_sorted_r\n    local -i arr_sorted_r\n    local -i arr_max_sorted_s\n\
    \    local -i arr_sorted_s\n    local -i arr_max_sorted_t\n    local -i arr_sorted_t\n\
    \    local -i arr_max_sorted_u\n    local -i arr_sorted_u\n    local -i arr_max_sorted_v\n\
    \    local -i arr_sorted_v\n    local -i arr_max_sorted_w\n    local -i arr_sorted_w\n\
    \    local -i arr_max_sorted_x\n    local -i arr_sorted_x\n    local -i arr_max_sorted_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -i i j\n   \
    \ for ((i=0; i<${#arr[@]}; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                local\
    \ tmp=${arr[i]}\n                arr[i]=${arr[j]}\n                arr[j]=$tmp\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   res+=(${arr[i]})\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpsgatnpsb.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -a max\n\
    \    local -a min\n    local -a temp\n    local i\n    local j\n    local n\n\
    \    local m\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<${#arr[@]}; i++)); do\n        min=(\"${max[@]}\")\n        for ((j=0; j<k;\
    \ j++)); do\n            if [[ ${arr[i]} -gt ${min[j]} ]]; then\n            \
    \    temp=(\"${min[@]}\")\n                for ((n=0; n<j; n++)); do\n       \
    \             min[n]=${temp[n]}\n                done\n                min[j]=${arr[i]}\n\
    \                for ((m=j+1; m<k; m++)); do\n                    min[m]=${temp[m-1]}\n\
    \                done\n                break\n            fi\n        done\n \
    \       max=(\"${min[@]}\")\n    done\n    result=(\"${max[@]}\")\n    for ((p=0;\
    \ p<${#result[@]}; p++)); do\n        for ((q=p+1; q<${#result[@]}; q++)); do\n\
    \            if [[ ${result[p]} -gt ${result[q]} ]]; then\n                r=${result[p]}\n\
    \                result[p]=${result[q]}\n                result[q]=$r\n      \
    \      fi\n        done\n    done\n    for ((s=0; s<${#result[@]}; s++)); do\n\
    \        t=${result[s]}\n        u=${t#-}\n        if [[ $t == \"-\"* ]]; then\n\
    \            v=\"\\\"-$u\\\"\"\n        else\n            v=\"\\\"$t\\\"\"\n \
    \       fi\n        result[s]=$v\n    done\n    w=\"[\"\n    for ((x\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpz3mvpeaa.sh: line 80: unexpected EOF while looking for matching
    `)''\n/tmp/tmpz3mvpeaa.sh: line 103: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=$(echo \"$arr\" | wc -w)\n    local i=0\n    while [ $i -lt\
    \ $arr_len ]; do\n        local num=$(echo \"$arr\" | cut -d ' ' -f $((i+1)))\n\
    \        if [ $max_arr_len -lt $k ]; then\n            max_arr+=($num)\n     \
    \       max_arr_len=$((max_arr_len+1))\n        else\n            local j=0\n\
    \            while [ $j -lt $max_arr_len ]; do\n                if [ $num -gt\
    \ ${max_arr[$j]} ]; then\n                    max_arr[$j]=$num\n             \
    \       break\n                fi\n                j=$((j+1))\n            done\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo $arr | wc -w)\n  \
    \  local max_arr=()\n    local max_num=0\n    local max_index=0\n    local i=0\n\
    \    local j=0\n    local tmp=0\n    local tmp_index=0\n    local tmp_num=0\n\
    \    local tmp_arr=()\n    local result=()\n    for i in $arr; do\n        max_arr+=($i)\n\
    \    done\n    for i in $(seq 1 $k); do\n        max_num=${max_arr[0]}\n     \
    \   max_index=0\n        for j in $(seq 0 $(($arr_len - 1))); do\n           \
    \ tmp_num=${max_arr[$j]}\n            if [[ $tmp_num -gt $max_num ]]; then\n \
    \               max_num=$tmp_num\n                max_index=$j\n            fi\n\
    \        done\n        result+=($max_num)\n        tmp_arr=()\n        for j in\
    \ $(seq 0 $(($arr_len - 1))); do\n            tmp_index=$j\n            if [[\
    \ $tmp_index -ne $max_index ]]; then\n                tmp_arr+=(${max_arr[$tmp_index]})\n\
    \            fi\n        done\n        max_arr=()\n        for j in ${tmp_arr[@]};\
    \ do\n            max_arr+=($j)\n        done\n        arr_len=$(($arr_len - 1))\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=0\n\
    \    local max_arr_len_min=0\n    local max_arr_len_min_index=0\n    local max_arr_len_min_value=0\n\
    \    local max_arr_len_max_index=0\n    local max_arr_len_max_value=0\n    local\
    \ i=0\n    local j=0\n    local value=0\n    local value_max=0\n    local value_min=0\n\
    \    local value_min_index=0\n    local value_min_value=0\n    local value_max_index=0\n\
    \    local value_max_value=0\n    local tmp=0\n    local tmp_max=0\n    local\
    \ tmp_min=0\n    local tmp_min_index=0\n    local tmp_min_value=0\n    local tmp_max_index=0\n\
    \    local tmp_max_value=0\n    local arr_i=0\n    local arr_j=0\n    local arr_k=0\n\
    \    local arr_l=0\n    local arr_m=0\n    local arr_n=0\n    local arr_o=0\n\
    \    local arr_p=0\n    local arr_q=0\n    local arr_r=0\n    local arr_s=0\n\
    \    local arr_t=0\n    local arr_u=0\n    local arr_v=0\n    local arr_w=0\n\
    \    local arr_x=0\n    local arr_y=0\n    local arr_z=0\n    local arr_a=0\n\
    \    local arr_b=0\n    local arr_c=0\n    local arr_d=0\n    local arr_e=0\n\
    \    local arr_f=0\n    local arr_g=0\n    local arr_h=0\n    local arr_i=0\n\
    \    local arr_j=0\n    local arr_k=0\n    local arr_l=0\n    local\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=${#arr[@]}\n    local max_arr=()\n\
    \    local max_arr_len=0\n    local i=0\n    local j=0\n    local max_index=0\n\
    \    local max_value=0\n    local temp_value=0\n    local temp_index=0\n    local\
    \ temp_arr=()\n    local temp_arr_len=0\n    local temp_arr_str=''\n    local\
    \ max_arr_str=''\n    local max_arr_str_len=0\n    local max_arr_str_index=0\n\
    \    local max_arr_str_value=0\n    local max_arr_str_value_len=0\n    local max_arr_str_value_index=0\n\
    \    local max_arr_str_value_index_len=0\n    local max_arr_str_value_index_len_value=0\n\
    \    local max_arr_str_value_index_len_value_len=0\n    local max_arr_str_value_index_len_value_len_index=0\n\
    \    local max_arr_str_value_index_len_value_len_index_len=0\n    local max_arr_str_value_index_len_value_len_index_len_value=0\n\
    \    local max_arr_str_value_index_len_value_len_index_len_value_len=0\n    local\
    \ max_arr_str_value_index_len_value_len_index_len_value_len_index=0\n    local\
    \ max_arr_str_value_index_len_value_len_index_len_value_len_index_len=0\n    local\
    \ max_arr_str_value_index_len_value_len_index_len_value_len_index_len_value=0\n\
    \    local max_arr_str_value_index_len_value_len_index_len_value_len_index_len_value_len=0\n\
    \    local max_arr_str_value_index_len_value_len_index_len_value_len_index_len_value_len_index=\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=($1)\n    local k=$2\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    local max_index=0\n    local tmp=0\n    local result=()\n    for ((i=0; i<k;\
    \ i++)); do\n        max_index=$i\n        for ((j=i+1; j<len; j++)); do\n   \
    \         if [[ ${arr[j]} -gt ${arr[max_index]} ]]; then\n                max_index=$j\n\
    \            fi\n        done\n        tmp=${arr[i]}\n        arr[i]=${arr[max_index]}\n\
    \        arr[max_index]=$tmp\n        result+=(${arr[i]})\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: -1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a array=($arr)\n    local\
    \ -a result=()\n    for ((i=0; i<${#array[@]}; i++)); do\n        if [[ ${#result[@]}\
    \ -eq 0 ]]; then\n            result+=(\"${array[$i]}\")\n        else\n     \
    \       for ((j=0; j<${#result[@]}; j++)); do\n                if [[ ${array[$i]}\
    \ -gt ${result[$j]} ]]; then\n                    result=(\"${result[@]:0:$j}\"\
    \ \"${array[$i]}\" \"${result[@]:$j}\")\n                    break\n         \
    \       elif [[ $j -eq ${#result[@]}-1 ]]; then\n                    result+=(\"\
    ${array[$i]}\")\n                fi\n            done\n        fi\n    done\n\
    \    echo \"${result[@]:0:$k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.BufferedReader name=45>
  stdout: <_io.BufferedReader name=42>
  timestamp: 1660360389
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -a arr=(\"$1\")\n    local k=\"$2\"\n    local -a max\n    local -i\
    \ i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local\
    \ -i tmp=0\n    local -i max_i=0\n    local -i max_j=0\n    local -i max_n=0\n\
    \    local -i max_m=0\n    local -i max_tmp=0\n    for ((i=0; i<n; i++)); do\n\
    \        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j])); then\n\
    \                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n           \
    \     arr[j]=$tmp\n            fi\n        done\n    done\n    for ((i=0; i<n;\
    \ i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i] > arr[j]));\
    \ then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n    \
    \            arr[j]=$tmp\n            fi\n        done\n    done\n    for ((i=0;\
    \ i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i]\
    \ > arr[j])); then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i]\
    \ > arr[j])); then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n            if ((arr[i]\
    \ > arr[j]));\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmph5rfqt3m.sh: line 70: syntax error near unexpected token `}''\n/tmp/tmph5rfqt3m.sh:
    line 70: `}''\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i max_index\n    local\
    \ -i arr_len\n    local -i k_len\n\n    # Sort the array\n    arr_sorted=($(echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -nr))\n    arr_len=${#arr_sorted[@]}\n    k_len=$((k-1))\n\
    \n    # Get the maximum k numbers\n    for ((i=0; i<k; i++)); do\n        max_index=$i\n\
    \        for ((j=i+1; j<arr_len; j++)); do\n            if [[ ${arr_sorted[$j]}\
    \ -gt ${arr_sorted[$max_index]} ]]; then\n                max_index=$j\n     \
    \       fi\n        done\n        arr_max[$i]=${arr_sorted[$max_index]}\n    \
    \    arr_sorted[$max_index]=${arr_sorted[$i]}\n        arr_sorted[$i]=${arr_max[$i]}\n\
    \    done\n\n    # Print the result\n    echo \"${arr_max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=0\n    local i=0\n    local j=0\n    local tmp=0\n    local\
    \ tmp_str=\"\"\n    for i in $arr; do\n        arr_len=$((arr_len+1))\n      \
    \  if [[ $max_arr_len -lt $k ]]; then\n            max_arr[$max_arr_len]=$i\n\
    \            max_arr_len=$((max_arr_len+1))\n        else\n            for j in\
    \ ${max_arr[@]}; do\n                if [[ $i -gt $j ]]; then\n              \
    \      tmp=$j\n                    tmp_str=$(echo $tmp | sed 's/^-/\\\\-/g')\n\
    \                    max_arr[$(echo ${max_arr[@]} | sed \"s/$tmp_str//g\")]=$i\n\
    \                    break\n                fi\n            done\n        fi\n\
    \    done\n    echo ${max_arr[@]} | sed 's/ /\", \"/g' | sed 's/^/[\"/g' | sed\
    \ 's/$/\"]/g'\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local arr_max=\"$(echo \"$arr\" | sort -nr | head -n \"$k\"\
    )\"\n    local arr_max_len=\"$(echo \"$arr_max\" | wc -w)\"\n    local arr_max_str=\"\
    $(echo \"$arr_max\" | tr '\\n' ' ')\"\n    local arr_max_str=\"${arr_max_str%?}\"\
    \n    local arr_max_str=\"${arr_max_str// /\\\", \\\"}\"\n    local arr_max_str=\"\
    [\\\"$arr_max_str\\\"]\"\n    echo \"$arr_max_str\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((k\
    \ - 1))\n    local max_arr_len_min=$((k - arr_len))\n    local max_arr_len_min_abs=$((-max_arr_len_min))\n\
    \    local max_arr_len_min_abs_minus_1=$((max_arr_len_min_abs - 1))\n    local\
    \ max_arr_len_min_abs_minus_1_abs=$((-max_arr_len_min_abs_minus_1))\n    local\
    \ max_arr_len_min_abs_minus_1_abs_minus_1=$((max_arr_len_min_abs_minus_1_abs -\
    \ 1))\n    local max_arr_len_min_abs_minus_1_abs_minus_1_abs=$((-max_arr_len_min_abs_minus_1_abs_minus_1))\n\
    \    local max_arr_len_min_abs_minus_1_abs_minus_1_abs_minus_1=$((max_arr_len_min_abs_minus_1_abs_minus_1_abs\
    \ - 1))\n    local max_arr_len_min_abs_minus_1_abs_minus_1_abs_minus_1_abs=$((-max_arr_len_min_abs_minus_1_abs_minus_1_abs_minus_1))\n\
    \    local max_arr_len_min_abs_minus_1_abs_minus_1_abs_minus_1_abs_minus_1=$((max_arr_len_min_abs_minus_1_abs_minus_1_abs_minus_1_abs\
    \ - 1))\n    local max_arr_len_min_abs_minus_1_abs_minus_1_abs_minus_1_abs_minus_1_abs=$((-max_arr_len_min_abs_minus_1_abs_minus_1_abs_minus_1_abs_minus_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp9jvugth6.sh: line 33: unexpected EOF while looking for matching
    `)''\n/tmp/tmp9jvugth6.sh: line 56: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=(\"$@\")\n    local k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\"\
    )\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local tmp=0\n \
    \   for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n     \
    \       if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n                tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo \"${arr[@]:0:k}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    if [[ \"$arr_len\" -lt \"$k\" ]]; then\n        echo \"Error:\
    \ array length is less than k.\"\n        return 1\n    fi\n    local arr_max=\"\
    $(echo \"$arr\" | tr ' ' '\\n' | sort -nr | head -n \"$k\")\"\n    echo \"$arr_max\"\
    \ | tr '\\n' ' ' | sed 's/^[[:space:]]*//g' | sed 's/[[:space:]]*$//g'\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local k=$2\n    local -a arr=(\"${_arr[@]}\")\n   \
    \ local -a max_arr=()\n    local max_num\n    local i\n    for ((i=0; i<k; i++));\
    \ do\n        max_num=${arr[0]}\n        for num in \"${arr[@]}\"; do\n      \
    \      if ((num > max_num)); then\n                max_num=$num\n            fi\n\
    \        done\n        max_arr+=($max_num)\n        arr=(${arr[@]/$max_num})\n\
    \    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpmpqs7yab.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -a max_index\n\
    \    local -a max_index_sorted\n    local -a max_sorted\n    local -a arr_sorted\n\
    \    local -a arr_index\n    local i\n    local j\n    local tmp\n    local tmp_index\n\
    \    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n        max_index[i]=$i\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                tmp=${max[j]}\n\
    \                tmp_index=${max_index[j]}\n                max[j]=${arr[i]}\n\
    \                max_index[j]=$i\n                arr[i]=$tmp\n              \
    \  arr_index[i]=$tmp_index\n            fi\n        done\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        arr_sorted[i]=${arr[i]}\n        arr_index[i]=$i\n \
    \   done\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<k; j++)); do\n\
    \            if [[ ${arr_sorted[i]} -lt ${arr_sorted[j]} ]]; then\n          \
    \      tmp=${arr_sorted[i]}\n                tmp_index=${arr_index[i]}\n     \
    \           arr_sorted[i]=${arr_sorted[j]}\n                arr_index[i]=${arr_index[j]}\n\
    \                arr_sorted[j]=$tmp\n                arr_index[j]=$tmp_index\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   max_sorted[i]=${max[${arr_index[i]}]}\n        max_index_sorted[i]=${max_index[${arr_index[i]}]}\n\
    \    done\n    for ((i=0\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp9catvxij.sh: line 66: unexpected EOF while looking for matching
    `)''\n/tmp/tmp9catvxij.sh: line 89: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=($1)\n    local k=$2\n    local len=${#arr[@]}\n    local i=0\n\
    \    local j=0\n    local temp=0\n    for ((i=0; i<len-1; i++)); do\n        for\
    \ ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n\
    \                temp=${arr[i]}\n                arr[i]=${arr[j]}\n          \
    \      arr[j]=$temp\n            fi\n        done\n    done\n    for ((i=0; i<k;\
    \ i++)); do\n        echo -n '\"'${arr[i]}'\"'\n        if [[ $i -lt $k-1 ]];\
    \ then\n            echo -n \", \"\n        fi\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -a max_idx\n\
    \    local -a max_val\n    local -a max_val_idx\n    local -a max_val_idx_idx\n\
    \    local -a max_val_idx_val\n    local -a max_val_idx_val_idx\n    local -a\
    \ max_val_idx_val_val\n    local -a max_val_idx_val_val_idx\n    local -a max_val_idx_val_val_val\n\
    \    local -a max_val_idx_val_val_val_idx\n    local -a max_val_idx_val_val_val_val\n\
    \    local -a max_val_idx_val_val_val_val_idx\n    local -a max_val_idx_val_val_val_val_val\n\
    \    local -a max_val_idx_val_val_val_val_val_idx\n    local -a max_val_idx_val_val_val_val_val_val\n\
    \    local -a max_val_idx_val_val_val_val_val_val_idx\n    local -a max_val_idx_val_val_val_val_val_val_val\n\
    \    local -a max_val_idx_val_val_val_val_val_val_val_idx\n    local -a max_val_idx_val_val_val_val_val_val_val_val\n\
    \    local -a max_val_idx_val_val_val_val_val_val_val_val_idx\n    local -a max_val_idx_val_val_val_val_val_val_val_val_val\n\
    \    local -a max_val_idx_val_val_val_val_val_val_val_val_val_idx\n    local -a\
    \ max_val_idx_val_val_val_val_val_val_val_val_val_val\n    local -a max_val_idx_val_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpxz_r5gz3.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max_arr\n    local max_num\n\
    \    local max_index\n    local i\n    for ((i=0; i<k; i++)); do\n        max_num=${arr[0]}\n\
    \        max_index=0\n        for ((j=1; j<${#arr[@]}; j++)); do\n           \
    \ if [[ ${arr[j]} -gt $max_num ]]; then\n                max_num=${arr[j]}\n \
    \               max_index=$j\n            fi\n        done\n        max_arr[i]=$max_num\n\
    \        unset arr[$max_index]\n    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpy203nhpw.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i len\n    local -i len_max\n\
    \    local -i max_index\n    local -i max_value\n    local -i tmp\n    arr_sorted=($(echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -n))\n    len=${#arr_sorted[@]}\n    len_max=$((len\
    \ - k))\n    for ((i=0; i<len_max; i++)); do\n        max_index=$i\n        max_value=${arr_sorted[$i]}\n\
    \        for ((j=i+1; j<len; j++)); do\n            tmp=${arr_sorted[$j]}\n  \
    \          if [[ $tmp -gt $max_value ]]; then\n                max_index=$j\n\
    \                max_value=$tmp\n            fi\n        done\n        arr_sorted[$i]=${arr_sorted[$max_index]}\n\
    \        arr_sorted[$max_index]=$max_value\n    done\n    for ((i=len_max; i<len;\
    \ i++)); do\n        arr_max+=(\"\\\"${arr_sorted[$i]}\\\"\")\n    done\n    echo\
    \ \"[${arr_max[@]}]\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max=()\n    local -a res=()\n\
    \    for i in ${arr[@]}; do\n        if [[ ${#max[@]} -lt $k ]]; then\n      \
    \      max+=($i)\n        else\n            for j in ${!max[@]}; do\n        \
    \        if [[ $i -gt ${max[$j]} ]]; then\n                    max[$j]=$i\n  \
    \                  break\n                fi\n            done\n        fi\n \
    \   done\n    for i in ${max[@]}; do\n        res+=($i)\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpkxdcghjq.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_num=0\n\
    \    local max_index=0\n    local i=0\n    local j=0\n    local len=0\n    local\
    \ tmp=0\n    local tmp_arr=()\n    local tmp_str=\"\"\n    local res_arr=()\n\
    \    local res_str=\"\"\n    tmp_arr=($arr)\n    len=${#tmp_arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        tmp=${tmp_arr[$i]}\n        if [[ $tmp -gt $max_num\
    \ ]]; then\n            max_num=$tmp\n            max_index=$i\n        fi\n \
    \   done\n    max_arr[0]=$max_num\n    for ((i=1; i<k; i++)); do\n        max_num=0\n\
    \        max_index=0\n        for ((j=0; j<len; j++)); do\n            tmp=${tmp_arr[$j]}\n\
    \            if [[ $tmp -gt $max_num ]] && [[ $tmp -lt ${max_arr[$((i-1))]} ]];\
    \ then\n                max_num=$tmp\n                max_index=$j\n         \
    \   fi\n        done\n        max_arr[$i]=$max_num\n    done\n    for ((i=0; i<k;\
    \ i++)); do\n        tmp_str=\"${max_arr[$i]}\"\n        res_arr[$i]=\"\\\"$tmp_str\\\
    \"\"\n    done\n    res_str=$(IFS=,; echo \"${res_arr[*]}\")\n    echo \"[$res_str]\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local i=0\n    local max=()\n \
    \   local max_i=0\n    local max_val=0\n    local val=0\n    local arr_len=0\n\
    \    local arr_i=0\n    local arr_val=0\n    local arr_vals=()\n    local arr_vals_len=0\n\
    \    local arr_vals_i=0\n    local arr_vals_val=0\n    arr_vals=($(echo \"$arr\"\
    \ | tr \" \" \"\\n\"))\n    arr_vals_len=${#arr_vals[@]}\n    for ((i=0; i<k;\
    \ i++)); do\n        max_val=-1000\n        for ((arr_i=0; arr_i<arr_vals_len;\
    \ arr_i++)); do\n            arr_val=${arr_vals[$arr_i]}\n            if [[ $arr_val\
    \ -gt $max_val ]]; then\n                max_val=$arr_val\n                max_i=$arr_i\n\
    \            fi\n        done\n        max[$i]=$max_val\n        arr_vals[$max_i]=-1001\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=0\n    local i=0\n    local j=0\n    local tmp=0\n    for item\
    \ in $arr; do\n        arr_len=$((arr_len + 1))\n        if [[ $max_arr_len -lt\
    \ $k ]]; then\n            max_arr[$max_arr_len]=$item\n            max_arr_len=$((max_arr_len\
    \ + 1))\n        else\n            for (( i = 0; i < $max_arr_len; i++ )); do\n\
    \                if [[ $item -gt ${max_arr[$i]} ]]; then\n                   \
    \ tmp=${max_arr[$i]}\n                    max_arr[$i]=$item\n                \
    \    item=$tmp\n                fi\n            done\n        fi\n    done\n \
    \   for (( i = 0; i < $max_arr_len; i++ )); do\n        echo -n '\"'${max_arr[$i]}'\"\
    '\n        if [[ $i -lt $((max_arr_len - 1)) ]]; then\n            echo -n \"\
    , \"\n        fi\n    done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local result=()\n    local arr_len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        local max_index=$i\n        for ((j=i+1;\
    \ j<arr_len; j++)); do\n            if [[ ${arr[j]} -gt ${arr[max_index]} ]];\
    \ then\n                max_index=$j\n            fi\n        done\n        result+=(${arr[max_index]})\n\
    \        arr[max_index]=${arr[i]}\n        arr[i]=${result[i]}\n    done\n   \
    \ echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=$(echo \"$arr\" |\
    \ wc -w)\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((k\
    \ - 1))\n    local max_arr_len_min=$((k - arr_len))\n    local max_arr_len_cur=0\n\
    \    local max_arr_len_cur_max=0\n    local max_arr_len_cur_min=0\n    local max_arr_len_cur_max_idx=0\n\
    \    local max_arr_len_cur_min_idx=0\n    local max_arr_len_cur_max_val=0\n  \
    \  local max_arr_len_cur_min_val=0\n    local max_arr_len_cur_max_val_idx=0\n\
    \    local max_arr_len_cur_min_val_idx=0\n    local max_arr_len_cur_max_val_idx_max=0\n\
    \    local max_arr_len_cur_min_val_idx_min=0\n    local max_arr_len_cur_max_val_idx_max_val=0\n\
    \    local max_arr_len_cur_min_val_idx_min_val=0\n    local max_arr_len_cur_max_val_idx_max_val_idx=0\n\
    \    local max_arr_len_cur_min_val_idx_min_val_idx=0\n    local max_arr_len_cur_max_val_idx_max_val_idx_max=0\n\
    \    local max_arr_len_cur_min_val_idx_min_val_idx_min=0\n    local max_arr_len_cur_max_val_idx_max_val_idx_max_val=0\n\
    \    local max_arr_len_cur_min_val_idx_min_val_idx_min_val=0\n    local max_arr_len_cur_max_val_idx_max_val_idx_max\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result=()\n    local -a temp=()\n\
    \    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len;\
    \ i++)); do\n        if [[ ${arr[i]} -gt ${temp[0]} ]]; then\n            temp[0]=${arr[i]}\n\
    \            temp[1]=$i\n        fi\n        for ((j=1; j<k; j++)); do\n     \
    \       if [[ ${arr[i]} -gt ${temp[j*2]} ]]; then\n                temp[j*2]=${arr[i]}\n\
    \                temp[j*2+1]=$i\n                break\n            fi\n     \
    \   done\n    done\n    for ((i=0; i<k; i++)); do\n        result[i]=${temp[i*2]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpo8qar4yi.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a tmp\n   \
    \ local i\n    for i in ${arr[@]}; do\n        tmp+=($i)\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        local max=${tmp[0]}\n        local max_idx=0\n     \
    \   for ((j=1; j<${#tmp[@]}; j++)); do\n            if [[ ${tmp[j]} -gt $max ]];\
    \ then\n                max=${tmp[j]}\n                max_idx=$j\n          \
    \  fi\n        done\n        res+=($max)\n        unset tmp[$max_idx]\n      \
    \  tmp=(${tmp[@]})\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpfn7gk6zg.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    IFS=' ' read -r -a arr_sorted <<< \"$(echo \"$arr\" | tr ' '\
    \ '\\n' | sort -nr)\"\n    for ((i=0; i<k; i++)); do\n        arr_max+=(\"${arr_sorted[$i]}\"\
    )\n    done\n    echo \"${arr_max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -a arr=(\"$1\")\n    local k=\"$2\"\n    local -a max=()\n    local\
    \ i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        for ((j=i+1; j<len; j++)); do\n            if [[ ${arr[i]} -lt ${arr[j]}\
    \ ]]; then\n                local tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -a sorted\n\
    \    local -i i\n    local -i j\n    local -i len\n    local -i max\n    local\
    \ -i max_index\n    local -i temp\n    len=${#arr[@]}\n    for ((i=0; i<k; i++));\
    \ do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len; j++));\
    \ do\n            if ((${arr[j]} > max)); then\n                max=${arr[j]}\n\
    \                max_index=j\n            fi\n        done\n        result[i]=$max\n\
    \        arr[max_index]=$((-1 * ${arr[max_index]}))\n    done\n    for ((i=0;\
    \ i<k; i++)); do\n        sorted[i]=${result[i]}\n    done\n    for ((i=0; i<k;\
    \ i++)); do\n        for ((j=i+1; j<k; j++)); do\n            if ((${sorted[i]}\
    \ < ${sorted[j]})); then\n                temp=${sorted[i]}\n                sorted[i]=${sorted[j]}\n\
    \                sorted[j]=$temp\n            fi\n        done\n    done\n   \
    \ echo ${sorted[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb6ila4yr.sh: line 18: local: `-3 -4 5\'': invalid variable name
    for name reference\n/tmp/tmpb6ila4yr.sh: line 39: -1 * : syntax error: operand
    expected (error token is "* ")\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr=($arr)\n    local\
    \ -a max\n    local -i i=0\n    local -i j=0\n    local -i len=${#arr[@]}\n  \
    \  local -i max_len=0\n    local -i max_idx=0\n    local -i max_val=0\n    local\
    \ -i val=0\n    local -i max_val_idx=0\n    local -i max_val_len=0\n    local\
    \ -i max_val_idx_len=0\n    local -i max_val_idx_val=0\n    local -i max_val_idx_val_len=0\n\
    \    local -i max_val_idx_val_len_idx=0\n    local -i max_val_idx_val_len_idx_val=0\n\
    \    local -i max_val_idx_val_len_idx_val_len=0\n    local -i max_val_idx_val_len_idx_val_len_idx=0\n\
    \    local -i max_val_idx_val_len_idx_val_len_idx_val=0\n    local -i max_val_idx_val_len_idx_val_len_idx_val_len=0\n\
    \    local -i max_val_idx_val_len_idx_val_len_idx_val_len_idx=0\n    local -i\
    \ max_val_idx_val_len_idx_val_len_idx_val_len_idx_val=0\n    local -i max_val_idx_val_len_idx_val_len_idx_val_len_idx_val_len=0\n\
    \    local -i max_val_idx_val_len_idx_val_len_idx_val_len_idx_val_len_idx=0\n\
    \    local -i max_val_idx_val_len_idx_val_len_idx_val_len_idx_val_len_id\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -i i j\n   \
    \ for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[\
    \ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n       \
    \         break\n            fi\n        done\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpuis_nswj.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    for ((i=0; i<k; i++));\
    \ do\n        local max=${arr[0]}\n        local max_i=0\n        for ((j=1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_i=$j\n            fi\n        done\n        res+=($max)\n\
    \        unset arr[$max_i]\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpekex1eeu.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max_arr=()\n    local _max_arr_len=0\n\
    \    local _max_arr_idx=0\n    local _max_arr_idx_last=0\n    local _max_arr_idx_first=0\n\
    \    local _max_arr_idx_last_next=0\n    local _max_arr_idx_first_next=0\n   \
    \ local _max_arr_idx_last_prev=0\n    local _max_arr_idx_first_prev=0\n    local\
    \ _max_arr_idx_last_next_prev=0\n    local _max_arr_idx_first_next_prev=0\n  \
    \  local _max_arr_idx_last_next_prev_next=0\n    local _max_arr_idx_first_next_prev_next=0\n\
    \    local _max_arr_idx_last_next_prev_next_prev=0\n    local _max_arr_idx_first_next_prev_next_prev=0\n\
    \    local _max_arr_idx_last_next_prev_next_prev_next=0\n    local _max_arr_idx_first_next_prev_next_prev_next=0\n\
    \    local _max_arr_idx_last_next_prev_next_prev_next_prev=0\n    local _max_arr_idx_first_next_prev_next_prev_next_prev=0\n\
    \    local _max_arr_idx_last_next_prev_next_prev_next_prev_next=0\n    local _max_arr_idx_first_next_prev_next_prev_next_prev_next=0\n\
    \    local _max_arr_idx_last_next_prev_next_prev_next_prev_next_prev=0\n    local\
    \ _max_arr_idx_first_next_prev_next_prev_next_prev_next_prev=0\n    local _max_arr_idx_last_next_prev_next_prev_next_prev_next_prev_next=0\n\
    \    local _\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp_imv_cep.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    for i in \"${arr[@]}\"\
    ; do\n        max+=($i)\n        for j in \"${max[@]}\"; do\n            if [[\
    \ $i -gt $j ]]; then\n                max=($i \"${max[@]}\")\n               \
    \ unset max[0]\n                break\n            elif [[ $i -lt $j ]]; then\n\
    \                max=($j \"${max[@]}\")\n                unset max[0]\n      \
    \          break\n            fi\n        done\n        if [[ ${#max[@]} -gt $k\
    \ ]]; then\n            unset max[0]\n        fi\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpn4scyjo1.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=$(echo \"$arr\" |\
    \ wc -w)\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((k\
    \ - 1))\n    local max_arr_len_min=$((k - arr_len))\n    local max_arr_len_min=$((max_arr_len_min\
    \ > 0 ? max_arr_len_min : 0))\n    local max_arr_len_min=$((max_arr_len_min >\
    \ max_arr_len_max ? max_arr_len_max : max_arr_len_min))\n    local max_arr_len_max=$((max_arr_len_max\
    \ > max_arr_len_min ? max_arr_len_min : max_arr_len_max))\n    local max_arr_len_min=$((max_arr_len_min\
    \ > max_arr_len_max ? max_arr_len_max : max_arr_len_min))\n    local max_arr_len_max=$((max_arr_len_max\
    \ > max_arr_len_min ? max_arr_len_min : max_arr_len_max))\n    local max_arr_len_min=$((max_arr_len_min\
    \ > max_arr_len_max ? max_arr_len_max : max_arr_len_min))\n    local max_arr_len_max=$((max_arr_len_max\
    \ > max_arr_len_min ? max_arr_len_min : max_arr_len_max))\n    local max_arr_len_min=$((max_arr_len_min\
    \ > max_arr_len_max ? max_arr_len_max : max_arr_len_min))\n    local max_arr_len_max=$((max_arr_len_max\
    \ > max_arr_len_min ? max_arr_len_min : max_arr_len_max))\n    local max_arr_len_min=$((max_arr_len_min\
    \ > max_arr_len_max ? max_arr_len_max : max_arr_len_\n}\n\ncandidate() {\n   \
    \ maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpqf1u_ypf.sh: line 34: unexpected EOF while looking for matching
    `)''\n/tmp/tmpqf1u_ypf.sh: line 57: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local -a arr=($arr)\n    local -a max_arr=()\n\
    \    local max_num\n    for ((i=0; i<${#arr[@]}; i++)); do\n        max_num=${arr[i]}\n\
    \        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt\
    \ $max_num ]]; then\n                max_num=${arr[j]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$max_num\n            fi\n        done\n        max_arr+=($max_num)\n\
    \    done\n    echo ${max_arr[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local max_index\n    local max_value\n\
    \    arr_sorted=($(echo \"$arr\" | tr ' ' '\\n' | sort -n))\n    for ((i=0; i<k;\
    \ i++)); do\n        max_index=0\n        max_value=${arr_sorted[0]}\n       \
    \ for ((j=1; j<${#arr_sorted[@]}; j++)); do\n            if [[ ${arr_sorted[j]}\
    \ -gt $max_value ]]; then\n                max_index=$j\n                max_value=${arr_sorted[j]}\n\
    \            fi\n        done\n        arr_max[i]=$max_value\n        unset arr_sorted[$max_index]\n\
    \        arr_sorted=(${arr_sorted[@]})\n    done\n    echo \"${arr_max[@]}\"\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -a sorted\n\
    \    local -a max\n    local i\n    local j\n    local len\n    local max_len\n\
    \    local max_index\n    local max_value\n    local value\n    local index\n\
    \    local index_value\n    local -a arr_copy\n    local -a arr_copy_index\n \
    \   local -a arr_copy_value\n    local -a arr_copy_index_value\n    local -a arr_copy_index_value_sorted\n\
    \    local -a arr_copy_index_value_sorted_index\n    local -a arr_copy_index_value_sorted_value\n\
    \    local -a arr_copy_index_value_sorted_index_value\n    local -a arr_copy_index_value_sorted_index_value_sorted\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index\n    local\
    \ -a arr_copy_index_value_sorted_index_value_sorted_value\n    local -a arr_copy_index_value_sorted_index_value_sorted_index_value\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index_value_sorted\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index_value_sorted_index\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index_value_sorted_value\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index_value_sorted_index_value\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index_value_sorted_index_value_sorted\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index_value_sorted_index_value_sorted_index\n\
    \    local -a arr_copy_index_value_sorted_index_value_sorted_index_value_sorted_index_value_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpy0a78135.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    arr=(\"$@\")\n    k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\")\n\
    \    arr=(\"${arr[@]// /}\")\n    arr=(\"${arr[@]//,/ }\")\n    arr=($arr)\n \
    \   arr=($(printf \"%s\\n\" \"${arr[@]}\" | sort -nr))\n    arr=(\"${arr[@]:0:$k}\"\
    )\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local arr_max=\"$(echo \"$arr\" | sort -nr | head -n \"$k\"\
    )\"\n    local arr_max_len=\"$(echo \"$arr_max\" | wc -w)\"\n    if [[ \"$arr_len\"\
    \ -lt \"$k\" ]]; then\n        echo \"$arr_max\"\n    else\n        echo \"$arr_max\"\
    \ | head -n \"$arr_max_len\"\n    fi\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result=()\n    local -a max=()\n\
    \    local -a min=()\n    local i\n    local j\n    local n\n    local m\n   \
    \ local temp\n    for ((i=0; i<k; i++)); do\n        max[$i]=${arr[$i]}\n    done\n\
    \    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n \
    \           if [[ ${arr[$i]} -gt ${max[$j]} ]]; then\n                temp=${max[$j]}\n\
    \                max[$j]=${arr[$i]}\n                arr[$i]=$temp\n         \
    \   fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n        result[$i]=${max[$i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpdvf2s9j9.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -a res\n   \
    \ for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k;\
    \ i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[\
    \ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n       \
    \         break\n            fi\n        done\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        res[i]=\"\\\"${max[i]}\\\"\"\n    done\n    echo \"${res[@]}\"\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpjvg8l4md.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _i=0\n    local _j=0\n    local\
    \ _max=0\n    local _tmp=0\n    local _result=()\n    for _i in ${_arr[@]}; do\n\
    \        _result[$_i]=$_i\n    done\n    for _i in ${_result[@]}; do\n       \
    \ for _j in ${_result[@]}; do\n            if [[ $_i -gt $_j ]]; then\n      \
    \          _tmp=$_i\n                _i=$_j\n                _j=$_tmp\n      \
    \      fi\n        done\n    done\n    for _i in ${_result[@]}; do\n        if\
    \ [[ $_i -gt $_max ]]; then\n            _max=$_i\n        fi\n    done\n    echo\
    \ ${_result[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp9l6m2n11.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local max\n    local max_index\n \
    \   local len\n    local -a result\n    arr_sorted=($(echo \"$arr\" | tr ' ' '\\\
    n' | sort -n))\n    len=${#arr_sorted[@]}\n    for ((i=0; i<k; i++)); do\n   \
    \     max=${arr_sorted[0]}\n        max_index=0\n        for ((j=1; j<len; j++));\
    \ do\n            if [[ ${arr_sorted[j]} -gt $max ]]; then\n                max=${arr_sorted[j]}\n\
    \                max_index=$j\n            fi\n        done\n        arr_max[i]=$max\n\
    \        unset arr_sorted[$max_index]\n        arr_sorted=(${arr_sorted[@]})\n\
    \        len=${#arr_sorted[@]}\n    done\n    result=(\"${arr_max[@]}\")\n   \
    \ echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local max\n    local max_index\n \
    \   local -i len=${#arr[@]}\n    for i in $(seq 1 $k); do\n        max=${arr[0]}\n\
    \        max_index=0\n        for j in $(seq 1 $len); do\n            if [[ ${arr[$j]}\
    \ -gt $max ]]; then\n                max=${arr[$j]}\n                max_index=$j\n\
    \            fi\n        done\n        arr_max[$i]=$max\n        arr[$max_index]=0\n\
    \    done\n    echo ${arr_max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzu16qdq0.sh: line 31: [[: -3 -4 5: syntax error in expression
    (error token is "5")\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    for ((i=0; i<k; i++));\
    \ do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo \"${max[@]}\" | tr ' ' '\\n' | sort\
    \ -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpcinpht07.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr=($arr)\n    local\
    \ -a max=()\n    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n \
    \   local -i m=0\n    local -i max_len=0\n    local -i max_idx=0\n    local -i\
    \ max_val=0\n    local -i val=0\n    local -i idx=0\n    local -i len=0\n    local\
    \ -i tmp=0\n    local -i tmp_idx=0\n    local -i tmp_val=0\n    local -i tmp_len=0\n\
    \    local -i tmp_max_idx=0\n    local -i tmp_max_val=0\n    local -i tmp_max_len=0\n\
    \    local -i tmp_max_len_idx=0\n    local -i tmp_max_len_val=0\n    local -i\
    \ tmp_max_len_len=0\n    local -i tmp_max_len_max_idx=0\n    local -i tmp_max_len_max_val=0\n\
    \    local -i tmp_max_len_max_len=0\n    local -i tmp_max_len_max_len_idx=0\n\
    \    local -i tmp_max_len_max_len_val=0\n    local -i tmp_max_len_max_len_len=0\n\
    \    local -i tmp_max_len_max_len_max_idx=0\n    local -i tmp_max_len_max_len_max_val=0\n\
    \    local -i tmp_max_len_max_len_max_len=0\n    local -i tmp_max_len_max_len_max_len_idx=0\n\
    \    local -i tmp_max_len_max_len_max_len_val=0\n    local -i tmp_max_len_max_len_max_len_len=0\n\
    \    local -i tmp_max_len_max_len_max_len_max_idx=0\n    local -i tmp_max_\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max_arr\n    local max_num\n\
    \    local max_index\n    local i\n    local j\n    for ((i=0; i<k; i++)); do\n\
    \        max_num=${arr[0]}\n        max_index=0\n        for ((j=1; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max_num ]]; then\n             \
    \   max_num=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        max_arr+=($max_num)\n        unset arr[$max_index]\n    done\n    echo\
    \ ${max_arr[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp357zxddp.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    for ((i=0; i<k; i++));\
    \ do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]}; i++));\
    \ do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                max[j]=${arr[i]}\n                break\n        \
    \    fi\n        done\n    done\n    echo \"${max[@]}\" | tr ' ' '\\n' | sort\
    \ -nr | tr '\\n' ' '\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpcinpht07.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local result=()\n    local i\n\
    \    local j\n    local tmp\n    for i in $(seq 1 $k); do\n        result[$i]=$(echo\
    \ \"$arr\" | awk '{print $i}' i=$i | sort -nr | head -n 1)\n    done\n    for\
    \ i in $(seq 1 $k); do\n        for j in $(seq 1 $k); do\n            if [[ \"\
    ${result[$i]}\" -lt \"${result[$j]}\" ]]; then\n                tmp=\"${result[$i]}\"\
    \n                result[$i]=\"${result[$j]}\"\n                result[$j]=\"\
    $tmp\"\n            fi\n        done\n    done\n    echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_idx=0\n\
    \    local max_num=0\n    local num=0\n    local i=0\n    local j=0\n    local\
    \ tmp=0\n    for num in $arr; do\n        if [[ $max_arr_len -lt $k ]]; then\n\
    \            max_arr[$max_arr_len]=\"$num\"\n            max_arr_len=$((max_arr_len\
    \ + 1))\n            if [[ $num -gt $max_num ]]; then\n                max_num=\"\
    $num\"\n                max_arr_idx=$((max_arr_len - 1))\n            fi\n   \
    \     else\n            if [[ $num -gt $max_num ]]; then\n                max_arr[$max_arr_idx]=\"\
    $num\"\n                max_num=\"$num\"\n                for ((i = 0; i < max_arr_len;\
    \ i++)); do\n                    if [[ \"${max_arr[$i]}\" -gt \"$max_num\" ]];\
    \ then\n                        max_num=\"${max_arr[$i]}\"\n                 \
    \       max_arr_idx=$i\n                    fi\n                done\n       \
    \     fi\n        fi\n    done\n    for ((i = 0; i < max_arr_len; i++)); do\n\
    \        for ((j = i + 1; j < max_arr_len; j++)); do\n            if [[ \"${max_arr[$i]}\"\
    \ -lt \"${max_arr[$j]}\" ]]; then\n                tmp=\"${max_arr[$i]}\"\n  \
    \              max_arr[$i]=\"${max_arr[$j]}\"\n                max_arr[$j]=\"\
    $tmp\"\n            fi\n        done\n    done\n    echo \"${max_arr[@]}\"\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local max\n    local max_index\n \
    \   local len\n    local -a result\n    # Sort the array\n    arr_sorted=($(echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -n))\n    # Get the max k elements\n    len=${#arr_sorted[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr_sorted[0]}\n        max_index=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr_sorted[j]} -gt\
    \ $max ]]; then\n                max=${arr_sorted[j]}\n                max_index=$j\n\
    \            fi\n        done\n        arr_max[i]=$max\n        arr_sorted[$max_index]=${arr_sorted[len-i-1]}\n\
    \    done\n    # Convert the array to string\n    for ((i=0; i<k; i++)); do\n\
    \        result[i]=\"\\\"${arr_max[i]}\\\"\"\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -a res\n   \
    \ for i in ${arr[@]}; do\n        if [[ ${#max[@]} -lt $k ]]; then\n         \
    \   max+=($i)\n        else\n            local min=${max[0]}\n            local\
    \ min_index=0\n            for j in ${!max[@]}; do\n                if [[ ${max[$j]}\
    \ -lt $min ]]; then\n                    min=${max[$j]}\n                    min_index=$j\n\
    \                fi\n            done\n            if [[ $i -gt $min ]]; then\n\
    \                max[$min_index]=$i\n            fi\n        fi\n    done\n  \
    \  for i in ${max[@]}; do\n        res+=($i)\n    done\n    echo ${res[@]}\n}\n\
    \ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpy_epqutb.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a tmp\n   \
    \ local i\n    local j\n    local len\n    local max\n    local max_index\n  \
    \  len=${#arr[@]}\n    for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n    \
    \    max_index=0\n        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]}\
    \ -gt $max ]]; then\n                max=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        res[i]=$max\n        tmp=(\"${arr[@]:0:$max_index}\"\
    \ \"${arr[@]:$((max_index+1))}\")\n        arr=(\"${tmp[@]}\")\n    done\n   \
    \ echo \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp5eqtbi9j.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max_arr\n    local max_num\n\
    \    local max_index\n    local i\n    local j\n    for ((i=0; i<k; i++)); do\n\
    \        max_num=-1000\n        for ((j=0; j<${#arr[@]}; j++)); do\n         \
    \   if [[ ${arr[j]} -gt $max_num ]]; then\n                max_num=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        max_arr[i]=$max_num\n\
    \        unset arr[$max_index]\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp6uje06sm.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n/tmp/tmp6uje06sm.sh: line 34: unset: `arr[]'': not a valid
    identifier\n/tmp/tmp6uje06sm.sh: line 34: unset: `arr[]'': not a valid identifier\n/tmp/tmp6uje06sm.sh:
    line 34: unset: `arr[]'': not a valid identifier\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local max_arr_idx=0\n    local max_arr_idx_2=0\n    local max_arr_idx_3=0\n\
    \    local max_arr_idx_4=0\n    local max_arr_idx_5=0\n    local max_arr_idx_6=0\n\
    \    local max_arr_idx_7=0\n    local max_arr_idx_8=0\n    local max_arr_idx_9=0\n\
    \    local max_arr_idx_10=0\n    local max_arr_idx_11=0\n    local max_arr_idx_12=0\n\
    \    local max_arr_idx_13=0\n    local max_arr_idx_14=0\n    local max_arr_idx_15=0\n\
    \    local max_arr_idx_16=0\n    local max_arr_idx_17=0\n    local max_arr_idx_18=0\n\
    \    local max_arr_idx_19=0\n    local max_arr_idx_20=0\n    local max_arr_idx_21=0\n\
    \    local max_arr_idx_22=0\n    local max_arr_idx_23=0\n    local max_arr_idx_24=0\n\
    \    local max_arr_idx_25=0\n    local max_arr_idx_26=0\n    local max_arr_idx_27=0\n\
    \    local max_arr_idx_28=0\n    local max_arr_idx_29=0\n    local max_arr_idx_30=0\n\
    \    local max_arr_idx_31=0\n    local max_arr_idx_32=0\n    local max_arr_idx_33=0\n\
    \    local max_arr_idx_34=0\n    local max_arr_idx_35=0\n    local max_arr_idx_36=0\n\
    \    local max_arr_idx_37=0\n\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp86sir02h.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -a sorted\n\
    \    local -a max\n    local i\n    local j\n    local len\n    local max_len\n\
    \    local max_num\n    local max_index\n    local max_index_len\n    local max_index_num\n\
    \    local max_index_index\n    local max_index_index_len\n    local max_index_index_num\n\
    \    local max_index_index_index\n    local max_index_index_index_len\n    local\
    \ max_index_index_index_num\n    local max_index_index_index_index\n    local\
    \ max_index_index_index_index_len\n    local max_index_index_index_index_num\n\
    \    local max_index_index_index_index_index\n    local max_index_index_index_index_index_len\n\
    \    local max_index_index_index_index_index_num\n    local max_index_index_index_index_index_index\n\
    \    local max_index_index_index_index_index_index_len\n    local max_index_index_index_index_index_index_num\n\
    \    local max_index_index_index_index_index_index_index\n    local max_index_index_index_index_index_index_index_len\n\
    \    local max_index_index_index_index_index_index_index_num\n    local max_index_index_index_index_index_index_index_index\n\
    \    local max_index_index_index_index_index_index_index_index_len\n    local\
    \ max_index_index_index_index_index_index_index_index_num\n    local max_index_index_index_index_index_index_index_index_index\n\
    \    local max_index_index_index_index_index_index_index_index_index_len\n   \
    \ local max_index_index_index_index_index_index_index_index_index_num\n    local\
    \ max_index_index_index_index_index_index_index_index_index_index\n    local max_index_index_index_index_index_index_index\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp0aze0gh0.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local i=0\n    local j=0\n    local max=0\n    local tmp=0\n\
    \    local res=()\n    for ((i=0; i<k; i++)); do\n        max=0\n        for ((j=0;\
    \ j<arr_len; j++)); do\n            tmp=\"$(echo \"$arr\" | cut -d \" \" -f $((j+1)))\"\
    \n            if [[ \"$tmp\" -gt \"$max\" ]]; then\n                max=\"$tmp\"\
    \n            fi\n        done\n        res+=(\"$max\")\n        arr=\"$(echo\
    \ \"$arr\" | sed \"s/$max//g\")\"\n        arr_len=\"$(echo \"$arr\" | wc -w)\"\
    \n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a max\n   \
    \ local -a min\n    local i\n    local j\n    local n\n    local m\n    for ((i=0;\
    \ i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]};\
    \ i++)); do\n        for ((j=0; j<k; j++)); do\n            if [[ ${arr[i]} -gt\
    \ ${max[j]} ]]; then\n                max[j]=${arr[i]}\n                break\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   min[i]=${max[i]}\n    done\n    for ((i=0; i<k; i++)); do\n        for ((j=0;\
    \ j<k; j++)); do\n            if [[ ${min[j]} -gt ${max[i]} ]]; then\n       \
    \         min[j]=${max[i]}\n                break\n            fi\n        done\n\
    \    done\n    for ((i=0; i<k; i++)); do\n        res[i]=${min[i]}\n    done\n\
    \    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpt7do1fq7.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _arr_len=${#_arr[@]}\n    local\
    \ _i=0\n    local _j=0\n    local _max=0\n    local _max_index=0\n    local _result=()\n\
    \    for ((_i=0; _i<_k; _i++)); do\n        _max=${_arr[0]}\n        _max_index=0\n\
    \        for ((_j=1; _j<_arr_len; _j++)); do\n            if [[ ${_arr[$_j]} -gt\
    \ $_max ]]; then\n                _max=${_arr[$_j]}\n                _max_index=$_j\n\
    \            fi\n        done\n        _result[$_i]=$_max\n        unset _arr[$_max_index]\n\
    \        _arr_len=${#_arr[@]}\n    done\n    echo ${_result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmphbbh_c33.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _arr_len=${#_arr[@]}\n    local\
    \ _max_arr=()\n    local _max_arr_len=0\n    local _max_arr_i=0\n    local _max_arr_j=0\n\
    \    local _max_arr_k=0\n    local _max_arr_l=0\n    local _max_arr_m=0\n    local\
    \ _max_arr_n=0\n    local _max_arr_o=0\n    local _max_arr_p=0\n    local _max_arr_q=0\n\
    \    local _max_arr_r=0\n    local _max_arr_s=0\n    local _max_arr_t=0\n    local\
    \ _max_arr_u=0\n    local _max_arr_v=0\n    local _max_arr_w=0\n    local _max_arr_x=0\n\
    \    local _max_arr_y=0\n    local _max_arr_z=0\n    local _max_arr_aa=0\n   \
    \ local _max_arr_ab=0\n    local _max_arr_ac=0\n    local _max_arr_ad=0\n    local\
    \ _max_arr_ae=0\n    local _max_arr_af=0\n    local _max_arr_ag=0\n    local _max_arr_ah=0\n\
    \    local _max_arr_ai=0\n    local _max_arr_aj=0\n    local _max_arr_ak=0\n \
    \   local _max_arr_al=0\n    local _max_arr_am=0\n    local _max_arr_an=0\n  \
    \  local _max_arr_ao=0\n    local _max_arr_ap=0\n    local _max_arr_aq=0\n   \
    \ local _max_arr_ar=0\n    local _max_arr_as=0\n    local _max_arr_at=0\n    local\
    \ _max_arr_au=0\n    local _max_arr_av=0\n    local _max_arr_aw=0\n    local _max_arr_ax=\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp0tclbt3y.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max=()\n    local _max_len=0\n\
    \    local _i=0\n    local _j=0\n    local _len=${#_arr[@]}\n    local _tmp=0\n\
    \    for ((_i=0; _i<_len; _i++)); do\n        if [[ ${_arr[_i]} -gt ${_max[0]}\
    \ ]]; then\n            _max[0]=${_arr[_i]}\n            _max_len=1\n        \
    \    for ((_j=1; _j<_k; _j++)); do\n                if [[ ${_arr[_i+_j]} -gt ${_max[_j]}\
    \ ]]; then\n                    _max[_j]=${_arr[_i+_j]}\n                    _max_len=$((_j+1))\n\
    \                else\n                    break\n                fi\n       \
    \     done\n        fi\n    done\n    for ((_i=0; _i<_max_len; _i++)); do\n  \
    \      for ((_j=_i+1; _j<_max_len; _j++)); do\n            if [[ ${_max[_i]} -lt\
    \ ${_max[_j]} ]]; then\n                _tmp=${_max[_i]}\n                _max[_i]=${_max[_j]}\n\
    \                _max[_j]=$_tmp\n            fi\n        done\n    done\n    echo\
    \ ${_max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmplsqbjeo3.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local max_arr_len_max=$k\n    local num\n    for num in $arr; do\n      \
    \  if [[ $max_arr_len -lt $max_arr_len_max ]]; then\n            max_arr[$max_arr_len]=$num\n\
    \            ((max_arr_len++))\n        else\n            local i\n          \
    \  for ((i=0; i<$max_arr_len; i++)); do\n                if [[ $num -gt ${max_arr[$i]}\
    \ ]]; then\n                    local j\n                    for ((j=$max_arr_len-1;\
    \ j>$i; j--)); do\n                        max_arr[$j]=${max_arr[$((j-1))]}\n\
    \                    done\n                    max_arr[$i]=$num\n            \
    \        break\n                fi\n            done\n        fi\n    done\n \
    \   local i\n    for ((i=0; i<$max_arr_len; i++)); do\n        echo -n \"\\\"\
    ${max_arr[$i]}\\\"\"\n        if [[ $i -lt $((max_arr_len-1)) ]]; then\n     \
    \       echo -n \",\"\n        fi\n    done\n    echo\n}\n\ncandidate() {\n  \
    \  maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"\
    3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n   \
    \ [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20\
    \ 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\"\
    \ \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"\
    2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10\
    \ 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _result=()\n    local _i=0\n\
    \    local _j=0\n    local _tmp=0\n    for _i in ${_arr[@]}; do\n        _result[$_i]=$_i\n\
    \    done\n    for ((_i=0; _i<${#_result[@]}; _i++)); do\n        for ((_j=0;\
    \ _j<${#_result[@]}-1; _j++)); do\n            if [[ ${_result[$_j]} -gt ${_result[$_j+1]}\
    \ ]]; then\n                _tmp=${_result[$_j]}\n                _result[$_j]=${_result[$_j+1]}\n\
    \                _result[$_j+1]=$_tmp\n            fi\n        done\n    done\n\
    \    echo ${_result[@]: -$_k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpsku4nx1j.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_list=()\n    local max_list_len=0\n\
    \    local arr_len=0\n    local arr_list=()\n    local i=0\n    local j=0\n  \
    \  local tmp=0\n    arr_list=($(echo \"$arr\" | tr \" \" \"\\n\"))\n    arr_len=${#arr_list[@]}\n\
    \    if [[ $arr_len -lt $k ]]; then\n        echo \"The length of the array is\
    \ less than k.\"\n        return 1\n    fi\n    for ((i=0; i<$k; i++)); do\n \
    \       max_list[$i]=${arr_list[$i]}\n    done\n    max_list_len=${#max_list[@]}\n\
    \    for ((i=$k; i<$arr_len; i++)); do\n        for ((j=0; j<$max_list_len; j++));\
    \ do\n            if [[ ${arr_list[$i]} -gt ${max_list[$j]} ]]; then\n       \
    \         tmp=${max_list[$j]}\n                max_list[$j]=${arr_list[$i]}\n\
    \                arr_list[$i]=$tmp\n            fi\n        done\n    done\n \
    \   echo \"${max_list[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i n\n    local -i m\n\
    \    local -i max_index\n    local -i max_value\n    local -i min_value\n    local\
    \ -i min_index\n    local -i arr_len\n    local -i k_len\n    local -i arr_max_len\n\
    \    local -i arr_sorted_len\n    local -i arr_max_index\n    local -i arr_sorted_index\n\
    \    local -i arr_sorted_index_max\n    local -i arr_sorted_index_min\n    local\
    \ -i arr_sorted_index_max_value\n    local -i arr_sorted_index_min_value\n   \
    \ local -i arr_sorted_index_max_index\n    local -i arr_sorted_index_min_index\n\
    \    local -i arr_sorted_index_max_index_value\n    local -i arr_sorted_index_min_index_value\n\
    \    local -i arr_sorted_index_max_index_index\n    local -i arr_sorted_index_min_index_index\n\
    \    local -i arr_sorted_index_max_index_index_value\n    local -i arr_sorted_index_min_index_index_value\n\
    \    local -i arr_sorted_index_max_index_index_index\n    local -i arr_sorted_index_min_index_index_index\n\
    \    local -i arr_sorted_index_max_index_index_index_value\n    local -i arr_sorted_index_min_index_index_index_value\n\
    \    local -i arr_sorted_index_max_index_index_index_index\n    local -i arr_sorted_index_min_index_index_index_index\n\
    \    local -i arr_sorted_index_max_index_index_index_index_value\n    local -i\
    \ arr_sorted_index_min_index_index_index_index_value\n    local -i\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr=($arr)\n    local len=${#arr[@]}\n\
    \    local max=()\n    local i=0\n    while [ $i -lt $k ]; do\n        local j=0\n\
    \        local max_index=0\n        while [ $j -lt $len ]; do\n            if\
    \ [ ${arr[$j]} -gt ${arr[$max_index]} ]; then\n                max_index=$j\n\
    \            fi\n            j=$((j+1))\n        done\n        max+=(${arr[$max_index]})\n\
    \        arr[$max_index]=-1000\n        i=$((i+1))\n    done\n    echo ${max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -a arr=($1)\n    local k=$2\n    local -a max_arr=()\n    local max_num=0\n\
    \    local max_index=0\n    local i=0\n    local j=0\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<k; i++)); do\n        max_num=${arr[0]}\n        max_index=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr[j]} -gt $max_num\
    \ ]]; then\n                max_num=${arr[j]}\n                max_index=$j\n\
    \            fi\n        done\n        max_arr+=($max_num)\n        unset arr[$max_index]\n\
    \        arr=(${arr[@]})\n    done\n    echo ${max_arr[@]}\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo $arr | wc -w)\n  \
    \  local max_arr=()\n    local max_num=0\n    local max_index=0\n    local i=0\n\
    \    local j=0\n    local arr_i=0\n    local arr_j=0\n    local arr_k=0\n    local\
    \ arr_l=0\n    local arr_m=0\n    local arr_n=0\n    local arr_o=0\n    local\
    \ arr_p=0\n    local arr_q=0\n    local arr_r=0\n    local arr_s=0\n    local\
    \ arr_t=0\n    local arr_u=0\n    local arr_v=0\n    local arr_w=0\n    local\
    \ arr_x=0\n    local arr_y=0\n    local arr_z=0\n    local arr_aa=0\n    local\
    \ arr_ab=0\n    local arr_ac=0\n    local arr_ad=0\n    local arr_ae=0\n    local\
    \ arr_af=0\n    local arr_ag=0\n    local arr_ah=0\n    local arr_ai=0\n    local\
    \ arr_aj=0\n    local arr_ak=0\n    local arr_al=0\n    local arr_am=0\n    local\
    \ arr_an=0\n    local arr_ao=0\n    local arr_ap=0\n    local arr_aq=0\n    local\
    \ arr_ar=0\n    local arr_as=0\n    local arr_at=0\n    local arr_au=0\n    local\
    \ arr_av=0\n    local arr_aw=0\n    local arr_ax=0\n    local arr_ay=0\n    local\
    \ arr_az=0\n    local arr_ba=0\n    local arr_bb=0\n    local arr_bc=0\n    local\
    \ arr_bd=0\n    local arr_be=0\n    local arr_bf=0\n    local arr_bg=0\n    local\
    \ arr_bh=0\n    local arr_bi=0\n    local arr_bj=0\n    local arr_bk=0\n    local\
    \ arr_bl\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n\
    \    arr_sorted=($(echo \"$arr\" | tr ' ' '\\n' | sort -n))\n    arr_max=(${arr_sorted[@]:\
    \ -$k})\n    echo \"${arr_max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((k\
    \ - 1))\n    local max_arr_len_min=$((k - arr_len))\n    local max_arr_len_min_abs=$((-max_arr_len_min))\n\
    \    local max_arr_len_min_abs_dec=$((max_arr_len_min_abs - 1))\n    local max_arr_len_min_abs_dec_abs=$((-max_arr_len_min_abs_dec))\n\
    \    local max_arr_len_min_abs_dec_abs_dec=$((max_arr_len_min_abs_dec_abs - 1))\n\
    \    local max_arr_len_min_abs_dec_abs_dec_abs=$((-max_arr_len_min_abs_dec_abs_dec))\n\
    \    local max_arr_len_min_abs_dec_abs_dec_abs_dec=$((max_arr_len_min_abs_dec_abs_dec_abs\
    \ - 1))\n    local max_arr_len_min_abs_dec_abs_dec_abs_dec_abs=$((-max_arr_len_min_abs_dec_abs_dec_abs_dec))\n\
    \    local max_arr_len_min_abs_dec_abs_dec_abs_dec_abs_dec=$((max_arr_len_min_abs_dec_abs_dec_abs_dec_abs\
    \ - 1))\n    local max_arr_len_min_abs_dec_abs_dec_abs_dec_abs_dec_abs=$((-max_arr_len_min_abs_dec_abs_dec_abs_dec_abs_dec))\n\
    \    local max_arr_len_min_abs_dec_abs_dec_abs_dec_abs_dec_abs_dec=$((max_arr_len_min_abs_dec_abs_dec_abs_dec_abs_dec_abs\
    \ - 1))\n    local max_arr_len_min\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local result=()\n    local arr_len=${#arr[@]}\n\
    \    local i=0\n    local j=0\n    local max_index=0\n    local max_value=0\n\
    \    local temp=0\n    local temp_index=0\n    for ((i=0; i<arr_len; i++)); do\n\
    \        if [[ ${arr[i]} -gt $max_value ]]; then\n            max_value=${arr[i]}\n\
    \            max_index=$i\n        fi\n    done\n    result[0]=$max_value\n  \
    \  for ((i=1; i<k; i++)); do\n        max_value=0\n        for ((j=0; j<arr_len;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max_value ]]; then\n           \
    \     if [[ $j -ne $max_index ]]; then\n                    max_value=${arr[j]}\n\
    \                    max_index=$j\n                fi\n            fi\n      \
    \  done\n        result[i]=$max_value\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpst8kgavr.sh: line 29: [[: -3 -4 5: syntax error in expression
    (error token is "5")\n/tmp/tmpst8kgavr.sh: line 38: [[: -3 -4 5: syntax error
    in expression (error token is "5")\n/tmp/tmpst8kgavr.sh: line 38: [[: -3 -4 5:
    syntax error in expression (error token is "5")\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i=0\n    local -i j=0\n    local -i len=0\n    local\
    \ -i max=0\n    local -i max_index=0\n    local -i max_index_prev=0\n    local\
    \ -i max_index_next=0\n    local -i max_index_prev_prev=0\n    local -i max_index_next_next=0\n\
    \    local -i max_index_prev_prev_prev=0\n    local -i max_index_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i max_index_next_next_next_next_next_next_next=0\n\
    \    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ max_index_next_next_next_next_next_next_next_next=0\n    local -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i max_index_next_next_next_next_next_next_next_next_next=0\n    local\
    \ -i max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i max_index_next_next_next_next_next_next_next_next_next_next=0\n    local\
    \ -i max_index_prev_prev_prev_prev_\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a tmp\n   \
    \ local i\n    local j\n    local len\n    local max\n    local max_index\n  \
    \  for ((i=0; i<k; i++)); do\n        max=${arr[0]}\n        max_index=0\n   \
    \     for ((j=1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[j]} -gt $max\
    \ ]]; then\n                max=${arr[j]}\n                max_index=$j\n    \
    \        fi\n        done\n        res[i]=$max\n        tmp[i]=$max_index\n  \
    \      unset arr[$max_index]\n        arr=(\"${arr[@]}\")\n    done\n    echo\
    \ ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp0t190c9c.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo \"$arr\" | wc -w)\n\
    \    local arr_max=$(echo \"$arr\" | sort -nr | head -n $k)\n    echo \"$arr_max\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -a temp\n  \
    \  local i\n    local j\n    local max_num\n    local temp_num\n    for ((i=0;\
    \ i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]};\
    \ i++)); do\n        temp=(\"${max[@]}\")\n        max_num=${max[0]}\n       \
    \ for ((j=0; j<${#temp[@]}; j++)); do\n            temp_num=${temp[j]}\n     \
    \       if [[ \"$temp_num\" -gt \"$max_num\" ]]; then\n                max_num=$temp_num\n\
    \            fi\n        done\n        if [[ \"${arr[i]}\" -gt \"$max_num\" ]];\
    \ then\n            max[0]=${arr[i]}\n        fi\n    done\n    echo \"${max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp5at8yej3.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i len\n    local -i max_len\n\
    \    local -i max_index\n    local -i max_value\n    local -i tmp_value\n    local\
    \ -i tmp_index\n    local -i tmp_len\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local -i tmp_max_value\n    local -i tmp_max_len\n    local -i tmp_max_index\n\
    \    local\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -a max_index\n\
    \    local -a max_index_sorted\n    local -a max_sorted\n    local -a arr_sorted\n\
    \    local -a arr_index\n    local i\n    local j\n    local index\n    local\
    \ temp\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n        max_index[i]=$i\n\
    \    done\n    for ((i=k; i<${#arr[@]}; i++)); do\n        for ((j=0; j<k; j++));\
    \ do\n            if [[ ${arr[i]} -gt ${max[j]} ]]; then\n                max[j]=${arr[i]}\n\
    \                max_index[j]=$i\n                break\n            fi\n    \
    \    done\n    done\n    for ((i=0; i<k; i++)); do\n        arr_sorted[i]=${arr[${max_index[i]}]}\n\
    \        arr_index[i]=${max_index[i]}\n    done\n    for ((i=0; i<k; i++)); do\n\
    \        for ((j=i+1; j<k; j++)); do\n            if [[ ${arr_sorted[i]} -lt ${arr_sorted[j]}\
    \ ]]; then\n                temp=${arr_sorted[i]}\n                arr_sorted[i]=${arr_sorted[j]}\n\
    \                arr_sorted[j]=$temp\n                index=${arr_index[i]}\n\
    \                arr_index[i]=${arr_index[j]}\n                arr_index[j]=$index\n\
    \            fi\n        done\n    done\n    for ((i=0; i<k; i++)); do\n     \
    \   max_sorted[i]=${arr[${arr_index[i]}]}\n    done\n    echo \"${max_sorted[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpek873le5.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local len\n    local max\n\n    arr_sorted=($(echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -n))\n    len=${#arr_sorted[@]}\n    for ((i=0;\
    \ i<k; i++)); do\n        max=${arr_sorted[0]}\n        for ((j=1; j<len; j++));\
    \ do\n            if [[ ${arr_sorted[j]} -gt $max ]]; then\n                max=${arr_sorted[j]}\n\
    \            fi\n        done\n        arr_max[i]=$max\n        arr_sorted=(${arr_sorted[@]/$max})\n\
    \        len=${#arr_sorted[@]}\n    done\n    echo \"${arr_max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo \"$arr\" | wc -w)\n\
    \    local i=0\n    local j=0\n    local max_index=0\n    local max_value=0\n\
    \    local temp=0\n    local result=\"\"\n    for ((i=0; i<$k; i++)); do\n   \
    \     max_value=$(echo \"$arr\" | cut -d \" \" -f 1)\n        for ((j=1; j<$arr_len;\
    \ j++)); do\n            temp=$(echo \"$arr\" | cut -d \" \" -f $((j+1)))\n  \
    \          if [[ $temp -gt $max_value ]]; then\n                max_value=$temp\n\
    \                max_index=$j\n            fi\n        done\n        result=\"\
    $result $max_value\"\n        arr=$(echo \"$arr\" | cut -d \" \" -f -$max_index)\n\
    \        arr=$(echo \"$arr\" | cut -d \" \" -f 2-)\n        arr_len=$(echo \"\
    $arr\" | wc -w)\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local i\n    for ((i=0;\
    \ i<k; i++)); do\n        max[i]=${arr[i]}\n    done\n    for ((i=k; i<${#arr[@]};\
    \ i++)); do\n        local j\n        for ((j=0; j<k; j++)); do\n            if\
    \ [[ ${arr[i]} -gt ${max[j]} ]]; then\n                local tmp=${max[j]}\n \
    \               max[j]=${arr[i]}\n                arr[i]=$tmp\n            fi\n\
    \        done\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmplsk6j5s1.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo $arr | wc -w)\n  \
    \  local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((arr_len\
    \ - k))\n    local i=0\n    local j=0\n    local max_num=0\n    local max_num_index=0\n\
    \    local cur_num=0\n    local cur_num_index=0\n    local max_arr_str=''\n  \
    \  local max_arr_str_len=0\n    local max_arr_str_len_max=$((k - 1))\n    local\
    \ max_arr_str_len_max_max=$((max_arr_str_len_max - 1))\n    local max_arr_str_len_max_max_max=$((max_arr_str_len_max_max\
    \ - 1))\n    local max_arr_str_len_max_max_max_max=$((max_arr_str_len_max_max_max\
    \ - 1))\n    local max_arr_str_len_max_max_max_max_max=$((max_arr_str_len_max_max_max_max\
    \ - 1))\n    local max_arr_str_len_max_max_max_max_max_max=$((max_arr_str_len_max_max_max_max_max\
    \ - 1))\n    local max_arr_str_len_max_max_max_max_max_max_max=$((max_arr_str_len_max_max_max_max_max_max\
    \ - 1))\n    local max_arr_str_len_max_max_max_max_max_max_max_max=$((max_arr_str_len_max_max_max_max_max_max_max\
    \ - 1))\n    local max_arr_str_len_max_max_max_max_max_max_max_max_max=$((max_arr_str_len_max_max_max_max_max_max_max_max\
    \ - 1))\n    local max_arr_str_len_max_max_max_max_max_max_\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max=()\n    local i\n   \
    \ for i in $arr; do\n        if [[ ${#max[@]} -lt $k ]]; then\n            max+=(\"\
    $i\")\n        else\n            local j\n            for j in \"${!max[@]}\"\
    ; do\n                if [[ $i -gt ${max[$j]} ]]; then\n                    max[$j]=\"\
    $i\"\n                    break\n                fi\n            done\n      \
    \  fi\n    done\n    echo \"${max[@]}\" | tr ' ' '\\n' | sort -nr | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
    \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\"\
    \ ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n \
    \   [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate\
    \ \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate\
    \ \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\"\
    ) = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate\
    \ \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\"\
    \ \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -i i=0\n\
    \    local -i j=0\n    local -i max=0\n    local -i max_index=0\n    local -i\
    \ len=${#arr[@]}\n    local -i count=0\n    local -i tmp=0\n    for ((i=0; i<len;\
    \ i++)); do\n        max=${arr[i]}\n        max_index=$i\n        for ((j=i+1;\
    \ j<len; j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n          \
    \      max=${arr[j]}\n                max_index=$j\n            fi\n        done\n\
    \        tmp=${arr[i]}\n        arr[i]=${arr[max_index]}\n        arr[max_index]=$tmp\n\
    \        result[count]=${arr[i]}\n        ((count++))\n        if [[ $count -eq\
    \ $k ]]; then\n            break\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpnqtz9y5t.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -i i=0\n   \
    \ local -i j=0\n    local -i len=${#arr[@]}\n    for ((i=0; i<len; i++)); do\n\
    \        if [[ ${arr[i]} -gt ${max[j]} ]]; then\n            max[j]=${arr[i]}\n\
    \            j+=1\n        fi\n        if [[ j -eq k ]]; then\n            j=0\n\
    \        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpi3qubl89.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=0\n    local i=0\n    local j=0\n    for i in $(echo \"$arr\"\
    \ | tr ' ' '\\n'); do\n        if [[ $max_arr_len -lt $k ]]; then\n          \
    \  max_arr+=($i)\n            max_arr_len=$(($max_arr_len + 1))\n        else\n\
    \            for j in $(seq 0 $(($max_arr_len - 1))); do\n                if [[\
    \ $i -gt ${max_arr[$j]} ]]; then\n                    max_arr[$j]=$i\n       \
    \             break\n                fi\n            done\n        fi\n    done\n\
    \    echo \"${max_arr[@]}\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n\
    \    local -i i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i k_max=0\n\
    \    local -i k_min=0\n    local -i k_min_idx=0\n    local -i k_max_idx=0\n  \
    \  local -i k_min_val=0\n    local -i k_max_val=0\n    local -i arr_val=0\n  \
    \  local -i arr_sorted_val=0\n    local -i arr_max_val=0\n    local -i arr_max_idx=0\n\
    \    local -i arr_max_idx_prev=0\n    local -i arr_max_val_prev=0\n    local -i\
    \ arr_max_val_prev_prev=0\n    local -i arr_max_idx_prev_prev=0\n    local -i\
    \ arr_max_val_prev_prev_prev=0\n    local -i arr_max_idx_prev_prev_prev=0\n  \
    \  local -i arr_max_val_prev_prev_prev_prev=0\n    local -i arr_max_idx_prev_prev_prev_prev=0\n\
    \    local -i arr_max_val_prev_prev_prev_prev_prev=0\n    local -i arr_max_idx_prev_prev_prev_prev_prev=0\n\
    \    local -i arr_max_val_prev_prev_prev_prev_prev_prev=0\n    local -i arr_max_idx_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i arr_max_val_prev_prev_prev_prev_prev_prev_prev=0\n    local -i arr_max_idx_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i arr_max_val_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i arr_max_idx_prev_prev_prev_prev\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpos_vjjma.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max=()\n    local _max_index=()\n\
    \    local _i=0\n    local _j=0\n    local _len=${#_arr[@]}\n    local _tmp=0\n\
    \    local _tmp_index=0\n    while ((_i < _k)); do\n        _max[$_i]=${_arr[$_i]}\n\
    \        _max_index[$_i]=$_i\n        ((_i++))\n    done\n    while ((_i < _len));\
    \ do\n        _j=0\n        while ((_j < _k)); do\n            if ((_max[$_j]\
    \ < _arr[_i])); then\n                _tmp=${_max[$_j]}\n                _tmp_index=${_max_index[$_j]}\n\
    \                _max[$_j]=${_arr[_i]}\n                _max_index[$_j]=$_i\n\
    \                _arr[_i]=$_tmp\n                _arr[_tmp_index]=${_arr[_i]}\n\
    \                _i=$_tmp_index\n                break\n            fi\n     \
    \       ((_j++))\n        done\n        ((_i++))\n    done\n    echo ${_max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpsjg06y5u.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i len\n    local -i max_index\n\
    \    local -i max_value\n    local -i tmp_value\n    len=${#arr[@]}\n    for ((i=0;\
    \ i<len; i++)); do\n        arr_sorted[i]=${arr[i]}\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        max_value=${arr_sorted[i]}\n        max_index=$i\n\
    \        for ((j=i+1; j<len; j++)); do\n            tmp_value=${arr_sorted[j]}\n\
    \            if [[ $tmp_value -gt $max_value ]]; then\n                max_value=$tmp_value\n\
    \                max_index=$j\n            fi\n        done\n        arr_sorted[i]=${arr_sorted[max_index]}\n\
    \        arr_sorted[max_index]=$max_value\n    done\n    for ((i=0; i<k; i++));\
    \ do\n        arr_max[i]=${arr_sorted[i]}\n    done\n    echo \"${arr_max[@]}\"\
    \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp43ghhpw0.sh: line 33: -3 -4 5: syntax error in expression (error
    token is "5")\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n __arr=$1\n    local k=$2\n    local -a __res=()\n    local __max=0\n\
    \    local __max_idx=0\n    local __i=0\n    local __j=0\n    local __len=${#__arr[@]}\n\
    \    for ((__i=0; __i<__len; __i++)); do\n        if [[ ${__arr[$__i]} -gt $__max\
    \ ]]; then\n            __max=${__arr[$__i]}\n            __max_idx=$__i\n   \
    \     fi\n    done\n    __res[0]=$__max\n    for ((__i=1; __i<k; __i++)); do\n\
    \        __max=0\n        for ((__j=0; __j<__len; __j++)); do\n            if\
    \ [[ ${__arr[$__j]} -gt $__max && $__j -ne $__max_idx ]]; then\n             \
    \   __max=${__arr[$__j]}\n                __max_idx=$__j\n            fi\n   \
    \     done\n        __res[$__i]=$__max\n    done\n    echo ${__res[@]}\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpofi5qp9s.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=(\"$@\")\n    local k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\"\
    )\n    local max=()\n    for i in \"${arr[@]}\"; do\n        if [[ ${#max[@]}\
    \ -lt $k ]]; then\n            max+=(\"$i\")\n        else\n            for j\
    \ in \"${!max[@]}\"; do\n                if [[ $i -gt ${max[$j]} ]]; then\n  \
    \                  max[$j]=$i\n                    break\n                fi\n\
    \            done\n        fi\n    done\n    echo \"${max[@]}\" | sort -nr | head\
    \ -n $k\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local i=0\n    local j=0\n    local tmp=0\n    for i in $arr; do\n      \
    \  if [[ $max_arr_len -lt $k ]]; then\n            max_arr[$max_arr_len]=$i\n\
    \            max_arr_len=$((max_arr_len+1))\n        else\n            for j in\
    \ $(seq 0 $((max_arr_len-1))); do\n                if [[ $i -gt ${max_arr[$j]}\
    \ ]]; then\n                    tmp=${max_arr[$j]}\n                    max_arr[$j]=$i\n\
    \                    i=$tmp\n                fi\n            done\n        fi\n\
    \    done\n    echo \"${max_arr[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -a arr=(${1// / })\n    local k=$2\n    local -a res=()\n    local\
    \ -a tmp=()\n    for i in \"${arr[@]}\"; do\n        if [[ ${#res[@]} -eq 0 ]];\
    \ then\n            res+=(\"$i\")\n        elif [[ ${#res[@]} -eq $k ]]; then\n\
    \            if [[ $i -gt ${res[0]} ]]; then\n                res[0]=$i\n    \
    \            for (( j=1; j<${#res[@]}; j++ )); do\n                    if [[ ${res[j]}\
    \ -gt ${res[j-1]} ]]; then\n                        tmp=${res[j-1]}\n        \
    \                res[j-1]=${res[j]}\n                        res[j]=$tmp\n   \
    \                 fi\n                done\n            fi\n        else\n   \
    \         res+=(\"$i\")\n            for (( j=${#res[@]}-1; j>0; j-- )); do\n\
    \                if [[ ${res[j]} -gt ${res[j-1]} ]]; then\n                  \
    \  tmp=${res[j-1]}\n                    res[j-1]=${res[j]}\n                 \
    \   res[j]=$tmp\n                fi\n            done\n        fi\n    done\n\
    \    echo ${res[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max\n    local _i\n    local\
    \ _j\n    local _len=${#_arr[@]}\n    for ((_i=0; _i<_k; _i++)); do\n        _max=${_arr[0]}\n\
    \        for ((_j=1; _j<_len; _j++)); do\n            if [[ ${_arr[$_j]} -gt $_max\
    \ ]]; then\n                _max=${_arr[$_j]}\n            fi\n        done\n\
    \        echo $_max\n        _arr=(${_arr[@]/$_max})\n        _len=${#_arr[@]}\n\
    \    done\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp56vlabmf.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a arr_sorted\n\
    \    local -a arr_sorted_k\n    local i\n    local j\n    local len\n    local\
    \ len_k\n    local max\n    local max_index\n    local tmp\n    arr_sorted=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -nr))\n    len=${#arr_sorted[@]}\n    len_k=$((len\
    \ - k))\n    for ((i=0; i<len_k; i++)); do\n        max=${arr_sorted[0]}\n   \
    \     max_index=0\n        for ((j=1; j<len; j++)); do\n            if [[ ${arr_sorted[j]}\
    \ -gt $max ]]; then\n                max=${arr_sorted[j]}\n                max_index=$j\n\
    \            fi\n        done\n        unset arr_sorted[$max_index]\n        arr_sorted=(${arr_sorted[@]})\n\
    \    done\n    echo ${arr_sorted[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp551le42h.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local len\n    local max\n    local\
    \ max_index\n    local temp\n    arr_sorted=($(echo \"$arr\" | tr ' ' '\\n' |\
    \ sort -n))\n    len=${#arr_sorted[@]}\n    for ((i=0; i<k; i++)); do\n      \
    \  max=${arr_sorted[0]}\n        max_index=0\n        for ((j=1; j<len-i; j++));\
    \ do\n            if [[ ${arr_sorted[j]} -gt $max ]]; then\n                max=${arr_sorted[j]}\n\
    \                max_index=$j\n            fi\n        done\n        arr_max[i]=$max\n\
    \        temp=${arr_sorted[max_index]}\n        arr_sorted[max_index]=${arr_sorted[len-i-1]}\n\
    \        arr_sorted[len-i-1]=$temp\n    done\n    echo \"${arr_max[@]}\"\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -a arr_max_sorted\n    local -a arr_max_sorted_str\n \
    \   local -a arr_max_sorted_str_quoted\n    local i\n    local j\n    local n\n\
    \    local m\n    local -i n_max\n    local -i n_max_sorted\n    local -i n_max_sorted_str\n\
    \    local -i n_max_sorted_str_quoted\n    arr_sorted=($(echo \"$arr\" | tr '\
    \ ' '\\n' | sort -n))\n    n=${#arr_sorted[@]}\n    n_max=$((n - k))\n    for\
    \ ((i = 0; i < n_max; i++)); do\n        arr_max[i]=${arr_sorted[i]}\n    done\n\
    \    arr_max_sorted=($(echo \"${arr_max[@]}\" | tr ' ' '\\n' | sort -n))\n   \
    \ n_max_sorted=${#arr_max_sorted[@]}\n    for ((i = 0; i < n_max_sorted; i++));\
    \ do\n        arr_max_sorted_str[i]=\"\\\"${arr_max_sorted[i]}\\\"\"\n    done\n\
    \    n_max_sorted_str=${#arr_max_sorted_str[@]}\n    for ((i = 0; i < n_max_sorted_str;\
    \ i++)); do\n        arr_max_sorted_str_quoted[i]=${arr_max_sorted_str[i]}\n \
    \   done\n    n_max_sorted_str_quoted=${#arr_max_sorted_str_quoted[@]}\n    for\
    \ ((i = 0; i < n_max_sorted_str_quoted; i++)); do\n        echo -n \"${arr_max_sorted_str_quoted[i]}\"\
    \n        if ((i < n_max_sorted_str_quoted - 1)); then\n            echo -n ',\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp1l6s7vz3.sh: line 52: unexpected EOF while looking for matching
    `''''\n/tmp/tmp1l6s7vz3.sh: line 75: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=(\"$@\")\n    local k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\"\
    )\n    local len=${#arr[@]}\n    local i=0\n    local j=0\n    local max=0\n \
    \   local max_index=0\n    local tmp=0\n    local result=()\n    for ((i=0; i<k;\
    \ i++)); do\n        max=${arr[0]}\n        max_index=0\n        for ((j=1; j<len-i;\
    \ j++)); do\n            if [[ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n\
    \                max_index=$j\n            fi\n        done\n        result[i]=$max\n\
    \        tmp=${arr[max_index]}\n        arr[max_index]=${arr[len-i-1]}\n     \
    \   arr[len-i-1]=$tmp\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\"\
    \ \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n\
    \    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmp3tc21qoj.sh: line 39: arr: bad array subscript\n/tmp/tmp3tc21qoj.sh:
    line 40: arr[len-i-1]: bad array subscript\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    for ((i=0; i<k; i++));\
    \ do\n        local max=${arr[0]}\n        for ((j=1; j<${#arr[@]}; j++)); do\n\
    \            [[ ${arr[j]} -gt $max ]] && max=${arr[j]}\n        done\n       \
    \ res+=($max)\n        arr=(${arr[@]/$max})\n    done\n    echo \"${res[@]}\"\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpk8mbj3ek.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _arr_len=${#_arr[@]}\n    local\
    \ _max_arr=()\n    local _max_arr_len=0\n    local _max_arr_index=0\n    local\
    \ _max_arr_value=0\n    local _max_arr_value_index=0\n    local _max_arr_value_index_len=0\n\
    \    local _max_arr_value_index_len_len=0\n    local _max_arr_value_index_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len=0\n    local _max_arr_value_index_len_len_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len_len_len=0\n    local _max_arr_value_index_len_len_len_len_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len_len_len_len_len=0\n    local _max_arr_value_index_len_len_len_len_len_len_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len_len_len_len_len_len_len=0\n  \
    \  local _max_arr_value_index_len_len_len_len_len_len_len_len_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len_len_len_len_len_len_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len_len_len_len_len_len_len_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len=0\n\
    \    local _max_arr_value_index_len_len_len_len_len_len_len_len_len_len_len_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpw1q6zp17.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    for i in ${arr[@]};\
    \ do\n        if [[ ${#max[@]} -eq 0 ]]; then\n            max+=(\"$i\")\n   \
    \     elif [[ ${#max[@]} -lt $k ]]; then\n            max+=(\"$i\")\n        \
    \    max=($(echo \"${max[@]}\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' '))\n  \
    \      elif [[ $i -gt ${max[-1]} ]]; then\n            max[-1]=\"$i\"\n      \
    \      max=($(echo \"${max[@]}\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' '))\n\
    \        fi\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"\
    -4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp7wogs3u7.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -a arr_max_sorted\n    local -a arr_max_sorted_str\n \
    \   local i\n    local j\n    local max\n    local max_index\n    local max_str\n\
    \    local str\n    local str_len\n    local str_len_max\n    local str_len_max_index\n\
    \    local str_len_max_str\n    local str_len_max_str_len\n    local str_len_max_str_len_max\n\
    \    local str_len_max_str_len_max_index\n    local str_len_max_str_len_max_str\n\
    \    local str_len_max_str_len_max_str_len\n    local str_len_max_str_len_max_str_len_max\n\
    \    local str_len_max_str_len_max_str_len_max_index\n    local str_len_max_str_len_max_str_len_max_str\n\
    \    local str_len_max_str_len_max_str_len_max_str_len\n    local str_len_max_str_len_max_str_len_max_str_len_max\n\
    \    local str_len_max_str_len_max_str_len_max_str_len_max_index\n    local str_len_max_str_len_max_str_len_max_str_len_max_str\n\
    \    local str_len_max_str_len_max_str_len_max_str_len_max_str_len\n    local\
    \ str_len_max_str_len_max_str_len_max_str_len_max_str_len_max\n    local str_len_max_str_len_max_str_len_max_str_len_max_str_len_max_index\n\
    \    local str_len_max_str_len_max_str_len_max_str_len_max_str_len_max_str\n \
    \   local str_len_max_str_len_max_str_\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max=()\n    local _max_len=0\n\
    \    local _i=0\n    local _j=0\n    local _len=${#_arr[@]}\n    local _tmp=0\n\
    \    for ((_i=0; _i<_len; _i++)); do\n        if ((_max_len < _k)); then\n   \
    \         _max[$_max_len]=${_arr[_i]}\n            ((_max_len++))\n          \
    \  for ((_j=_max_len-1; _j>0; _j--)); do\n                if ((${_max[_j]} > ${_max[_j-1]}));\
    \ then\n                    _tmp=${_max[_j]}\n                    _max[_j]=${_max[_j-1]}\n\
    \                    _max[_j-1]=$_tmp\n                else\n                \
    \    break\n                fi\n            done\n        else\n            if\
    \ ((${_arr[_i]} > ${_max[0]})); then\n                _max[0]=${_arr[_i]}\n  \
    \              for ((_j=1; _j<_k; _j++)); do\n                    if ((${_max[_j]}\
    \ > ${_max[_j-1]})); then\n                        _tmp=${_max[_j]}\n        \
    \                _max[_j]=${_max[_j-1]}\n                        _max[_j-1]=$_tmp\n\
    \                    else\n                        break\n                   \
    \ fi\n                done\n            fi\n        fi\n    done\n    echo ${_max[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp3g86bj7o.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res=()\n    local -a max=()\n\
    \    local i=0\n    local j=0\n    local len=${#arr[@]}\n    for ((i=0; i<len;\
    \ i++)); do\n        if [[ ${arr[i]} -gt ${max[0]} ]]; then\n            max[0]=${arr[i]}\n\
    \            for ((j=1; j<k; j++)); do\n                if [[ ${arr[i]} -gt ${max[j]}\
    \ ]]; then\n                    max[j]=${max[j-1]}\n                else\n   \
    \                 max[j]=${arr[i]}\n                    break\n              \
    \  fi\n            done\n        fi\n    done\n    echo ${max[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpf5h2vojo.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a result\n    local -i i=0\n\
    \    local -i j=0\n    local -i max=0\n    local -i index=0\n    local -i len=${#arr[@]}\n\
    \    local -i count=0\n    local -i tmp=0\n    for ((i=0; i<len; i++)); do\n \
    \       if [[ ${arr[i]} -gt max ]]; then\n            max=${arr[i]}\n        \
    \    index=i\n        fi\n    done\n    result[0]=$max\n    count=1\n    while\
    \ [[ $count -lt $k ]]; do\n        max=0\n        for ((i=0; i<len; i++)); do\n\
    \            if [[ ${arr[i]} -gt max ]]; then\n                tmp=0\n       \
    \         for ((j=0; j<count; j++)); do\n                    if [[ ${arr[i]} -eq\
    \ ${result[j]} ]]; then\n                        tmp=1\n                     \
    \   break\n                    fi\n                done\n                if [[\
    \ $tmp -eq 0 ]]; then\n                    max=${arr[i]}\n                   \
    \ index=i\n                fi\n            fi\n        done\n        result[count]=$max\n\
    \        count=$((count+1))\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmphrnh9bvo.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i len\n    local -i max_index\n\
    \    local -i max_value\n    local -i tmp\n    arr_sorted=($(echo \"$arr\" | tr\
    \ \" \" \"\\n\" | sort -n))\n    len=${#arr_sorted[@]}\n    for ((i=0; i<k; i++));\
    \ do\n        max_index=$i\n        max_value=${arr_sorted[$i]}\n        for ((j=i+1;\
    \ j<len; j++)); do\n            tmp=${arr_sorted[$j]}\n            if ((tmp >\
    \ max_value)); then\n                max_index=$j\n                max_value=$tmp\n\
    \            fi\n        done\n        arr_max[$i]=$max_value\n        arr_sorted[$max_index]=${arr_sorted[$i]}\n\
    \        arr_sorted[$i]=$max_value\n    done\n    echo \"${arr_max[@]}\"\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo $arr | wc -w)\n  \
    \  local max_arr=()\n    local max_arr_len=0\n    local max_arr_last_idx=0\n \
    \   local max_arr_last_val=0\n    local max_arr_last_idx_new=0\n    local max_arr_last_val_new=0\n\
    \    local max_arr_last_idx_new_tmp=0\n    local max_arr_last_val_new_tmp=0\n\
    \    local max_arr_last_idx_new_tmp_2=0\n    local max_arr_last_val_new_tmp_2=0\n\
    \    local max_arr_last_idx_new_tmp_3=0\n    local max_arr_last_val_new_tmp_3=0\n\
    \    local max_arr_last_idx_new_tmp_4=0\n    local max_arr_last_val_new_tmp_4=0\n\
    \    local max_arr_last_idx_new_tmp_5=0\n    local max_arr_last_val_new_tmp_5=0\n\
    \    local max_arr_last_idx_new_tmp_6=0\n    local max_arr_last_val_new_tmp_6=0\n\
    \    local max_arr_last_idx_new_tmp_7=0\n    local max_arr_last_val_new_tmp_7=0\n\
    \    local max_arr_last_idx_new_tmp_8=0\n    local max_arr_last_val_new_tmp_8=0\n\
    \    local max_arr_last_idx_new_tmp_9=0\n    local max_arr_last_val_new_tmp_9=0\n\
    \    local max_arr_last_idx_new_tmp_10=0\n    local max_arr_last_val_new_tmp_10=0\n\
    \    local max_arr_last_idx_new_tmp_11=0\n    local max_arr_last_val_new_tmp_11=0\n\
    \    local max_arr_last\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a max\n    local -a max_index\n\
    \    local -a max_index_sorted\n    local -a max_sorted\n    local -a arr_sorted\n\
    \    local -a arr_index\n    local -a arr_index_sorted\n    local -a arr_sorted\n\
    \    local -a arr_sorted_index\n    local -a arr_sorted_index_sorted\n    local\
    \ -a arr_sorted_sorted\n    local -a arr_sorted_sorted_index\n    local -a arr_sorted_sorted_index_sorted\n\
    \    local -a arr_sorted_sorted_sorted\n    local -a arr_sorted_sorted_sorted_index\n\
    \    local -a arr_sorted_sorted_sorted_index_sorted\n    local -a arr_sorted_sorted_sorted_sorted\n\
    \    local -a arr_sorted_sorted_sorted_sorted_index\n    local -a arr_sorted_sorted_sorted_sorted_index_sorted\n\
    \    local -a arr_sorted_sorted_sorted_sorted_sorted\n    local -a arr_sorted_sorted_sorted_sorted_sorted_index\n\
    \    local -a arr_sorted_sorted_sorted_sorted_sorted_index_sorted\n    local -a\
    \ arr_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_index\n\
    \    local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n   \
    \ local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a\
    \ arr_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index\n    local -a arr_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted\n\
    \    local -a arr_sorted\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpquv9dytg.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a tmp\n   \
    \ local i\n    local j\n    local max\n    for ((i=0; i<k; i++)); do\n       \
    \ max=${arr[0]}\n        for ((j=1; j<${#arr[@]}; j++)); do\n            if [[\
    \ ${arr[j]} -gt $max ]]; then\n                max=${arr[j]}\n            fi\n\
    \        done\n        res+=($max)\n        tmp=()\n        for ((j=0; j<${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[j]} -ne $max ]]; then\n                tmp+=(${arr[j]})\n\
    \            fi\n        done\n        arr=(\"${tmp[@]}\")\n    done\n    echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpa41a6vre.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_arr_len=0\n\
    \    local arr_len=0\n    local arr_item=0\n    local i=0\n    local j=0\n   \
    \ local max_arr_item=0\n    local max_arr_item_index=0\n    local max_arr_item_index_tmp=0\n\
    \    local max_arr_item_tmp=0\n    local max_arr_item_tmp_index=0\n    local max_arr_item_tmp_index_tmp=0\n\
    \    local max_arr_item_tmp_tmp=0\n    local max_arr_item_tmp_tmp_index=0\n  \
    \  local max_arr_item_tmp_tmp_index_tmp=0\n    local max_arr_item_tmp_tmp_tmp=0\n\
    \    local max_arr_item_tmp_tmp_tmp_index=0\n    local max_arr_item_tmp_tmp_tmp_index_tmp=0\n\
    \    local max_arr_item_tmp_tmp_tmp_tmp=0\n    local max_arr_item_tmp_tmp_tmp_tmp_index=0\n\
    \    local max_arr_item_tmp_tmp_tmp_tmp_index_tmp=0\n    local max_arr_item_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local max_arr_item_tmp_tmp_tmp_tmp_tmp_index=0\n    local max_arr_item_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local max_arr_item_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local max_arr_item_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local max_arr_item_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local max_arr_item_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local max_arr_item_tmp_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n    local max_arr_item_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res=()\n    for i in ${arr[@]};\
    \ do\n        if [[ ${#res[@]} -lt $k ]]; then\n            res+=($i)\n      \
    \  else\n            for j in ${!res[@]}; do\n                if [[ $i -gt ${res[$j]}\
    \ ]]; then\n                    res=(${res[@]:0:$j} $i ${res[@]:$j})\n       \
    \             break\n                fi\n            done\n        fi\n    done\n\
    \    echo ${res[@]:0:$k}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpc8w8fxv0.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a res\n    local -a max\n   \
    \ local -a min\n    local -a tmp\n    local i\n    local j\n    local n\n    local\
    \ m\n    for i in ${arr[@]}; do\n        if [[ ${#max[@]} -lt $k ]]; then\n  \
    \          max+=($i)\n        else\n            min=($(echo \"${max[@]}\" | tr\
    \ ' ' '\\n' | sort -n))\n            if [[ $i -gt ${min[0]} ]]; then\n       \
    \         max=($(echo \"${max[@]}\" | tr ' ' '\\n' | sort -n))\n             \
    \   for j in ${!max[@]}; do\n                    if [[ ${max[$j]} -eq ${min[0]}\
    \ ]]; then\n                        unset max[$j]\n                        break\n\
    \                    fi\n                done\n                max+=($i)\n   \
    \         fi\n        fi\n    done\n    max=($(echo \"${max[@]}\" | tr ' ' '\\\
    n' | sort -n))\n    n=${#max[@]}\n    m=$((k - n))\n    for ((i=0; i<m; i++));\
    \ do\n        max+=(${min[$i]})\n    done\n    echo \"${max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpjepgiiks.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local -a arr_sorted\n    IFS=' ' read -r\
    \ -a arr_sorted <<< \"$(echo $arr | tr ' ' '\\n' | sort -nr)\"\n    echo ${arr_sorted[@]:0:$k}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n arr=$1\n    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n\
    \    local i\n    local j\n    local max_index\n    local max_value\n    for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n        arr_sorted[i]=${arr[i]}\n    done\n    for\
    \ ((i=0; i<k; i++)); do\n        max_index=$i\n        max_value=${arr_sorted[i]}\n\
    \        for ((j=i+1; j<${#arr_sorted[@]}; j++)); do\n            if ((${arr_sorted[j]}\
    \ > max_value)); then\n                max_index=$j\n                max_value=${arr_sorted[j]}\n\
    \            fi\n        done\n        arr_sorted[max_index]=${arr_sorted[i]}\n\
    \        arr_sorted[i]=$max_value\n        arr_max[i]=$max_value\n    done\n \
    \   echo \"${arr_max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpedquh_f8.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local arr_len=$(echo $arr | wc -w)\n  \
    \  local max_arr=()\n    local max_arr_len=0\n    local max_num=0\n    local max_num_index=0\n\
    \    local i=0\n    local j=0\n    local num=0\n    for i in $(seq 1 $arr_len);\
    \ do\n        num=$(echo $arr | cut -d ' ' -f $i)\n        if [[ $num -gt $max_num\
    \ ]]; then\n            max_num=$num\n            max_num_index=$i\n        fi\n\
    \    done\n    max_arr[$max_arr_len]=$max_num\n    max_arr_len=$(($max_arr_len\
    \ + 1))\n    for i in $(seq 1 $k); do\n        max_num=0\n        for j in $(seq\
    \ 1 $arr_len); do\n            if [[ $j -ne $max_num_index ]]; then\n        \
    \        num=$(echo $arr | cut -d ' ' -f $j)\n                if [[ $num -gt $max_num\
    \ ]]; then\n                    max_num=$num\n                    max_num_index=$j\n\
    \                fi\n            fi\n        done\n        max_arr[$max_arr_len]=$max_num\n\
    \        max_arr_len=$(($max_arr_len + 1))\n    done\n    echo ${max_arr[@]}\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -a arr=(\"$1\")\n    local k=\"$2\"\n    local -a max\n    local -i\
    \ i=0\n    local -i j=0\n    local -i n=${#arr[@]}\n    local -i m=0\n    local\
    \ -i t=0\n    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n\
    \            if ((arr[i] < arr[j])); then\n                t=${arr[i]}\n     \
    \           arr[i]=${arr[j]}\n                arr[j]=$t\n            fi\n    \
    \    done\n    done\n    for ((i=0; i<k; i++)); do\n        max[i]=${arr[i]}\n\
    \    done\n    echo \"${max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local len\n    local max\n    local\
    \ max_index\n    local -a result\n\n    arr_sorted=($(echo \"$arr\" | tr ' ' '\\\
    n' | sort -n))\n    len=${#arr_sorted[@]}\n    for ((i=0; i<k; i++)); do\n   \
    \     max=${arr_sorted[0]}\n        max_index=0\n        for ((j=1; j<len; j++));\
    \ do\n            if [[ ${arr_sorted[j]} -gt $max ]]; then\n                max=${arr_sorted[j]}\n\
    \                max_index=$j\n            fi\n        done\n        arr_max[i]=$max\n\
    \        unset arr_sorted[$max_index]\n        arr_sorted=(${arr_sorted[@]})\n\
    \        len=${#arr_sorted[@]}\n    done\n    result=(\"${arr_max[@]}\")\n   \
    \ echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i n\n    local -i m\n\
    \    local -i max_index\n    local -i max_value\n    local -i tmp_value\n    local\
    \ -i tmp_index\n    local -i tmp_n\n    local -i tmp_m\n    local -i tmp_i\n \
    \   local -i tmp_j\n    arr_sorted=($(echo \"$arr\" | tr ' ' '\\n' | sort -n))\n\
    \    n=${#arr_sorted[@]}\n    m=$((n-k))\n    for ((i=0; i<m; i++)); do\n    \
    \    max_value=${arr_sorted[0]}\n        max_index=0\n        for ((j=1; j<n;\
    \ j++)); do\n            tmp_value=${arr_sorted[j]}\n            if [[ $tmp_value\
    \ -gt $max_value ]]; then\n                max_value=$tmp_value\n            \
    \    max_index=$j\n            fi\n        done\n        arr_max+=($max_value)\n\
    \        tmp_n=$((n-1))\n        tmp_m=$((m-1))\n        tmp_i=$((i+1))\n    \
    \    tmp_j=$((j-1))\n        arr_sorted=(${arr_sorted[@]:0:max_index} ${arr_sorted[@]:max_index+1:tmp_n})\n\
    \        n=$tmp_n\n        m=$tmp_m\n        i=$tmp_i\n        j=$tmp_j\n    done\n\
    \    echo \"${arr_max[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n \
    \   [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1\
    \ 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"\
    3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1\
    \ 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3\
    \ 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[\
    \ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\"\
    ) = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[\
    \ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    arr=(\"$@\")\n    k=${arr[-1]}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\")\n\
    \    arr=(\"${arr[@]// /}\")\n    arr=(\"${arr[@]//[$'\\t']/ }\")\n    arr=(\"\
    ${arr[@]//[$'\\r']/ }\")\n    arr=(\"${arr[@]//[$'\\n']/ }\")\n    arr=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -nr | head -n $k | tr '\\n' ' '))\n    echo\
    \ \"[$(IFS=,; echo \"${arr[*]}\")]\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local i=0\n \
    \   local j=0\n    local max_num=0\n    local num=0\n    local max_num_index=0\n\
    \    local max_num_index_arr=()\n    local max_num_index_arr_len=0\n    local\
    \ max_num_index_arr_len_old=0\n    local max_num_index_arr_len_new=0\n    local\
    \ max_num_index_arr_len_diff=0\n    local max_num_index_arr_len_diff_abs=0\n \
    \   local max_num_index_arr_len_diff_abs_min=0\n    local max_num_index_arr_len_diff_abs_min_index=0\n\
    \    local max_num_index_arr_len_diff_abs_min_index_old=0\n    local max_num_index_arr_len_diff_abs_min_index_new=0\n\
    \    local max_num_index_arr_len_diff_abs_min_index_diff=0\n    local max_num_index_arr_len_diff_abs_min_index_diff_abs=0\n\
    \    local max_num_index_arr_len_diff_abs_min_index_diff_abs_min=0\n    local\
    \ max_num_index_arr_len_diff_abs_min_index_diff_abs_min_index=0\n    local max_num_index_arr_len_diff_abs_min_index_diff_abs_min_index_old=0\n\
    \    local max_num_index_arr_len_diff_abs_min_index_diff_abs_min_index_new=0\n\
    \    local max_num_index_arr_len_diff_abs_min_index_diff_abs_min_index_diff=0\n\
    \    local max_num_index_arr_len_diff_abs_min_index_diff_abs_min_index_diff_abs=0\n\
    \    local\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"\
    4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max_arr=()\n    local _max_arr_len=0\n\
    \    local _max_arr_len_max=$_k\n    local _max_arr_len_min=$((_k-1))\n    local\
    \ _max_arr_len_min_max=$((_k+1))\n    local _max_arr_len_min_max_min=$((_k-2))\n\
    \    local _max_arr_len_min_max_min_max=$((_k+2))\n    local _max_arr_len_min_max_min_max_min=$((_k-3))\n\
    \    local _max_arr_len_min_max_min_max_min_max=$((_k+3))\n    local _max_arr_len_min_max_min_max_min_max_min=$((_k-4))\n\
    \    local _max_arr_len_min_max_min_max_min_max_min_max=$((_k+4))\n    local _max_arr_len_min_max_min_max_min_max_min_max_min=$((_k-5))\n\
    \    local _max_arr_len_min_max_min_max_min_max_min_max_min_max=$((_k+5))\n  \
    \  local _max_arr_len_min_max_min_max_min_max_min_max_min_max_min=$((_k-6))\n\
    \    local _max_arr_len_min_max_min_max_min_max_min_max_min_max_min_max=$((_k+6))\n\
    \    local _max_arr_len_min_max_min_max_min_max_min_max_min_max_min_max_min=$((_k-7))\n\
    \    local _max_arr_len_min_max_min_max_min_max_min_max_min_max_min_max_min_max=$((_k+7))\n\
    \    local _max_arr_len_min_max_min_max_min_max_min_max_min_\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmp3uxgypfp.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local result=()\n    local i=0\n\
    \    local j=0\n    local temp=0\n    local len=0\n    local arr_len=0\n    local\
    \ arr_temp=()\n    arr_temp=($arr)\n    arr_len=${#arr_temp[@]}\n    if [ $arr_len\
    \ -lt $k ]; then\n        echo \"The length of the array is less than k.\"\n \
    \       exit 1\n    fi\n    for ((i=0; i<$k; i++)); do\n        result[$i]=${arr_temp[$i]}\n\
    \    done\n    len=${#result[@]}\n    for ((i=0; i<$len; i++)); do\n        for\
    \ ((j=$i; j<$len; j++)); do\n            if [ ${result[$i]} -lt ${result[$j]}\
    \ ]; then\n                temp=${result[$i]}\n                result[$i]=${result[$j]}\n\
    \                result[$j]=$temp\n            fi\n        done\n    done\n  \
    \  for ((i=0; i<$k; i++)); do\n        echo -n \"\\\"${result[$i]}\\\" \"\n  \
    \  done\n    echo\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local i=0\n    local j=0\n    local temp=0\n    local max_arr=()\n\
    \    local max_arr_len=0\n    local max_arr_len_minus_1=0\n    local max_arr_len_minus_k=0\n\
    \    local max_arr_len_minus_k_minus_1=0\n    local max_arr_len_minus_k_minus_2=0\n\
    \    local max_arr_len_minus_k_minus_3=0\n    local max_arr_len_minus_k_minus_4=0\n\
    \    local max_arr_len_minus_k_minus_5=0\n    local max_arr_len_minus_k_minus_6=0\n\
    \    local max_arr_len_minus_k_minus_7=0\n    local max_arr_len_minus_k_minus_8=0\n\
    \    local max_arr_len_minus_k_minus_9=0\n    local max_arr_len_minus_k_minus_10=0\n\
    \    local max_arr_len_minus_k_minus_11=0\n    local max_arr_len_minus_k_minus_12=0\n\
    \    local max_arr_len_minus_k_minus_13=0\n    local max_arr_len_minus_k_minus_14=0\n\
    \    local max_arr_len_minus_k_minus_15=0\n    local max_arr_len_minus_k_minus_16=0\n\
    \    local max_arr_len_minus_k_minus_17=0\n    local max_arr_len_minus_k_minus_18=0\n\
    \    local max_arr_len_minus_k_minus_19=0\n    local max_arr_len_minus_k_minus_20=0\n\
    \    local max_arr_len_minus_k_minus_21=0\n    local max_arr_len_minus_k_minus_22=0\n\
    \    local max_arr_len_minus_k_minus_23=\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr=()\n    local max_num=0\n\
    \    local max_index=0\n    local arr_len=0\n    local i=0\n    local j=0\n  \
    \  local tmp=0\n    local tmp_arr=()\n    local tmp_arr_len=0\n    local tmp_max_num=0\n\
    \    local tmp_max_index=0\n    local tmp_max_arr=()\n    local tmp_max_arr_len=0\n\
    \    local tmp_max_arr_index=0\n    local tmp_max_arr_num=0\n    local tmp_max_arr_num_index=0\n\
    \    local tmp_max_arr_num_index_arr=()\n    local tmp_max_arr_num_index_arr_len=0\n\
    \    local tmp_max_arr_num_index_arr_index=0\n    local tmp_max_arr_num_index_arr_num=0\n\
    \    local tmp_max_arr_num_index_arr_num_index=0\n    local tmp_max_arr_num_index_arr_num_index_arr=()\n\
    \    local tmp_max_arr_num_index_arr_num_index_arr_len=0\n    local tmp_max_arr_num_index_arr_num_index_arr_index=0\n\
    \    local tmp_max_arr_num_index_arr_num_index_arr_num=0\n    local tmp_max_arr_num_index_arr_num_index_arr_num_index=0\n\
    \    local tmp_max_arr_num_index_arr_num_index_arr_num_index_arr=()\n    local\
    \ tmp_max_arr_num_index_arr_num_index_arr_num_index_arr_len=0\n    local tmp_max_arr_num_index_arr_num_index_arr_num_index_arr_index=0\n\
    \    local tmp_max_arr_num_index_arr_num_index_arr_num_index_arr_num=0\n    local\
    \ tmp_max_arr_num_index_arr_num_index_arr\n}\n\ncandidate() {\n    maximum \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4\
    \ -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate\
    \ \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1\
    \ 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"\
    4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13\
    \ -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n\
    \    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\"\
    \ \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n\
    \    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=$1\n    local k=$2\n    local -a arr_sorted\n    local -a arr_max\n\
    \    local i\n    local j\n    local max\n    local max_index\n    local len=${#arr[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        arr_sorted[i]=${arr[i]}\n    done\n\
    \    for ((i=0; i<k; i++)); do\n        max=${arr_sorted[0]}\n        max_index=0\n\
    \        for ((j=1; j<len-i; j++)); do\n            if [[ ${arr_sorted[j]} -gt\
    \ $max ]]; then\n                max=${arr_sorted[j]}\n                max_index=$j\n\
    \            fi\n        done\n        arr_max[i]=$max\n        arr_sorted[max_index]=${arr_sorted[len-i-1]}\n\
    \    done\n    echo ${arr_max[@]}\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n\
    \    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2\
    \ 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpbkpm8f66.sh: line 40: arr_sorted: bad array subscript\n'''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i len\n\n    # Sort the\
    \ array in descending order.\n    arr_sorted=($(echo \"$arr\" | tr ' ' '\\n' |\
    \ sort -nr))\n    len=${#arr_sorted[@]}\n    for ((i=0; i<k; i++)); do\n     \
    \   arr_max[i]=${arr_sorted[i]}\n    done\n    echo \"${arr_max[@]}\"\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local -n _arr=$1\n    local _k=$2\n    local _max_arr=()\n    local _max_num=0\n\
    \    local _max_index=0\n    local _i=0\n    local _j=0\n    local _len=${#_arr[@]}\n\
    \    for (( _i=0; _i<_k; _i++ )); do\n        _max_num=${_arr[0]}\n        _max_index=0\n\
    \        for (( _j=1; _j<_len; _j++ )); do\n            if [[ ${_arr[$_j]} -gt\
    \ $_max_num ]]; then\n                _max_num=${_arr[$_j]}\n                _max_index=$_j\n\
    \            fi\n        done\n        _max_arr+=(\"$_max_num\")\n        unset\
    \ _arr[$_max_index]\n        _arr=(\"${_arr[@]}\")\n        _len=${#_arr[@]}\n\
    \    done\n    echo \"${_max_arr[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"/tmp/tmpxl33j716.sh: line 18: local: `-3 -4 5'': invalid variable name
    for name reference\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local i\n    local j\n    local max\n    local max_index\n \
    \   local -a result\n    arr_sorted=($(echo \"$arr\" | tr ' ' '\\n' | sort -n))\n\
    \    for ((i=0; i<k; i++)); do\n        arr_max[$i]=${arr_sorted[$i]}\n    done\n\
    \    for ((i=k; i<${#arr_sorted[@]}; i++)); do\n        max=${arr_max[0]}\n  \
    \      max_index=0\n        for ((j=1; j<k; j++)); do\n            if [[ ${arr_max[$j]}\
    \ -gt $max ]]; then\n                max=${arr_max[$j]}\n                max_index=$j\n\
    \            fi\n        done\n        if [[ ${arr_sorted[$i]} -gt $max ]]; then\n\
    \            arr_max[$max_index]=${arr_sorted[$i]}\n        fi\n    done\n   \
    \ for ((i=0; i<k; i++)); do\n        result[$i]=\"\\\"${arr_max[$i]}\\\"\"\n \
    \   done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    maximum \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local arr_max=\"$(echo \"$arr\" | tr ' ' '\\n' | sort -nr |\
    \ head -n \"$k\" | tr '\\n' ' ')\"\n    echo \"[$(echo \"$arr_max\" | sed 's/\
    \ /\", \"/g')]\"\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 2
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local max_arr=()\n    local max_arr_len=0\n    local max_arr_len_max=$((k\
    \ - 1))\n    local max_arr_len_min=$((arr_len - k))\n    local max_arr_len_mid=$(((max_arr_len_max\
    \ + max_arr_len_min) / 2))\n    local max_arr_len_mid_prev=$((max_arr_len_mid\
    \ - 1))\n    local max_arr_len_mid_next=$((max_arr_len_mid + 1))\n    local max_arr_len_mid_prev_prev=$((max_arr_len_mid_prev\
    \ - 1))\n    local max_arr_len_mid_next_next=$((max_arr_len_mid_next + 1))\n \
    \   local max_arr_len_mid_prev_prev_prev=$((max_arr_len_mid_prev_prev - 1))\n\
    \    local max_arr_len_mid_next_next_next=$((max_arr_len_mid_next_next + 1))\n\
    \    local max_arr_len_mid_prev_prev_prev_prev=$((max_arr_len_mid_prev_prev_prev\
    \ - 1))\n    local max_arr_len_mid_next_next_next_next=$((max_arr_len_mid_next_next_next\
    \ + 1))\n    local max_arr_len_mid_prev_prev_prev_prev_prev=$((max_arr_len_mid_prev_prev_prev_prev\
    \ - 1))\n    local max_arr_len_mid_next_next_next_next_next=$((max_arr_len_mid_next_next_next_next\
    \ + 1))\n    local max_arr_len_mid_prev_prev_prev_prev_prev_prev=$((max_arr_len_mid_prev_prev_prev_prev_prev\
    \ - 1))\n    local max_arr_len_mid_next_next_next_next_next_next=$((max_arr_len\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp2jr3hllj.sh: line 37: unexpected EOF while looking for matching
    `)''\n/tmp/tmp2jr3hllj.sh: line 60: syntax error: unexpected end of file\n"'
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i n\n    local -i m\n\
    \    local -i max\n    local -i max_index\n    local -i len\n    local -i len_max\n\
    \    local -i len_sorted\n    local -i len_arr\n    local -i len_arr_max\n   \
    \ local -i len_arr_sorted\n    local -i len_arr_sorted_max\n    local -i len_arr_sorted_max_index\n\
    \    local -i len_arr_sorted_max_index_max\n    local -i len_arr_sorted_max_index_max_index\n\
    \    local -i len_arr_sorted_max_index_max_index_max\n    local -i len_arr_sorted_max_index_max_index_max_index\n\
    \    local -i len_arr_sorted_max_index_max_index_max_index_max\n    local -i len_arr_sorted_max_index_max_index_max_index_max_index\n\
    \    local -i len_arr_sorted_max_index_max_index_max_index_max_index_max\n   \
    \ local -i len_arr_sorted_max_index_max_index_max_index_max_index_max_index\n\
    \    local -i len_arr_sorted_max_index_max_index_max_index_max_index_max_index_max\n\
    \    local -i len_arr_sorted_max_index_max_index_max_index_max_index_max_index_max_index\n\
    \    local -i len_arr_sorted_max_index_max_index_max_index_max_index_max_index_max_index_max\n\
    \    local -i len_arr_sorted_max_index_max_index_max_index_max_index_max_index_max_index_max_index\n\
    \    local -i len_arr_sorted_max_index_max_index_max_index_max\n}\n\ncandidate()\
    \ {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4\
    \ 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\"\
    \ ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123\
    \ 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8\
    \ 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
    \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n   \
    \ [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\"\
    \ \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") =\
    \ \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -a arr_max_sorted\n    local -i i\n    local -i j\n  \
    \  local -i k_i\n    local -i arr_len\n    local -i arr_max_len\n    local -i\
    \ arr_max_sorted_len\n    local -i arr_sorted_len\n    local -i arr_max_i\n  \
    \  local -i arr_max_sorted_i\n    local -i arr_sorted_i\n    local -i arr_max_sorted_j\n\
    \    local -i arr_sorted_j\n    local -i arr_max_sorted_k\n    local -i arr_sorted_k\n\
    \    local -i arr_max_sorted_l\n    local -i arr_sorted_l\n    local -i arr_max_sorted_m\n\
    \    local -i arr_sorted_m\n    local -i arr_max_sorted_n\n    local -i arr_sorted_n\n\
    \    local -i arr_max_sorted_o\n    local -i arr_sorted_o\n    local -i arr_max_sorted_p\n\
    \    local -i arr_sorted_p\n    local -i arr_max_sorted_q\n    local -i arr_sorted_q\n\
    \    local -i arr_max_sorted_r\n    local -i arr_sorted_r\n    local -i arr_max_sorted_s\n\
    \    local -i arr_sorted_s\n    local -i arr_max_sorted_t\n    local -i arr_sorted_t\n\
    \    local -i arr_max_sorted_u\n    local -i arr_sorted_u\n    local -i arr_max_sorted_v\n\
    \    local -i arr_sorted_v\n    local -i arr_max_sorted_w\n    local -i arr_sorted_w\n\
    \    local -i arr_max_sorted_x\n    local -i arr_sorted_x\n    local -i arr_max_sorted_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr=($arr)\n    local\
    \ -a res=()\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if ((${#res[@]} <\
    \ k)); then\n            res+=(${arr[i]})\n        else\n            for ((j=0;\
    \ j<${#res[@]}; j++)); do\n                if ((${arr[i]} > ${res[j]})); then\n\
    \                    res[j]=${arr[i]}\n                    break\n           \
    \     fi\n            done\n        fi\n    done\n    echo \"${res[@]}\"\n}\n\n\
    candidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -i i\n    local -i j\n    local -i k_i\n    local -i arr_len\n\
    \    local -i arr_max_len\n    local -i arr_max_len_i\n    local -i arr_max_len_i_j\n\
    \    local -i arr_max_len_i_j_k\n    local -i arr_max_len_i_j_k_l\n    local -i\
    \ arr_max_len_i_j_k_l_m\n    local -i arr_max_len_i_j_k_l_m_n\n    local -i arr_max_len_i_j_k_l_m_n_o\n\
    \    local -i arr_max_len_i_j_k_l_m_n_o_p\n    local -i arr_max_len_i_j_k_l_m_n_o_p_q\n\
    \    local -i arr_max_len_i_j_k_l_m_n_o_p_q_r\n    local -i arr_max_len_i_j_k_l_m_n_o_p_q_r_s\n\
    \    local -i arr_max_len_i_j_k_l_m_n_o_p_q_r_s_t\n    local -i arr_max_len_i_j_k_l_m_n_o_p_q_r_s_t_u\n\
    \    local -i arr_max_len_i_j_k_l_m_n_o_p_q_r_s_t_u_v\n    local -i arr_max_len_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w\n\
    \    local -i arr_max_len_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x\n    local -i arr_max_\n\
    }\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\" \"2\") =\
    \ \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
    \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3\
    \ -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5\
    \ 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"\
    -10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"\
    0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local arr_len=\"$(echo \"$arr\"\
    \ | wc -w)\"\n    local i=0\n    local j=0\n    local tmp=0\n    local max_arr=()\n\
    \    local max_arr_len=0\n    local max_arr_i=0\n    local max_arr_j=0\n    local\
    \ max_arr_tmp=0\n    local max_arr_max=0\n    local max_arr_max_i=0\n    local\
    \ max_arr_max_j=0\n    local max_arr_max_tmp=0\n    local max_arr_max_arr=()\n\
    \    local max_arr_max_arr_len=0\n    local max_arr_max_arr_i=0\n    local max_arr_max_arr_j=0\n\
    \    local max_arr_max_arr_tmp=0\n    local max_arr_max_arr_max=0\n    local max_arr_max_arr_max_i=0\n\
    \    local max_arr_max_arr_max_j=0\n    local max_arr_max_arr_max_tmp=0\n    local\
    \ max_arr_max_arr_max_arr=()\n    local max_arr_max_arr_max_arr_len=0\n    local\
    \ max_arr_max_arr_max_arr_i=0\n    local max_arr_max_arr_max_arr_j=0\n    local\
    \ max_arr_max_arr_max_arr_tmp=0\n    local max_arr_max_arr_max_arr_max=0\n   \
    \ local max_arr_max_arr_max_arr_max_i=0\n    local max_arr_max_arr_max_arr_max_j=0\n\
    \    local max_arr_max_arr_max_arr_max_tmp=0\n    local max_arr_max_arr_max_arr_max_arr=()\n\
    \    local max_arr_max_arr_max_arr_max_arr_len=0\n    local max_arr_max_arr_max_arr_max_arr_i=0\n\
    \    local max_\n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate\
    \ \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\"\
    \ ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[\
    \ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[\
    \ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0\
    \ 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n\
    \    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1\
    \ 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=($1)\n    local k=$2\n    local i j\n    for ((i=0; i<k; i++));\
    \ do\n        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if ((${arr[$i]}\
    \ < ${arr[$j]})); then\n                local tmp=${arr[$i]}\n               \
    \ arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n            fi\n        done\n\
    \    done\n    echo \"${arr[@]:0:$k}\"\n}\n\ncandidate() {\n    maximum \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\"\
    \ ]]\n    [[ $(candidate \"4 -4 4\" \"2\") = \"4 4\" ]]\n    [[ $(candidate \"\
    -3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\"\
    \ \"3\") = \"2 20 123\" ]]\n    [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"\
    0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0\
    \ 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n   \
    \ [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"\
    2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\") = \"-10 10\" ]]\n   \
    \ [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
- exit_code: 1
  program: "#!/bin/bash\n# Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example\
    \ 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example\
    \ 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n\
    # >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length\
    \ of the array will be in the range of [1, 1000].\n# 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nmaximum() {\n\
    \    local arr=\"$1\"\n    local k=\"$2\"\n    local -a arr_sorted\n    local\
    \ -a arr_max\n    local -a arr_max_sorted\n    local -i i\n    local -i j\n  \
    \  local -i n\n    local -i m\n    local -i p\n    local -i q\n    local -i r\n\
    \    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i\
    \ w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local\
    \ -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n\
    \    local -i gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local\
    \ -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n\
    \    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local\
    \ -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n\
    \    local -i yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local\
    \ -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n\
    \    local -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local\
    \ -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n\
    \    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local\
    \ -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n\
    \    local -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i cccc\n \
    \  \n}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
    \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\"\
    \ ]]\n    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n \
    \   [[ $(candidate \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate\
    \ \"5 15 0 3 -13 -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate\
    \ \"-1 0 2 5 3 -10\" \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\"\
    ) = \"5\" ]]\n    [[ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate\
    \ \"-10 10\" \"2\") = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\"\
    \ \"0\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360384
