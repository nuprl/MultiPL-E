name: HumanEval_27_flip_case
language: sh
prompt: "#!/bin/bash\n# For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\nflip_case()\
  \ {\n"
tests: "}\n\ncandidate() {\n    flip_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hello\\!\") = \"hELLO\\!\" ]]\n\
  \    [[ $(candidate \"These violent delights have violent ends\") = \"tHESE VIOLENT\
  \ DELIGHTS HAVE VIOLENT ENDS\" ]]\n}\n\nrun_test"
completions: ["  local str=\"$1\"\n  local -i i=0\n  local -i len=${#str}\n  local\
    \ -a chars=()\n  for (( i=0; i<len; i++ )); do\n    local char=\"${str:i:1}\"\n\
    \    if [[ \"$char\" =~ [a-z] ]]; then\n      char=\"$(echo \"$char\" | tr '[:lower:]'\
    \ '[:upper:]')\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      char=\"$(echo\
    \ \"$char\" | tr '[:upper:]' '[:lower:]')\"\n    fi\n    chars+=(\"$char\")\n\
    \  done\n  echo \"${chars[@]}\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local output\n  for (( i=0;\
    \ i<${#str}; i++ )); do\n    c=\"${str:$i:1}\"\n    case $c in\n      [a-z] )\
    \ output=\"$output$(echo $c | tr '[:lower:]' '[:upper:]')\" ;;\n      [A-Z] )\
    \ output=\"$output$(echo $c | tr '[:upper:]' '[:lower:]')\" ;;\n      * ) output=\"\
    $output$c\" ;;\n    esac\n  done\n  echo \"$output\"", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", '    echo
    "${1,,}"', "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ local str=\"$1\"\n  local output\n  for (( i=0; i<${#str}; i++ )); do\n    c=\"\
    ${str:$i:1}\"\n    case $c in\n      [a-z] ) output=\"$output$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\" ;;\n      [A-Z] ) output=\"$output$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\" ;;\n      * ) output=\"$output$c\" ;;\n    esac\n  done\n  echo\
    \ \"$output\"", "  local str=\"$1\"\n  local flipped_str=\"\"\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    local char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]];\
    \ then\n      flipped_str+=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n\
    \      flipped_str+=\"${char,,}\"\n    else\n      flipped_str+=\"$char\"\n  \
    \  fi\n  done\n  echo \"$flipped_str\"", "  local str=\"$1\"\n  local output\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    c=\"${str:$i:1}\"\n    case $c in\n\
    \      [a-z] ) output=\"$output$(echo $c | tr '[:lower:]' '[:upper:]')\" ;;\n\
    \      [A-Z] ) output=\"$output$(echo $c | tr '[:upper:]' '[:lower:]')\" ;;\n\
    \      * ) output=\"$output$c\" ;;\n    esac\n  done\n  echo \"$output\"", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", '    echo
    "$1" | tr "[:upper:]" "[:lower:]" | tr "[:lower:]" "[:upper:]"', "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\
    \n  local flipped=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"\
    ${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      flipped+=\"${char^^}\"\
    \n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      flipped+=\"${char,,}\"\n    else\n\
    \      flipped+=\"$char\"\n    fi\n  done\n  echo \"$flipped\"", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\
    \n  local -i i=0\n  local -i len=${#str}\n  local -a arr\n  while (( i < len ));\
    \ do\n    local char=\"${str:i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n \
    \     arr[i]=\"${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      arr[i]=\"\
    ${char,,}\"\n    else\n      arr[i]=\"$char\"\n    fi\n    (( i++ ))\n  done\n\
    \  echo \"${arr[*]}\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", '    echo "$1" | tr "[:upper:]" "[:lower:]" | tr "[:lower:]" "[:upper:]"',
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"${1}\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"${1,,}\" | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local result=\"\
    \"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if\
    \ [[ \"$char\" =~ [a-z] ]]; then\n      result+=\"${char^^}\"\n    elif [[ \"\
    $char\" =~ [A-Z] ]]; then\n      result+=\"${char,,}\"\n    else\n      result+=\"\
    $char\"\n    fi\n  done\n  echo \"$result\"", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    local str=\"$1\"\n    local flipped=\"\"\n\
    \    for (( i=0; i<${#str}; i++ )); do\n        local char=\"${str:$i:1}\"\n \
    \       if [[ \"$char\" =~ [a-z] ]]; then\n            flipped+=\"${char^^}\"\n\
    \        elif [[ \"$char\" =~ [A-Z] ]]; then\n            flipped+=\"${char,,}\"\
    \n        else\n            flipped+=\"$char\"\n        fi\n    done\n    echo\
    \ \"$flipped\"", "    echo \"$@\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    local str=\"$1\"\n    local output\n    for (( i=0; i<${#str}; i++ )); do\n\
    \        c=${str:$i:1}\n        case $c in\n            [a-z] ) output+=\"${c^^}\"\
    \ ;;\n            [A-Z] ) output+=\"${c,,}\" ;;\n            * ) output+=\"$c\"\
    \ ;;\n        esac\n    done\n    echo \"$output\"", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local output\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    local c=\"${str:i:1}\"\n    case $c\
    \ in\n      [a-z] ) output+=\"${c^^}\" ;;\n      [A-Z] ) output+=\"${c,,}\" ;;\n\
    \      * ) output+=\"$c\" ;;\n    esac\n  done\n  echo \"$output\"", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local str=$1\n\
    \    local str_len=${#str}\n    local i=0\n    local new_str=\"\"\n    for ((i=0;\
    \ i<str_len; i++)); do\n        local char=${str:$i:1}\n        if [[ \"$char\"\
    \ =~ [a-z] ]]; then\n            new_str+=\"${char^^}\"\n        elif [[ \"$char\"\
    \ =~ [A-Z] ]]; then\n            new_str+=\"${char,,}\"\n        else\n      \
    \      new_str+=\"$char\"\n        fi\n    done\n    echo \"$new_str\"", "   \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local\
    \ str=\"$1\"\n  local output\n  for (( i=0; i<${#str}; i++ )); do\n    c=\"${str:$i:1}\"\
    \n    case $c in\n      [a-z] ) output=\"$output$(echo $c | tr '[:lower:]' '[:upper:]')\"\
    \ ;;\n      [A-Z] ) output=\"$output$(echo $c | tr '[:upper:]' '[:lower:]')\"\
    \ ;;\n      * ) output=\"$output$c\" ;;\n    esac\n  done\n  echo \"$output\"",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "   \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  local str=\"$1\"\n    local output=\"\"\n    for (( i=0; i<${#str}; i++ ));\
    \ do\n        local char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [A-Z] ]];\
    \ then\n            output+=\"${char,,}\"\n        else\n            output+=\"\
    ${char^^}\"\n        fi\n    done\n    echo \"$output\"", "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", '    echo "$1" | tr "[:upper:]" "[:lower:]"
    | tr "[:lower:]" "[:upper:]"', "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local output\n  for (( i=0;\
    \ i<${#str}; i++ )); do\n    c=\"${str:$i:1}\"\n    case $c in\n      [a-z] )\
    \ output=\"$output$(echo $c | tr '[:lower:]' '[:upper:]')\" ;;\n      [A-Z] )\
    \ output=\"$output$(echo $c | tr '[:upper:]' '[:lower:]')\" ;;\n      * ) output=\"\
    $output$c\" ;;\n    esac\n  done\n  echo \"$output\"", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local output\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    local c=\"${str:i:1}\"\n    case $c\
    \ in\n      [a-z] ) output+=\"${c^^}\" ;;\n      [A-Z] ) output+=\"${c,,}\" ;;\n\
    \      * ) output+=\"$c\" ;;\n    esac\n  done\n  echo \"$output\"", "  echo \"\
    ${1,,}\" | tr '[:lower:]' '[:upper:]'", "    local str=\"$1\"\n    local output\n\
    \    for (( i=0; i<${#str}; i++ )); do\n        local c=\"${str:i:1}\"\n     \
    \   case $c in\n            [a-z] ) output+=\"${c^^}\" ;;\n            [A-Z] )\
    \ output+=\"${c,,}\" ;;\n            * ) output+=\"$c\" ;;\n        esac\n   \
    \ done\n    echo \"$output\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    local string=\"$1\"\n    local flipped_string=\"\
    \"\n    for (( i=0; i<${#string}; i++ )); do\n        local char=\"${string:$i:1}\"\
    \n        if [[ \"$char\" =~ [a-z] ]]; then\n            flipped_string+=\"${char^^}\"\
    \n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            flipped_string+=\"\
    ${char,,}\"\n        else\n            flipped_string+=\"$char\"\n        fi\n\
    \    done\n    echo \"$flipped_string\"", "  local str=\"$1\"\n  local result=\"\
    \"\n  for (( i=0; i<${#str}; i++ )); do\n    local char=\"${str:$i:1}\"\n    if\
    \ [[ \"$char\" =~ [a-z] ]]; then\n      result+=\"${char^^}\"\n    elif [[ \"\
    $char\" =~ [A-Z] ]]; then\n      result+=\"${char,,}\"\n    else\n      result+=\"\
    $char\"\n    fi\n  done\n  echo \"$result\"", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local output\n  for (( i=0;\
    \ i<${#str}; i++ )); do\n    local c=\"${str:i:1}\"\n    case $c in\n      [a-z]\
    \ ) output+=\"${c^^}\" ;;\n      [A-Z] ) output+=\"${c,,}\" ;;\n      * ) output+=\"\
    $c\" ;;\n    esac\n  done\n  echo \"$output\"", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local output\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    local c=\"${str:i:1}\"\n    case $c\
    \ in\n      [a-z] ) output+=\"${c^^}\" ;;\n      [A-Z] ) output+=\"${c,,}\" ;;\n\
    \      * ) output+=\"$c\" ;;\n    esac\n  done\n  echo \"$output\"", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local\
    \ str=\"$1\"\n  local new_str=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n    local\
    \ char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      new_str+=\"\
    ${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      new_str+=\"${char,,}\"\
    \n    else\n      new_str+=\"$char\"\n    fi\n  done\n  echo \"$new_str\"", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \   echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local str=\"\
    $1\"\n    local flipped=\"\"\n    for (( i=0; i<${#str}; i++ )); do\n        local\
    \ char=\"${str:$i:1}\"\n        if [[ \"$char\" =~ [a-z] ]]; then\n          \
    \  flipped+=\"${char^^}\"\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n     \
    \       flipped+=\"${char,,}\"\n        else\n            flipped+=\"$char\"\n\
    \        fi\n    done\n    echo \"$flipped\"", "  local str=\"$1\"\n  local output\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    local c=\"${str:i:1}\"\n    case $c\
    \ in\n      [a-z] ) output+=\"${c^^}\" ;;\n      [A-Z] ) output+=\"${c,,}\" ;;\n\
    \      * ) output+=\"$c\" ;;\n    esac\n  done\n  echo \"$output\"", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"\
    $1\"\n  local output\n  for (( i=0; i<${#str}; i++ )); do\n    c=\"${str:$i:1}\"\
    \n    case $c in\n      [a-z] ) output=\"$output$(echo $c | tr '[:lower:]' '[:upper:]')\"\
    \ ;;\n      [A-Z] ) output=\"$output$(echo $c | tr '[:upper:]' '[:lower:]')\"\
    \ ;;\n      * ) output=\"$output$c\" ;;\n    esac\n  done\n  echo \"$output\"",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  \
    \  local str=$1\n    local str_len=${#str}\n    local i=0\n    local new_str=\"\
    \"\n    while [ $i -lt $str_len ]; do\n        local char=${str:$i:1}\n      \
    \  if [[ $char =~ [a-z] ]]; then\n            new_str+=$(echo $char | tr '[:lower:]'\
    \ '[:upper:]')\n        elif [[ $char =~ [A-Z] ]]; then\n            new_str+=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n        else\n            new_str+=$char\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $new_str", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    local str=\"$1\"\n    local flipped=\"\"\n\
    \    for (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n     \
    \   if [[ \"$char\" =~ [a-z] ]]; then\n            flipped+=\"${char^^}\"\n  \
    \      elif [[ \"$char\" =~ [A-Z] ]]; then\n            flipped+=\"${char,,}\"\
    \n        else\n            flipped+=\"$char\"\n        fi\n    done\n    echo\
    \ \"$flipped\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", " \
    \ echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"${1,,}\" | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$@\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'", "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "  echo \"${1,,}\" | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"\
    $1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"\
    $1\"\n  local ret=\"\"\n  local char\n  for (( i=0; i<${#str}; i++ )); do\n  \
    \  char=\"${str:$i:1}\"\n    if [[ \"$char\" =~ [a-z] ]]; then\n      ret+=\"\
    ${char^^}\"\n    elif [[ \"$char\" =~ [A-Z] ]]; then\n      ret+=\"${char,,}\"\
    \n    else\n      ret+=\"$char\"\n    fi\n  done\n  echo \"$ret\"", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local\
    \ str=$1\n    local str_len=${#str}\n    local i=0\n    local new_str=\"\"\n \
    \   while [ $i -lt $str_len ]; do\n        local char=${str:$i:1}\n        if\
    \ [[ $char =~ [a-z] ]]; then\n            new_str+=$(echo $char | tr '[:lower:]'\
    \ '[:upper:]')\n        elif [[ $char =~ [A-Z] ]]; then\n            new_str+=$(echo\
    \ $char | tr '[:upper:]' '[:lower:]')\n        else\n            new_str+=$char\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $new_str", "  echo \"$1\"\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local str=\"\
    $1\"\n    local output\n    for (( i=0; i<${#str}; i++ )); do\n        local char=\"\
    ${str:$i:1}\"\n        if [[ $char =~ [a-z] ]]; then\n            output+=\"${char^^}\"\
    \n        elif [[ $char =~ [A-Z] ]]; then\n            output+=\"${char,,}\"\n\
    \        else\n            output+=\"$char\"\n        fi\n    done\n    echo \"\
    $output\"", "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "  echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "   \
    \ local str=\"$1\"\n    local output\n    for (( i=0; i<${#str}; i++ )); do\n\
    \        local c=\"${str:i:1}\"\n        case $c in\n            [a-z] ) output+=\"\
    ${c^^}\" ;;\n            [A-Z] ) output+=\"${c,,}\" ;;\n            * ) output+=\"\
    $c\" ;;\n        esac\n    done\n    echo \"$output\"", "  echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'", "  local str=\"$1\"\n  local flipped=\"\
    \"\n  local char\n  for (( i=0; i<${#str}; i++ )); do\n    char=\"${str:$i:1}\"\
    \n    if [[ \"$char\" =~ [a-z] ]]; then\n      flipped+=\"${char^^}\"\n    elif\
    \ [[ \"$char\" =~ [A-Z] ]]; then\n      flipped+=\"${char,,}\"\n    else\n   \
    \   flipped+=\"$char\"\n    fi\n  done\n  echo \"$flipped\""]
stop_tokens:
- "\n}"
