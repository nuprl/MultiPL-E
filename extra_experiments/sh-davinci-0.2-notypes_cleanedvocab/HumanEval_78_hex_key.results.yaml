language: sh
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i counter=0\n    local -i number_of_digits=${#hex_number}\n\
    \    local -i i=0\n    local -i j=0\n    local -i digit=0\n    local -i is_prime=0\n\
    \    for (( i=0; i<number_of_digits; i++ )); do\n        digit=${hex_number:i:1}\n\
    \        case $digit in\n            [2-7])\n                is_prime=1\n    \
    \            ;;\n            [B-D])\n                is_prime=1\n            \
    \    ;;\n            *)\n                is_prime=0\n                ;;\n    \
    \    esac\n        if [ $is_prime -eq 1 ]; then\n            counter=$((counter+1))\n\
    \        fi\n    done\n    echo $counter\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tlocal primes=\"2 3 5 7 B D\"\n\tfor i\
    \ in $(echo $primes); do\n\t\tif [[ $hex =~ $i ]]; then\n\t\t\t((count++))\n\t\
    \tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F)\n    local prime_digits=(2 3 5 7 B D)\n    local prime_count=0\n    local\
    \ digit\n    for digit in ${hex_digits[@]}; do\n        if [[ $hex_string =~ $digit\
    \ ]]; then\n            local prime_digit\n            for prime_digit in ${prime_digits[@]};\
    \ do\n                if [[ $digit == $prime_digit ]]; then\n                \
    \    ((prime_count++))\n                fi\n            done\n        fi\n   \
    \ done\n    echo $prime_count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_digits=\"$1\"\n    local primes=\"2 3 5 7 B D\"\n    local\
    \ count=0\n    for digit in $(echo $hex_digits | grep -o .); do\n        if [[\
    \ $primes =~ $digit ]]; then\n            count=$((count + 1))\n        fi\n \
    \   done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    local primes=\"2357BD\"\n    for\
    \ (( i=0; i<${#hex}; i++ )); do\n        if [[ $primes =~ ${hex:$i:1} ]]; then\n\
    \            (( count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local\
    \ -i num=0\n    local -i prime=0\n    local -i result=0\n    local -i tmp=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -a primes=(2\
    \ 3 5 7 11 13 17)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    \    local -a hex_str=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_num=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    for ((i=0; i<${#hex_str[@]}; i++));\
    \ do\n        hex_num[${hex_str[$i]}]=${hex[$i]}\n    done\n    for ((i=0; i<len;\
    \ i++)); do\n        num=${hex_num[${1:$i:1}]}\n        prime=0\n        for ((x=0;\
    \ x<${#primes[@]}; x++)); do\n            if ((num==primes[$x])); then\n     \
    \           prime=1\n                break\n            fi\n        done\n   \
    \     if ((prime==1)); then\n            ((count++))\n        fi\n    done\n \
    \   echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local count=0\n    for ((i=0; i<${#hex_number};\
    \ i++)); do\n        local digit=${hex_number:$i:1}\n        if [[ \"$digit\"\
    \ == \"2\" || \"$digit\" == \"3\" || \"$digit\" == \"5\" || \"$digit\" == \"7\"\
    \ || \"$digit\" == \"B\" || \"$digit\" == \"D\" ]]; then\n            ((count++))\n\
    \        fi\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local input=$1\n    local -i count=0\n    for (( i=0; i<${#input}; i++\
    \ )); do\n        local -i digit=$(printf \"%d\" \"'${input:$i:1}\")\n       \
    \ if (( digit == 2 || digit == 3 || digit == 5 || digit == 7 || digit == 11 ||\
    \ digit == 13 )); then\n            (( count++ ))\n        fi\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | tr -d 0-9 | wc -c\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_num=\"$1\"\n    local count=0\n    for (( i=0; i<${#hex_num};\
    \ i++ )); do\n        local digit=${hex_num:$i:1}\n        if [[ \"$digit\" ==\
    \ \"2\" || \"$digit\" == \"3\" || \"$digit\" == \"5\" || \"$digit\" == \"7\" ||\
    \ \"$digit\" == \"B\" || \"$digit\" == \"D\" ]]; then\n            (( count++\
    \ ))\n        fi\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local char=${hex:$i:1}\n        if [[ $char == \"2\" || $char == \"3\"\
    \ || $char == \"5\" || $char == \"7\" || $char == \"B\" || $char == \"D\" ]];\
    \ then\n            (( count++ ))\n        fi\n    done\n    echo $count\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal hex_digits=(\"0\" \"1\" \"2\" \"3\" \"4\" \"\
    5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n\tlocal prime_digits=(\"\
    2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n\tlocal count=0\n\tfor i in ${hex_digits[@]};\
    \ do\n\t\tfor j in ${prime_digits[@]}; do\n\t\t\tif [ $i == $j ]; then\n\t\t\t\
    \tcount=$((count+1))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        case ${hex_number:$i:1} in\n            2|3|5|7|B|D)\n \
    \               (( count++ ))\n                ;;\n        esac\n    done\n  \
    \  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=$1\n  local hex_digits=({0..9} {A..F})\n  local prime_digits=({2..7}\
    \ B D)\n  local prime_count=0\n  for digit in $(echo $hex_number | grep -o .);\
    \ do\n    for prime_digit in ${prime_digits[@]}; do\n      if [[ $digit == $prime_digit\
    \ ]]; then\n        ((prime_count++))\n      fi\n    done\n  done\n  echo $prime_count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=('0' '1' '2' '3' '4' '5' '6'\
    \ '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F')\n    local prime_digits=('2' '3' '5' '7'\
    \ 'B' 'D')\n    local count=0\n    for digit in ${hex_digits[@]}; do\n       \
    \ if [[ $hex_string =~ $digit ]]; then\n            for prime_digit in ${prime_digits[@]};\
    \ do\n                if [[ $digit = $prime_digit ]]; then\n                 \
    \   count=$((count+1))\n                fi\n            done\n        fi\n   \
    \ done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local -i count=0\n  for ((i=0; i<${#1}; i++)); do\n    case ${1:i:1} in\n\
    \      [2357BD]) ((count++));;\n    esac\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local -i count=0\n    for (( i=0; i<${#hex_key};\
    \ i++ )); do\n        local -i digit=$(printf \"%d\" \"'${hex_key:$i:1}\")\n \
    \       if (( digit >= 50 && digit <= 57 )) || (( digit >= 65 && digit <= 70 ));\
    \ then\n            (( count++ ))\n        fi\n    done\n    echo $count\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\
    \tlocal primes=(2 3 5 7 B D)\n\tlocal count=0\n\tfor ((i=0; i<${#hex_num}; i++));\
    \ do\n\t\tfor ((j=0; j<${#hex_digits[@]}; j++)); do\n\t\t\tif [[ ${hex_num:$i:1}\
    \ == ${hex_digits[$j]} ]]; then\n\t\t\t\tfor ((k=0; k<${#primes[@]}; k++)); do\n\
    \t\t\t\t\tif [[ ${hex_num:$i:1} == ${primes[$k]} ]]; then\n\t\t\t\t\t\t((count++))\n\
    \t\t\t\t\tfi\n\t\t\t\tdone\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_num=$1\n  local primes=0\n  local digits=0\n  local digit=0\n\
    \  local hex_digits=({0..9} {A..F})\n  local hex_primes=(2 3 5 7 B D)\n  for ((\
    \ i=0; i<${#hex_num}; i++ )); do\n    digit=${hex_num:$i:1}\n    for (( j=0; j<${#hex_digits[@]};\
    \ j++ )); do\n      if [[ $digit == ${hex_digits[$j]} ]]; then\n        digits=$((digits+1))\n\
    \        for (( k=0; k<${#hex_primes[@]}; k++ )); do\n          if [[ $digit ==\
    \ ${hex_primes[$k]} ]]; then\n            primes=$((primes+1))\n          fi\n\
    \        done\n      fi\n    done\n  done\n  echo $primes\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    local primes=\"2 3 5 7 B D\"\n \
    \   for i in $(echo $primes); do\n        if [[ $hex =~ $i ]]; then\n        \
    \    count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_num=$1\n    local -i count=0\n    for (( i=0; i<${#hex_num};\
    \ i++ )); do\n        local -i digit=$(printf \"%d\" \"'${hex_num:$i:1}\")\n \
    \       if (( digit == 2 || digit == 3 || digit == 5 || digit == 7 || digit ==\
    \ 11 || digit == 13 )); then\n            (( count++ ))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local count=0\n    for (( i=0; i<${#hex_key}; i++\
    \ )); do\n        local char=${hex_key:$i:1}\n        if [[ $char == \"2\" ||\
    \ $char == \"3\" || $char == \"5\" || $char == \"7\" || $char == \"B\" || $char\
    \ == \"D\" ]]; then\n            (( count++ ))\n        fi\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local count=0\n    local hex_digits=(\"0\" \"\
    1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"\
    E\" \"F\")\n    local prime_digits=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n   \
    \ for (( i=0; i<${#hex_number}; i++ )); do\n        for (( j=0; j<${#prime_digits[@]};\
    \ j++ )); do\n            if [[ ${hex_number:$i:1} == ${prime_digits[$j]} ]];\
    \ then\n                (( count++ ))\n            fi\n        done\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local\
    \ -i num=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i\
    \ m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | sed 's/[^2-7B-D]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local -i count=0\n  for (( i=0; i<${#hex_key}; i++\
    \ )); do\n    if [[ ${hex_key:$i:1} =~ [2357BD] ]]; then\n      (( count++ ))\n\
    \    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ \"Hello world\"\n  echo \"1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=\"$1\"\n\tlocal counter=0\n\tfor (( i=0; i<${#hex_num}; i++\
    \ )); do\n\t\tcase ${hex_num:$i:1} in\n\t\t\t2|3|5|7|[Bb]|[Dd])\n\t\t\t\tcounter=$((\
    \ counter + 1 ))\n\t\t\t\t;;\n\t\tesac\n\tdone\n\techo $counter\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local -i count=0\n    for ((i=0; i<${#hex_key};\
    \ i++)); do\n        local -i digit=$(printf \"%d\" \"'${hex_key:$i:1}\")\n  \
    \      if ((digit == 50 || digit == 51 || digit == 53 || digit == 55 || digit\
    \ == 66 || digit == 68)); then\n            ((count++))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for ((i=0; i<${#hex}; i++));\
    \ do\n        case ${hex:i:1} in\n            [2357BDF])\n                ((count++))\n\
    \                ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # your code here\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp8cx9k3ek.sh: line 25: syntax error near unexpected token `}''\n/tmp/tmp8cx9k3ek.sh:
    line 25: `}''\n"'
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local str=$1\n    local count=0\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        case $c in\n\
    \            2|3|5|7|B|D)\n                count=$((count+1))\n              \
    \  ;;\n        esac\n        i=$((i+1))\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local -i count=0\n  for ((i=0; i<${#1}; i++)); do\n    if [[ ${1:i:1} =~\
    \ [2357BD] ]]; then\n      ((count++))\n    fi\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local\
    \ -i digit\n    local -a primes=(2 3 5 7 11 13)\n    for ((i=0; i<len; i++));\
    \ do\n        digit=$(printf \"%d\" \"'${1:i:1}\")\n        if [[ ${primes[*]}\
    \ =~ $digit ]]; then\n            ((count++))\n        fi\n    done\n    echo\
    \ \"$count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local count=0\n  for (( i=0; i<${#hex_key}; i++ ));\
    \ do\n    if [[ ${hex_key:$i:1} =~ [2357BD] ]]; then\n      (( count++ ))\n  \
    \  fi\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local -i count=0\n  local -i i=0\n  local -i len=${#1}\n  local -i num=0\n\
    \  local -i prime=0\n  local -i remainder=0\n  local -i temp=0\n  local -i value=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -a array\n  local -a\
    \ primes\n  local -a results\n  local -a values\n  local -a xs\n  local -a ys\n\
    \  local -a zs\n  local -a hex\n  local -a hex_primes\n  local -a hex_results\n\
    \  local -a hex_values\n  local -a hex_xs\n  local -a hex_ys\n  local -a hex_zs\n\
    \  local -a hex_array\n  local -a hex_primes\n  local -a hex_results\n  local\
    \ -a hex_values\n  local -a hex_xs\n  local -a hex_ys\n  local -a hex_zs\n  local\
    \ -a hex_array\n  local -a hex_primes\n  local -a hex_results\n  local -a hex_values\n\
    \  local -a hex_xs\n  local -a hex_ys\n  local -a hex_zs\n  local -a hex_array\n\
    \  local -a hex_primes\n  local -a hex_results\n  local -a hex_values\n  local\
    \ -a hex_xs\n  local -a hex_ys\n  local -a hex_zs\n  local -a hex_array\n  local\
    \ -a hex_primes\n  local -a hex_results\n  local -a hex_values\n  local -a hex_xs\n\
    \  local -a hex_ys\n  local -a hex_zs\n  local -a hex_array\n  local -a hex_primes\n\
    \  local -a hex_results\n  local -a hex_values\n  local -a hex_xs\n  local -a\
    \ hex_ys\n  local -a hex_zs\n  local -a hex_array\n  local -a hex_primes\n  local\
    \ -a hex_results\n  local -\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex=$1\n  local -i count=0\n  for (( i=0; i<${#hex}; i++ )); do\n\
    \    case ${hex:$i:1} in\n      [2357BD]) (( count++ ));;\n    esac\n  done\n\
    \  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    case ${hex:$i:1} in\n\t\t\t2|3|5|7|B|D)\n\t\t\t\t(( count++ ))\n\t\t\t\t;;\n\t\
    \tesac\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=\"$1\"\n    local hex_digits=\"0123456789ABCDEF\"\n\
    \    local hex_primes=\"2357BDF\"\n    local count=0\n    for (( i=0; i<${#hex_string};\
    \ i++ )); do\n        for (( j=0; j<${#hex_primes}; j++ )); do\n            if\
    \ [[ ${hex_string:$i:1} == ${hex_primes:$j:1} ]]; then\n                (( count++\
    \ ))\n            fi\n        done\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_number == *$digit* ]]; then\n \
    \           for prime_digit in $prime_digits; do\n                if [[ $digit\
    \ == $prime_digit ]]; then\n                    count=$((count+1))\n         \
    \       fi\n            done\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local -i count=0\n  for (( i=0; i<${#hex_key}; i++\
    \ )); do\n    local -i digit=${hex_key:$i:1}\n    if [[ $digit -eq 2 || $digit\
    \ -eq 3 || $digit -eq 5 || $digit -eq 7 || $digit -eq 11 || $digit -eq 13 ]];\
    \ then\n      (( count++ ))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_len=${#hex_key}\n    local prime_count=0\n\
    \    local i=0\n    while [ $i -lt $hex_key_len ]; do\n        local hex_digit=${hex_key:$i:1}\n\
    \        if [ $hex_digit == \"2\" ] || [ $hex_digit == \"3\" ] || [ $hex_digit\
    \ == \"5\" ] || [ $hex_digit == \"7\" ] || [ $hex_digit == \"B\" ] || [ $hex_digit\
    \ == \"D\" ]; then\n            prime_count=$((prime_count+1))\n        fi\n \
    \       i=$((i+1))\n    done\n    echo $prime_count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local c=${hex:$i:1}\n        if [[ $c == \"2\" || $c == \"3\" || $c ==\
    \ \"5\" || $c == \"7\" || $c == \"B\" || $c == \"D\" ]]; then\n            ((\
    \ count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    if [[ \"${hex:$i:1}\" =~ [2357BD] ]]; then\n\t\t\t(( count++ ))\n\t\tfi\n\tdone\n\
    \techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | tr -dC '2357BDF' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        case $digit in\n            2|3|5|7|B|D)\n\
    \                (( count++ ))\n                ;;\n        esac\n    done\n \
    \   echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    if [ -z \"$1\" ]; then\n        echo \"0\"\n        return\n    fi\n\
    \    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local primes=(2 3\
    \ 5 7 B D)\n    local count=0\n    for ((i=0; i<${#1}; i++)); do\n        for\
    \ ((j=0; j<${#hex_digits[@]}; j++)); do\n            if [ \"${1:$i:1}\" == \"\
    ${hex_digits[$j]}\" ]; then\n                for ((k=0; k<${#primes[@]}; k++));\
    \ do\n                    if [ \"${hex_digits[$j]}\" == \"${primes[$k]}\" ]; then\n\
    \                        ((count++))\n                    fi\n               \
    \ done\n            fi\n        done\n    done\n    echo \"$count\"\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_number=$1\n\tlocal hex_digits=(\"0\" \"1\" \"2\" \"3\" \"4\"\
    \ \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n\tlocal\
    \ prime_digits=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n\tlocal count=0\n\tfor i\
    \ in ${hex_digits[@]}; do\n\t\tif [[ $hex_number == *\"$i\"* ]]; then\n\t\t\t\
    for j in ${prime_digits[@]}; do\n\t\t\t\tif [[ $i == $j ]]; then\n\t\t\t\t\t((count++))\n\
    \t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n  \
    \  hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_len=${#hex_key}\n    local count=0\n\
    \    for ((i=0; i<hex_key_len; i++)); do\n        local digit=${hex_key:$i:1}\n\
    \        if [[ $digit == \"2\" || $digit == \"3\" || $digit == \"5\" || $digit\
    \ == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n            ((count++))\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i count=0\n    local -i digit\n    for\
    \ (( i=0; i<${#hex_number}; i++ )); do\n        digit=${hex_number:$i:1}\n   \
    \     case $digit in\n            [2-7]|[B-D])\n                (( count++ ))\n\
    \                ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | tr -d '0-9' | tr -d 'A-F' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"0\"\n  else\n    echo \"$1\" | tr -dC\
    \ '[:digit:]ABCDEF' | tr -dC '[:digit:]2357BD' | wc -c\n  fi\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_len=${#hex_key}\n    local prime_count=0\n\
    \    local i=0\n    local current_char\n    while [[ $i -lt $hex_key_len ]]; do\n\
    \        current_char=${hex_key:$i:1}\n        if [[ $current_char == \"2\" ]]\
    \ || [[ $current_char == \"3\" ]] || [[ $current_char == \"5\" ]] || [[ $current_char\
    \ == \"7\" ]] || [[ $current_char == \"B\" ]] || [[ $current_char == \"D\" ]];\
    \ then\n            prime_count=$((prime_count+1))\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $prime_count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == [2357BD] ]]; then\n\t\t\tcount=$((count+1))\n\
    \t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A\
    \ B C D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n   \
    \ for digit in $hex_digits; do\n        if [[ $hex_string =~ $digit ]]; then\n\
    \            for prime in $prime_digits; do\n                if [[ $digit = $prime\
    \ ]]; then\n                    ((count++))\n                fi\n            done\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\t# your code here\n\techo \"1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local hex_key_length=${#hex_key}\n  local hex_key_primes=0\n\
    \  local hex_key_digit\n  local hex_key_digit_decimal\n  local hex_key_digit_is_prime\n\
    \  local hex_key_digit_is_prime_divisor\n  local hex_key_digit_is_prime_divisor_max\n\
    \  local hex_key_digit_is_prime_divisor_max_sqrt\n  local hex_key_digit_is_prime_divisor_max_sqrt_int\n\
    \  local hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1\n  local hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt\n\
    \  local hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt_int\n  local\
    \ hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt_int_plus_1\n  local\
    \ hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt_int_plus_1_sqrt\n  local\
    \ hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt_int_plus_1_sqrt_int\n\
    \  local hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt_int_plus_1_sqrt_int_plus_1\n\
    \  local hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt_int_plus_1_sqrt_int_plus_1_sqrt\n\
    \  local hex_key_digit_is_prime_divisor_max_sqrt_int_plus_1_sqrt_int_plus_1_sqrt_int_plus_1_sqrt_int\n\
    \  local hex_key_digit_is_prime_divisor_max_sqrt\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F\"\n    local primes=\"2 3 5 7 B D\"\n    local count=0\n    for digit\
    \ in $hex_digits; do\n        if [[ $hex_number == *$digit* ]]; then\n       \
    \     for prime in $primes; do\n                if [[ $digit == $prime ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=$1\n  local number_of_primes=0\n  local hex_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n  local prime_hex_digits=(2 3 5 7 B D)\n  for\
    \ hex_digit in ${hex_digits[@]}; do\n    if [[ $hex_number =~ $hex_digit ]]; then\n\
    \      for prime_hex_digit in ${prime_hex_digits[@]}; do\n        if [[ $hex_digit\
    \ = $prime_hex_digit ]]; then\n          ((number_of_primes++))\n        fi\n\
    \      done\n    fi\n  done\n  echo $number_of_primes\n}\n\ncandidate() {\n  \
    \  hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for ((i=0; i<${#hex}; i++));\
    \ do\n        local digit=${hex:$i:1}\n        case $digit in\n            [2357BD])\n\
    \                ((count++))\n                ;;\n        esac\n    done\n   \
    \ echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            2|3|5|7|B|D)\n                ((count++))\n                ;;\n\
    \        esac\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # your code here\n  echo \"0\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for (( i=0; i<${#hex}; i++ ));\
    \ do\n        case ${hex:$i:1} in\n            [2357BD])\n                (( count++\
    \ ))\n                ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=\"$1\"\n    local -i count=0\n    local -i i=0\n    local\
    \ -i len=${#hex_key}\n    local -i j=0\n    local -i is_prime=0\n    local -i\
    \ digit=0\n    local -i is_hex=0\n    local -i is_hex_prime=0\n    local -i hex_prime_count=0\n\
    \    local -a hex_primes=(2 3 5 7 11 13)\n    local -a hex_digits=(0 1 2 3 4 5\
    \ 6 7 8 9 A B C D E F)\n    # Check if the input is a valid hexadecimal number\n\
    \    for ((i=0; i<len; i++)); do\n        is_hex=0\n        for ((j=0; j<16; j++));\
    \ do\n            if [[ ${hex_digits[j]} == ${hex_key:i:1} ]]; then\n        \
    \        is_hex=1\n                break\n            fi\n        done\n     \
    \   if [[ $is_hex -eq 0 ]]; then\n            echo \"Invalid hexadecimal number\"\
    \n            return 1\n        fi\n    done\n    # Check if the input is a valid\
    \ hexadecimal prime number\n    for ((i=0; i<len; i++)); do\n        is_hex_prime=0\n\
    \        for ((j=0; j<6; j++)); do\n            if [[ ${hex_primes[j]} == ${hex_key:i:1}\
    \ ]]; then\n                is_hex_prime=1\n                break\n          \
    \  fi\n        done\n        if [[ $is_hex_prime -eq 1 ]]; then\n            ((hex_prime_count++))\n\
    \        fi\n    done\n    echo \"$hex_prime_count\"\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # your code here\n    echo \"1\"\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local\
    \ -a arr=(2 3 5 7 11 13)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\
    \    local -a hex_arr=(${hex[@]})\n    local -a arr_len=${#arr[@]}\n    local\
    \ -a hex_len=${#hex[@]}\n    local -a input_arr=(${1//[^0-9A-F]/ })\n    local\
    \ -a input_len=${#input_arr[@]}\n    for ((i=0; i<input_len; i++)); do\n     \
    \   for ((j=0; j<hex_len; j++)); do\n            if [[ ${input_arr[i]} == ${hex_arr[j]}\
    \ ]]; then\n                for ((k=0; k<arr_len; k++)); do\n                \
    \    if [[ ${arr[k]} == ${hex_arr[j]} ]]; then\n                        ((count++))\n\
    \                    fi\n                done\n            fi\n        done\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A\
    \ B C D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n   \
    \ for digit in $hex_digits; do\n        if [[ \"$prime_digits\" =~ \"$digit\"\
    \ ]]; then\n            count=$((count + $(echo \"$hex_string\" | grep -o \"$digit\"\
    \ | wc -l)))\n        fi\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i count=0\n    local -i i=0\n    local\
    \ -i len=${#hex_number}\n    local -i j=0\n    local -i is_prime=0\n    local\
    \ -i digit=0\n    local -i prime_numbers=(2 3 5 7 11 13)\n    local -i prime_numbers_len=${#prime_numbers[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        digit=${hex_number:i:1}\n        if\
    \ [[ $digit =~ [0-9] ]]; then\n            digit=$((10#$digit))\n        else\n\
    \            digit=$((10#${digit^^}-55))\n        fi\n        is_prime=0\n   \
    \     for ((j=0; j<prime_numbers_len; j++)); do\n            if [[ $digit -eq\
    \ ${prime_numbers[j]} ]]; then\n                is_prime=1\n                break\n\
    \            fi\n        done\n        if [[ $is_prime -eq 1 ]]; then\n      \
    \      count=$((count+1))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex=$1\n  local primes=0\n  for ((i=0; i<${#hex}; i++)); do\n   \
    \ local digit=${hex:$i:1}\n    if [[ $digit == 2 || $digit == 3 || $digit == 5\
    \ || $digit == 7 || $digit == B || $digit == D ]]; then\n      ((primes++))\n\
    \    fi\n  done\n  echo $primes\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local -i count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        case ${hex_number:$i:1} in\n            2|3|5|7|B|D)\n \
    \               (( count++ ))\n                ;;\n        esac\n    done\n  \
    \  echo \"$count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex_key}; i++)); do\n\
    \t\tlocal digit=${hex_key:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\"\
    \ || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n\t\t\t((count++))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # Write your code here\n  # Use echo to output the result\n  #echo \"1\"\
    \n  echo $1 | sed 's/[^2-7B-D]//g' | wc -c\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To access arguments use $@\n    # To access the first\
    \ argument use $1\n    # To access the second argument use $2\n    # To access\
    \ the nth argument use ${n}\n    echo \"0\"\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed 's/[^2-7B-DF]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F)\n    local prime_digits=(2 3 5 7 B D)\n    local count=0\n    for ((i=0;\
    \ i<${#hex_string}; i++)); do\n        for ((j=0; j<${#prime_digits[@]}; j++));\
    \ do\n            if [[ ${hex_string:$i:1} == ${prime_digits[$j]} ]]; then\n \
    \               ((count++))\n            fi\n        done\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F)\n    local prime_hex_digits=(2 3 5 7 B D)\n    local count=0\n    for\
    \ i in ${hex_digits[@]}; do\n        if [[ $hex_string =~ $i ]]; then\n      \
    \      for j in ${prime_hex_digits[@]}; do\n                if [[ $i == $j ]];\
    \ then\n                    count=$((count+1))\n                fi\n         \
    \   done\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_string=$1\n  local hex_digits=$(echo $hex_string | sed 's/[^0-9A-F]//g')\n\
    \  local primes=0\n  for ((i=0; i<${#hex_digits}; i++)); do\n    local digit=${hex_digits:$i:1}\n\
    \    if [[ $digit == \"2\" || $digit == \"3\" || $digit == \"5\" || $digit ==\
    \ \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n      ((primes++))\n \
    \   fi\n  done\n  echo $primes\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            [2357BDF])\n                ((count++))\n                ;;\n\
    \        esac\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_number=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex_number}; i++));\
    \ do\n\t\tif [[ ${hex_number:$i:1} == \"2\" ]] || [[ ${hex_number:$i:1} == \"\
    3\" ]] || [[ ${hex_number:$i:1} == \"5\" ]] || [[ ${hex_number:$i:1} == \"7\"\
    \ ]] || [[ ${hex_number:$i:1} == \"B\" ]] || [[ ${hex_number:$i:1} == \"D\" ]];\
    \ then\n\t\t\tcount=$((count+1))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\techo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local -i count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        local digit=${hex_number:$i:1}\n        if [[ $digit ==\
    \ \"2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit ==\
    \ \"B\" || $digit == \"D\" ]]; then\n            (( count++ ))\n        fi\n \
    \   done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == [2357BD] ]]; then\n\
    \            ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local -i count=0\n    local -i i=0\n   \
    \ local -i len=${#hex_number}\n    local -i digit\n    local -i is_prime\n   \
    \ local -i j\n    for ((i=0; i<len; i++)); do\n        digit=${hex_number:i:1}\n\
    \        is_prime=1\n        case $digit in\n            2|3|5|7|B|D)\n      \
    \          ((count++))\n                ;;\n            *)\n                for\
    \ ((j=2; j<digit; j++)); do\n                    if ((digit % j == 0)); then\n\
    \                        is_prime=0\n                        break\n         \
    \           fi\n                done\n                ((is_prime == 1)) && ((count++))\n\
    \                ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for ((i=0; i<${#hex}; i++));\
    \ do\n        case ${hex:i:1} in\n            2|3|5|7|[Bb]|[Dd])\n           \
    \     ((count++))\n                ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local primes=0\n    for (( i=0; i<${#hex_key};\
    \ i++ )); do\n        local digit=${hex_key:$i:1}\n        if [[ $digit == \"\
    2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\"\
    \ || $digit == \"D\" ]]; then\n            (( primes++ ))\n        fi\n    done\n\
    \    echo $primes\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_str=$1\n    local count=0\n    local hex_digits=(0 1 2 3 4\
    \ 5 6 7 8 9 A B C D E F)\n    local primes=(2 3 5 7 B D)\n    for i in ${hex_digits[@]};\
    \ do\n        if [[ $hex_str =~ $i ]]; then\n            for j in ${primes[@]};\
    \ do\n                if [[ $i == $j ]]; then\n                    ((count++))\n\
    \                fi\n            done\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ \"Hello world\"\n  echo \"1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local -i count=0\n    local -i i=0\n    local -i\
    \ len=${#hex_key}\n    local -i num=0\n    local -i prime=0\n    local -i j=0\n\
    \    local -i flag=0\n    local -i num_prime=0\n    local -i num_prime_count=0\n\
    \    local -i num_prime_count_max=0\n    local -i num_prime_count_max_index=0\n\
    \    local -i num_prime_count_max_index_prev=0\n    local -i num_prime_count_max_index_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev=0\n    local -i num_prime_count_max_index_prev_prev_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev_prev_prev=0\n    local\
    \ -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev=0\n    local -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i num_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex=$1\n  local count=0\n  for (( i=0; i<${#hex}; i++ )); do\n  \
    \  local digit=\"${hex:$i:1}\"\n    if [[ $digit == 2 || $digit == 3 || $digit\
    \ == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n      (( count++\
    \ ))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | tr -dC '2357BD' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_num=$1\n  local hex_digits=({0..9} {A..F})\n  local prime_hex_digits=(2\
    \ 3 5 7 B D)\n  local count=0\n  for digit in ${hex_digits[@]}; do\n    if [[\
    \ $hex_num =~ $digit ]]; then\n      for prime_digit in ${prime_hex_digits[@]};\
    \ do\n        if [[ $digit == $prime_digit ]]; then\n          ((count++))\n \
    \       fi\n      done\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n  \
    \  hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F)\n    local prime_digits=(2 3 5 7 B D)\n    local prime_count=0\n    for\
    \ digit in ${hex_digits[@]}; do\n        if [[ $hex_string =~ $digit ]]; then\n\
    \            for prime in ${prime_digits[@]}; do\n                if [[ $digit\
    \ == $prime ]]; then\n                    ((prime_count++))\n                fi\n\
    \            done\n        fi\n    done\n    echo $prime_count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local count=0\n    for (( i=0; i<${#hex_number};\
    \ i++ )); do\n        local digit=${hex_number:$i:1}\n        if [[ $digit ==\
    \ \"2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit ==\
    \ \"B\" || $digit == \"D\" ]]; then\n            (( count++ ))\n        fi\n \
    \   done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_string=$1\n  local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F)\n  local prime_digits=(2 3 5 7 B D)\n  local count=0\n  for i in ${hex_digits[@]};\
    \ do\n    if [[ $hex_string =~ $i ]]; then\n      for j in ${prime_digits[@]};\
    \ do\n        if [[ $i == $j ]]; then\n          count=$((count+1))\n        fi\n\
    \      done\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local counter=0\n    for (( i=0; i<${#hex_key};\
    \ i++ )); do\n        local digit=${hex_key:$i:1}\n        if [[ $digit == \"\
    2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\"\
    \ || $digit == \"D\" ]]; then\n            counter=$((counter+1))\n        fi\n\
    \    done\n    echo $counter\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor ((i=0; i<${#hex}; i++)); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\" || $digit\
    \ == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n\
    \t\t\t((count++))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            count=$((count+1))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C D E F\"\
    \n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for digit in\
    \ $hex_digits; do\n        if [[ $hex =~ $digit ]]; then\n            for prime\
    \ in $prime_digits; do\n                if [[ $digit = $prime ]]; then\n     \
    \               ((count++))\n                fi\n            done\n        fi\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A\
    \ B C D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n   \
    \ for digit in $hex_digits; do\n        if [[ $hex_number == *\"$digit\"* ]];\
    \ then\n            if [[ $prime_digits == *\"$digit\"* ]]; then\n           \
    \     count=$((count+1))\n            fi\n        fi\n    done\n    echo \"$count\"\
    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_prime_digits=\"2 3 5 7 B D\"\n    local hex_key_prime_digit\n\
    \    for (( i=0; i<hex_key_len; i++ )); do\n        hex_key_prime_digit=${hex_key:$i:1}\n\
    \        if [[ $hex_key_prime_digits =~ $hex_key_prime_digit ]]; then\n      \
    \      (( hex_key_primes++ ))\n        fi\n    done\n    echo $hex_key_primes\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2-7BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            [2357BD])\n                ((count++))\n                ;;\n\
    \        esac\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            2|3|5|7|B|D) ((count++)) ;;\n        esac\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local -i count=0\n    for (( i=0; i<${#hex_key};\
    \ i++ )); do\n        local digit=${hex_key:$i:1}\n        if [[ $digit =~ [2357BD]\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            2|3|5|7|B|D) ((count++)) ;;\n        esac\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_num=\"$1\"\n    local -i count=0\n    for ((i=0; i<${#hex_num};\
    \ i++)); do\n        local digit=\"${hex_num:$i:1}\"\n        if [[ \"$digit\"\
    \ == \"2\" || \"$digit\" == \"3\" || \"$digit\" == \"5\" || \"$digit\" == \"7\"\
    \ || \"$digit\" == \"B\" || \"$digit\" == \"D\" ]]; then\n            ((count++))\n\
    \        fi\n    done\n    echo \"$count\"\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#1}\n\tlocal -i num=0\n\
    \tlocal -i prime=0\n\tlocal -i prime_count=0\n\tlocal -i prime_num=0\n\tlocal\
    \ -i prime_num_count=0\n\tlocal -i prime_num_len=0\n\tlocal -i prime_num_len_count=0\n\
    \tlocal -i prime_num_len_count_count=0\n\tlocal -i prime_num_len_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count=0\n\tlocal -i prime_num_len_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count=0\n\tlocal -i prime_num_len_count_count_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count_count_count=0\n\t\
    local -i prime_num_len_count_count_count_count_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \tlocal -i prime_num_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \tlocal -i\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\t\
    local prime_digits=(2 3 5 7 B D)\n\tlocal count=0\n\tfor i in $(seq 0 $((${#hex}-1)));\
    \ do\n\t\tfor j in $(seq 0 $((${#prime_digits[@]}-1))); do\n\t\t\tif [[ ${hex:$i:1}\
    \ == ${prime_digits[$j]} ]]; then\n\t\t\t\tcount=$(($count+1))\n\t\t\tfi\n\t\t\
    done\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=\"$1\"\n    local count=0\n    for (( i=0; i<${#hex}; i++ ));\
    \ do\n        local char=${hex:$i:1}\n        if [[ \"$char\" == \"2\" || \"$char\"\
    \ == \"3\" || \"$char\" == \"5\" || \"$char\" == \"7\" || \"$char\" == \"B\" ||\
    \ \"$char\" == \"D\" ]]; then\n            (( count++ ))\n        fi\n    done\n\
    \    echo \"$count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo \"$1\" | tr -d -c \"2357BDEF\" | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A\
    \ B C D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n   \
    \ for digit in $hex_digits; do\n        if [[ $hex_number == *\"$digit\"* ]];\
    \ then\n            if [[ $prime_digits == *\"$digit\"* ]]; then\n           \
    \     ((count++))\n            fi\n        fi\n    done\n    echo \"$count\"\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal hex_digits=(\"0\" \"1\" \"2\" \"3\" \"4\" \"\
    5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n\tlocal prime_digits=(\"\
    2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n\tlocal count=0\n\tfor (( i=0; i<${#hex_num};\
    \ i++ )); do\n\t\tfor (( j=0; j<${#prime_digits[@]}; j++ )); do\n\t\t\tif [[ ${hex_num:$i:1}\
    \ == ${prime_digits[$j]} ]]; then\n\t\t\t\t(( count++ ))\n\t\t\tfi\n\t\tdone\n\
    \tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_string=$1\n\tlocal hex_digits=({0..9} {A..F})\n\tlocal prime_digits=({2..7}\
    \ B D)\n\tlocal count=0\n\tfor ((i=0; i<${#hex_string}; i++)); do\n\t\tfor ((j=0;\
    \ j<${#prime_digits[@]}; j++)); do\n\t\t\tif [[ ${hex_string:$i:1} == ${prime_digits[$j]}\
    \ ]]; then\n\t\t\t\tcount=$((count+1))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local -i counter=0\n    local -i i=0\n \
    \   local -i length=${#hex_number}\n    local -i prime_number=0\n    local -i\
    \ prime_flag=0\n    local -i prime_counter=0\n    local -i prime_array=(2 3 5\
    \ 7 11 13 17)\n    local -i prime_array_length=${#prime_array[@]}\n    local -i\
    \ prime_array_index=0\n    local -i prime_array_element=0\n    local -i hex_number_element=0\n\
    \    local -i hex_number_element_decimal=0\n    local -i hex_number_element_decimal_modulo=0\n\
    \    local -i hex_number_element_decimal_modulo_counter=0\n    local -i hex_number_element_decimal_modulo_counter_flag=0\n\
    \    local -i hex_number_element_decimal_modulo_counter_flag_2=0\n    local -i\
    \ hex_number_element_decimal_modulo_counter_flag_3=0\n    local -i hex_number_element_decimal_modulo_counter_flag_4=0\n\
    \    local -i hex_number_element_decimal_modulo_counter_flag_5=0\n    local -i\
    \ hex_number_element_decimal_modulo_counter_flag_6=0\n    local -i hex_number_element_decimal_modulo_counter_flag_7=0\n\
    \    local -i hex_number_element_decimal_modulo_counter_flag_8=0\n    local -i\
    \ hex_number_element_decimal_modulo_counter_flag_9=0\n    local -i hex_number_element_decimal_modulo_counter_flag_10=0\n\
    \    local -i hex_number_element_decimal_modulo_counter_flag_11=0\n    local -i\
    \ hex_number_element_decimal_modulo_counter_flag_12=0\n    local -i hex_number_element_decimal_modulo_counter_flag_13=0\n\
    \    local -i hex_number\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=$1\n  local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C D E\
    \ F\"\n  local prime_digits=\"2 3 5 7 B D\"\n  local count=0\n  for digit in $hex_digits;\
    \ do\n    if [[ $hex_number =~ $digit ]]; then\n      for prime_digit in $prime_digits;\
    \ do\n        if [[ $digit = $prime_digit ]]; then\n          count=$((count+1))\n\
    \        fi\n      done\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n\
    \tlocal prime_digits=(2 3 5 7 B D)\n\tlocal prime_count=0\n\tfor i in ${hex_digits[@]};\
    \ do\n\t\tif [[ $hex_num =~ $i ]]; then\n\t\t\tfor j in ${prime_digits[@]}; do\n\
    \t\t\t\tif [[ $i = $j ]]; then\n\t\t\t\t\tprime_count=$((prime_count+1))\n\t\t\
    \t\tfi\n\t\t\tdone\n\t\tfi\n\tdone\n\techo $prime_count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal result=0\n\tlocal i=0\n\tlocal len=${#hex_key}\n\
    \tlocal hex_digits=({0..9} {A..F})\n\tlocal primes=(2 3 5 7 B D)\n\tfor ((i=0;\
    \ i<len; i++)); do\n\t\tfor ((j=0; j<${#primes[@]}; j++)); do\n\t\t\tif [[ ${hex_key:i:1}\
    \ == ${primes[j]} ]]; then\n\t\t\t\t((result++))\n\t\t\tfi\n\t\tdone\n\tdone\n\
    \techo $result\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=$1\n  local hex_digits=(\"0\" \"1\" \"2\" \"3\" \"4\"\
    \ \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n  local\
    \ primes=(\"2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n  local result=0\n  for digit\
    \ in ${hex_digits[@]}; do\n    if [[ $hex_number == *$digit* ]]; then\n      for\
    \ prime in ${primes[@]}; do\n        if [[ $digit == $prime ]]; then\n       \
    \   ((result++))\n        fi\n      done\n    fi\n  done\n  echo $result\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local number=$1\n    local count=0\n    local digit\n    for (( i=0;\
    \ i<${#number}; i++ )); do\n        digit=${number:$i:1}\n        if [[ $digit\
    \ == \"2\" || $digit == \"3\" || $digit == \"5\" || $digit == \"7\" || $digit\
    \ == \"B\" || $digit == \"D\" ]]; then\n            (( count++ ))\n        fi\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_number=$1\n  local -i count=0\n  for ((i=0; i<${#hex_number};\
    \ i++)); do\n    local -i digit=${hex_number:i:1}\n    if [[ $digit -eq 2 || $digit\
    \ -eq 3 || $digit -eq 5 || $digit -eq 7 || $digit -eq 11 || $digit -eq 13 ]];\
    \ then\n      ((count++))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d 0-9 | tr -d A-F | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_str=\"$1\"\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B\
    \ C D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_str =~ $digit ]]; then\n      \
    \      if [[ $prime_digits =~ $digit ]]; then\n                count=$((count+1))\n\
    \            fi\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=\"$1\"\n  local -i count=0\n  local -i i=0\n  local -i len=${#hex_key}\n\
    \  local -i digit=0\n  local -i prime=0\n  for ((i=0; i<len; i++)); do\n    digit=${hex_key:i:1}\n\
    \    case $digit in\n      2|3|5|7|B|D)\n        prime=1\n        ;;\n      *)\n\
    \        prime=0\n        ;;\n    esac\n    ((count+=prime))\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F)\n    local prime_digits=(2 3 5 7 B D)\n    local count=0\n    for i in\
    \ ${hex_digits[@]}; do\n        if [[ $hex_string =~ $i ]]; then\n           \
    \ for j in ${prime_digits[@]}; do\n                if [[ $i = $j ]]; then\n  \
    \                  count=$((count+1))\n                fi\n            done\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_key=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex_key}; i++ ));\
    \ do\n\t\tlocal char=${hex_key:$i:1}\n\t\tif [[ $char == 2 || $char == 3 || $char\
    \ == 5 || $char == 7 || $char == B || $char == D ]]; then\n\t\t\t(( count++ ))\n\
    \t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local count=0\n  for (( i=0; i<${#hex_key}; i++ ));\
    \ do\n    local char=${hex_key:$i:1}\n    case $char in\n      2|3|5|7|B|D)\n\
    \        ((count++))\n        ;;\n    esac\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2-7B-D]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | grep -o '[2-7B-DF]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    local digit=${hex:$i:1}\n\t\tif [[ $digit == \"2\" || $digit == \"3\" || $digit\
    \ == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\" ]]; then\n\
    \t\t\t(( count++ ))\n\t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local count=0\n    local primes=\"2357BD\"\n  \
    \  for (( i=0; i<${#hex_key}; i++ )); do\n        if [[ $primes =~ ${hex_key:$i:1}\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d [:alnum:] | wc -c\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  echo $1 | tr -d [0-9] | tr -d [A-F] | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local char=${hex:$i:1}\n        if [[ $char == \"2\" || $char == \"3\"\
    \ || $char == \"5\" || $char == \"7\" || $char == \"B\" || $char == \"D\" ]];\
    \ then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local -i count=0\n  for (( i=0; i<${#1}; i++ )); do\n    case ${1:i:1}\
    \ in\n      [2357BD]) (( count++ ));;\n    esac\n  done\n  echo $count\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_num=\"$1\"\n  local -i num_primes=0\n  local -i i=0\n  local\
    \ -i len=${#hex_num}\n  local -i digit\n  local -i is_prime\n  local -i j\n  for\
    \ ((i=0; i<len; i++)); do\n    digit=${hex_num:i:1}\n    case \"$digit\" in\n\
    \      0|1|4|6|8|9|A|C|E|F)\n        is_prime=0\n        ;;\n      2|3|5|7|B|D)\n\
    \        is_prime=1\n        ;;\n      *)\n        echo \"Error: invalid hex digit\
    \ '$digit'\" >&2\n        exit 1\n        ;;\n    esac\n    if ((is_prime)); then\n\
    \      ((num_primes++))\n    fi\n  done\n  echo \"$num_primes\"\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == [2357BD] ]]; then\n\
    \            (( count++ ))\n        fi\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex_num}; i++ ));\
    \ do\n\t\tif [[ \"${hex_num:$i:1}\" =~ [2357BD] ]]; then\n\t\t\t(( count++ ))\n\
    \t\tfi\n\tdone\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex=$1\n  local count=0\n  for (( i=0; i<${#hex}; i++ )); do\n  \
    \  local char=${hex:$i:1}\n    if [[ $char == [2357BD] ]]; then\n      (( count++\
    \ ))\n    fi\n  done\n  echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d [:digit:] | tr -d [:lower:] | grep -o '[2357BD]' | wc\
    \ -l\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d [0-9] | tr -d [A-F] | wc -c\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local count=0\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_string =~ $digit ]]; then\n   \
    \         for prime in $prime_digits; do\n                if [[ $digit == $prime\
    \ ]]; then\n                    ((count++))\n                fi\n            done\n\
    \        fi\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To access arguments use $@\n    # To access the first\
    \ argument use $1 also\n    # echo $1\n    # echo $@\n    # echo $#\n    # echo\
    \ $0\n    # echo $*\n    # echo $?\n    # echo $!\n    # echo $$\n    # echo $-\n\
    \    # echo $_\n    # echo $BASH\n    # echo $BASH_ARGC\n    # echo $BASH_ARGV\n\
    \    # echo $BASH_COMMAND\n    # echo $BASH_LINENO\n    # echo $BASH_SOURCE\n\
    \    # echo $BASH_SUBSHELL\n    # echo $BASH_VERSINFO\n    # echo $BASH_VERSION\n\
    \    # echo $COLUMNS\n    # echo $COMP_CWORD\n    # echo $COMP_LINE\n    # echo\
    \ $COMP_POINT\n    # echo $COMP_WORDBREAKS\n    # echo $COMP_WORDS\n    # echo\
    \ $DIRSTACK\n    # echo $EUID\n    # echo $FUNCNAME\n    # echo $GROUPS\n    #\
    \ echo $HISTFILE\n    # echo $HISTFILESIZE\n    # echo $HISTSIZE\n    # echo $HOSTNAME\n\
    \    # echo $HOSTTYPE\n    # echo $IFS\n    # echo $IGNOREEOF\n    # echo $LC_ALL\n\
    \    # echo $LC_COLLATE\n    # echo $LC_CTYPE\n    # echo $LC_MESSAGES\n    #\
    \ echo $LC_NUMERIC\n    # echo $LINENO\n    # echo $LINES\n    # echo $MACHTYPE\n\
    \    # echo $MAILCHECK\n    # echo $OLDPWD\n    # echo $OPTERR\n    # echo $OPTIND\n\
    \    # echo $OSTYPE\n    # echo $PATH\n    # echo $PIPESTATUS\n    # echo $POSIXLY_CORRECT\n\
    \    # echo $PPID\n    # echo $PROMPT_COMMAND\n    # echo $PS1\n    # echo $PS\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpcbryypc0.sh: line 84: syntax error near unexpected token `}''\n/tmp/tmpcbryypc0.sh:
    line 84: `}''\n"'
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local count=0\n    for (( i=0; i<${#hex_key}; i++\
    \ )); do\n        case ${hex_key:$i:1} in\n            2|3|5|7|B|D)\n        \
    \        (( count++ ))\n                ;;\n        esac\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_num=$1\n\tlocal primes=0\n\tlocal i=0\n\tlocal hex_digits=({0..9}\
    \ {A..F})\n\tlocal hex_primes=(2 3 5 7 B D)\n\tfor i in $(seq 0 $((${#hex_num}-1)));\
    \ do\n\t\tfor j in $(seq 0 $((${#hex_digits[@]}-1))); do\n\t\t\tif [[ ${hex_num:$i:1}\
    \ == ${hex_digits[$j]} ]]; then\n\t\t\t\tfor k in $(seq 0 $((${#hex_primes[@]}-1)));\
    \ do\n\t\t\t\t\tif [[ ${hex_digits[$j]} == ${hex_primes[$k]} ]]; then\n\t\t\t\t\
    \t\tprimes=$(($primes+1))\n\t\t\t\t\tfi\n\t\t\t\tdone\n\t\t\tfi\n\t\tdone\n\t\
    done\n\techo $primes\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for (( i=0; i<${#hex}; i++ )); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            (( count++ ))\n        fi\n    done\n    echo $count\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d '0-9' | tr -d 'A-F' | wc -c\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal -i i=0\n\tlocal -i count=0\n\tlocal -i len=${#1}\n\tlocal -i num=0\n\
    \tlocal -i num_arr=()\n\tlocal -i prime_arr=(2 3 5 7 11 13)\n\tlocal -i prime_len=${#prime_arr[@]}\n\
    \tlocal -i is_prime=0\n\tlocal -i is_hex=0\n\tlocal -i is_dec=0\n\tlocal -i is_oct=0\n\
    \tlocal -i is_bin=0\n\tlocal -i is_num=0\n\tlocal -i is_alpha=0\n\tlocal -i is_alpha_upper=0\n\
    \tlocal -i is_alpha_lower=0\n\tlocal -i is_alpha_num=0\n\tlocal -i is_alpha_num_upper=0\n\
    \tlocal -i is_alpha_num_lower=0\n\tlocal -i is_space=0\n\tlocal -i is_blank=0\n\
    \tlocal -i is_cntrl=0\n\tlocal -i is_graph=0\n\tlocal -i is_print=0\n\tlocal -i\
    \ is_punct=0\n\tlocal -i is_xdigit=0\n\tlocal -i is_digit=0\n\tlocal -i is_alnum=0\n\
    \tlocal -i is_upper=0\n\tlocal -i is_lower=0\n\tlocal -i is_ascii=0\n\tlocal -i\
    \ is_char=0\n\tlocal -i is_int=0\n\tlocal -i is_float=0\n\tlocal -i is_null=0\n\
    \tlocal -i is_null_or_empty=0\n\tlocal -i is_empty=0\n\tlocal -i is_not_empty=0\n\
    \tlocal -i is_not_null=0\n\tlocal -i is_not_null_or_empty=0\n\tlocal -i is_not_empty=0\n\
    \tlocal -i is_not_null_or_empty=0\n\tlocal -i is_not_null_or_empty=0\n\tlocal\
    \ -i is_not_null_or_empty=0\n\tlocal -i is_not_\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_key=$1\n    local hex_key_len=${#hex_key}\n    local hex_key_primes=0\n\
    \    local hex_key_primes_list=\"2 3 5 7 B D\"\n    local i=0\n    local j=0\n\
    \    local hex_key_primes_list_len=${#hex_key_primes_list}\n    while [ $i -lt\
    \ $hex_key_len ]; do\n        j=0\n        while [ $j -lt $hex_key_primes_list_len\
    \ ]; do\n            if [ \"${hex_key:$i:1}\" == \"${hex_key_primes_list:$j:1}\"\
    \ ]; then\n                ((hex_key_primes++))\n            fi\n            ((j++))\n\
    \        done\n        ((i++))\n    done\n    echo $hex_key_primes\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex=$1\n  local primes=0\n  for ((i=0; i<${#hex}; i++)); do\n   \
    \ local digit=${hex:$i:1}\n    if [[ $digit == 2 || $digit == 3 || $digit == 5\
    \ || $digit == 7 || $digit == B || $digit == D ]]; then\n      ((primes++))\n\
    \    fi\n  done\n  echo $primes\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world!\"\n    echo \"1\"\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  local hex_key=$1\n  local hex_key_length=${#hex_key}\n  local primes_count=0\n\
    \  local i=0\n  local current_char\n  while [ $i -lt $hex_key_length ]; do\n \
    \   current_char=${hex_key:$i:1}\n    if [ $current_char = \"2\" ] || [ $current_char\
    \ = \"3\" ] || [ $current_char = \"5\" ] || [ $current_char = \"7\" ] || [ $current_char\
    \ = \"B\" ] || [ $current_char = \"D\" ]; then\n      primes_count=$((primes_count+1))\n\
    \    fi\n    i=$((i+1))\n  done\n  echo $primes_count\n}\n\ncandidate() {\n  \
    \  hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex=$1\n\tlocal count=0\n\tfor (( i=0; i<${#hex}; i++ )); do\n\t\t\
    if [[ \"${hex:$i:1}\" =~ ^[2357BD]$ ]]; then\n\t\t\t(( count++ ))\n\t\tfi\n\t\
    done\n\techo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == \"2\" || $digit == \"\
    3\" || $digit == \"5\" || $digit == \"7\" || $digit == \"B\" || $digit == \"D\"\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_string=$1\n    local hex_digits=\"0 1 2 3 4 5 6 7 8 9 A B C\
    \ D E F\"\n    local prime_digits=\"2 3 5 7 B D\"\n    local counter=0\n    for\
    \ digit in $hex_digits; do\n        if [[ $hex_string =~ $digit ]]; then\n   \
    \         for prime in $prime_digits; do\n                if [[ $digit = $prime\
    \ ]]; then\n                    ((counter++))\n                fi\n          \
    \  done\n        fi\n    done\n    echo $counter\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=\"$1\"\n    local hex_digits=\"0123456789ABCDEF\"\n\
    \    local hex_primes=\"2357BDF\"\n    local hex_prime_count=0\n    for ((i=0;\
    \ i<${#hex_number}; i++)); do\n        for ((j=0; j<${#hex_primes}; j++)); do\n\
    \            if [[ ${hex_number:$i:1} == ${hex_primes:$j:1} ]]; then\n       \
    \         ((hex_prime_count++))\n            fi\n        done\n    done\n    echo\
    \ \"$hex_prime_count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local -i count=0\n    for (( i=0; i<${#hex}; i++ ));\
    \ do\n        case ${hex:$i:1} in\n            [2357BD])\n                (( count++\
    \ ))\n                ;;\n        esac\n    done\n    echo $count\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex=$1\n    local count=0\n    for ((i=0; i<${#hex}; i++)); do\n\
    \        local digit=${hex:$i:1}\n        if [[ $digit == 2 || $digit == 3 ||\
    \ $digit == 5 || $digit == 7 || $digit == B || $digit == D ]]; then\n        \
    \    ((count++))\n        fi\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | sed 's/[^2-7B-DF]//g' | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # To debug: echo \"Debug messages...\" >&2\n    echo \"\
    1\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            [2357BD])\n                ((count++))\n                ;;\n\
    \        esac\n    done\n    echo $count\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n\tlocal hex_number=\"$1\"\n\tlocal hex_digits_primes=0\n\tlocal hex_digits_primes_array=(\"\
    2\" \"3\" \"5\" \"7\" \"B\" \"D\")\n\tlocal hex_digits_primes_array_length=${#hex_digits_primes_array[@]}\n\
    \tlocal hex_digits_primes_array_index=0\n\tlocal hex_digits_primes_array_element=\"\
    \"\n\tlocal hex_digits_primes_array_element_length=0\n\tlocal hex_digits_primes_array_element_index=0\n\
    \tlocal hex_digits_primes_array_element_char=\"\"\n\tlocal hex_digits_primes_array_element_char_index=0\n\
    \tlocal hex_digits_primes_array_element_char_length=0\n\tlocal hex_digits_primes_array_element_char_array=()\n\
    \tlocal hex_digits_primes_array_element_char_array_length=0\n\tlocal hex_digits_primes_array_element_char_array_index=0\n\
    \tlocal hex_digits_primes_array_element_char_array_element=\"\"\n\tlocal hex_digits_primes_array_element_char_array_element_length=0\n\
    \tlocal hex_digits_primes_array_element_char_array_element_index=0\n\tlocal hex_digits_primes_array_element_char_array_element_char=\"\
    \"\n\tlocal hex_digits_primes_array_element_char_array_element_char_index=0\n\t\
    local hex_digits_primes_array_element_char_array_element_char_length=0\n\tlocal\
    \ hex_digits_primes_array_element_char_array_element_char_array=()\n\tlocal hex_digits_primes_array_element_char_array_element_char_array_length=0\n\
    \tlocal hex_digits_primes_array_element_char_array_element_char_array_index=0\n\
    \tlocal hex_digits_primes_array_element_char\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local hex_number=$1\n    local number_of_primes=0\n    local hex_digits=\"\
    0 1 2 3 4 5 6 7 8 9 A B C D E F\"\n    local primes=\"2 3 5 7 B D\"\n    for digit\
    \ in $hex_digits; do\n        if [[ $hex_number == *$digit* ]]; then\n       \
    \     if [[ $primes == *$digit* ]]; then\n                ((number_of_primes++))\n\
    \            fi\n        fi\n    done\n    echo $number_of_primes\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n  # Write your code here\n  # Use echo to output the result, e.g.\n  # echo\
    \ \"1\"\n  echo \"0\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n        case ${1:i:1}\
    \ in\n            2|3|5|7|B|D) ((count++)) ;;\n        esac\n    done\n    echo\
    \ \"$count\"\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 0
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo \"$1\" | grep -o '[2357BD]' | wc -l\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357410
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key\
    \ \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key\
    \ \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\nhex_key()\
    \ {\n    echo $1 | tr -d 0-9 | tr -d A-F | wc -c\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357410
