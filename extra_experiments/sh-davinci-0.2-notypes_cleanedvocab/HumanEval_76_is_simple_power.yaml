name: HumanEval_76_is_simple_power
language: sh
prompt: "#!/bin/bash\n# Your task is to write a function that returns true if a number\
  \ x is a simple\n# power of n and false in other cases.\n# x is a simple power of\
  \ n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# true\n\
  # >>> $(is_simple_power \"2\" \"2\")\n# true\n# >>> $(is_simple_power \"8\" \"2\"\
  )\n# true\n# >>> $(is_simple_power \"3\" \"2\")\n# false\n# >>> $(is_simple_power\
  \ \"3\" \"1\")\n# false\n# >>> $(is_simple_power \"5\" \"3\")\n# false\nis_simple_power()\
  \ {\n"
tests: "}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
  16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
  \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n \
  \   [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\"\
  ) = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
  \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\
  \nrun_test"
completions: ["  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\"\
    \ | bc)\n  if [ \"$result\" == \"$n\" ]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n \
    \   elif [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif [ $1 -gt $2 ]; then\n\
    \        if [ $(($1 % $2)) -eq 0 ]; then\n            is_simple_power $(($1 /\
    \ $2)) $2\n        else\n            echo \"false\"\n        fi\n    else\n  \
    \      echo \"false\"\n    fi", "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n\
    \  elif [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n \
    \   if [ $(( $1 % $2 )) -eq 0 ]; then\n      is_simple_power $(( $1 / $2 )) $2\n\
    \    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", " \
    \   local x=$1\n    local n=$2\n    local i=1\n    while [ $((n**i)) -le $x ];\
    \ do\n        if [ $((n**i)) -eq $x ]; then\n            echo true\n         \
    \   return\n        fi\n        i=$((i+1))\n    done\n    echo false", "  local\
    \ x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [[\
    \ $(echo \"$result == $n\" | bc) -eq 1 ]]; then\n    echo \"true\"\n  else\n \
    \   echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"scale=0; $x/$n\" | bc)\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null;\
    \ then\n    if [ \"$result\" -eq \"$n\" ]; then\n      echo \"true\"\n    else\n\
    \      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  if [[ $(echo \"$result\
    \ == $n\" | bc -l) -eq 1 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n\
    \  if [[ $result == $(echo \"$result\" | cut -d \".\" -f 1) ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n \
    \ local result=$(echo \"$x/$n\" | bc -l)\n  if [[ $result == $(echo \"$result\"\
    \ | cut -d. -f1) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  local x=$1\n  local n=$2\n  local result=$(echo \"$x / $n\" | bc)\n  if [ \"\
    $result\" -eq \"$result\" ] 2>/dev/null; then\n    if [ \"$result\" -eq \"1\"\
    \ ]; then\n      echo \"true\"\n    else\n      is_simple_power \"$result\" \"\
    $n\"\n    fi\n  else\n    echo \"false\"\n  fi", "  if [[ $1 -eq 1 ]]; then\n\
    \    echo \"true\"\n  elif [[ $1 -eq $2 ]]; then\n    echo \"true\"\n  elif [[\
    \ $1 -gt $2 ]]; then\n    if [[ $(( $1 % $2 )) -eq 0 ]]; then\n      is_simple_power\
    \ $(( $1 / $2 )) $2\n    else\n      echo \"false\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [[ $result == $(echo \"scale=0; $n^$result\" | bc) ]]; then\n\
    \    echo true\n  else\n    echo false\n  fi", "  local x=$1\n  local n=$2\n \
    \ local result=$(echo \"$x/$n\" | bc -l)\n  local int_result=$(echo \"$result\"\
    \ | cut -d '.' -f 1)\n  if [ \"$result\" = \"$int_result\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local\
    \ result=$(echo \"$x/$n\" | bc -l)\n  local int_result=$(echo \"$result\" | cut\
    \ -d '.' -f 1)\n  if [ \"$result\" = \"$int_result\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"scale=0; $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0; $n**$result\"\
    \ | bc) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local\
    \ x=$1\n  local n=$2\n  if [[ $x -eq 1 ]]; then\n    echo true\n  elif [[ $x -eq\
    \ $n ]]; then\n    echo true\n  elif [[ $x -gt $n ]]; then\n    local res=$(echo\
    \ \"$x/$n\" | bc -l)\n    if [[ $res -eq $(echo \"$res\" | bc -l | cut -d'.' -f1)\
    \ ]]; then\n      is_simple_power $res $n\n    else\n      echo false\n    fi\n\
    \  else\n    echo false\n  fi", "    local x=$1\n    local n=$2\n    local result=$(echo\
    \ \"scale=0; $x/$n\" | bc)\n    if [ \"$result\" == \"$n\" ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    if [[ $1 -eq $2 ]];\
    \ then\n        echo true\n    elif [[ $1 -eq 1 ]]; then\n        echo false\n\
    \    elif [[ $1 -eq 0 ]]; then\n        echo false\n    elif [[ $1 -lt $2 ]];\
    \ then\n        echo false\n    elif [[ $1%$2 -eq 0 ]]; then\n        is_simple_power\
    \ $(( $1/$2 )) $2\n    else\n        echo false\n    fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n  if\
    \ [[ $result =~ ^[0-9]+$ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "    if [[ $1 -eq 1 ]]; then\n        echo true\n    elif [[ $1 -eq $2\
    \ ]]; then\n        echo true\n    elif [[ $1 -gt $2 ]]; then\n        if [[ $1%$2\
    \ -eq 0 ]]; then\n            is_simple_power $(( $1/$2 )) $2\n        else\n\
    \            echo false\n        fi\n    else\n        echo false\n    fi", " \
    \ local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print $1**(log($1)/log($2))}')\n\
    \  if [ \"$result\" == \"$x\" ]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [[ $result -eq $(echo \"scale=0; $n^$result\" | bc) ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n\
    \    local n=$2\n    local result=$(echo \"$x $n\" | awk '{print $1**(1/$2)}')\n\
    \    if [[ $result =~ ^[0-9]+$ ]]; then\n        echo true\n    else\n       \
    \ echo false\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x\
    \ / $n\" | bc)\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n \
    \ if [ $x -eq $n ]; then\n    echo \"true\"\n  elif [ $x -eq 1 ]; then\n    echo\
    \ \"false\"\n  elif [ $x -gt $n ]; then\n    local result=$(($x % $n))\n    if\
    \ [ $result -eq 0 ]; then\n      is_simple_power $(($x / $n)) $n\n    else\n \
    \     echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", "  if [ $1 -eq\
    \ 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n  elif\
    \ [ $1 -eq $(($2 * $2)) ]; then\n    echo true\n  else\n    echo false\n  fi",
  "  local x=$1\n  local n=$2\n  local result=$(bc <<< \"$x == $n ^ (l($x)/l($n))\"\
    )\n  if [ \"$result\" -eq 1 ]; then\n    echo true\n  else\n    echo false\n \
    \ fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x / $n\"\
    \ | bc)\n  if [ $result -eq $n ]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n    if [[ $result -eq $(echo \"scale=0; $n**$result\" | bc) ]];\
    \ then\n        echo true\n    else\n        echo false\n    fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int=$(echo \"\
    $result\" | cut -d \".\" -f 1)\n  local power=$(echo \"$n^$int\" | bc -l)\n  if\
    \ [ \"$x\" -eq \"$power\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  if [[ $1 == 1 ]]; then\n    echo true\n  elif [[ $1 == $2 ]]; then\n\
    \    echo true\n  elif [[ $1%$2 == 0 ]]; then\n    is_simple_power $(($1/$2))\
    \ $2\n  else\n    echo false\n  fi", "    local x=$1\n    local n=$2\n    local\
    \ i=0\n    local result=1\n    while [ $result -lt $x ]\n    do\n        result=$(($n**$i))\n\
    \        if [ $result -eq $x ]\n        then\n            echo true\n        \
    \    return\n        fi\n        i=$(($i+1))\n    done\n    echo false", "   \
    \ if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $2 ]; then\n   \
    \     echo true\n    elif [ $1 -gt $2 ]; then\n        if [ $(( $1 % $2 )) -eq\
    \ 0 ]; then\n            is_simple_power $(( $1 / $2 )) $2\n        else\n   \
    \         echo false\n        fi\n    else\n        echo false\n    fi", "  if\
    \ [[ $1 == 1 ]]; then\n    echo true\n  elif [[ $1 == $2 ]]; then\n    echo true\n\
    \  elif [[ $1%$2 == 0 ]]; then\n    is_simple_power $(( $1/$2 )) $2\n  else\n\
    \    echo false\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"\
    $x $n\" | awk '{print log($1)/log($2)}')\n  if [ \"$(echo \"$result\" | cut -d'.'\
    \ -f2)\" == \"0\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  local x=$1\n  local n=$2\n  if [[ $x -eq $n ]]; then\n    echo true\n  elif [[\
    \ $x -gt $n ]]; then\n    local res=$(echo \"$x/$n\" | bc -l)\n    if [[ $res\
    \ -eq $(echo \"$res\" | cut -d. -f1) ]]; then\n      is_simple_power $res $n\n\
    \    else\n      echo false\n    fi\n  else\n    echo false\n  fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(bc <<< \"$x == $n ^ ($x / $n)\")\n  if [ \"$result\"\
    \ -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if [\
    \ $1 -eq 1 ]; then\n    echo true\n  elif [ $1 -eq $2 ]; then\n    echo true\n\
    \  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0 ]; then\n      is_simple_power\
    \ $(( $1 / $2 )) $2\n    else\n      echo false\n    fi\n  else\n    echo false\n\
    \  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x / $n\" | bc)\n\
    \  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    echo \"true\"\n \
    \ else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  if [ $x -eq\
    \ $n ]; then\n    echo true\n  elif [ $x -lt $n ]; then\n    echo false\n  else\n\
    \    is_simple_power $(($x/$n)) $n\n  fi", '    echo "$1" | grep -E "^$2\^[0-9]+$"
    > /dev/null', "  if [[ $1 == 1 ]]; then\n    echo true\n  elif [[ $1 == $2 ]];\
    \ then\n    echo true\n  elif [[ $1%$2 == 0 ]]; then\n    is_simple_power $((\
    \ $1/$2 )) $2\n  else\n    echo false\n  fi", "  local x=$1\n  local n=$2\n  local\
    \ res=$(echo \"$x/$n\" | bc -l)\n  local res_int=$(echo \"$res\" | cut -d '.'\
    \ -f 1)\n  local res_dec=$(echo \"$res\" | cut -d '.' -f 2)\n  if [[ \"$res_dec\"\
    \ == \"0\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \   if [ $1 -eq 1 ]; then\n        echo true\n    elif [ $1 -eq $(($2 ** $(echo\
    \ \"l($1)/l($2)\" | bc -l))) ]; then\n        echo true\n    else\n        echo\
    \ false\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0; $n^$result\" | bc) ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int_result=$(echo \"\
    $result\" | awk '{printf(\"%d\\n\",$1 + 0.5)}')\n  if [ \"$result\" == \"$int_result\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    if [[ $1\
    \ -eq 1 ]]; then\n        echo \"true\"\n    elif [[ $1 -eq $2 ]]; then\n    \
    \    echo \"true\"\n    elif [[ $1 -gt $2 ]]; then\n        is_simple_power $((\
    \ $1 / $2 )) $2\n    else\n        echo \"false\"\n    fi", "    if [ $1 -eq 1\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq $2 ]; then\n        echo \"\
    true\"\n    elif [ $1 -gt $2 ]; then\n        if [ $(( $1 % $2 )) -eq 0 ]; then\n\
    \            is_simple_power $(( $1 / $2 )) $2\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        echo \"false\"\n    fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
    \  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" |\
    \ bc -l)\n  local int=$(echo \"$result/1\" | bc -l)\n  if [[ $result == $int ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n\
    \    local n=$2\n    local result=$(echo \"scale=0; $x/$n\" | bc)\n    if [ $result\
    \ -eq $(echo \"scale=0; $n^$result\" | bc) ]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi", "  local x=$1\n  local n=$2\n  local\
    \ result=$(bc <<< \"scale=0; $x/$n\")\n  if [ \"$result\" -eq \"$n\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    if [[ $1 -eq 1 ]];\
    \ then\n        echo true\n    elif [[ $1 -eq $2 ]]; then\n        echo true\n\
    \    elif [[ $1 -gt $2 ]]; then\n        if [[ $1%$2 -eq 0 ]]; then\n        \
    \    is_simple_power $(( $1/$2 )) $2\n        else\n            echo false\n \
    \       fi\n    else\n        echo false\n    fi", "    if (( $1 == 1 )); then\n\
    \        echo \"true\"\n    elif (( $1 % $2 == 0 )); then\n        is_simple_power\
    \ $(( $1 / $2 )) $2\n    else\n        echo \"false\"\n    fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  if [[ $result == $(echo\
    \ \"$result\" | bc -l) ]]; then\n    echo true\n  else\n    echo false\n  fi",
  "  local x=$1\n  local n=$2\n  local result=$(echo \"$x / $n\" | bc)\n  if [ \"\
    $result\" -eq \"$result\" ] 2>/dev/null; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n    local result=$(echo\
    \ \"$x $n\" | awk '{print $1**(log($1)/log($2))}')\n    if [[ $result -eq $x ]];\
    \ then\n        echo true\n    else\n        echo false\n    fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ \"$result\"\
    \ -eq \"$result\" ] 2>/dev/null; then\n    if [ \"$result\" -eq \"$n\" ]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi", "    if [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif\
    \ [ $1 -lt $2 ]; then\n        echo \"false\"\n    else\n        is_simple_power\
    \ $(($1/$2)) $2\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"\
    $x / $n\" | bc)\n  if [[ $result -eq 1 ]]; then\n    echo true\n  elif [[ $result\
    \ -eq $n ]]; then\n    echo true\n  else\n    echo false\n  fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
    \  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo true\n  else\n    echo false\n\
    \  fi", "    if [[ $1 -eq 1 ]]; then\n        echo true\n    elif [[ $1 -eq $2\
    \ ]]; then\n        echo true\n    elif [[ $1 -gt $2 ]]; then\n        if [[ $((\
    \ $1 % $2 )) -eq 0 ]]; then\n            is_simple_power $(( $1 / $2 )) $2\n \
    \       else\n            echo false\n        fi\n    else\n        echo false\n\
    \    fi", "  local x=$1\n  local n=$2\n  if [ $n -eq 1 ]; then\n    if [ $x -eq\
    \ 1 ]; then\n      echo true\n    else\n      echo false\n    fi\n  elif [ $n\
    \ -eq 0 ]; then\n    if [ $x -eq 0 ]; then\n      echo true\n    else\n      echo\
    \ false\n    fi\n  else\n    local i=1\n    local res=1\n    while [ $res -lt\
    \ $x ]; do\n      res=$(( $n ** $i ))\n      if [ $res -eq $x ]; then\n      \
    \  echo true\n        return\n      fi\n      i=$(( $i + 1 ))\n    done\n    echo\
    \ false\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" |\
    \ awk '{print $1**(log($1)/log($2))}')\n  if [ \"$result\" -eq \"$x\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  if [[ $result == *.* ]]; then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi", "  local x=$1\n  local\
    \ n=$2\n  local res=$(echo \"$x / $n\" | bc)\n  if [ \"$res\" -eq \"$res\" ] 2>/dev/null;\
    \ then\n    if [ \"$res\" -eq \"1\" ]; then\n      echo \"true\"\n    else\n \
    \     is_simple_power \"$res\" \"$n\"\n    fi\n  else\n    echo \"false\"\n  fi",
  "  local x=$1\n  local n=$2\n  if [[ $x -eq 1 ]]; then\n    echo true\n  elif [[\
    \ $x -eq $n ]]; then\n    echo true\n  elif [[ $x -gt $n ]]; then\n    local res=$(bc\
    \ <<< \"$x % $n\")\n    if [[ $res -eq 0 ]]; then\n      is_simple_power $(bc\
    \ <<< \"$x / $n\") $n\n    else\n      echo false\n    fi\n  else\n    echo false\n\
    \  fi", "  if [ \"$1\" -eq \"$(bc <<< \"scale=0; $2^$(bc <<< \"scale=0; l($1)/l($2)\"\
    )\")\" ]; then\n    echo true\n  else\n    echo false\n  fi", "  if [ \"$1\" -eq\
    \ \"1\" ] && [ \"$2\" -eq \"1\" ]; then\n    echo \"true\"\n  elif [ \"$1\" -eq\
    \ \"$2\" ]; then\n    echo \"true\"\n  elif [ \"$1\" -eq \"$(($2**2))\" ]; then\n\
    \    echo \"true\"\n  elif [ \"$1\" -eq \"$(($2**3))\" ]; then\n    echo \"true\"\
    \n  elif [ \"$1\" -eq \"$(($2**4))\" ]; then\n    echo \"true\"\n  elif [ \"$1\"\
    \ -eq \"$(($2**5))\" ]; then\n    echo \"true\"\n  elif [ \"$1\" -eq \"$(($2**6))\"\
    \ ]; then\n    echo \"true\"\n  elif [ \"$1\" -eq \"$(($2**7))\" ]; then\n   \
    \ echo \"true\"\n  elif [ \"$1\" -eq \"$(($2**8))\" ]; then\n    echo \"true\"\
    \n  elif [ \"$1\" -eq \"$(($2**9))\" ]; then\n    echo \"true\"\n  elif [ \"$1\"\
    \ -eq \"$(($2**10))\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "  local x=$1\n  local n=$2\n  if (( x == n ** (x/n) )); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n\
    \    local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n    if [[\
    \ $result == *.* ]]; then\n        echo \"false\"\n    else\n        echo \"true\"\
    \n    fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"$x/$n\"\
    \ | bc -l)\n    local int=$(echo \"$result\" | cut -d \".\" -f 1)\n    local float=$(echo\
    \ \"$result\" | cut -d \".\" -f 2)\n    if [[ \"$float\" == \"0\" ]]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi", "    if [[ $1\
    \ == 1 ]]; then\n        echo true\n    elif [[ $1 == $2 ]]; then\n        echo\
    \ true\n    elif [[ $1%$2 == 0 ]]; then\n        is_simple_power $(($1/$2)) $2\n\
    \    else\n        echo false\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"scale=0; $x / $n\" | bc)\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null;\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n\
    \    local n=$2\n    local result=$(bc <<< \"$x == $n ^ ($x / $n)\")\n    if [[\
    \ $result -eq 1 ]]; then\n        echo true\n    else\n        echo false\n  \
    \  fi", "    if [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif [ $1 -eq\
    \ $(( $2 * $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq $(( $2 * $2\
    \ * $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq $(( $2 * $2 * $2 *\
    \ $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq $(( $2 * $2 * $2 * $2\
    \ * $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq $(( $2 * $2 * $2 *\
    \ $2 * $2 * $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq $(( $2 * $2\
    \ * $2 * $2 * $2 * $2 * $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq\
    \ $(( $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 )) ]; then\n        echo \"true\"\n\
    \    elif [ $1 -eq $(( $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 )) ]; then\n\
    \        echo \"true\"\n    elif [ $1 -eq $(( $2 * $2 * $2 * $2 * $2 * $2 * $2\
    \ * $2 * $2 * $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq $(( $2 *\
    \ $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 )) ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq $(( $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2\
    \ * $2 * $2 )) ]; then\n        echo \"true\"\n    elif [ $1 -eq $(( $2 * $2 *\
    \ $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 * $2 )) ]; then\n       ", " \
    \ local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local\
    \ int=$(echo \"$result % 1\" | bc -l)\n  if [ $int -eq 0 ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n \
    \   local result=$(echo \"scale=0; $x / $n\" | bc)\n    if [ \"$result\" -eq \"\
    $result\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  if [[ $result == *.* ]]; then\n    echo \"false\"\n  else\n    echo\
    \ \"true\"\n  fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"\
    $x/$n\" | bc -l)\n    if [[ $result == $(echo \"$result\" | bc -l | cut -d. -f1)\
    \ ]]; then\n        echo true\n    else\n        echo false\n    fi", "    local\
    \ x=$1\n    local n=$2\n    local result=$(echo \"scale=0; $x / $n\" | bc)\n \
    \   if [ \"$result\" == \"$n\" ]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"scale=0; $x/$n\" | bc)\n  if [ \"$result\" -eq \"$n\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local\
    \ result=$(bc <<< \"$x == $n^(($x/$n))\")\n  if [[ $result -eq 1 ]]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi", "    # Write your code here\n\
    \    echo \"true\"", "    local x=$1\n    local n=$2\n    local result=$(echo\
    \ \"$x $n\" | awk '{print log($1)/log($2)}')\n    if [[ $result =~ ^[0-9]+$ ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  if\
    \ [ \"$1\" -eq \"1\" ]; then\n    echo \"true\"\n  elif [ \"$1\" -eq \"$2\" ];\
    \ then\n    echo \"true\"\n  elif [ \"$1\" -gt \"$2\" ]; then\n    if [ \"$(($1\
    \ % $2))\" -eq \"0\" ]; then\n      is_simple_power \"$(($1 / $2))\" \"$2\"\n\
    \    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", " \
    \ local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n \
    \ if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  if [[ $1 -eq 1 ]]; then\n    echo true\n  elif\
    \ [[ $1 -eq $2 ]]; then\n    echo true\n  elif [[ $1 -eq $(($2 * $2)) ]]; then\n\
    \    echo true\n  else\n    echo false\n  fi", "  local x=$1\n  local n=$2\n \
    \ local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ \"$result\" -eq \"$n\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ \"$result\"\
    \ == \"$n\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \ local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local\
    \ int_result=$(echo \"$result/1\" | bc -l)\n  if [ \"$result\" = \"$int_result\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if [[ $1 -eq\
    \ 1 ]]; then\n    echo true\n  elif [[ $1 -eq $2 ]]; then\n    echo true\n  elif\
    \ [[ $1 -eq $(($2 * $2)) ]]; then\n    echo true\n  else\n    echo false\n  fi",
  "    if [ $1 -eq 1 ]\n    then\n        echo true\n    elif [ $1 -eq $2 ]\n    then\n\
    \        echo true\n    elif [ $1 -gt $2 ]\n    then\n        if [ $(( $1 % $2\
    \ )) -eq 0 ]\n        then\n            is_simple_power $(( $1 / $2 )) $2\n  \
    \      else\n            echo false\n        fi\n    else\n        echo false\n\
    \    fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\"\
    \ | bc)\n  if [ \"$result\" -eq \"$n\" ]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"\
    $x $n\" | awk '{print log($1)/log($2)}')\n  if [[ \"$result\" =~ ^[0-9]+$ ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n\
    \  local n=$2\n  if [[ $x -eq $n ]]; then\n    echo true\n  elif [[ $x -gt $n\
    \ ]]; then\n    local result=$(bc <<< \"$x % $n\")\n    if [[ $result -eq 0 ]];\
    \ then\n      is_simple_power $(bc <<< \"$x / $n\") $n\n    else\n      echo false\n\
    \    fi\n  else\n    echo false\n  fi", "  local x=$1\n  local n=$2\n  if [[ $x\
    \ -eq $n ]]; then\n    echo true\n  elif [[ $x -gt $n ]]; then\n    local result=$(is_simple_power\
    \ $(($x/$n)) $n)\n    if [[ $result == true ]]; then\n      echo true\n    else\n\
    \      echo false\n    fi\n  else\n    echo false\n  fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ $result -eq $(echo\
    \ \"scale=0; $n^$result\" | bc) ]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "  local x=$1\n  local n=$2\n  if [[ $x -eq $n ]]; then\n    echo\
    \ true\n  elif [[ $x -eq 1 ]]; then\n    echo false\n  elif [[ $x -lt $n ]]; then\n\
    \    echo false\n  else\n    local result=$(is_simple_power $(($x/$n)) $n)\n \
    \   if [[ $result == true ]]; then\n      echo true\n    else\n      echo false\n\
    \    fi\n  fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n    if [ \"$result\" == \"1\" ]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "  local x=$1\n  local n=$2\n  if\
    \ (( x == n**(($(echo \"l($x)/l($n)\" | bc -l))) )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n    local\
    \ i=1\n    local result=1\n    while [ $result -lt $x ]\n    do\n        result=$(($n**$i))\n\
    \        if [ $result -eq $x ]\n        then\n            echo true\n        \
    \    return\n        fi\n        i=$(($i+1))\n    done\n    echo false", "  local\
    \ x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [[\
    \ $result -eq $n ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  if [[ $1 -eq 1 ]]; then\n    echo \"true\"\n  elif [[ $1 -eq $2 ]]; then\n  \
    \  echo \"true\"\n  elif [[ $1 -gt $2 ]]; then\n    if [[ $1%$2 -eq 0 ]]; then\n\
    \      is_simple_power $(( $1/$2 )) $2\n    else\n      echo \"false\"\n    fi\n\
    \  else\n    echo \"false\"\n  fi", "  if [ $1 -eq 1 ]; then\n    echo true\n\
    \  elif [ $1 -eq $2 ]; then\n    echo true\n  elif [ $(($1 % $2)) -eq 0 ]; then\n\
    \    is_simple_power $(($1 / $2)) $2\n  else\n    echo false\n  fi", "  local\
    \ x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int_result=$(echo\
    \ \"$result\" | cut -d '.' -f 1)\n  local float_result=$(echo \"$result\" | cut\
    \ -d '.' -f 2)\n  if [ \"$float_result\" == \"0\" ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n    local\
    \ result=$(echo \"$x $n\" | awk '{printf \"%f\", log($1)/log($2)}')\n    if [[\
    \ $result =~ ^[0-9]+$ ]]; then\n        echo true\n    else\n        echo false\n\
    \    fi", "    if [ $1 -eq 1 ]; then\n        echo \"true\"\n    elif [ $1 -eq\
    \ $2 ]; then\n        echo \"true\"\n    elif [ $(($1 % $2)) -eq 0 ]; then\n \
    \       is_simple_power $(($1 / $2)) $2\n    else\n        echo \"false\"\n  \
    \  fi", "  local x=$1\n  local n=$2\n  if [ $x -eq 1 ]; then\n    echo true\n\
    \  elif [ $x -eq $n ]; then\n    echo true\n  elif [ $x -gt $n ]; then\n    local\
    \ y=$(($x/$n))\n    if [ $y -eq $n ]; then\n      echo true\n    else\n      is_simple_power\
    \ $y $n\n    fi\n  else\n    echo false\n  fi", "  local x=$1\n  local n=$2\n\
    \  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ \"$result\" -eq \"$n\"\
    \ ]; then\n    echo true\n  else\n    echo false\n  fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int_result=$(echo \"\
    $result/1\" | bc -l)\n  if [ \"$result\" == \"$int_result\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n \
    \ local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0;\
    \ $n^$result\" | bc) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n\
    \  local int_result=$(echo \"$result/1\" | bc -l)\n  if [[ $result == $int_result\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int=$(echo \"\
    $result\" | awk '{printf(\"%d\\n\",$1)}')\n  if [ \"$result\" == \"$int\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local\
    \ n=$2\n  if [[ $x -eq $n ]]; then\n    echo true\n  elif [[ $x -gt $n ]]; then\n\
    \    local result=$(echo \"$x % $n\" | bc)\n    if [[ $result -eq 0 ]]; then\n\
    \      is_simple_power $(echo \"$x / $n\" | bc) $n\n    else\n      echo false\n\
    \    fi\n  else\n    echo false\n  fi", "    local x=$1\n    local n=$2\n    if\
    \ [[ $x -eq 1 ]]; then\n        echo \"true\"\n    elif [[ $x -eq $n ]]; then\n\
    \        echo \"true\"\n    elif [[ $x -eq $((n*n)) ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    if [[ $1 == 1 ]]; then\n\
    \        echo true\n    elif [[ $1 == $2 ]]; then\n        echo true\n    elif\
    \ [[ $1%$2 == 0 ]]; then\n        is_simple_power $(($1/$2)) $2\n    else\n  \
    \      echo false\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"$x/$n\" | bc -l)\n  if [[ $result == *.* ]]; then\n    echo \"false\"\n  else\n\
    \    echo \"true\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"$x / $n\" | bc)\n  if [ $result -eq $result 2>/dev/null ]\n  then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n \
    \ local result=$(echo \"$x $n\" | awk '{print ($1/$2)^(1/log($2))}')\n  if [ $(echo\
    \ \"$result\" | awk '{print int($1)}') -eq $result ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n    local\
    \ result=$(echo \"$x/$n\" | bc -l)\n    local int_result=$(echo \"$result\" |\
    \ cut -d '.' -f 1)\n    if [ \"$result\" == \"$int_result\" ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int_result=$(echo \"\
    $result\" | cut -d'.' -f1)\n  local float_result=$(echo \"$result\" | cut -d'.'\
    \ -f2)\n  if [ \"$float_result\" = \"0\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif\
    \ [ $1 -eq $2 ]; then\n    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power\
    \ $(( $1 / $2 )) $2\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ \"$result\" ==\
    \ \"$n\" ]; then\n    echo true\n  else\n    echo false\n  fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print $1**(log($1)/log($2))}')\n\
    \  if [[ $result -eq $x ]]; then\n    echo true\n  else\n    echo false\n  fi",
  "    if [ $1 -eq $2 ]\n    then\n        echo true\n    elif [ $1 -eq 1 ]\n    then\n\
    \        echo false\n    elif [ $1 -gt $2 ]\n    then\n        if [ $(( $1 % $2\
    \ )) -eq 0 ]\n        then\n            is_simple_power $(( $1 / $2 )) $2\n  \
    \      else\n            echo false\n        fi\n    else\n        echo false\n\
    \    fi", "  local x=$1\n  local n=$2\n  if [[ $x -eq 1 ]]; then\n    echo \"\
    true\"\n  elif [[ $x -eq $n ]]; then\n    echo \"true\"\n  elif [[ $x -gt $n ]];\
    \ then\n    local result=$(echo \"$x/$n\" | bc -l)\n    if [[ $result -eq $(echo\
    \ \"$result\" | bc -l | cut -d '.' -f 1) ]]; then\n      is_simple_power $result\
    \ $n\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi",
  "  local x=$1\n  local n=$2\n  if [ $x -eq $n ]; then\n    echo \"true\"\n  elif\
    \ [ $x -lt $n ]; then\n    echo \"false\"\n  else\n    if [ $((x%n)) -eq 0 ];\
    \ then\n      is_simple_power $((x/n)) $n\n    else\n      echo \"false\"\n  \
    \  fi\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\"\
    \ | bc)\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "    if [ $1 -eq 1 ]; then\n        echo\
    \ \"true\"\n    elif [ $1 -eq $2 ]; then\n        echo \"true\"\n    elif [ $1\
    \ -gt $2 ]; then\n        if [ $(($1 % $2)) -eq 0 ]; then\n            is_simple_power\
    \ $(($1 / $2)) $2\n        else\n            echo \"false\"\n        fi\n    else\n\
    \        echo \"false\"\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"scale=0; $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0; $n**$result\"\
    \ | bc) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local\
    \ x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ \"\
    $result\" -eq \"$n\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x / $n\"\
    \ | bc)\n  if [[ $result == $n ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" |\
    \ awk '{print log($1)/log($2)}')\n  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    if [[ $1 -eq 1 ]]; then\n\
    \        echo true\n    elif [[ $1 -eq $2 ]]; then\n        echo true\n    elif\
    \ [[ $1 -gt $2 ]]; then\n        if [[ $(( $1 % $2 )) -eq 0 ]]; then\n       \
    \     is_simple_power $(( $1 / $2 )) $2\n        else\n            echo false\n\
    \        fi\n    else\n        echo false\n    fi", "  local x=$1\n  local n=$2\n\
    \  local result=$(echo \"$x $n\" | awk '{print int(log($1)/log($2))}')\n  if [[\
    \ $result == \"1\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi", "    if [ \"$1\" -eq \"$2\" ]; then\n        echo true\n    elif [ \"$1\"\
    \ -eq \"1\" ]; then\n        echo false\n    elif [ \"$1\" -eq \"0\" ]; then\n\
    \        echo false\n    elif [ \"$(($1 % $2))\" -eq \"0\" ]; then\n        is_simple_power\
    \ \"$(($1 / $2))\" \"$2\"\n    else\n        echo false\n    fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(echo \"scale=2; $x/$n\" | bc)\n  local int_result=$(echo\
    \ \"scale=0; $result\" | bc)\n  if [ \"$result\" == \"$int_result\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n    local\
    \ n=$2\n    local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n \
    \   if [[ $result =~ ^[0-9]+$ ]]; then\n        echo true\n    else\n        echo\
    \ false\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  local int=$(echo \"$result\" | cut -d '.' -f 1)\n  local float=$(echo\
    \ \"$result\" | cut -d '.' -f 2)\n  if [ \"$float\" == \"0\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n\
    \    local result=$(echo \"scale=0; $x/$n\" | bc)\n    if [[ $result -eq $n ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local\
    \ x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ \"\
    $result\" -eq \"$result\" ] 2>/dev/null; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"\
    $x / $n\" | bc)\n  if [ \"$result\" -eq \"$result\" ] 2>/dev/null; then\n    if\
    \ [ \"$result\" -eq \"1\" ]; then\n      echo \"true\"\n    else\n      is_simple_power\
    \ \"$result\" \"$n\"\n    fi\n  else\n    echo \"false\"\n  fi", "    local x=$1\n\
    \    local n=$2\n    local result=$(echo \"scale=0; $x/$n\" | bc)\n    if [ \"\
    $result\" -eq \"$result\" ] 2>/dev/null; then\n        if [ \"$result\" -eq \"\
    $n\" ]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    else\n        echo \"false\"\n    fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x / $n\" | bc)\n  if [[ $result -eq $(echo \"\
    $result\" | bc) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  local x=$1\n  local n=$2\n  if (( $x == 1 )); then\n    echo true\n  elif ((\
    \ $x == $n )); then\n    echo true\n  elif (( $x % $n == 0 )); then\n    is_simple_power\
    \ $(( $x / $n )) $n\n  else\n    echo false\n  fi", "  local x=$1\n  local n=$2\n\
    \  local result=$(echo \"$x/$n\" | bc -l)\n  local int=$(echo \"$result\" | awk\
    \ '{print int($1)}')\n  local float=$(echo \"$result\" | awk '{print $1-int($1)}')\n\
    \  if [ \"$float\" = \"0\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x/$n\"\
    \ | bc)\n  if [[ $result -eq $(echo \"scale=0; $n^$result\" | bc) ]]; then\n \
    \   echo true\n  else\n    echo false\n  fi", "    if [[ $1 == $2 ]]; then\n \
    \       echo true\n    elif [[ $1 -gt $2 ]]; then\n        local result=$(($1/$2))\n\
    \        if [[ $result -eq $2 ]]; then\n            echo true\n        else\n\
    \            echo false\n        fi\n    else\n        echo false\n    fi", " \
    \ local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
    \  if [[ $result == *.* ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\
    \n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print\
    \ log($1)/log($2)}')\n  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  if [ $x -eq\
    \ 1 ]; then\n    echo true\n  elif [ $x -eq $n ]; then\n    echo true\n  elif\
    \ [ $x -gt $n ]; then\n    local res=$(echo \"$x % $n\" | bc)\n    if [ $res -eq\
    \ 0 ]; then\n      local res2=$(echo \"$x / $n\" | bc)\n      is_simple_power\
    \ $res2 $n\n    else\n      echo false\n    fi\n  else\n    echo false\n  fi",
  "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0; $x / $n\" | bc)\n\
    \  if [ \"$result\" -eq \"$n\" ]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x / $n\"\
    \ | bc)\n  local result2=$(echo \"$result / $n\" | bc)\n  if [ \"$result\" -eq\
    \ \"$n\" ] && [ \"$result2\" -eq \"1\" ]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n    local result=$(echo\
    \ \"scale=0; $x/$n\" | bc)\n    if [ \"$result\" == \"1\" ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local x=$1\n    local\
    \ n=$2\n    local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n \
    \   if [ $(echo \"$result\" | grep -Eo '^[0-9]+$') ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local x=$1\n    local n=$2\n\
    \    local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n    if [[\
    \ \"$result\" =~ ^[0-9]+$ ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    local x=$1\n    local n=$2\n    if [[ $x -eq 1 ]];\
    \ then\n        echo true\n    elif [[ $x -eq $n ]]; then\n        echo true\n\
    \    elif [[ $x -gt $n ]]; then\n        local res=$(echo \"$x/$n\" | bc -l)\n\
    \        if [[ $res -eq $res ]]; then\n            is_simple_power $res $n\n \
    \       else\n            echo false\n        fi\n    else\n        echo false\n\
    \    fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"$x/$n\" |\
    \ bc -l)\n    local int=$(echo \"$result\" | awk '{printf(\"%d\\n\",$1)}')\n \
    \   if [ \"$result\" == \"$int\" ]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi", "    local x=$1\n    local n=$2\n    local result=$(bc\
    \ <<< \"$x == $n ^ ($x / $n)\")\n    if [ \"$result\" -eq 1 ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local x=$1\n    local\
    \ n=$2\n    local result=$(echo \"scale=0; $x / $n\" | bc)\n    if [ \"$result\"\
    \ -eq \"$n\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"$x/$n\" |\
    \ bc -l)\n    if [ $(echo \"$result%1\" | bc -l) -eq 0 ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "  local x=$1\n  local n=$2\n\
    \  local result=$(echo \"scale=0; $x/$n\" | bc)\n  if [ $result -eq $n ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local\
    \ n=$2\n  if [ $x -eq $n ]\n  then\n    echo true\n  elif [ $x -gt $n ]\n  then\n\
    \    is_simple_power $(($x/$n)) $n\n  else\n    echo false\n  fi", "  local x=$1\n\
    \  local n=$2\n  local i=1\n  local res=1\n  while [ $res -lt $x ]; do\n    res=$((n**i))\n\
    \    if [ $res -eq $x ]; then\n      echo \"true\"\n      return\n    fi\n   \
    \ i=$((i+1))\n  done\n  echo \"false\"", "  local x=$1\n  local n=$2\n  local\
    \ result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n  if [[ $result =~\
    \ ^[0-9]+$ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \   local x=$1\n    local n=$2\n    local result=$(echo \"$x/$n\" | bc -l)\n \
    \   local int_result=$(echo \"$result/1\" | bc -l)\n    if [ \"$result\" == \"\
    $int_result\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    local x=$1\n    local n=$2\n    if [ $x -eq 1 ]; then\n      \
    \  echo true\n    elif [ $x -eq $n ]; then\n        echo true\n    elif [ $x -gt\
    \ $n ]; then\n        local res=$(echo \"$x % $n\" | bc)\n        if [ $res -eq\
    \ 0 ]; then\n            local div=$(echo \"$x / $n\" | bc)\n            is_simple_power\
    \ $div $n\n        else\n            echo false\n        fi\n    else\n      \
    \  echo false\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"\
    $x / $n\" | bc)\n  if [[ $result -eq 1 ]]; then\n    echo true\n  elif [[ $result\
    \ -eq $n ]]; then\n    echo true\n  else\n    echo false\n  fi", "    if [ $1\
    \ -eq 1 ]\n    then\n        echo \"true\"\n    elif [ $1 -eq $2 ]\n    then\n\
    \        echo \"true\"\n    elif [ $1 -gt $2 ]\n    then\n        if [ $(( $1\
    \ % $2 )) -eq 0 ]\n        then\n            is_simple_power $(( $1 / $2 )) $2\n\
    \        else\n            echo \"false\"\n        fi\n    else\n        echo\
    \ \"false\"\n    fi", "    if [ $1 -eq 1 ]; then\n        echo true\n    elif\
    \ [ $1 -eq $2 ]; then\n        echo true\n    elif [ $1 -gt $2 ]; then\n     \
    \   is_simple_power $(( $1 / $2 )) $2\n    else\n        echo false\n    fi",
  "  if (( $1 % $2 != 0 )); then\n    echo false\n    return\n  fi\n  if (( $1 ==\
    \ $2 )); then\n    echo true\n    return\n  fi\n  is_simple_power $(( $1 / $2\
    \ )) $2", "  if [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n\
    \    echo \"true\"\n  elif [ $1 -gt $2 ]; then\n    if [ $(( $1 % $2 )) -eq 0\
    \ ]; then\n      is_simple_power $(( $1 / $2 )) $2\n    else\n      echo \"false\"\
    \n    fi\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local\
    \ result=$(echo \"$x/$n\" | bc -l)\n  if [ $(echo \"$result % 1\" | bc -l) -eq\
    \ 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n\
    \  local n=$2\n  local result=$(bc <<< \"$x == $n ^ (l($x)/l($n))\")\n  if [[\
    \ $result == 1 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  local x=$1\n  local n=$2\n  local result=$(echo \"$x $n\" | awk '{print $1**(log($1)/log($2))}')\n\
    \  if [ \"$x\" -eq \"$result\" ]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "    if [ \"$1\" -eq \"$(bc <<< \"scale=0; $2^$(bc <<< \"scale=0;\
    \ l($1)/l($2)\")\")\" ]; then\n        echo true\n    else\n        echo false\n\
    \    fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"$x / $n\"\
    \ | bc)\n    if [ \"$(echo \"$result == $n\" | bc)\" -eq 1 ]; then\n        echo\
    \ true\n    else\n        echo false\n    fi", "    if [ $1 -eq 1 ]\n    then\n\
    \        echo true\n    elif [ $1 -eq $2 ]\n    then\n        echo true\n    elif\
    \ [ $1 -gt $2 ]\n    then\n        if [ $(( $1 % $2 )) -eq 0 ]\n        then\n\
    \            is_simple_power $(( $1 / $2 )) $2\n        else\n            echo\
    \ false\n        fi\n    else\n        echo false\n    fi", "  local x=$1\n  local\
    \ n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  local int=$(echo \"$result\"\
    \ | cut -d '.' -f 1)\n  local float=$(echo \"$result\" | cut -d '.' -f 2)\n  if\
    \ [[ $float == 0 ]]; then\n    echo \"$n^$int=$x\"\n    return 0\n  else\n   \
    \ return 1\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\"\
    \ | bc -l)\n  if [[ $result =~ ^[0-9]+$ ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "    local x=$1\n    local n=$2\n    local result=$(echo\
    \ \"$x/$n\" | bc -l)\n    local int=$(echo \"$result\" | cut -d'.' -f1)\n    local\
    \ float=$(echo \"$result\" | cut -d'.' -f2)\n    if [[ \"$float\" == \"0\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local\
    \ x=$1\n  local n=$2\n  if [ $(bc <<< \"$x == $n^$(bc <<< \"l($x)/l($n)\")\")\
    \ -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if [\
    \ $1 -eq 1 ]; then\n    echo \"true\"\n  elif [ $1 -eq $2 ]; then\n    echo \"\
    true\"\n  elif [ $1 -gt $2 ]; then\n    is_simple_power $(($1/$2)) $2\n  else\n\
    \    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"$x/$n\" | bc -l)\n  local int=$(echo \"$result\" | cut -d \".\" -f 1)\n  local\
    \ decimal=$(echo \"$result\" | cut -d \".\" -f 2)\n  if [ \"$decimal\" == \"0\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=\"\
    $1\"\n  local n=\"$2\"\n  local result=$(echo \"$x $n\" | awk '{print log($1)/log($2)}')\n\
    \  if [[ $result == *.* ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\
    \n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n\
    \  local int=$(echo \"$result/1\" | bc -l)\n  if [ \"$result\" == \"$int\" ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if [[ $1 == $2\
    \ ]]; then\n    echo \"true\"\n  elif [[ $1 -gt $2 ]]; then\n    if [[ $1%$2 ==\
    \ 0 ]]; then\n      is_simple_power $(( $1/$2 )) $2\n    else\n      echo \"false\"\
    \n    fi\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local\
    \ result=$(echo \"$x/$n\" | bc -l)\n  local int=$(echo \"$result\" | cut -d '.'\
    \ -f 1)\n  local dec=$(echo \"$result\" | cut -d '.' -f 2)\n  if [[ \"$dec\" ==\
    \ \"0\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local\
    \ x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n  if [ $(echo\
    \ \"$result == $n\" | bc -l) -eq 1 ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local result=$(echo \"scale=0;\
    \ $x/$n\" | bc)\n  if [ $result -eq $(echo \"scale=0; $n^$result\" | bc) ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local\
    \ n=$2\n  local i=1\n  while (( i < x )); do\n    (( i *= n ))\n  done\n  (( i\
    \ == x )) && echo true || echo false", "  local x=$1\n  local n=$2\n  local result=$(bc\
    \ <<< \"$x == $n ^ ($x / $n)\")\n  if [ \"$result\" -eq 1 ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "  local x=$1\n  local n=$2\n  local\
    \ result=$(echo \"scale=0; $x/$n\" | bc)\n  if [[ $result -eq $(echo \"scale=0;\
    \ $n^$result\" | bc) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "    local x=$1\n    local n=$2\n    local result=$(echo \"$x / $n\" |\
    \ bc)\n    local result2=$(echo \"$result / $n\" | bc)\n    if [ \"$result\" -eq\
    \ \"$n\" ]; then\n        echo \"true\"\n    elif [ \"$result2\" -eq \"$n\" ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  if (( $1 == 1 )); then\n        echo \"true\"\n    elif (( $1 % $2 == 0 ));\
    \ then\n        is_simple_power $(( $1 / $2 )) $2\n    else\n        echo \"false\"\
    \n    fi", "  local x=$1\n  local n=$2\n  local i=1\n  local result=1\n  while\
    \ [[ $result -lt $x ]]; do\n    result=$((n**i))\n    if [[ $result -eq $x ]];\
    \ then\n      echo true\n      return\n    fi\n    i=$((i+1))\n  done\n  echo\
    \ false", "  local x=$1\n  local n=$2\n  local result=$(echo \"$x/$n\" | bc -l)\n\
    \  if [[ \"$result\" == \"1\" ]]; then\n    echo \"true\"\n  elif [[ \"$result\"\
    \ == \"0\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \   if [ $(bc <<< \"$1 % $2\") -eq 0 ]; then\n        echo true\n    else\n  \
    \      echo false\n    fi", "  local x=$1\n  local n=$2\n  local result=$(echo\
    \ \"$x $n\" | awk '{print log($1)/log($2)}')\n  if [[ $result =~ ^[0-9]+$ ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"]
stop_tokens:
- "\n}"
