language: sh
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\\
    .|/1/g' -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=\"$1\"\n    local beats=()\n    local beat=0\n    for ((i=0; i<${#music};\
    \ i++)); do\n        case \"${music:$i:1}\" in\n            'o')\n           \
    \     beat=4\n                ;;\n            'o|')\n                beat=2\n\
    \                ;;\n            '.|')\n                beat=1\n             \
    \   ;;\n            ' ')\n                beats+=(\"$beat\")\n               \
    \ beat=0\n                ;;\n        esac\n    done\n    beats+=(\"$beat\")\n\
    \    echo \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' |\
    \ sed 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # your code here\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # Hint: You can use bash arrays to store\
    \ the result\n    # Hint: You can use bash built-in string manipulation functions\n\
    \    # Hint: You can use bash built-in arithmetic operations\n    # Hint: You\
    \ can use bash built-in array operations\n    # Hint: You can use bash built-in\
    \ string operations\n    # Hint: You can use bash built-in regex operations\n\
    \    # Hint: You can use bash built-in math operations\n    # Hint: You can use\
    \ bash built-in string operations\n    # Hint: You can use bash built-in regex\
    \ operations\n    # Hint: You can use bash built-in math operations\n    # Hint:\
    \ You can use bash built-in string operations\n    # Hint: You can use bash built-in\
    \ regex operations\n    # Hint: You can use bash built-in math operations\n  \
    \  # Hint: You can use bash built-in string operations\n    # Hint: You can use\
    \ bash built-in regex operations\n    # Hint: You can use bash built-in math operations\n\
    \    # Hint: You can use bash built-in string operations\n    # Hint: You can\
    \ use bash built-in regex operations\n    # Hint: You can use bash built-in math\
    \ operations\n    # Hint: You can use bash built-in string operations\n    # Hint:\
    \ You can use bash built-in regex operations\n    # Hint: You can use bash built-in\
    \ math operations\n    # Hint: You can use bash built-in string operations\n \
    \   # Hint: You can use bash built-in regex operations\n    # Hint: You can use\
    \ bash built-in math operations\n    # Hint: You can use bash built-in string\
    \ operations\n    # Hint: You can use bash built-in regex operations\n    # Hint:\
    \ You can use bash built-in math operations\n    # Hint: You can use bash built-in\
    \ string operations\n    # Hint: You can use bash built-in regex operations\n\
    \    # Hint: You can use bash built-in math operations\n    # Hint: You can use\
    \ bash built-in string operations\n    # Hint: You can use bash built-in regex\
    \ operations\n    # Hint: You\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmps578tbkv.sh: line 47: syntax error near unexpected token `}''\n/tmp/tmps578tbkv.sh:
    line 47: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\\\
    (.\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\
    \ | tr ' ' '\\n'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\
    \ | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g' -e\
    \ 's/^/[\"/' -e 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    # HINT: you may use 'echo' to output a\
    \ string and 'seq' to generate a sequence of numbers\n    # HINT: you may use\
    \ 'sed' to replace strings with other strings\n    # HINT: you may use 'tr' to\
    \ translate characters to other characters\n    # HINT: you may use 'bc' to calculate\
    \ numbers\n    # HINT: you may use 'paste' to join lines of two files\n    # HINT:\
    \ you may use 'tr' to delete characters\n    # HINT: you may use 'rev' to reverse\
    \ lines of a file\n    # HINT: you may use 'rev' to reverse lines of a file\n\
    \    # HINT: you may use 'rev' to reverse lines of a file\n    # HINT: you may\
    \ use 'rev' to reverse lines of a file\n    # HINT: you may use 'rev' to reverse\
    \ lines of a file\n    # HINT: you may use 'rev' to reverse lines of a file\n\
    \    # HINT: you may use 'rev' to reverse lines of a file\n    # HINT: you may\
    \ use 'rev' to reverse lines of a file\n    # HINT: you may use 'rev' to reverse\
    \ lines of a file\n    # HINT: you may use 'rev' to reverse lines of a file\n\
    \    # HINT: you may use 'rev' to reverse lines of a file\n    # HINT: you may\
    \ use 'rev' to reverse lines of a file\n    # HINT: you may use 'rev' to reverse\
    \ lines of a file\n    # HINT: you may use 'rev' to reverse lines of a file\n\
    \    # HINT: you may use 'rev' to reverse lines of a file\n    # HINT: you may\
    \ use 'rev' to reverse lines of a file\n    # HINT: you may use 'rev' to reverse\
    \ lines of a file\n    # HINT: you may use 'rev' to reverse lines of a file\n\
    \    # HINT: you may use 'rev' to reverse lines of a file\n    # HINT: you may\
    \ use 'rev' to reverse lines of a file\n    # HINT: you may use 'rev' to reverse\
    \ lines of a file\n    # HINT: you may use 'rev' to reverse lines\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpb7xuie12.sh: line 41: syntax error near unexpected token `}''\n/tmp/tmpb7xuie12.sh:
    line 41: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ \"$1\" | sed -E 's/o/4/g' | sed -E 's/o\\|/2/g' | sed -E 's/\\.\\|/1/g' | sed\
    \ -E 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # Hint: use tr and sed\n    # Hint: use echo -n\
    \ to avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n    # Hint: use echo -n to\
    \ avoid trailing newline\n    # Hint: use echo -n to avoid trailing newline\n\
    \    # Hint: use echo -n to avoid trailing newline\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpzf1jtlqi.sh: line 47: syntax error near unexpected token `}''\n/tmp/tmpzf1jtlqi.sh:
    line 47: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp76w5p9o4.sh: line 140: syntax error near unexpected token `}''\n/tmp/tmp76w5p9o4.sh:
    line 140: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | sed -e\
    \ 's/^/\"/' -e 's/$/\"/' | tr '\\n' ',' | sed 's/,$//'\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e\
    \ 's/\\.|/1/g' | tr ' ' '\\n' | tr '\\n' ' '\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  local\
    \ music=$1\n  local beats=()\n  local beat=0\n  local note=''\n  local notes=($(echo\
    \ $music | sed 's/|//g'))\n  for note in ${notes[@]}; do\n    if [[ $note == 'o'\
    \ ]]; then\n      beat=4\n    elif [[ $note == '.' ]]; then\n      beat=1\n  \
    \  fi\n    beats+=($beat)\n  done\n  echo ${beats[@]}\n}\n\ncandidate() {\n  \
    \  parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \"\
    .| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") =\
    \ \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2\
    \ 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | tr 'o|.' '4 2 1'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g' -e 's/^/[\"\
    /' -e 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  # Hint: use tr, sed, grep, cut, and echo\n\
    \  # Hint: use tr to replace 'o' with '4' and 'o|' with '2'\n  # Hint: use sed\
    \ to replace '.' with ''\n  # Hint: use grep to remove empty lines\n  # Hint:\
    \ use cut to remove the '|' character\n  # Hint: use echo to format the output\
    \ as a list of strings\n  # Hint: use tr to replace '\\n' with '\", \"'\n  # Hint:\
    \ use sed to replace '^' with '[\"' and '$' with '\"]'\n  # Hint: use sed to replace\
    \ '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\"\
    \ \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"',\
    \ '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\"\
    \ \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"',\
    \ '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\"\
    \ \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"',\
    \ '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\"\
    \ \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"',\
    \ '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\"\
    \ \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"', '\" \"',\
    \ '\" \"', '\" \"', '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpxrnoqf01.sh: line 22: syntax error near unexpected token `}''\n/tmp/tmpxrnoqf01.sh:
    line 22: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\\
    .|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | sed -e\
    \ 's/^/\"/' -e 's/$/\"/' | tr '\\n' ',' | sed 's/,$//'\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ Your code here\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local input=\"$1\"\n    local output=\"\"\n    local note=\"\"\n    local beats=0\n\
    \    for (( i=0; i<${#input}; i++ )); do\n        note=\"${input:$i:1}\"\n   \
    \     if [[ $note == \"o\" ]]; then\n            beats=4\n        elif [[ $note\
    \ == \"|\" ]]; then\n            beats=2\n        elif [[ $note == \".\" ]]; then\n\
    \            beats=1\n        fi\n        output+=\"\\\"$beats\\\" \"\n    done\n\
    \    echo $output\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\\s/\",\"/g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music_string=$1\n    local music_array=($(echo $music_string | sed 's/o/4/g;s/o|/2/g;s/.|/1/g'))\n\
    \    echo ${music_array[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Write your code here\n  # Hint: You can use bash string manipulation and\
    \ regex matching\n  # Hint: You can use bash arrays\n  # Hint: You can use tr\
    \ to replace characters with other characters\n  # Hint: You can use tr to remove\
    \ characters\n  # Hint: You can use tr to replace characters with nothing\n  #\
    \ Hint: You can use echo to print to stdout\n  # Hint: You can use echo -n to\
    \ print without newline\n  # Hint: You can use printf to print formatted strings\n\
    \  # Hint: You can use printf to print formatted numbers\n  # Hint: You can use\
    \ printf to print formatted characters\n  # Hint: You can use printf to print\
    \ formatted strings\n  # Hint: You can use printf to print formatted numbers\n\
    \  # Hint: You can use printf to print formatted characters\n  # Hint: You can\
    \ use printf to print formatted strings\n  # Hint: You can use printf to print\
    \ formatted numbers\n  # Hint: You can use printf to print formatted characters\n\
    \  # Hint: You can use printf to print formatted strings\n  # Hint: You can use\
    \ printf to print formatted numbers\n  # Hint: You can use printf to print formatted\
    \ characters\n  # Hint: You can use printf to print formatted strings\n  # Hint:\
    \ You can use printf to print formatted numbers\n  # Hint: You can use printf\
    \ to print formatted characters\n  # Hint: You can use printf to print formatted\
    \ strings\n  # Hint: You can use printf to print formatted numbers\n  # Hint:\
    \ You can use printf to print formatted characters\n  # Hint: You can use printf\
    \ to print formatted strings\n  # Hint: You can use printf to print formatted\
    \ numbers\n  # Hint: You can use printf to print formatted characters\n  # Hint:\
    \ You can use printf to print formatted strings\n  # Hint: You can use printf\
    \ to print formatted numbers\n  # Hint: You can use printf to print formatted\
    \ characters\n  # Hint: You can use printf to print formatted strings\n  # Hint:\
    \ You can use printf to print formatted numbers\n  # Hint: You can use printf\
    \ to print formatted characters\n  # Hint: You can use printf to print formatted\
    \ strings\n  # Hint: You can\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpia94jr72.sh: line 49: syntax error near unexpected token `}''\n/tmp/tmpia94jr72.sh:
    line 49: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ //g' | sed\
    \ 's/\\(.\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -r 's/o/4/g' | sed -r 's/o\\|/2/g' | sed -r 's/\\.\\|/1/g' | sed\
    \ -r 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # You can use echo to print to stdout\n    # Example:\
    \ echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ Write your code here\n  echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # Hint: You can use bash arrays and string\
    \ manipulation\n    # Hint: You can use tr to remove newlines\n    # Hint: You\
    \ can use tr to replace 'o' with '4'\n    # Hint: You can use tr to replace 'o|'\
    \ with '2'\n    # Hint: You can use tr to replace '.|' with '1'\n    # Hint: You\
    \ can use tr to replace ' ' with ','\n    # Hint: You can use tr to remove ','\
    \ at the end\n    # Hint: You can use tr to remove ',' at the beginning\n    #\
    \ Hint: You can use tr to remove ',' at the end\n    # Hint: You can use tr to\
    \ remove ',' at the beginning\n    # Hint: You can use tr to remove ',' at the\
    \ end\n    # Hint: You can use tr to remove ',' at the beginning\n    # Hint:\
    \ You can use tr to remove ',' at the end\n    # Hint: You can use tr to remove\
    \ ',' at the beginning\n    # Hint: You can use tr to remove ',' at the end\n\
    \    # Hint: You can use tr to remove ',' at the beginning\n    # Hint: You can\
    \ use tr to remove ',' at the end\n    # Hint: You can use tr to remove ',' at\
    \ the beginning\n    # Hint: You can use tr to remove ',' at the end\n    # Hint:\
    \ You can use tr to remove ',' at the beginning\n    # Hint: You can use tr to\
    \ remove ',' at the end\n    # Hint: You can use tr to remove ',' at the beginning\n\
    \    # Hint: You can use tr to remove ',' at the end\n    # Hint: You can use\
    \ tr to remove ',' at the beginning\n    # Hint: You can use tr to remove ','\
    \ at the end\n    # Hint: You can use tr to remove ',' at the beginning\n    #\
    \ Hint: You can use tr to remove ',' at the end\n    # Hint: You can use tr to\
    \ remove ',' at the beginning\n    # Hint: You can use tr to remove ',' at the\
    \ end\n    # Hint: You can use\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp49brnv5p.sh: line 43: syntax error near unexpected token `}''\n/tmp/tmp49brnv5p.sh:
    line 43: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Implement this function\n  # Hint: You can use sed to replace all 'o'\
    \ with '4' and all 'o|' with '2' and all '.|' with '1'\n  # Hint: You can use\
    \ tr to replace all '|' with ' '\n  # Hint: You can use tr to replace all ' '\
    \ with ','\n  # Hint: You can use tr to replace all ',' with ' '\n  # Hint: You\
    \ can use tr to replace all ' ' with ','\n  # Hint: You can use tr to replace\
    \ all ',' with ' '\n  # Hint: You can use tr to replace all ' ' with ','\n  #\
    \ Hint: You can use tr to replace all ',' with ' '\n  # Hint: You can use tr to\
    \ replace all ' ' with ','\n  # Hint: You can use tr to replace all ',' with '\
    \ '\n  # Hint: You can use tr to replace all ' ' with ','\n  # Hint: You can use\
    \ tr to replace all ',' with ' '\n  # Hint: You can use tr to replace all ' '\
    \ with ','\n  # Hint: You can use tr to replace all ',' with ' '\n  # Hint: You\
    \ can use tr to replace all ' ' with ','\n  # Hint: You can use tr to replace\
    \ all ',' with ' '\n  # Hint: You can use tr to replace all ' ' with ','\n  #\
    \ Hint: You can use tr to replace all ',' with ' '\n  # Hint: You can use tr to\
    \ replace all ' ' with ','\n  # Hint: You can use tr to replace all ',' with '\
    \ '\n  # Hint: You can use tr to replace all ' ' with ','\n  # Hint: You can use\
    \ tr to replace all ',' with ' '\n  # Hint: You can use tr to replace all ' '\
    \ with ','\n  # Hint: You can use tr to replace all ',' with ' '\n  # Hint: You\
    \ can use tr to replace all ' ' with ','\n  # Hint: You can use tr to replace\
    \ all ',' with ' '\n  # Hint: You can use tr to replace all\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpzinz8cgz.sh: line 40: syntax error near unexpected token `}''\n/tmp/tmpzinz8cgz.sh:
    line 40: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ \"$1\" | tr -d ' ' | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed\
    \ 's/\\(.\\)/\"\\1\"/g' | tr '\\n' ' '\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | sed 's/\\s/\\n/g' | sed\
    \ 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e\
    \ 's/\\.|/1/g' | tr ' ' '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ Write your code here\n  # Use echo to output results, for example:\n  # echo\
    \ '\"4\"'\n  # echo '\"2\"'\n  # echo '\"1\"'\n  # echo '\"2\"'\n  # echo '\"\
    2\"'\n  # echo '\"1\"'\n  # echo '\"1\"'\n  # echo '\"1\"'\n  # echo '\"1\"'\n\
    \  # echo '\"4\"'\n  # echo '\"4\"'\n  echo \"$1\" | tr 'o' '4' | tr 'o|' '2'\
    \ | tr '.|' '1' | tr ' ' '\\n' | tr -d '\"'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Write your code here\n    # HINT: You can use tr to remove newlines\
    \ from the input\n    # HINT: You can use sed to remove spaces from the input\n\
    \    # HINT: You can use awk to split the string into an array\n    # HINT: You\
    \ can use awk to print the array as a string\n    # HINT: You can use sed to replace\
    \ the notes with the corresponding numbers\n    # HINT: You can use sed to remove\
    \ the pipe characters\n    # HINT: You can use sed to remove the quotes\n    #\
    \ HINT: You can use sed to remove the brackets\n    # HINT: You can use sed to\
    \ remove the commas\n    # HINT: You can use sed to remove the spaces\n    # HINT:\
    \ You can use tr to add newlines to the output\n    # HINT: You can use echo to\
    \ print the output\n    echo \"$1\" | tr '\\n' ' ' | sed 's/ //g' | awk '{split($0,a,\"\
    \"); print a}' | awk '{for(i=1;i<=length($0);i++) printf \"%s \", $i; printf \"\
    \\n\"}' | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\\\"//g'\
    \ | sed 's/\\[//g' | sed 's/\\]//g' | sed 's/,//g' | sed 's/ //g' | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b"awk: cmd. line:1: (FILENAME=- FNR=1) fatal: attempt to use array `a''
    in a scalar context\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  # Hint: use tr, sed, grep, awk, etc.\n  # Hint:\
    \ you can use echo $1 | tr ' ' '\\n' to split the string into lines\n  # Hint:\
    \ you can use echo $1 | tr ' ' '\\n' | grep 'o' to get all whole notes\n  # Hint:\
    \ you can use echo $1 | tr ' ' '\\n' | grep 'o|' to get all half notes\n  # Hint:\
    \ you can use echo $1 | tr ' ' '\\n' | grep '.|' to get all quater notes\n  #\
    \ Hint: you can use echo $1 | tr ' ' '\\n' | grep 'o' | wc -l to count all whole\
    \ notes\n  # Hint: you can use echo $1 | tr ' ' '\\n' | grep 'o|' | wc -l to count\
    \ all half notes\n  # Hint: you can use echo $1 | tr ' ' '\\n' | grep '.|' | wc\
    \ -l to count all quater notes\n  # Hint: you can use echo $1 | tr ' ' '\\n' |\
    \ grep 'o' | wc -l | xargs -I {} echo '\"4\"' | tr -d '\\n' to replace all whole\
    \ notes with 4\n  # Hint: you can use echo $1 | tr ' ' '\\n' | grep 'o|' | wc\
    \ -l | xargs -I {} echo '\"2\"' | tr -d '\\n' to replace all half notes with 2\n\
    \  # Hint: you can use echo $1 | tr ' ' '\\n' | grep '.|' | wc -l | xargs -I {}\
    \ echo '\"1\"' | tr -d '\\n' to replace all quater notes with 1\n  # Hint: you\
    \ can use echo $1 | tr ' ' '\\n' | grep 'o' | wc -l | xargs -I {} echo '\"4\"\
    ' | tr -d '\\n' | sed 's/4/4 /g' to replace all whole notes with 4 and add spaces\n\
    \  # Hint: you can use echo $1 | tr ' ' '\\n'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpn03czlz6.sh: line 26: syntax error near unexpected token `}''\n/tmp/tmpn03czlz6.sh:
    line 26: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  # Hint: use awk to split string into an array\n\
    \  # Hint: use sed to replace 'o' with '4' and 'o|' with '2'\n  # Hint: use tr\
    \ to replace '.' with '1'\n  # Hint: use tr to replace '|' with ' '\n  # Hint:\
    \ use tr to replace ' ' with ','\n  # Hint: use sed to remove trailing ','\n \
    \ # Hint: use sed to remove leading '['\n  # Hint: use sed to remove trailing\
    \ ']'\n  # Hint: use sed to remove leading and trailing whitespace\n  # Hint:\
    \ use sed to remove double quotes\n  echo $1 | awk '{for(i=1;i<=NF;i++)print $i}'\
    \ | sed 's/o/4/g' | sed 's/o|/2/g' | tr '.' '1' | tr '|' ' ' | tr ' ' ',' | sed\
    \ 's/,$//' | sed 's/^\\[//' | sed 's/\\]$//' | sed 's/^ *//' | sed 's/ *$//' |\
    \ sed 's/\"//g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n\t#\
    \ TODO: implement this function\n\t# Hint: use tr, sed, grep, awk, etc.\n\t# Hint:\
    \ use echo -e to print escaped characters\n\t# Hint: use tr -d to remove characters\n\
    \t# Hint: use tr -s to replace multiple occurrences of a character with a single\
    \ one\n\t# Hint: use tr -d '\\n' to remove newlines\n\t# Hint: use echo -n to\
    \ print without newline\n\t# Hint: use echo -n '' to print empty string\n\t# Hint:\
    \ use echo -n '\"' to print double quote\n\t# Hint: use echo -n '\", \"' to print\
    \ double quote followed by comma and space\n\t# Hint: use echo -n '\"' to print\
    \ double quote\n\t# Hint: use echo -n '\"' to print double quote\n\t# Hint: use\
    \ echo -n '\"' to print double quote\n\t# Hint: use echo -n '\"' to print double\
    \ quote\n\t# Hint: use echo -n '\"' to print double quote\n\t# Hint: use echo\
    \ -n '\"' to print double quote\n\t# Hint: use echo -n '\"' to print double quote\n\
    \t# Hint: use echo -n '\"' to print double quote\n\t# Hint: use echo -n '\"' to\
    \ print double quote\n\t# Hint: use echo -n '\"' to print double quote\n\t# Hint:\
    \ use echo -n '\"' to print double quote\n\t# Hint: use echo -n '\"' to print\
    \ double quote\n\t# Hint: use echo -n '\"' to print double quote\n\t# Hint: use\
    \ echo -n '\"' to print double quote\n\t# Hint: use echo -n '\"' to print double\
    \ quote\n\t# Hint: use echo -n '\"' to print double quote\n\t# Hint: use echo\
    \ -n '\"' to print double quote\n\t# Hint: use echo -n '\"' to print double quote\n\
    \t# Hint: use echo -n '\"' to print double quote\n\t# Hint: use echo -n '\"' to\
    \ print double quote\n\t# Hint: use echo -n '\"' to print double quote\n\t# Hint:\
    \ use echo -n '\"' to print double\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpylwx9llj.sh: line 44: syntax error near unexpected token `}''\n/tmp/tmpylwx9llj.sh:
    line 44: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n\t#\
    \ TODO: implement this function\n\t# HINT: use sed to replace all notes with their\
    \ corresponding numbers\n\t# HINT: use sed to replace all '|' with ' '\n\t# HINT:\
    \ use sed to remove all '.'\n\t# HINT: use sed to remove all 'o'\n\t# HINT: use\
    \ sed to remove all spaces\n\t# HINT: use sed to remove all '\"'\n\t# HINT: use\
    \ sed to remove all '['\n\t# HINT: use sed to remove all ']'\n\t# HINT: use sed\
    \ to remove all ','\n\t# HINT: use sed to remove all '\\n'\n\t# HINT: use sed\
    \ to remove all '\\t'\n\t# HINT: use sed to remove all ' '\n\t# HINT: use sed\
    \ to remove all '\\n'\n\t# HINT: use sed to remove all '\\t'\n\t# HINT: use sed\
    \ to remove all ' '\n\t# HINT: use sed to remove all '\\n'\n\t# HINT: use sed\
    \ to remove all '\\t'\n\t# HINT: use sed to remove all ' '\n\t# HINT: use sed\
    \ to remove all '\\n'\n\t# HINT: use sed to remove all '\\t'\n\t# HINT: use sed\
    \ to remove all ' '\n\t# HINT: use sed to remove all '\\n'\n\t# HINT: use sed\
    \ to remove all '\\t'\n\t# HINT: use sed to remove all ' '\n\t# HINT: use sed\
    \ to remove all '\\n'\n\t# HINT: use sed to remove all '\\t'\n\t# HINT: use sed\
    \ to remove all ' '\n\t# HINT: use sed to remove all '\\n'\n\t# HINT: use sed\
    \ to remove all '\\t'\n\t# HINT: use sed to remove all ' '\n\t# HINT: use sed\
    \ to remove all '\\n'\n\t# HINT: use sed to remove all '\\t'\n\t# HINT: use sed\
    \ to remove all ' '\n\t# HINT: use sed to remove all '\\n'\n\t# HINT: use sed\
    \ to remove all '\\t'\n\t# HINT\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpj4yu61j6.sh: line 49: syntax error near unexpected token `}''\n/tmp/tmpj4yu61j6.sh:
    line 49: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\\
    .|/1/g' -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # HINT: Use tr to remove new lines and\
    \ spaces\n    # HINT: Use sed to replace o| with 2, .| with 1, and o with 4\n\
    \    # HINT: Use tr to replace new lines with spaces\n    # HINT: Use sed to replace\
    \ spaces with commas\n    # HINT: Use sed to add double quotes around each number\n\
    \    # HINT: Use sed to remove the last comma\n    # HINT: Use sed to add square\
    \ brackets around the whole string\n    echo $1 | tr -d '\\n' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/o/4/g' | tr ' ' '\\n' | sed 's/^/\"/g' | sed 's/$/\"\
    /g' | sed ':a;N;$!ba;s/\\n/,/g' | sed 's/,$//g' | sed 's/^/[/g' | sed 's/$/]/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ \"$1\" | tr -d ' ' | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # You can use echo to return a string\n    # Example:\
    \ echo \"Hello World\"\n    echo \"Hello World\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ Write your code here\n  echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # ...\n    # ...\n    # ...\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # Hint: You can use 'echo' to print to\
    \ stdout\n    # Hint: You can use 'read' to read from stdin\n    # Hint: You can\
    \ use 'tr' to replace characters\n    # Hint: You can use 'sed' to replace characters\n\
    \    # Hint: You can use 'awk' to split a string\n    # Hint: You can use 'bc'\
    \ to do math\n    # Hint: You can use 'paste' to join strings\n    # Hint: You\
    \ can use 'seq' to generate a sequence of numbers\n    # Hint: You can use 'xargs'\
    \ to execute a command multiple times\n    # Hint: You can use 'tr' to remove\
    \ characters\n    # Hint: You can use 'sort' to sort lines\n    # Hint: You can\
    \ use 'uniq' to remove duplicates\n    # Hint: You can use 'wc' to count lines\n\
    \    # Hint: You can use 'rev' to reverse lines\n    # Hint: You can use 'head'\
    \ to get the first line\n    # Hint: You can use 'tail' to get the last line\n\
    \    # Hint: You can use 'grep' to filter lines\n    # Hint: You can use 'cut'\
    \ to get a substring\n    # Hint: You can use 'rev' to reverse lines\n    # Hint:\
    \ You can use 'tr' to replace characters\n    # Hint: You can use 'sed' to replace\
    \ characters\n    # Hint: You can use 'awk' to split a string\n    # Hint: You\
    \ can use 'bc' to do math\n    # Hint: You can use 'paste' to join strings\n \
    \   # Hint: You can use 'seq' to generate a sequence of numbers\n    # Hint: You\
    \ can use 'xargs' to execute a command multiple times\n    # Hint: You can use\
    \ 'tr' to remove characters\n    # Hint: You can use 'sort' to sort lines\n  \
    \  # Hint: You can use 'uniq' to remove duplicates\n    # Hint: You can use 'wc'\
    \ to count lines\n    # Hint: You can use 'rev' to reverse lines\n    # Hint\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpepapn1fc.sh: line 45: syntax error near unexpected token `}''\n/tmp/tmpepapn1fc.sh:
    line 45: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=$1\n    local -a notes=($(echo $music | sed 's/o/4/g;s/o|/2/g;s/.|/1/g'))\n\
    \    echo ${notes[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Your code here\n  echo $1 | tr ' ' '\\n' | awk '{\n    if ($1 == \"o\"\
    ) {\n      print \"\\\"4\\\"\"\n    } else if ($1 == \"o|\") {\n      print \"\
    \\\"2\\\"\"\n    } else if ($1 == \".|\") {\n      print \"\\\"1\\\"\"\n    }\n\
    \  }'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\
    \ | sed 's/.*/[\"&\"]/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # Hint: You can use tr, sed, awk, grep,\
    \ etc.\n    # Hint: You can use echo to pass the result to the output\n    # Hint:\
    \ You can use the return value of this function to assign to a variable\n    #\
    \ Hint: You can use the return value of this function as an input to another function\n\
    \    # Hint: You can use the return value of this function as an input to another\
    \ function\n    # Hint: You can use the return value of this function as an input\
    \ to another function\n    # Hint: You can use the return value of this function\
    \ as an input to another function\n    # Hint: You can use the return value of\
    \ this function as an input to another function\n    # Hint: You can use the return\
    \ value of this function as an input to another function\n    # Hint: You can\
    \ use the return value of this function as an input to another function\n    #\
    \ Hint: You can use the return value of this function as an input to another function\n\
    \    # Hint: You can use the return value of this function as an input to another\
    \ function\n    # Hint: You can use the return value of this function as an input\
    \ to another function\n    # Hint: You can use the return value of this function\
    \ as an input to another function\n    # Hint: You can use the return value of\
    \ this function as an input to another function\n    # Hint: You can use the return\
    \ value of this function as an input to another function\n    # Hint: You can\
    \ use the return value of this function as an input to another function\n    #\
    \ Hint: You can use the return value of this function as an input to another function\n\
    \    # Hint: You can use the return value of this function as an input to another\
    \ function\n    # Hint: You can use the return value of this function as an input\
    \ to another function\n    # Hint: You can use the return value of this function\
    \ as an input to another function\n    # Hint: You can use the return value of\
    \ this function as an input to another function\n    # Hint: You can use the return\
    \ value of this function as an input to another function\n    # Hint: You can\
    \ use the return value of this function as an input to another function\n    #\
    \ Hint\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpr0bees3c.sh: line 38: syntax error near unexpected token `}''\n/tmp/tmpr0bees3c.sh:
    line 38: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music_string=$1\n    local music_array=($(echo $music_string | sed 's/|//g'))\n\
    \    local music_length=${#music_array[@]}\n    local music_result=()\n    for\
    \ ((i=0; i<$music_length; i++)); do\n        if [[ ${music_array[$i]} == \"o\"\
    \ ]]; then\n            music_result+=(4)\n        elif [[ ${music_array[$i]}\
    \ == \".\" ]]; then\n            music_result+=(1)\n        fi\n    done\n   \
    \ echo ${music_result[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # This function should return a string with a list\
    \ of integers,\n    # separated by spaces.\n    # Example:\n    # >>> $(parse_music\
    \ \"o o| .| o| o| .| .| .| .| o o\")\n    # ['\"4\"', '\"2\"', '\"1\"', '\"2\"\
    ', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n    #\n   \
    \ # Hint: use tr, sed, grep, awk, etc.\n    # Hint: use echo -n to avoid adding\
    \ a newline to the output.\n    # Hint: use printf to format the output.\n   \
    \ # Hint: use echo -e to interpret escape sequences.\n    # Hint: use echo -n\
    \ to avoid adding a newline to the output.\n    # Hint: use printf to format the\
    \ output.\n    # Hint: use echo -e to interpret escape sequences.\n    # Hint:\
    \ use echo -n to avoid adding a newline to the output.\n    # Hint: use printf\
    \ to format the output.\n    # Hint: use echo -e to interpret escape sequences.\n\
    \    # Hint: use echo -n to avoid adding a newline to the output.\n    # Hint:\
    \ use printf to format the output.\n    # Hint: use echo -e to interpret escape\
    \ sequences.\n    # Hint: use echo -n to avoid adding a newline to the output.\n\
    \    # Hint: use printf to format the output.\n    # Hint: use echo -e to interpret\
    \ escape sequences.\n    # Hint: use echo -n to avoid adding a newline to the\
    \ output.\n    # Hint: use printf to format the output.\n    # Hint: use echo\
    \ -e to interpret escape sequences.\n    # Hint: use echo -n to avoid adding a\
    \ newline to the output.\n    # Hint: use printf to format the output.\n    #\
    \ Hint: use echo -e to interpret escape sequences.\n    # Hint: use echo -n to\
    \ avoid adding a newline to the output.\n    # Hint: use printf to format the\
    \ output.\n\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpbq14j7fj.sh: line 44: syntax error near unexpected token `}''\n/tmp/tmpbq14j7fj.sh:
    line 44: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | tr ' ' '\\n' | awk '{if ($1 == \"o\") print \"4\"; else if ($1 == \"o|\"\
    ) print \"2\"; else if ($1 == \".|\") print \"1\"}' | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    # Hint: use tr to replace 'o' with '4'\
    \ and '.' with '1'\n    # Hint: use tr to replace 'o|' with '2' and '.|' with\
    \ '1'\n    # Hint: use tr to replace 'o' with '4' and '.' with '1'\n    # Hint:\
    \ use tr to replace 'o|' with '2' and '.|' with '1'\n    # Hint: use tr to replace\
    \ 'o' with '4' and '.' with '1'\n    # Hint: use tr to replace 'o|' with '2' and\
    \ '.|' with '1'\n    # Hint: use tr to replace 'o' with '4' and '.' with '1'\n\
    \    # Hint: use tr to replace 'o|' with '2' and '.|' with '1'\n    # Hint: use\
    \ tr to replace 'o' with '4' and '.' with '1'\n    # Hint: use tr to replace 'o|'\
    \ with '2' and '.|' with '1'\n    # Hint: use tr to replace 'o' with '4' and '.'\
    \ with '1'\n    # Hint: use tr to replace 'o|' with '2' and '.|' with '1'\n  \
    \  # Hint: use tr to replace 'o' with '4' and '.' with '1'\n    # Hint: use tr\
    \ to replace 'o|' with '2' and '.|' with '1'\n    # Hint: use tr to replace 'o'\
    \ with '4' and '.' with '1'\n    # Hint: use tr to replace 'o|' with '2' and '.|'\
    \ with '1'\n    # Hint: use tr to replace 'o' with '4' and '.' with '1'\n    #\
    \ Hint: use tr to replace 'o|' with '2' and '.|' with '1'\n    # Hint: use tr\
    \ to replace 'o' with '4' and '.' with '1'\n    # Hint: use tr to replace 'o|'\
    \ with '2' and '.|' with '1'\n    #\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpedgiyhar.sh: line 34: syntax error near unexpected token `}''\n/tmp/tmpedgiyhar.sh:
    line 34: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Your code here\n  echo \"$1\" | tr ' ' '\\n' | awk '{\n    if ($1 == \"\
    o\") {\n      print \"\\\"4\\\"\"\n    } else if ($1 == \"o|\") {\n      print\
    \ \"\\\"2\\\"\"\n    } else if ($1 == \".|\") {\n      print \"\\\"1\\\"\"\n \
    \   }\n  }'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # Hint: You can use awk to split the string\
    \ into array of characters\n    # Hint: You can use awk to split the string into\
    \ array of characters\n    echo $1 | awk '{\n        for (i=1; i<=length; i++)\
    \ {\n            if (substr($0, i, 1) == \"o\") {\n                if (substr($0,\
    \ i+1, 1) == \"|\") {\n                    printf(\"\\\"2\\\" \");\n         \
    \           i++;\n                } else {\n                    printf(\"\\\"\
    4\\\" \");\n                }\n            } else if (substr($0, i, 1) == \".\"\
    ) {\n                printf(\"\\\"1\\\" \");\n            }\n        }\n    }'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=\"$1\"\n    local beats=()\n    local beat=0\n    for (( i=0; i<${#music};\
    \ i++ )); do\n        local char=\"${music:$i:1}\"\n        if [[ \"$char\" ==\
    \ \"o\" ]]; then\n            beat=4\n        elif [[ \"$char\" == \".\" ]]; then\n\
    \            beat=1\n        elif [[ \"$char\" == \"|\" ]]; then\n           \
    \ beats+=(\"$beat\")\n            beat=0\n        fi\n    done\n    beats+=(\"\
    $beat\")\n    echo \"${beats[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  local\
    \ music_string=$1\n  local music_array=($(echo $music_string | tr ' ' '\\n'))\n\
    \  local result_array=()\n  for i in \"${music_array[@]}\"\n  do\n    if [ \"\
    $i\" == \"o\" ]; then\n      result_array+=(\"4\")\n    elif [ \"$i\" == \"o|\"\
    \ ]; then\n      result_array+=(\"2\")\n    elif [ \"$i\" == \".|\" ]; then\n\
    \      result_array+=(\"1\")\n    fi\n  done\n  echo ${result_array[@]}\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\
    \ | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | sed -e\
    \ 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp76w5p9o4.sh: line 140: syntax error near unexpected token `}''\n/tmp/tmp76w5p9o4.sh:
    line 140: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\\
    .|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=\"$1\"\n    local result=\"\"\n    local note=\"\"\n    local note_length=\"\
    \"\n    local note_length_int=0\n    local note_length_int_str=\"\"\n    local\
    \ note_length_int_str_quoted=\"\"\n    local note_length_int_str_quoted_comma=\"\
    \"\n    local note_length_int_str_quoted_comma_result=\"\"\n    local note_length_int_str_quoted_comma_result_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final=\"\"\n    local\
    \ note_length_int_str_quoted_comma_result_final_final_final=\"\"\n    local note_length_int_str_quoted_comma_result_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final_final_final_final_final_final_final=\"\
    \"\n    local note_length_int_str_quoted_comma_result_final_final_final_final_final_final_final\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music_string=$1\n    local music_array=($(echo $music_string | tr \" \"\
    \ \"\\n\"))\n    local music_array_length=${#music_array[@]}\n    local music_array_index=0\n\
    \    local music_array_element=\"\"\n    local music_array_element_length=0\n\
    \    local music_array_element_index=0\n    local music_array_element_char=\"\"\
    \n    local music_array_element_char_value=0\n    local music_array_element_char_value_string=\"\
    \"\n    local music_array_element_char_value_string_length=0\n    local music_array_element_char_value_string_index=0\n\
    \    local music_array_element_char_value_string_char=\"\"\n    local music_array_element_char_value_string_char_value=0\n\
    \    local music_array_element_char_value_string_char_value_string=\"\"\n    local\
    \ music_array_element_char_value_string_char_value_string_length=0\n    local\
    \ music_array_element_char_value_string_char_value_string_index=0\n    local music_array_element_char_value_string_char_value_string_char=\"\
    \"\n    local music_array_element_char_value_string_char_value_string_char_value=0\n\
    \    local music_array_element_char_value_string_char_value_string_char_value_string=\"\
    \"\n    local music_array_element_char_value_string_char_value_string_char_value_string_length=0\n\
    \    local music_array_element_char_value_string_char_value_string_char_value_string_index=0\n\
    \    local music_array_element_char_value_string_char_value_string_char_value_string_char=\"\
    \"\n    local music_array_element_char_value_string_char_value_string_char_value_string_char_value=0\n\
    \    local music_array_element_char_value_string_char_value_string_char_value_string_char_value_string=\"\
    \"\n    local music_array_element_char_\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ your code here\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e\
    \ 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | tr ' ' '\\n' | awk '{\n        if ($1\
    \ == \"o\") {\n            print \"\\\"4\\\"\"\n        } else if ($1 == \"o|\"\
    ) {\n            print \"\\\"2\\\"\"\n        } else if ($1 == \".|\") {\n   \
    \         print \"\\\"1\\\"\"\n        }\n    }'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | tr ' ' '\\n' | tr -d 'o' | tr '.' '1' | tr '|' '\\n' | tr -d '\\n' | wc\
    \ -c\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  local\
    \ music_string=$1\n  local music_array=($(echo $music_string | tr \" \" \"\\n\"\
    ))\n  local music_length=${#music_array[@]}\n  local music_result=\"\"\n  for\
    \ (( i=0; i<$music_length; i++ )); do\n    local music_note=${music_array[$i]}\n\
    \    if [[ $music_note == \"o\" ]]; then\n      music_result+=\"\\\"4\\\" \"\n\
    \    elif [[ $music_note == \"o|\" ]]; then\n      music_result+=\"\\\"2\\\" \"\
    \n    elif [[ $music_note == \".|\" ]]; then\n      music_result+=\"\\\"1\\\"\
    \ \"\n    fi\n  done\n  echo $music_result\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Implement this function.\n  # Hint: You can use awk to split the string\
    \ by ' ' and then process each note.\n  #       You can use 'o' to match whole\
    \ note, 'o|' to match half note, '.|' to match quater note.\n  #       You can\
    \ use '{print $1}' to print the first field of the result.\n  #       You can\
    \ use '{print $1, $2}' to print the first and the second field of the result.\n\
    \  #       You can use '{print $1, $2, $3}' to print the first, the second and\
    \ the third field of the result.\n  #       You can use '{print $1, $2, $3, $4}'\
    \ to print the first, the second, the third and the fourth field of the result.\n\
    \  #       You can use '{print $1, $2, $3, $4, $5}' to print the first, the second,\
    \ the third, the fourth and the fifth field of the result.\n  #       You can\
    \ use '{print $1, $2, $3, $4, $5, $6}' to print the first, the second, the third,\
    \ the fourth, the fifth and the sixth field of the result.\n  #       You can\
    \ use '{print $1, $2, $3, $4, $5, $6, $7}' to print the first, the second, the\
    \ third, the fourth, the fifth, the sixth and the seventh field of the result.\n\
    \  #       You can use '{print $1, $2, $3, $4, $5, $6, $7, $8}' to print the first,\
    \ the second, the third, the fourth, the fifth, the sixth, the seventh and the\
    \ eighth field of the result.\n  #       You can use '{print $1, $2, $3, $4, $5,\
    \ $6, $7, $8, $9}' to print the first, the second, the third, the fourth, the\
    \ fifth, the sixth, the seventh, the eighth and the ninth field of the result.\n\
    \  #       You can use '{print $1, $2, $3, $4,\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpagnxpx95.sh: line 25: syntax error near unexpected token `}''\n/tmp/tmpagnxpx95.sh:
    line 25: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    # echo \"TODO: implement this function\"\
    \n    # echo $1\n    # echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g'\n\
    \    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g' | sed 's/ /,/g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=\"$1\"\n    local -a beats\n    local -a notes\n    local -a beats_per_note\n\
    \    local -a beats_per_note_str\n    local -a beats_per_note_str_escaped\n  \
    \  local -a beats_per_note_str_escaped_quoted\n    local -a beats_per_note_str_escaped_quoted_joined\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str\n    local -a beats_per_note_str_escaped_quoted_joined_str_escaped\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted\n  \
    \  local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped_quoted\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped_quoted_joined\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped_quoted_joined_str\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped_quoted_joined_str_escaped_quoted\n\
    \    local -a beats_per_note_str_escaped_quoted_joined_str_escaped_quoted_joined_str\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  local\
    \ input=$1\n  local output=\"\"\n  local note=\"\"\n  local note_length=0\n  local\
    \ i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    note=${input:$i:1}\n\
    \    if [ \"$note\" == \"o\" ]; then\n      note_length=4\n      i=$((i+1))\n\
    \    elif [ \"$note\" == \".\" ]; then\n      note_length=1\n      i=$((i+2))\n\
    \    else\n      echo \"Invalid input\"\n      return\n    fi\n    if [ $i -lt\
    \ $len ]; then\n      if [ \"${input:$i:1}\" != \"|\" ]; then\n        echo \"\
    Invalid input\"\n        return\n      fi\n    fi\n    output=\"$output \\\"$note_length\\\
    \"\"\n    i=$((i+1))\n  done\n  echo \"[$output]\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ Write your code here\n  echo \"Not implemented yet\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Write your code here\n  #echo $1\n  #echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/.|/1/g'\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -r 's/o/4/g' | sed -r 's/o\\|/2/g' | sed -r 's/\\.\\|/1/g' | sed\
    \ -r 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # ...\n    echo \"\\\"4\\\" \\\"2\\\" \\\"1\\\"\
    \ \\\"2\\\" \\\"2\\\" \\\"1\\\" \\\"1\\\" \\\"1\\\" \\\"1\\\" \\\"4\\\" \\\"4\\\
    \"\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music_string=$1\n    local -a music_array\n    local -a beats_array\n\
    \    local -a beats_string\n    local -i i=0\n    local -i j=0\n    local -i beats=0\n\
    \    local -i beats_count=0\n    local -i beats_sum=0\n    local -i beats_avg=0\n\
    \    local -i beats_median=0\n    local -i beats_mode=0\n    local -i beats_mode_count=0\n\
    \    local -i beats_mode_max=0\n    local -i beats_mode_max_count=0\n    local\
    \ -i beats_mode_max_index=0\n    local -i beats_mode_max_index_count=0\n    local\
    \ -i beats_mode_max_index_count_max=0\n    local -i beats_mode_max_index_count_max_index=0\n\
    \    local -i beats_mode_max_index_count_max_index_count=0\n    local -i beats_mode_max_index_count_max_index_count_max=0\n\
    \    local -i beats_mode_max_index_count_max_index_count_max_index=0\n    local\
    \ -i beats_mode_max_index_count_max_index_count_max_index_count=0\n    local -i\
    \ beats_mode_max_index_count_max_index_count_max_index_count_max=0\n    local\
    \ -i beats_mode_max_index_count_max_index_count_max_index_count_max_index=0\n\
    \    local -i beats_mode_max_index_count_max_index_count_max_index_count_max_index_count=0\n\
    \    local -i beats_mode_max_index_count_max_index_count_max_index_count_max_index_count_max=0\n\
    \    local -i beats_mode_max_index_count_max_index_count_max_index_count_max_index_count_max_index=0\n\
    \    local -i beats_mode_max_index_count_max_index_count_max_index_count_max\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ \"$1\" | tr 'o' '4' | tr '|' '2' | tr '.' '1' | tr ' ' ','\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | tr '\\\
    n' ',' | sed 's/,$//'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # Hint: You can use the following command\
    \ to split the string into an array of characters:\n    # >>> arr=($(echo $1 |\
    \ grep -o .))\n    # Hint: You can use the following command to convert an array\
    \ of characters to an array of integers:\n    # >>> arr=(${arr[@]//o/4})\n   \
    \ # Hint: You can use the following command to convert an array of integers to\
    \ a string:\n    # >>> echo ${arr[@]}\n    arr=($(echo $1 | grep -o .))\n    arr=(${arr[@]//o/4})\n\
    \    arr=(${arr[@]//o|/2})\n    arr=(${arr[@]//.|/1})\n    echo ${arr[@]}\n}\n\
    \ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=\"$1\"\n    local beats=()\n    local beat=0\n    for (( i=0; i<${#music};\
    \ i++ )); do\n        local char=\"${music:$i:1}\"\n        if [[ \"$char\" ==\
    \ \"o\" ]]; then\n            beat=4\n        elif [[ \"$char\" == \".\" ]]; then\n\
    \            beat=1\n        elif [[ \"$char\" == \"|\" ]]; then\n           \
    \ beats+=($beat)\n            beat=0\n        fi\n    done\n    echo \"${beats[@]}\"\
    \n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: implement this function\n    # HINT: use awk to split the string by\
    \ ' '\n    # HINT: use awk to split the string by '|'\n    # HINT: use awk to\
    \ split the string by '.'\n    # HINT: use awk to split the string by 'o'\n  \
    \  # HINT: use awk to split the string by 'o|'\n    # HINT: use awk to split the\
    \ string by '.|'\n    # HINT: use awk to split the string by 'o o'\n    # HINT:\
    \ use awk to split the string by 'o o|'\n    # HINT: use awk to split the string\
    \ by '.| o|'\n    # HINT: use awk to split the string by '.| o| o|'\n    # HINT:\
    \ use awk to split the string by '.| o| o| .|'\n    # HINT: use awk to split the\
    \ string by '.| o| o| .| .|'\n    # HINT: use awk to split the string by '.| o|\
    \ o| .| .| .|'\n    # HINT: use awk to split the string by '.| o| o| .| .| .|\
    \ .|'\n    # HINT: use awk to split the string by '.| o| o| .| .| .| .| o'\n \
    \   # HINT: use awk to split the string by '.| o| o| .| .| .| .| o o'\n    # HINT:\
    \ use awk to split the string by '.| o| o| .| .| .| .| o o|'\n    # HINT: use\
    \ awk to split the string by '.| o| o| .| .| .| .| o o| .|'\n    # HINT: use awk\
    \ to split the string by '.| o| o| .| .| .| .| o o| .| .|'\n    # HINT: use awk\
    \ to split the string by '.| o| o| .| .| .| .| o o| .| .| .|'\n    # HINT: use\
    \ awk to split the string by '.| o| o|\n}\n\ncandidate() {\n    parse_music \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp9xstjsz2.sh: line 34: syntax error near unexpected token `}''\n/tmp/tmp9xstjsz2.sh:
    line 34: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    #echo $1\n    #echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/.|/1/g'\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g'\
    \ | sed 's/\\([0-9]\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g'\
    \ | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | tr\
    \ '\\n' ' ' | sed -e 's/ /\", \"/g' -e 's/^/\"/' -e 's/$/\"/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' | tr ' ' '\\n' | sed\
    \ 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\n\
    candidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g' -e 's/^/[\"\
    /' -e 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed\
    \ 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | tr ' ' '\\n' | tr 'o' '4' | tr '.' '1' | tr '|' '\"' | sed 's/4/4\"/g'\
    \ | sed 's/1/1\"/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ Write your code here\n  # echo $1\n  # echo $1 | sed 's/o/4/g'\n  # echo $1\
    \ | sed 's/o/4/g' | sed 's/o|/2/g'\n  # echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g'\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g' -e 's/ /,/g' -e 's/^/[\"\
    /' -e 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # echo $1\n    # echo \"$1\" | sed 's/o/4/g' | sed\
    \ 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"\
    ]/'\n    echo \"$1\" | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed\
    \ 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=$1\n    local beats=()\n    for note in $music; do\n        case\
    \ $note in\n            o)\n                beats+=(4)\n                ;;\n \
    \           o|)\n                beats+=(2)\n                ;;\n            .|)\n\
    \                beats+=(1)\n                ;;\n        esac\n    done\n    echo\
    \ ${beats[@]}\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmptbokdd3t.sh: line 19: syntax error near unexpected token `)''\n/tmp/tmptbokdd3t.sh:
    line 19: `            o|)''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | tr ' ' '\\n' | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/\\.|/1/g' | sed 's/^/\"/g' | sed 's/$/\"/g' | tr '\\n' ',' | sed 's/,$//g'\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo $1 | tr \" \" \"\\n\" | awk '{if($1==\"\
    o\"){print 4}else if($1==\"o|\"){print 2}else if($1==\".|\"){print 1}}' | tr \"\
    \\n\" \" \"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e\
    \ 's/\\.|/1/g' -e 's/ /,/g' | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  local\
    \ music_string=$1\n  local -a music_array\n  local -a music_array_int\n  local\
    \ -a music_array_int_string\n  local -a music_array_int_string_final\n  local\
    \ -a music_array_int_string_final_string\n  local music_array_int_string_final_string_final\n\
    \  local music_array_int_string_final_string_final_final\n  local music_array_int_string_final_string_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final\n  local\
    \ music_array_int_string_final_string_final_final_final_final_final\n  local music_array_int_string_final_string_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final_final_final_final_final_final_final\n\
    \  local music_array_int_string_final_string_final_final_final_final_final_final_final_final_final_final_final_final\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/\\s/\",\"/g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n \
    \   parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # You can use echo to return a string\n    # Example:\
    \ echo \"Hello World\"\n    echo \"Hello World\"\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\\
    .|/1/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4\
    \ 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # You can use echo to return a value\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g'\
    \ | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\"\
    ) = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4\
    \ 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4\
    \ 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # TODO: Implement this function\n    # Hint: You can use tr to replace all 'o'\
    \ with '4', 'o|' with '2' and '.|' with '1'\n    # Hint: You can use tr to replace\
    \ all 'o' with '4', 'o|' with '2' and '.|' with '1'\n    # Hint: You can use tr\
    \ to replace all 'o' with '4', 'o|' with '2' and '.|' with '1'\n    # Hint: You\
    \ can use tr to replace all 'o' with '4', 'o|' with '2' and '.|' with '1'\n  \
    \  # Hint: You can use tr to replace all 'o' with '4', 'o|' with '2' and '.|'\
    \ with '1'\n    # Hint: You can use tr to replace all 'o' with '4', 'o|' with\
    \ '2' and '.|' with '1'\n    # Hint: You can use tr to replace all 'o' with '4',\
    \ 'o|' with '2' and '.|' with '1'\n    # Hint: You can use tr to replace all 'o'\
    \ with '4', 'o|' with '2' and '.|' with '1'\n    # Hint: You can use tr to replace\
    \ all 'o' with '4', 'o|' with '2' and '.|' with '1'\n    # Hint: You can use tr\
    \ to replace all 'o' with '4', 'o|' with '2' and '.|' with '1'\n    # Hint: You\
    \ can use tr to replace all 'o' with '4', 'o|' with '2' and '.|' with '1'\n  \
    \  # Hint: You can use tr to replace all 'o' with '4', 'o|' with '2' and '.|'\
    \ with '1'\n    # Hint: You can use tr to replace all 'o' with '4', 'o|' with\
    \ '2' and '.|' with '1'\n    # Hint: You can use tr to replace all 'o' with '4',\
    \ 'o|' with '2' and '.|' with '1\n}\n\ncandidate() {\n    parse_music \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpvw125i3o.sh: line 27: syntax error near unexpected token `}''\n/tmp/tmpvw125i3o.sh:
    line 27: `}''\n"'
  stdout: b''
  timestamp: 1660358529
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  local\
    \ music_string=$1\n  local music_array=($(echo $music_string | tr ' ' '\\n'))\n\
    \  local result_array=()\n  for note in \"${music_array[@]}\"\n  do\n    if [\
    \ \"$note\" == \"o\" ]; then\n      result_array+=(\"4\")\n    elif [ \"$note\"\
    \ == \"o|\" ]; then\n      result_array+=(\"2\")\n    elif [ \"$note\" == \".|\"\
    \ ]; then\n      result_array+=(\"1\")\n    fi\n  done\n  echo ${result_array[@]}\n\
    }\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n\
    \    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o|\
    \ o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o|\
    \ .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: implement this function\n  echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' |\
    \ sed 's/\\.|/1/g' | sed 's/ /,/g' | sed 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  local\
    \ music=\"$1\"\n  local beats=()\n  local beat=0\n  for note in $music; do\n \
    \   if [[ $note == \"o\" ]]; then\n      beat=4\n    elif [[ $note == \"o|\" ]];\
    \ then\n      beat=2\n    elif [[ $note == \".|\" ]]; then\n      beat=1\n   \
    \ fi\n    beats+=(\"$beat\")\n  done\n  echo \"${beats[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | tr -d ' ' | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\.|/1/g'\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\\
    .|/1/g' | sed 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=\"$1\"\n    local notes=($(echo \"$music\" | sed 's/o/4/g;s/o|/2/g;s/.|/1/g'))\n\
    \    echo \"${notes[@]}\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # You can use the following command to split the\
    \ string into an array:\n    # arr=(${1//|/ })\n    # You can use the following\
    \ command to print the output:\n    # echo \"[$(IFS=,; echo \"${arr[*]}\")]\"\n\
    \    arr=(${1//|/ })\n    for i in \"${!arr[@]}\"; do\n        if [ \"${arr[$i]}\"\
    \ == \"o\" ]; then\n            arr[$i]=\"4\"\n        elif [ \"${arr[$i]}\" ==\
    \ \"o\" ]; then\n            arr[$i]=\"2\"\n        elif [ \"${arr[$i]}\" == \"\
    .|\" ]; then\n            arr[$i]=\"1\"\n        fi\n    done\n    echo \"[$(IFS=,;\
    \ echo \"${arr[*]}\")]\"\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\"\
    \ ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n \
    \   [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ local music=\"$1\"\n    local -a beats\n    local -a notes=($(echo \"$music\"\
    \ | sed 's/|//g'))\n    local -a durations=($(echo \"$music\" | sed 's/o//g'))\n\
    \    local i=0\n    for note in \"${notes[@]}\"; do\n        if [[ \"$note\" ==\
    \ \"o\" ]]; then\n            beats[$i]=4\n        else\n            beats[$i]=1\n\
    \        fi\n        i=$((i+1))\n    done\n    i=0\n    for duration in \"${durations[@]}\"\
    ; do\n        if [[ \"$duration\" == \"|\" ]]; then\n            beats[$i]=$((beats[$i]/2))\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"${beats[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # echo $1\n    # echo $2\n    # echo $3\n    # echo\
    \ $4\n    # echo $5\n    # echo $6\n    # echo $7\n    # echo $8\n    # echo $9\n\
    \    # echo ${10}\n    # echo ${11}\n    # echo ${12}\n    # echo ${13}\n    #\
    \ echo ${14}\n    # echo ${15}\n    # echo ${16}\n    # echo ${17}\n    # echo\
    \ ${18}\n    # echo ${19}\n    # echo ${20}\n    # echo ${21}\n    # echo ${22}\n\
    \    # echo ${23}\n    # echo ${24}\n    # echo ${25}\n    # echo ${26}\n    #\
    \ echo ${27}\n    # echo ${28}\n    # echo ${29}\n    # echo ${30}\n    # echo\
    \ ${31}\n    # echo ${32}\n    # echo ${33}\n    # echo ${34}\n    # echo ${35}\n\
    \    # echo ${36}\n    # echo ${37}\n    # echo ${38}\n    # echo ${39}\n    #\
    \ echo ${40}\n    # echo ${41}\n    # echo ${42}\n    # echo ${43}\n    # echo\
    \ ${44}\n    # echo ${45}\n    # echo ${46}\n    # echo ${47}\n    # echo ${48}\n\
    \    # echo ${49}\n    # echo ${50}\n    # echo ${51}\n    # echo ${52}\n    #\
    \ echo ${53}\n    # echo ${54}\n    # echo ${55}\n    # echo ${56}\n    # echo\
    \ ${57}\n    # echo ${58}\n    # echo ${59}\n    # echo ${60}\n    # echo ${61}\n\
    \    # echo ${62}\n    # echo ${63}\n    # echo ${64}\n    # echo ${65}\n    #\
    \ echo ${66}\n    # echo ${67}\n    # echo ${68}\n    # echo ${69}\n    # echo\
    \ ${70}\n    # echo ${71}\n    # echo ${72}\n    # echo ${73}\n    #\n}\n\ncandidate()\
    \ {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp2wnisz60.sh: line 87: syntax error near unexpected token `}''\n/tmp/tmp2wnisz60.sh:
    line 87: `}''\n"'
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  echo\
    \ $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/\\.|/1/g' | sed 's/ /,/g' | sed\
    \ 's/^/[\"/' | sed 's/$/\"]/'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1\
    \ 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n\
    \    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358529
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # your code here\n    echo \"$1\" | sed -e 's/o/4/g' -e 's/o|/2/g' -e 's/\\\
    .|/1/g' -e 's/ /,/g'\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\"\
    ) = \"4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n   \
    \ [[ $(candidate \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate\
    \ \"o| .| o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n  #\
    \ TODO: Implement this function.\n  # Hint: You can use sed, grep, awk, tr, head,\
    \ tail, etc.\n  # Hint: You can use echo, printf, etc.\n  # Hint: You can use\
    \ bc.\n  # Hint: You can use pipes.\n  # Hint: You can use arrays.\n  # Hint:\
    \ You can use loops.\n  # Hint: You can use conditionals.\n  # Hint: You can use\
    \ variables.\n  # Hint: You can use functions.\n  # Hint: You can use return.\n\
    \  # Hint: You can use exit.\n  # Hint: You can use read.\n  # Hint: You can use\
    \ echo -e.\n  # Hint: You can use echo -n.\n  # Hint: You can use echo -ne.\n\
    \  # Hint: You can use echo -en.\n  # Hint: You can use echo -e \"\\n\".\n  #\
    \ Hint: You can use echo -e \"\\t\".\n  # Hint: You can use echo -e \"\\b\".\n\
    \  # Hint: You can use echo -e \"\\r\".\n  # Hint: You can use echo -e \"\\033[1A\"\
    .\n  # Hint: You can use echo -e \"\\033[1B\".\n  # Hint: You can use echo -e\
    \ \"\\033[1C\".\n  # Hint: You can use echo -e \"\\033[1D\".\n  # Hint: You can\
    \ use echo -e \"\\033[1E\".\n  # Hint: You can use echo -e \"\\033[1F\".\n  #\
    \ Hint: You can use echo -e \"\\033[1G\".\n  # Hint: You can use echo -e \"\\\
    033[1H\".\n  # Hint: You can use echo -e \"\\033[1I\".\n  # Hint: You can use\
    \ echo -e \"\\033[1J\".\n  # Hint: You can use echo -e \"\\033[1K\".\n  # Hint:\
    \ You can use echo -e \"\\033[1L\".\n  # Hint: You can use echo -e \"\\033[1M\"\
    .\n  # Hint:\n}\n\ncandidate() {\n    parse_music \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"o o o o\") = \"\
    4 4 4 4\" ]]\n    [[ $(candidate \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate\
    \ \"o| o| .| .| o o o o\") = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .|\
    \ o| .| o o| o o|\") = \"2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpw5fijzup.sh: line 47: syntax error near unexpected token `}''\n/tmp/tmpw5fijzup.sh:
    line 47: `}''\n"'
  stdout: b''
  timestamp: 1660358530
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string representing musical\
    \ notes in a special ASCII format.\n# Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n# not last.\n# Here\
    \ is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts\
    \ two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o|\
    \ .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"',\
    \ '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\nparse_music() {\n   \
    \ # Write your code here\n    # echo $1\n    # echo $1 | sed 's/o/4/g' | sed 's/o|/2/g'\
    \ | sed 's/.|/1/g'\n    echo $1 | sed 's/o/4/g' | sed 's/o|/2/g' | sed 's/.|/1/g'\
    \ | sed 's/\\s/\", \"/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n\
    \    parse_music \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"o o o o\") = \"4 4 4 4\" ]]\n    [[ $(candidate\
    \ \".| .| .| .|\") = \"1 1 1 1\" ]]\n    [[ $(candidate \"o| o| .| .| o o o o\"\
    ) = \"2 2 1 1 4 4 4 4\" ]]\n    [[ $(candidate \"o| .| o| .| o o| o o|\") = \"\
    2 1 2 1 4 2 4 2\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660358530
