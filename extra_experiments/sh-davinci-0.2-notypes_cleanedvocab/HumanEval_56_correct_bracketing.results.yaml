language: sh
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"<\" ]]; then\n            stack=\"$stack$c\"\n        elif [[ $c == \"\
    >\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=${stack:0:-1}\n  \
    \      fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n   \
    \ else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            count=$((count+1))\n        elif [[ ${brackets:$i:1} ==\
    \ \">\" ]]; then\n            count=$((count-1))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n            stack+=(\"$bracket\")\n     \
    \   elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket == \">\" ]];\
    \ then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  [[ -z $stack ]] && echo\
    \ \"true\" || echo \"false\"\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_brackets=0\n  local\
    \ close_brackets=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"<\" ]]; then\n      open_brackets=$((open_brackets +\
    \ 1))\n    elif [[ $bracket == \">\" ]]; then\n      close_brackets=$((close_brackets\
    \ + 1))\n    fi\n    if [[ $close_brackets -gt $open_brackets ]]; then\n     \
    \ echo \"false\"\n      return\n    fi\n  done\n  if [[ $open_brackets -eq $close_brackets\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ \"$count\" -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ \"$count\" -eq 0\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ \"$count\" -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ \"$count\" -eq 0\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      (( count++ ))\n    elif [[ \"$char\" == \">\"\
    \ ]]; then\n      (( count-- ))\n    fi\n    if [[ $count -lt 0 ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            return 1\n        fi\n    done\n    (( count == 0 ))\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if\
    \ [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local char=${brackets:$i:1}\n    if [[ $char == \"<\" ]]; then\n\
    \      stack+=($char)\n    elif [[ $char == \">\" ]]; then\n      if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"false\"\n        return\n      fi\n      unset\
    \ stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ \"\
    $bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local bracket_stack=()\n  local\
    \ bracket_stack_size=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"<\" ]]; then\n      bracket_stack[$bracket_stack_size]=\"\
    <\"\n      (( bracket_stack_size++ ))\n    elif [[ $bracket == \">\" ]]; then\n\
    \      if [[ $bracket_stack_size -eq 0 ]]; then\n        echo \"false\"\n    \
    \    return\n      fi\n      (( bracket_stack_size-- ))\n    fi\n  done\n  if\
    \ [[ $bracket_stack_size -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $c == \">\" ]];\
    \ then\n            if [[ -z $stack ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            stack=${stack%?}\n      \
    \  fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            open_count=$(( open_count + 1 ))\n        elif\
    \ [[ ${brackets:$i:1} == \">\" ]]; then\n            close_count=$(( close_count\
    \ + 1 ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=''\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == '<' ]];\
    \ then\n      stack+='<'\n    elif [[ $bracket == '>' ]]; then\n      if [[ -z\
    \ $stack ]]; then\n        echo \"false\"\n        return\n      fi\n      stack=${stack%?}\n\
    \    fi\n  done\n  if [[ -z $stack ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            count=$((count+1))\n        elif [[ ${brackets:$i:1} == \">\" ]];\
    \ then\n            count=$((count-1))\n        fi\n        if [[ $count -lt 0\
    \ ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ \"\
    $bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      stack=\"$stack$char\"\n    elif [[ \"$char\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local bracket_stack=\"\"\
    \n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            bracket_stack=\"$bracket_stack<\"\
    \n        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"$bracket_stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            bracket_stack=\"${bracket_stack:1}\"\n        fi\n\
    \    done\n    if [[ \"$bracket_stack\" == \"\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_count=0\n  local close_count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n      (( open_count++ ))\n    elif [[ ${brackets:$i:1} == \">\" ]];\
    \ then\n      (( close_count++ ))\n    fi\n  done\n  if [[ $open_count -eq $close_count\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack+=\"<\"\n    elif [[ $bracket == \">\" ]]; then\n\
    \      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n            (( open_brackets++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n            (( close_brackets++\
    \ ))\n        fi\n        if (( close_brackets > open_brackets )); then\n    \
    \        echo \"false\"\n            return\n        fi\n    done\n    if (( open_brackets\
    \ == close_brackets )); then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            count=$((count+1))\n        elif [[ ${brackets:$i:1} == \">\" ]];\
    \ then\n            count=$((count-1))\n        fi\n        if [[ $count -lt 0\
    \ ]]; then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ \"\
    $bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            return 1\n        fi\n    done\n\
    \    return $count\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=${brackets:$i:1}\n    if [[ \"$char\"\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$char\" == \">\" ]];\
    \ then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack%?}\n    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    brackets=$1\n    # TODO: implement this function\n\
    \    # Hint: use the `expr` command\n    # Hint: use the `tr` command\n    # Hint:\
    \ use the `wc` command\n    # Hint: use the `bc` command\n    # Hint: use the\
    \ `sed` command\n    # Hint: use the `grep` command\n    # Hint: use the `cut`\
    \ command\n    # Hint: use the `head` command\n    # Hint: use the `tail` command\n\
    \    # Hint: use the `sort` command\n    # Hint: use the `uniq` command\n    #\
    \ Hint: use the `tr` command\n    # Hint: use the `wc` command\n    # Hint: use\
    \ the `bc` command\n    # Hint: use the `sed` command\n    # Hint: use the `grep`\
    \ command\n    # Hint: use the `cut` command\n    # Hint: use the `head` command\n\
    \    # Hint: use the `tail` command\n    # Hint: use the `sort` command\n    #\
    \ Hint: use the `uniq` command\n    # Hint: use the `tr` command\n    # Hint:\
    \ use the `wc` command\n    # Hint: use the `bc` command\n    # Hint: use the\
    \ `sed` command\n    # Hint: use the `grep` command\n    # Hint: use the `cut`\
    \ command\n    # Hint: use the `head` command\n    # Hint: use the `tail` command\n\
    \    # Hint: use the `sort` command\n    # Hint: use the `uniq` command\n    #\
    \ Hint: use the `tr` command\n    # Hint: use the `wc` command\n    # Hint: use\
    \ the `bc` command\n    # Hint: use the `sed` command\n    # Hint: use the `grep`\
    \ command\n    # Hint: use the `cut` command\n    # Hint: use the `head` command\n\
    \    # Hint: use the `tail` command\n    # Hint: use the `sort` command\n    #\
    \ Hint: use\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            count=$(( count + 1 ))\n\
    \        elif [[ \"$char\" == \">\" ]]; then\n            count=$(( count - 1\
    \ ))\n        fi\n        if [[ $count -lt 0 ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        return 1\n  \
    \    fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  [[ -z \"$stack\" ]]\n}\n\
    \ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  brackets=$1\n  # TODO: implement this function\n  #\
    \ Hint: use a stack\n  stack=()\n  for (( i=0; i<${#brackets}; i++ )); do\n  \
    \  if [[ ${brackets:$i:1} == \"<\" ]]; then\n      stack+=(${brackets:$i:1})\n\
    \    else\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n \
    \       return\n      else\n        stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n\
    \      fi\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      return 1\n    fi\n  done\n  [[ $count\
    \ -eq 0 ]]\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    [[ -z \"\
    $stack\" ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    # TODO: implement this function\n    # Hint: use the\
    \ `tr` command to replace all \"<\" with \"1\" and all \">\" with \"-1\".\n  \
    \  # Then use the `bc` command to evaluate the sum of the resulting string.\n\
    \    # If the sum is 0, then the brackets are balanced.\n    # If the sum is not\
    \ 0, then the brackets are not balanced.\n    #\n    # For example:\n    # >>>\
    \ $(correct_bracketing \"<>\")\n    # \"true\"\n    # >>> $(correct_bracketing\
    \ \"<<><>>\")\n    # \"true\"\n    # >>> $(correct_bracketing \"><<>\")\n    #\
    \ \"false\"\n    #\n    # Hint: use the `bc` command to evaluate the sum of the\
    \ resulting string.\n    # If the sum is 0, then the brackets are balanced.\n\
    \    # If the sum is not 0, then the brackets are not balanced.\n    #\n    #\
    \ For example:\n    # >>> $(correct_bracketing \"<>\")\n    # \"true\"\n    #\
    \ >>> $(correct_bracketing \"<<><>>\")\n    # \"true\"\n    # >>> $(correct_bracketing\
    \ \"><<>\")\n    # \"false\"\n    #\n    # Hint: use the `bc` command to evaluate\
    \ the sum of the resulting string.\n    # If the sum is 0, then the brackets are\
    \ balanced.\n    # If the sum is not 0, then the brackets are not balanced.\n\
    \    #\n    # For example:\n    # >>> $(correct_bracketing \"<>\")\n    # \"true\"\
    \n    # >>> $(correct_bracketing \"<<><>>\")\n    # \"true\"\n    # >>> $(correct_bracketing\
    \ \"><<>\")\n    # \"false\"\n    #\n    # Hint: use the `bc` command to evaluate\
    \ the sum of the resulting string.\n    # If the sum is 0, then the brackets are\
    \ balanced.\n    # If the sum is not 0, then the brackets are not balanced.\n\
    \    #\n    # For example:\n    # >>> $(correct_bracketing \"<>\")\n    # \"true\"\
    \n    # >>> $(correct_bracketing \"<<><>>\")\n   \n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp58xyiw3y.sh: line 60: syntax error near unexpected token `}''\n/tmp/tmp58xyiw3y.sh:
    line 60: `}''\n"'
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack+=\"<\"\n    elif [[ $bracket == \">\" ]]; then\n\
    \      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=${stack::-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=($char)\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open=0\n    local close=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"<\" ]]; then\n            open=$((open+1))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            close=$((close+1))\n        fi\n    done\n  \
    \  if [[ $open -eq $close ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      count=$((count+1))\n\
    \    else\n      count=$((count-1))\n    fi\n    if [[ $count -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[ $char\
    \ == \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack%?}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local char=${brackets:$i:1}\n    if [[ $char == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ $char == \">\" ]]; then\n      (( count-- ))\n\
    \    fi\n    if [[ $count < 0 ]]; then\n      echo \"false\"\n      return\n \
    \   fi\n  done\n  if [[ $count == 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1} == \">\"\
    \ ]]; then\n            count=$(( count - 1 ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket == \">\" ]];\
    \ then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            open_count=$((open_count+1))\n        elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    brackets=\"$1\"\n    # TODO: implement this function\n\
    \    # return true or false\n    return false\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpkkg6mghu.sh: line 16: return: false: numeric argument required\n'''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  local i\n  for\
    \ ((i=0; i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if\
    \ [[ $bracket == \"<\" ]]; then\n      stack+=(\"<\")\n    elif [[ $bracket ==\
    \ \">\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ $char == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $char ==\
    \ \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      count=$(( count\
    \ + 1 ))\n    else\n      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt\
    \ 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      count=$(( count\
    \ + 1 ))\n    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      count=$(( count\
    \ - 1 ))\n    fi\n    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n    \
    \  return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=(\"<\")\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      count=$(( count + 1 ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt 0 ]]; then\n     \
    \ echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n  \
    \      elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    brackets=$1\n    stack=\"\"\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n         \
    \   stack=\"$stack<\"\n        else\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n  \
    \      elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                return 1\n            fi\n            stack=\"${stack:0:-1}\"\
    \n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n \
    \   else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 2
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local bracket_stack=()\n  \
    \  local bracket_stack_size=0\n    local bracket_stack_top=0\n    local bracket_stack_push()\
    \ {\n        bracket_stack[$bracket_stack_size]=$1\n        ((bracket_stack_size++))\n\
    \    }\n    local bracket_stack_pop() {\n        ((bracket_stack_size--))\n  \
    \      bracket_stack_top=${bracket_stack[$bracket_stack_size]}\n    }\n    local\
    \ bracket_stack_is_empty() {\n        [[ $bracket_stack_size -eq 0 ]]\n    }\n\
    \    local bracket_stack_top_is_matching() {\n        [[ $bracket_stack_top =~\
    \ ^$1$ ]]\n    }\n    local bracket_stack_top_is_opening() {\n        [[ $bracket_stack_top\
    \ =~ ^<$ ]]\n    }\n    local bracket_stack_top_is_closing() {\n        [[ $bracket_stack_top\
    \ =~ ^>$ ]]\n    }\n    local bracket_stack_top_is_matching_opening() {\n    \
    \    bracket_stack_top_is_matching \"<\"\n    }\n    local bracket_stack_top_is_matching_closing()\
    \ {\n        bracket_stack_top_is_matching \">\"\n    }\n    local bracket_is_opening()\
    \ {\n        [[ $1 =~ ^<$ ]]\n    }\n    local bracket_is_closing() {\n      \
    \  [[ $1 =~ ^>$ ]]\n    }\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ bracket=${brackets:$i:1}\n        if bracket_is_opening \"$bracket\"; then\n\
    \            bracket_stack_push \"$bracket\"\n        elif bracket_is_closing\
    \ \"$bracket\"; then\n            if bracket_stack_is_empty; then\n          \
    \      echo \"false\"\n                return\n            fi\n            bracket_stack_pop\n\
    \            if ! bracket_stack_top_is_matching_opening; then\n              \
    \  echo \"false\"\n                return\n            fi\n        fi\n\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpt_5lm0fn.sh: line 17: syntax error near unexpected token `(''\n/tmp/tmpt_5lm0fn.sh:
    line 17: `    local bracket_stack_push() {''\n"'
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack+=\"<\"\n    elif [[ $bracket == \">\" ]]; then\n\
    \      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=${stack%?}\n    fi\n  done\n  if [[ -z $stack ]]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      return 1\n    fi\n\
    \  done\n  (( count == 0 ))\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_brackets=0\n   \
    \ for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"\
    <\" ]]; then\n            open_brackets=$((open_brackets+1))\n        elif [[\
    \ ${brackets:$i:1} == \">\" ]]; then\n            open_brackets=$((open_brackets-1))\n\
    \        fi\n        if [[ $open_brackets -lt 0 ]]; then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    if [[ $open_brackets -eq\
    \ 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  local char\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    char=${brackets:$i:1}\n    if [[\
    \ $char == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $char == \">\"\
    \ ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_brackets=0\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n  \
    \    open_brackets=$((open_brackets + 1))\n    elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n      open_brackets=$((open_brackets - 1))\n    fi\n    if [[ $open_brackets\
    \ < 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[ $open_brackets\
    \ == 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            ((count++))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            ((count--))\n        fi\n        if [[ $count -lt 0 ]]; then\n  \
    \          echo \"false\"\n            return\n        fi\n    done\n    if [[\
    \ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1} == \">\"\
    \ ]]; then\n            count=$(( count - 1 ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      count=$(( count\
    \ + 1 ))\n    else\n      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt\
    \ 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n        if [[ $c\
    \ == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $c == \">\" ]];\
    \ then\n            if [[ -z $stack ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            stack=${stack::-1}\n    \
    \    fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n  \
    \  [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \">\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=${brackets:$i:1}\n    if [[ \"$char\"\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$char\" == \">\" ]];\
    \ then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack%?}\n    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            (( count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            (( count-- ))\n        fi\n        if (( count < 0 )); then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    if ((\
    \ count == 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\n\
    \        if [[ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n  \
    \      elif [[ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            (( count++ ))\n  \
    \      elif [[ \"$bracket\" == \">\" ]]; then\n            (( count-- ))\n   \
    \     else\n            echo \"Error: invalid character $bracket\"\n         \
    \   return 1\n        fi\n        if (( count < 0 )); then\n            echo \"\
    false\"\n            return 0\n        fi\n    done\n    if (( count == 0 ));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=''\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == '<' ]];\
    \ then\n      stack+='<'\n    elif [[ $bracket == '>' ]]; then\n      if [[ -z\
    \ $stack ]]; then\n        echo 'false'\n        return\n      fi\n      stack=${stack::-1}\n\
    \    fi\n  done\n  if [[ -z $stack ]]; then\n    echo 'true'\n  else\n    echo\
    \ 'false'\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n        if\
    \ [[ $char == \"<\" ]]; then\n            (( count++ ))\n        elif [[ $char\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if [[ $count\
    \ < 0 ]]; then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if [[ $count == 0 ]]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open_count=0\n  \
    \  local close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"<\" ]]; then\n     \
    \       (( open_count++ ))\n        elif [[ \"$char\" == \">\" ]]; then\n    \
    \        (( close_count++ ))\n        else\n            echo \"false\"\n     \
    \       return\n        fi\n        if (( close_count > open_count )); then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ (( open_count == close_count )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      count=$(( count\
    \ + 1 ))\n    else\n      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt\
    \ 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  [[ $count\
    \ -eq 0 ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_brackets=0\n   \
    \ local closed_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n      \
    \  if [[ ${brackets:$i:1} == \"<\" ]]; then\n            open_brackets=$(( open_brackets\
    \ + 1 ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n            closed_brackets=$((\
    \ closed_brackets + 1 ))\n        fi\n    done\n    if [[ $open_brackets -eq $closed_brackets\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=\"${brackets:$i:1}\"\n    if [[ \"\
    $char\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$char\" == \"\
    >\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\n   \
    \     return\n      fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if [[\
    \ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n        if [[\
    \ \"$char\" == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ \"$char\" == \">\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n      fi\n      unset\
    \ stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local bracket_stack=\"\"\n\
    \  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      bracket_stack=\"$bracket_stack$bracket\"\
    \n    elif [[ \"$bracket\" == \">\" ]]; then\n      if [[ -z \"$bracket_stack\"\
    \ ]]; then\n        echo \"false\"\n        return\n      fi\n      bracket_stack=\"\
    ${bracket_stack:0:-1}\"\n    fi\n  done\n  if [[ -z \"$bracket_stack\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket == \">\" ]];\
    \ then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n    if [[ -z\
    \ \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local stack=\"\"\n    for\
    \ ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"<\" ]]; then\n            stack=\"$stack<\"\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n  \
    \  if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local count=0\n    for (( i=0;\
    \ i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n\
    \            ((count++))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n\
    \            ((count--))\n        fi\n        if [[ $count -lt 0 ]]; then\n  \
    \          echo \"false\"\n            return\n        fi\n    done\n    if [[\
    \ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local bracket_count=0\n   \
    \ for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"<\" ]]; then\n            bracket_count=$((bracket_count\
    \ + 1))\n        elif [[ $bracket == \">\" ]]; then\n            bracket_count=$((bracket_count\
    \ - 1))\n        fi\n        if [[ $bracket_count -lt 0 ]]; then\n           \
    \ echo \"false\"\n            return\n        fi\n    done\n    if [[ $bracket_count\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=()\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=($bracket)\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $bracket == \">\" ]];\
    \ then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            open_count=$((open_count +\
    \ 1))\n        elif [[ $char == \">\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        else\n            echo \"false\"\n            return\n      \
    \  fi\n        if [[ $open_count -lt $close_count ]]; then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open_count=0\n  local\
    \ close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=\"\
    ${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"<\" ]]; then\n      (( open_count++\
    \ ))\n    elif [[ \"$bracket\" == \">\" ]]; then\n      (( close_count++ ))\n\
    \    else\n      echo \"invalid bracket: $bracket\"\n      return 1\n    fi\n\
    \    if [[ \"$close_count\" -gt \"$open_count\" ]]; then\n      echo \"false\"\
    \n      return 0\n    fi\n  done\n  if [[ \"$open_count\" -eq \"$close_count\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    local char=${brackets:$i:1}\n    if [[ $char == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ $char == \">\" ]]; then\n      (( count-- ))\n\
    \    fi\n    if [[ $count < 0 ]]; then\n      echo \"false\"\n      return\n \
    \   fi\n  done\n  [[ $count == 0 ]] && echo \"true\" || echo \"false\"\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"\
    <><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open=0\n  local close=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"\
    <\" ]]; then\n      (( open++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]];\
    \ then\n      (( close++ ))\n    fi\n    if (( close > open )); then\n      echo\
    \ \"false\"\n      return\n    fi\n  done\n  if (( open == close )); then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local open_brackets=0\n  local\
    \ close_brackets=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n      (( open_brackets++ ))\n    elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n      (( close_brackets++ ))\n    fi\n    if (( close_brackets\
    \ > open_brackets )); then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if (( open_brackets == close_brackets )); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local open_count=0\n    local\
    \ close_count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"<\" ]]; then\n            (( open_count++ ))\n     \
    \   elif [[ $char == \">\" ]]; then\n            (( close_count++ ))\n       \
    \ fi\n        if [[ $close_count -gt $open_count ]]; then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"\
    true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      count=$(( count\
    \ + 1 ))\n    else\n      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt\
    \ 0 ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local open_brackets=0\n  local\
    \ close_brackets=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n      (( open_brackets++ ))\n    else\n      (( close_brackets++\
    \ ))\n    fi\n    if (( close_brackets > open_brackets )); then\n      echo \"\
    false\"\n      return\n    fi\n  done\n  if (( open_brackets == close_brackets\
    \ )); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[\
    \ \"$bracket\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"$bracket\"\
    \ == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=\"${stack%?}\"\n    fi\n  done\n  [[ -z\
    \ \"$stack\" ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack+=\"<\"\n        elif [[ $bracket\
    \ == \">\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack::-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=${brackets:$i:1}\n    if [[ $bracket == \"<\" ]];\
    \ then\n      stack+=($bracket)\n    elif [[ $bracket == \">\" ]]; then\n    \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\n        return\n\
    \      fi\n      stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n    fi\n  done\n  if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\")\
    \ = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
    ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
    \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local open=0\n    local\
    \ close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n            open=$(( open + 1 ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n            close=$(( close + 1 ))\n        fi\n        if\
    \ [[ $close -gt $open ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $open -eq $close ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=$1\n    local stack=\"\"\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n        if\
    \ [[ $bracket == \"<\" ]]; then\n            stack=\"$stack<\"\n        elif [[\
    \ $bracket == \">\" ]]; then\n            if [[ $stack == \"\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=${stack:0:-1}\n        fi\n    done\n    if [[ $stack == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=()\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local char=${brackets:$i:1}\n    if [[ \"$char\" == \"<\" ]];\
    \ then\n      stack+=(\"<\")\n    elif [[ \"$char\" == \">\" ]]; then\n      if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        return 1\n      fi\n      unset stack[${#stack[@]}-1]\n\
    \    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    return 0\n  else\n \
    \   return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      count=$(( count + 1 ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt 0 ]]; then\n     \
    \ echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    <>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ ${brackets:$i:1} == \"<\" ]]; then\n      (( count++ ))\n\
    \    elif [[ ${brackets:$i:1} == \">\" ]]; then\n      (( count-- ))\n    fi\n\
    \    if [[ $count -lt 0 ]]; then\n      echo \"false\"\n      return\n    fi\n\
    \  done\n  if [[ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"\
    <<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=$1\n  local stack=\"\"\n  for ((i=0;\
    \ i<${#brackets}; i++)); do\n    local char=${brackets:$i:1}\n    if [[ $char\
    \ == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ $char == \">\" ]]; then\n\
    \      if [[ -z $stack ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n      stack=${stack%?}\n    fi\n  done\n  if [[ -z $stack ]]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if (( count == 0 )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate\
    \ \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n\
    \    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\"\
    \ ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") =\
    \ \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n  local brackets=\"$1\"\n  local count=0\n  for (( i=0;\
    \ i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n\
    \      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n   \
    \   (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\n\
    \      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"<>\") = \"true\" ]]\n\
    \    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\") = \"true\"\
    \ ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate \"\
    ><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660357735
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n\
    correct_bracketing() {\n    local brackets=\"$1\"\n    local count=0\n    for\
    \ (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} == \"<\"\
    \ ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1} == \"\
    >\" ]]; then\n            (( count-- ))\n        fi\n        if (( count < 0 ));\
    \ then\n            return 1\n        fi\n    done\n    return $count\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") = \"true\" ]]\n    [[\
    \ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate \"<><><<<><><>><>><<><><<>>>\"\
    ) = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\") = \"false\" ]]\n    [[ $(candidate\
    \ \"><<>\") = \"false\" ]]\n    [[ $(candidate \"<\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<<<\") = \"false\" ]]\n    [[ $(candidate \">\") = \"false\" ]]\n    [[ $(candidate\
    \ \"<<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>><<>\") = \"false\"\
    \ ]]\n    [[ $(candidate \"<><><<><>><>>><>\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660357735
