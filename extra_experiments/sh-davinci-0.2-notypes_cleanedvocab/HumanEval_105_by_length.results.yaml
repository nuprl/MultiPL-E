language: sh
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    for\
    \ i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n    \
    \        result+=(\"$i\")\n        fi\n    done\n    if [[ ${#result[@]} -eq 0\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo -n \"[\"\n        for\
    \ i in $(seq ${#result[@]} -1 0); do\n            case ${result[$i]} in\n    \
    \            1) echo -n '\"One\"' ;;\n                2) echo -n '\"Two\"' ;;\n\
    \                3) echo -n '\"Three\"' ;;\n                4) echo -n '\"Four\"\
    ' ;;\n                5) echo -n '\"Five\"' ;;\n                6) echo -n '\"\
    Six\"' ;;\n                7) echo -n '\"Seven\"' ;;\n                8) echo\
    \ -n '\"Eight\"' ;;\n                9) echo -n '\"Nine\"' ;;\n            esac\n\
    \            if [[ $i -gt 0 ]]; then\n                echo -n \", \"\n       \
    \     fi\n        done\n        echo \"]\"\n    fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3f82ryl3.sh: line 18: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res=()\n    local -a dict=([1]=\"\
    One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\"\
    \ [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${arr[@]}\"; do\n        if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n            res+=(${dict[$i]})\n        fi\n   \
    \ done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a sorted\n    local -a\
    \ reversed\n    local -a result\n\n    for i in \"${arr[@]}\"; do\n        if\
    \ [[ \"$i\" =~ ^[1-9]$ ]]; then\n            sorted+=(\"$i\")\n        fi\n  \
    \  done\n\n    if [[ \"${#sorted[@]}\" -gt 0 ]]; then\n        IFS=$'\\n' sorted=($(sort\
    \ <<<\"${sorted[*]}\"))\n        unset IFS\n        reversed=($(tac <<<\"${sorted[*]}\"\
    ))\n    fi\n\n    for i in \"${reversed[@]}\"; do\n        case \"$i\" in\n  \
    \          1) result+=('\"One\"') ;;\n            2) result+=('\"Two\"') ;;\n\
    \            3) result+=('\"Three\"') ;;\n            4) result+=('\"Four\"')\
    \ ;;\n            5) result+=('\"Five\"') ;;\n            6) result+=('\"Six\"\
    ') ;;\n            7) result+=('\"Seven\"') ;;\n            8) result+=('\"Eight\"\
    ') ;;\n            9) result+=('\"Nine\"') ;;\n        esac\n    done\n\n    echo\
    \ \"[${result[*]}]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${nums[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | rev | tr ' ' ','\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0b1y2fu6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl89p0sd.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            res+=(\"${names[$i-1]}\")\n        fi\n    done\n  \
    \  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5ezlw6zg.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res=()\n    local -a dict=([1]=\"\
    One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\"\
    \ [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${arr[@]}\"; do\n        if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n            res+=(${dict[$i]})\n        fi\n   \
    \ done\n    echo ${res[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${nums[$i-1]})\n    fi\n \
    \ done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgvrlpaod.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=()\n    local -a result=()\n    local -a\
    \ dict=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")\n    for i in $@; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            array+=($i)\n        fi\n    done\n    if [[ ${#array[@]} -eq 0 ]];\
    \ then\n        echo \"[]\"\n    else\n        for i in $(seq $((${#array[@]}\
    \ - 1)) -1 0); do\n            result+=(${dict[${array[$i]} - 1]})\n        done\n\
    \        echo \"[$(IFS=,; echo \"${result[*]}\")]\"\n    fi\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\")\n\
    \    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwkie6g7s.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v38cuq7.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"\
    Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${dict[$i]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6ophmt4.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=($@)\n  local -a res\n  for i in ${arr[@]};\
    \ do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=($i)\n    fi\n  done\n\
    \  res=($(echo ${res[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  for i in\
    \ ${!res[@]}; do\n    case ${res[$i]} in\n      1) res[$i]='\"One\"';;\n     \
    \ 2) res[$i]='\"Two\"';;\n      3) res[$i]='\"Three\"';;\n      4) res[$i]='\"\
    Four\"';;\n      5) res[$i]='\"Five\"';;\n      6) res[$i]='\"Six\"';;\n     \
    \ 7) res[$i]='\"Seven\"';;\n      8) res[$i]='\"Eight\"';;\n      9) res[$i]='\"\
    Nine\"';;\n    esac\n  done\n  echo ${res[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    # Write your code here\n    echo \"Not implemented\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"\
    Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${dict[$i]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaund_af_.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\n        [1]=\"One\"\n        [2]=\"Two\"\n        [3]=\"Three\"\
    \n        [4]=\"Four\"\n        [5]=\"Five\"\n        [6]=\"Six\"\n        [7]=\"\
    Seven\"\n        [8]=\"Eight\"\n        [9]=\"Nine\"\n    )\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw5cfknwh.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a sorted\n    local -a\
    \ reversed\n    local -a result\n    local -a numbers=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            sorted+=($i)\n\
    \        fi\n    done\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort\
    \ -n))\n    for (( i=${#sorted[@]}-1; i>=0; i-- )); do\n        reversed+=(${sorted[i]})\n\
    \    done\n    for i in \"${reversed[@]}\"; do\n        result+=(${numbers[i-1]})\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i =~ ^[1-9]$ ]]; then\n            result+=(\"$i\")\n   \
    \     fi\n    done\n    if [[ ${#result[@]} -gt 0 ]]; then\n        result=($(printf\
    \ \"%s\\n\" \"${result[@]}\" | sort -n | tac))\n        for i in \"${!result[@]}\"\
    ; do\n            result[$i]=\"\\\"${numbers[${result[$i]}-1]}\\\"\"\n       \
    \ done\n    fi\n    echo \"[${result[*]}]\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res=()\n    local -a dict=(\n\
    \        [1]=\"One\"\n        [2]=\"Two\"\n        [3]=\"Three\"\n        [4]=\"\
    Four\"\n        [5]=\"Five\"\n        [6]=\"Six\"\n        [7]=\"Seven\"\n   \
    \     [8]=\"Eight\"\n        [9]=\"Nine\"\n    )\n    for i in \"${arr[@]}\";\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${dict[$i]}\"\
    )\n        fi\n    done\n    echo \"[$(IFS=,; echo \"${res[*]}\" | rev)]\"\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ \"$i\" =~ ^[1-9]$ ]]; then\n      result+=(\"$i\")\n    fi\n \
    \ done\n  result=($(echo \"${result[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n'\
    \ ' '))\n  result=($(echo \"${result[@]}\" | tr ' ' '\\n' | tac | tr '\\n' ' '))\n\
    \  for i in \"${!result[@]}\"; do\n    result[$i]=\"\\\"${numbers[${result[$i]}-1]}\\\
    \"\"\n  done\n  echo \"[${result[@]}]\"\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    for i\
    \ in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n      \
    \      result+=(\"$i\")\n        fi\n    done\n    result=($(for i in \"${result[@]}\"\
    ; do echo $i; done | sort -rn))\n    for i in \"${result[@]}\"; do\n        case\
    \ $i in\n            1) result[$i]=\"One\";;\n            2) result[$i]=\"Two\"\
    ;;\n            3) result[$i]=\"Three\";;\n            4) result[$i]=\"Four\"\
    ;;\n            5) result[$i]=\"Five\";;\n            6) result[$i]=\"Six\";;\n\
    \            7) result[$i]=\"Seven\";;\n            8) result[$i]=\"Eight\";;\n\
    \            9) result[$i]=\"Nine\";;\n        esac\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 &&\
    \ $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\")\n        fi\n\
    \    done\n    echo \"${result[@]}\" | tac\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmprs02qtdr.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | rev\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6my6sha3.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result\n    local\
    \ -a numbers=(\n        [1]=\"One\"\n        [2]=\"Two\"\n        [3]=\"Three\"\
    \n        [4]=\"Four\"\n        [5]=\"Five\"\n        [6]=\"Six\"\n        [7]=\"\
    Seven\"\n        [8]=\"Eight\"\n        [9]=\"Nine\"\n    )\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpglncvofp.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result\n    local -a\
    \ numbers=(\n        [1]=\"One\"\n        [2]=\"Two\"\n        [3]=\"Three\"\n\
    \        [4]=\"Four\"\n        [5]=\"Five\"\n        [6]=\"Six\"\n        [7]=\"\
    Seven\"\n        [8]=\"Eight\"\n        [9]=\"Nine\"\n    )\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tac\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1ysa85kp.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=()\n    for i in $@; do\n        if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n            array+=($i)\n        fi\n    done\n\
    \    array=($(for i in ${array[@]}; do echo $i; done | sort -rn))\n    for i in\
    \ ${!array[@]}; do\n        case ${array[$i]} in\n            1) array[$i]='\"\
    One\"';;\n            2) array[$i]='\"Two\"';;\n            3) array[$i]='\"Three\"\
    ';;\n            4) array[$i]='\"Four\"';;\n            5) array[$i]='\"Five\"\
    ';;\n            6) array[$i]='\"Six\"';;\n            7) array[$i]='\"Seven\"\
    ';;\n            8) array[$i]='\"Eight\"';;\n            9) array[$i]='\"Nine\"\
    ';;\n        esac\n    done\n    echo ${array[@]}\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=()\n    local -a result=()\n    local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -a reversed=()\n    local -a final=()\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local\
    \ -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n\
    \    local -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n  \
    \  local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n  \
    \  local -i iii=0\n    local -i jjj=0\n    local -i\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -a reversed=()\n    local -a final=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a result=()\n    local -a\
    \ dict=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=($i)\n\
    \        fi\n    done\n    if [[ ${#result[@]} -eq 0 ]]; then\n        echo \"\
    []\"\n    else\n        echo -n \"[\"\n        for i in \"${result[@]}\"; do\n\
    \            echo -n \"\\\"${dict[$i - 1]}\\\"\"\n            if [[ $i -ne ${result[-1]}\
    \ ]]; then\n                echo -n \", \"\n            fi\n        done\n   \
    \     echo \"]\"\n    fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(\n    \"One\"\n    \"Two\"\n    \"Three\"\n    \"Four\"\n    \"Five\"\
    \n    \"Six\"\n    \"Seven\"\n    \"Eight\"\n    \"Nine\"\n  )\n  for i in \"\
    ${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i\
    \ - 1]})\n    fi\n  done\n  echo \"[$(IFS=,; echo \"${result[*]}\" | tac)]\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcv5ixy2w.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    # your code here\n    echo $@ | tr ' ' '\\n' | sort -n\
    \ | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            sorted+=($i)\n        fi\n    done\n    sorted=($(printf \"%s\\n\"\
    \ \"${sorted[@]}\" | sort -n))\n    for i in \"${sorted[@]}\"; do\n        result+=(${numbers[$i-1]})\n\
    \    done\n    echo \"[$(printf \"\\\"%s\\\", \" \"${result[@]}\")]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -a reversed=()\n    local -a result=()\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n\
    \    local -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local\
    \ -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n\
    \    local -i x=0\n    local -i y=0\n    local -i z=0\n    local -i a=0\n    local\
    \ -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n\
    \    local -i g=0\n    local -i h=0\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local\
    \ -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n\
    \    local -i h=0\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n\
    \    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy6j4ozz2.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for number in \"${array[@]}\"\
    ; do\n    if [[ $number -ge 1 && $number -le 9 ]]; then\n      result+=(${numbers[$number-1]})\n\
    \    fi\n  done\n  echo \"${result[@]}\" | sort -r\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4z6bg1q4.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a digits=(One Two Three Four Five Six Seven Eight Nine)\n    local i\n    for\
    \ i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n      \
    \      result+=(\"${digits[$i-1]}\")\n        fi\n    done\n    echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx_y50qxy.sh: line 20: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp3geceel.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | rev\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6my6sha3.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a nums=($@)\n    local -a res=()\n    local -a num_names=(\"\
    One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\"\
    )\n    for ((i=0; i<${#nums[@]}; i++)); do\n        if [[ ${nums[$i]} -ge 1 &&\
    \ ${nums[$i]} -le 9 ]]; then\n            res+=(${nums[$i]})\n        fi\n   \
    \ done\n    res=($(printf \"%s\\n\" \"${res[@]}\" | sort -n))\n    for ((i=0;\
    \ i<${#res[@]}; i++)); do\n        res[$i]=\"\\\"${num_names[${res[$i]}-1]}\\\"\
    \"\n    done\n    echo ${res[@]} | tr ' ' ',' | sed 's/,/, /g' | sed 's/^/[/'\
    \ | sed 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result\n    local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[$i]} -ge 1 && ${arr[$i]} -le 9 ]]; then\n   \
    \         result[${arr[$i]}]=${numbers[${arr[$i]}-1]}\n        fi\n    done\n\
    \    for ((i=${#result[@]}; i>0; i--)); do\n        echo -n \"\\\"${result[$i]}\\\
    \" \"\n    done\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt7t8ip9o.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp3geceel.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res\n    local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$((i-1))]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2luhziju.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ tmp=()\n    local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n \
    \   for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            tmp+=($i)\n        fi\n    done\n    IFS=$'\\n' sorted=($(sort -n\
    \ <<<\"${tmp[*]}\"))\n    for i in \"${sorted[@]}\"; do\n        res+=(${nums[$i-1]})\n\
    \    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpshau8fie.sh: line 20: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp3geceel.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -A map=([1]=\"One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"\
    Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\")\n    for i in ${array[@]}; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${map[$i]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a sorted=()\n    local\
    \ -a reversed=()\n    local -a result=()\n    local -a numbers=(\"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i\
    \ in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n      \
    \      sorted+=(\"$i\")\n        fi\n    done\n    for ((i=${#sorted[@]}-1; i>=0;\
    \ i--)); do\n        reversed+=(\"${sorted[$i]}\")\n    done\n    for i in \"\
    ${reversed[@]}\"; do\n        result+=(\"\\\"${numbers[$i-1]}\\\"\")\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp01yh8b25.sh: line 21: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(\"${nums[$i-1]}\")\n    fi\n\
    \  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5psul29k.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n'\
    \ ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxhh8_f8q.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"\
    Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${dict[$i]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo6ophmt4.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a sorted\n    local -a\
    \ reversed\n    local -a result\n    local -a numbers=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            sorted+=($i)\n\
    \        fi\n    done\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort\
    \ -n))\n    for i in ${sorted[@]}; do\n        reversed=($i ${reversed[@]})\n\
    \    done\n    for i in ${reversed[@]}; do\n        result+=(${numbers[$((i-1))]})\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a result=()\n  local -a tmp=()\n\
    \  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      tmp+=(\"$i\"\
    )\n    fi\n  done\n  if [[ ${#tmp[@]} -gt 0 ]]; then\n    tmp=($(printf \"%s\\\
    n\" \"${tmp[@]}\" | sort -nr))\n    for i in \"${tmp[@]}\"; do\n      result+=(\"\
    \\\"${numbers[$i-1]}\\\"\")\n    done\n  fi\n  echo \"[${result[*]}]\"\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpul655e2j.sh: line 20: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(\"${nums[$i-1]}\")\n    fi\n\
    \  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5psul29k.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${names[$i-1]})\n        fi\n    done\n   \
    \ echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkx5wpsr4.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"; do\n\
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n \
    \   fi\n  done\n  echo $(echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n'\
    \ ' ')\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res\n    for i in ${arr[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=($i)\n   \
    \     fi\n    done\n    res=($(printf \"%s\\n\" \"${res[@]}\" | sort -r))\n  \
    \  for i in ${!res[@]}; do\n        case ${res[$i]} in\n            1) res[$i]='\"\
    One\"';;\n            2) res[$i]='\"Two\"';;\n            3) res[$i]='\"Three\"\
    ';;\n            4) res[$i]='\"Four\"';;\n            5) res[$i]='\"Five\"';;\n\
    \            6) res[$i]='\"Six\"';;\n            7) res[$i]='\"Seven\"';;\n  \
    \          8) res[$i]='\"Eight\"';;\n            9) res[$i]='\"Nine\"';;\n   \
    \     esac\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(\"${nums[$i-1]}\")\n    fi\n\
    \  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5psul29k.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a sorted\n    local -a\
    \ reversed\n    local -a result\n    local -a names=(One Two Three Four Five Six\
    \ Seven Eight Nine)\n    local i\n    for i in \"${array[@]}\"; do\n        if\
    \ [[ $i -ge 1 && $i -le 9 ]]; then\n            sorted+=($i)\n        fi\n   \
    \ done\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort -n))\n    for ((i=${#sorted[@]}-1;\
    \ i>=0; i--)); do\n        reversed+=(${sorted[i]})\n    done\n    for i in \"\
    ${reversed[@]}\"; do\n        result+=(${names[i-1]})\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${nums[$i-1]})\n    fi\n \
    \ done\n  echo \"${res[@]}\" | sort -r\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnok1p8y5.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  local -a sorted=()\n  local -a\
    \ reversed=()\n  local -a result=()\n  for i in \"${arr[@]}\"; do\n    if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n      res+=($i)\n    fi\n  done\n  if [[ ${#res[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    sorted=($(printf \"%s\\n\" \"${res[@]}\"\
    \ | sort -n))\n    reversed=($(printf \"%s\\n\" \"${sorted[@]}\" | tac))\n   \
    \ for i in \"${reversed[@]}\"; do\n      result+=(${nums[$((i-1))]})\n    done\n\
    \    echo \"[\\\"${result[@]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpza4arxd6.sh: line 22: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\n        \"One\"\n        \"Two\"\n        \"Three\"\n        \"\
    Four\"\n        \"Five\"\n        \"Six\"\n        \"Seven\"\n        \"Eight\"\
    \n        \"Nine\"\n    )\n    for i in \"${array[@]}\"; do\n        if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\")\n   \
    \     fi\n    done\n    echo \"${result[@]}\" | tac\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpohsm61by.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in ${array[@]};\
    \ do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n\
    \    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in ${array[@]}; do\n    if\
    \ [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n    fi\n\
    \  done\n  echo \"${result[@]}\" | rev | tr ' ' ','\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl89p0sd.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzr0nu6u2.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in ${array[@]}; do\n    if\
    \ [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n    fi\n\
    \  done\n  echo ${result[@]/%/\\\"} | tr ' ' '\\n' | sort -r | tr '\\n' ' ' |\
    \ sed 's/^/\"/;s/$/\"/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=()\n    for i in $@; do\n        if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n            array+=($i)\n        fi\n    done\n\
    \    if [[ ${#array[@]} -eq 0 ]]; then\n        echo \"[]\"\n    else\n      \
    \  local -a sorted=($(printf \"%s\\n\" \"${array[@]}\" | sort -n))\n        local\
    \ -a reversed=($(printf \"%s\\n\" \"${sorted[@]}\" | tac))\n        local -a result=()\n\
    \        for i in ${reversed[@]}; do\n            case $i in\n               \
    \ 1) result+=('\"One\"') ;;\n                2) result+=('\"Two\"') ;;\n     \
    \           3) result+=('\"Three\"') ;;\n                4) result+=('\"Four\"\
    ') ;;\n                5) result+=('\"Five\"') ;;\n                6) result+=('\"\
    Six\"') ;;\n                7) result+=('\"Seven\"') ;;\n                8) result+=('\"\
    Eight\"') ;;\n                9) result+=('\"Nine\"') ;;\n            esac\n \
    \       done\n        echo \"[${result[@]}]\"\n    fi\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            sorted+=($i)\n        fi\n    done\n    sorted=($(printf \"%s\\n\"\
    \ \"${sorted[@]}\" | sort -nr))\n    for i in \"${sorted[@]}\"; do\n        result+=(${numbers[$i-1]})\n\
    \    done\n    echo \"[$(printf '\"%s\", ' \"${result[@]}\")]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res=()\n    local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    for i in ${arr[@]}; do\n    \
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n \
    \       fi\n    done\n    echo ${res[@]} | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/,/\", \"/g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwq656jt0.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result\n    local -a\
    \ numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le 9\
    \ ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n   \
    \ echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local\
    \ -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n\
    \    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n\
    \    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=($@)\n  local -a res=()\n  local -a dict=(\n\
    \    [1]=\"One\"\n    [2]=\"Two\"\n    [3]=\"Three\"\n    [4]=\"Four\"\n    [5]=\"\
    Five\"\n    [6]=\"Six\"\n    [7]=\"Seven\"\n    [8]=\"Eight\"\n    [9]=\"Nine\"\
    \n  )\n  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      res+=(${dict[$i]})\n    fi\n  done\n  echo \"${res[@]}\" | rev\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")\n    for i in \"${array[@]}\"; do\n        if [[ \"$i\" =~ ^[1-9]$\
    \ ]]; then\n            result+=(\"$i\")\n        fi\n    done\n    result=($(printf\
    \ \"%s\\n\" \"${result[@]}\" | sort -n))\n    result=($(printf \"%s\\n\" \"${result[@]}\"\
    \ | tac))\n    for i in \"${!result[@]}\"; do\n        result[$i]=\"\\\"${numbers[${result[$i]}-1]}\\\
    \"\"\n    done\n    echo \"[${result[*]}]\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n'\
    \ ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxhh8_f8q.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(\n        [1]=\"One\"\n        [2]=\"Two\"\n        [3]=\"Three\"\n  \
    \      [4]=\"Four\"\n        [5]=\"Five\"\n        [6]=\"Six\"\n        [7]=\"\
    Seven\"\n        [8]=\"Eight\"\n        [9]=\"Nine\"\n    )\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ \"$i\" -ge 1 && \"$i\" -le 9 ]]; then\n            res+=(\"\
    ${nums[$i]}\")\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' |\
    \ sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf9uy8osj.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v38cuq7.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v38cuq7.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$((i-1))]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  # your code here\n  echo $@ | tr ' ' '\\n' | sort -n | uniq\
    \ | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/[/;s/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a result=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ \"$i\" =~ ^[1-9]$ ]]; then\n      result+=(\"${nums[$((i-1))]}\")\n \
    \   fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local\
    \ -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n\
    \    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n\
    \    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n\
    \    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n\
    \    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n\
    \    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n\
    \    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n\
    \    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \    local -i lll=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr\n    local -a result\n    local -a sorted\n\
    \    local -a reversed\n    local -a final\n    local -a names\n    local -i i\n\
    \    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i\
    \ n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i ii\n    local -i jj\n    local -i kk\n    local -i ll\n \
    \   local -i mm\n    local -i nn\n    local -i oo\n    local -i pp\n    local\
    \ -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n    local -i uu\n\
    \    local -i vv\n    local -i ww\n    local -i xx\n    local -i yy\n    local\
    \ -i zz\n    local -i aa\n    local -i bb\n    local -i cc\n    local -i dd\n\
    \    local -i ee\n    local -i ff\n    local -i gg\n    local -i hh\n    local\
    \ -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n    local -i mmm\n\
    \    local -i nnn\n    local -i ooo\n    local -i ppp\n    local -i qqq\n    local\
    \ -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n    local -i vvv\n\
    \    local -i www\n    local -i xxx\n    local -i yyy\n    local -i zzz\n    local\
    \ -i aaa\n    local -i bbb\n    local -i ccc\n   \n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ digits=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${digits[$i-1]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo4v41gx3.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | sort -r\n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvskce3as.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -rn |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp__fy2rxi.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n'\
    \ ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxhh8_f8q.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr\n    local -a res\n    local -a nums\n   \
    \ local -a names\n    local -a sorted\n    local -a reversed\n    local -a final\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i\
    \ m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local\
    \ -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n\
    \    local -i gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local\
    \ -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n\
    \    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local\
    \ -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n\
    \    local -i yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local\
    \ -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n\
    \    local -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local\
    \ -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n\
    \    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local\
    \ -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n\
    \    local -i zzz\n    local -i aaaa\n\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 &&\
    \ $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tac\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpawwbqn21.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a nums=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -a reversed=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl89p0sd.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a digits=(One Two Three Four Five Six Seven Eight Nine)\n    for element in\
    \ \"${array[@]}\"; do\n        if [[ $element =~ ^[1-9]$ ]]; then\n          \
    \  result+=($element)\n        fi\n    done\n    if [[ ${#result[@]} -eq 0 ]];\
    \ then\n        echo \"[]\"\n    else\n        IFS=$'\\n' sorted=($(sort <<<\"\
    ${result[*]}\"))\n        unset IFS\n        for ((i=${#sorted[@]}-1; i>=0; i--));\
    \ do\n            sorted[i]=${digits[${sorted[i]}-1]}\n        done\n        echo\
    \ \"[$(printf '\"%s\", ' \"${sorted[@]}\")]\"\n    fi\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a sorted=()\n    local -a reversed=()\n    local -a names=(\"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local\
    \ -a numbers=(1 2 3 4 5 6 7 8 9)\n    local -a tmp=()\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
    \    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n \
    \   local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    for ((i=0; i<${#array[@]}; i++)); do\n  \
    \      for ((j=0; j<${#numbers[@]}; j++)); do\n            if [[ ${array[i]} -eq\
    \ ${numbers[j]} ]]; then\n                sorted+=(${array[i]})\n            fi\n\
    \        done\n    done\n    for ((k=0; k<${#sorted[@]}; k++)); do\n        for\
    \ ((l=0; l<${#numbers[@]}; l++)); do\n            if [[ ${sorted[k]} -\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpbqfryad1.sh: line 75: conditional binary operator expected\n/tmp/tmpbqfryad1.sh:
    line 75: syntax error near `-''\n/tmp/tmpbqfryad1.sh: line 75: `            if
    [[ ${sorted[k]} -''\n"'
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in ${array[@]}; do\n    if\
    \ [[ \"$i\" -ge 1 && \"$i\" -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n\
    \    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            sorted+=(\"$i\")\n        fi\n    done\n    if [[ ${#sorted[@]} -gt\
    \ 0 ]]; then\n        sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort -n))\n\
    \        for i in \"${sorted[@]}\"; do\n            result+=(\"${numbers[$i-1]}\"\
    )\n        done\n    fi\n    echo \"[$(printf '\"%s\", ' \"${result[@]}\")]\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpert_910d.sh: line 20: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array\n  array=($@)\n  local -a result\n  for i\
    \ in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=($i)\n\
    \    fi\n  done\n  result=($(printf \"%s\\n\" \"${result[@]}\" | sort -rn))\n\
    \  for i in \"${!result[@]}\"; do\n    case ${result[$i]} in\n      1) result[$i]='\"\
    One\"';;\n      2) result[$i]='\"Two\"';;\n      3) result[$i]='\"Three\"';;\n\
    \      4) result[$i]='\"Four\"';;\n      5) result[$i]='\"Five\"';;\n      6)\
    \ result[$i]='\"Six\"';;\n      7) result[$i]='\"Seven\"';;\n      8) result[$i]='\"\
    Eight\"';;\n      9) result[$i]='\"Nine\"';;\n    esac\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a sorted\n    local -a\
    \ reversed\n    local -a result\n    local -i i=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    for i in ${array[@]}; do\n        if\
    \ [[ $i -ge 1 && $i -le 9 ]]; then\n            sorted[$j]=$i\n            ((j++))\n\
    \        fi\n    done\n    sorted=($(for i in ${sorted[@]}; do echo $i; done |\
    \ sort -n))\n    for i in ${sorted[@]}; do\n        reversed[$k]=$i\n        ((k++))\n\
    \    done\n    reversed=($(for i in ${reversed[@]}; do echo $i; done | tac))\n\
    \    for i in ${reversed[@]}; do\n        if [[ $i -eq 1 ]]; then\n          \
    \  result[$l]='\"One\"'\n            ((l++))\n        elif [[ $i -eq 2 ]]; then\n\
    \            result[$m]='\"Two\"'\n            ((m++))\n        elif [[ $i -eq\
    \ 3 ]]; then\n            result[$n]='\"Three\"'\n            ((n++))\n      \
    \  elif [[ $i -eq 4 ]]; then\n            result[$o]='\"Four\"'\n            ((o++))\n\
    \        elif [[ $i -eq 5 ]]; then\n            result[$p]='\"Five\"'\n      \
    \      ((p++))\n        elif [[ $i -eq 6 ]]; then\n            result[$q]='\"\
    Six\"'\n            ((q++))\n        elif [[ $i -eq 7 ]];\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpid4tjd8g.sh: line 69: syntax error near unexpected token `}''\n/tmp/tmpid4tjd8g.sh:
    line 69: `}''\n"'
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n'\
    \ ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxhh8_f8q.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hkm902c.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"; do\n\
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n \
    \   fi\n  done\n  echo ${result[@]} | rev\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a result\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  local -a sorted\n  local -a reversed\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n\
    \  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n \
    \ local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n\
    \  local -i ddd=0\n  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local\
    \ -i hhh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result\n    local -a\
    \ digits=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${digits[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmppxe6v9fj.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  local -a sorted=()\n\
    \  local -a reversed=()\n  local -a final=()\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local\
    \ q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local\
    \ w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local\
    \ cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n\
    \  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local\
    \ nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n\
    \  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local\
    \ yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n\
    \  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n \
    \ local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local\
    \ ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n\
    \  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    if [[ ${arr[$i]} =~ ^[1-9]$ ]]; then\n      result+=(${arr[$i]})\n \
    \   fi\n  done\n  if [[ ${#result[@]} -gt 0 ]]; then\n    result=($(printf \"\
    %s\\n\" \"${result[@]}\" | sort -n))\n    result=($(printf \"%s\\n\" \"${result[@]}\"\
    \ | tac))\n    for ((i=0; i<${#result[@]}; i++)); do\n      result[$i]=\"\\\"\
    ${numbers[${result[$i]}-1]}\\\"\"\n    done\n  fi\n  echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  local -a sorted=()\n  local -a\
    \ reversed=()\n  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n \
    \ local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n\
    \  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local\
    \ ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n\
    \  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local\
    \ tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n\
    \  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local\
    \ eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n\
    \  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n \
    \ local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local\
    \ uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local y\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a sorted_array\n  local -a\
    \ reversed_array\n  local -a result\n  local -a numbers=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      sorted_array+=($i)\n    fi\n\
    \  done\n  sorted_array=($(printf '%s\\n' \"${sorted_array[@]}\" | sort -n))\n\
    \  for i in \"${sorted_array[@]}\"; do\n    reversed_array=($i \"${reversed_array[@]}\"\
    )\n  done\n  for i in \"${reversed_array[@]}\"; do\n    result+=(${numbers[$i-1]})\n\
    \  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | rev\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6my6sha3.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbu749fmr.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array\n    local -a sorted\n    local -a reversed\n\
    \    local -a result\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local\
    \ -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local\
    \ -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n\
    \    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n\
    \    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl89p0sd.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a new_arr=()\n    for i in\
    \ ${arr[@]}; do\n        case $i in\n            1) new_arr+=(\\\"One\\\") ;;\n\
    \            2) new_arr+=(\\\"Two\\\") ;;\n            3) new_arr+=(\\\"Three\\\
    \") ;;\n            4) new_arr+=(\\\"Four\\\") ;;\n            5) new_arr+=(\\\
    \"Five\\\") ;;\n            6) new_arr+=(\\\"Six\\\") ;;\n            7) new_arr+=(\\\
    \"Seven\\\") ;;\n            8) new_arr+=(\\\"Eight\\\") ;;\n            9) new_arr+=(\\\
    \"Nine\\\") ;;\n        esac\n    done\n    echo ${new_arr[@]}\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/,/\", \"/g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -a reversed=()\n    for i in \"${arr[@]}\"; do\n        if [[ $i =~\
    \ ^[1-9]$ ]]; then\n            sorted+=(\"$i\")\n        fi\n    done\n    if\
    \ [[ ${#sorted[@]} -gt 0 ]]; then\n        sorted=($(printf \"%s\\n\" \"${sorted[@]}\"\
    \ | sort -n))\n        for i in \"${sorted[@]}\"; do\n            reversed+=(\"\
    ${nums[$i-1]}\")\n        done\n        reversed=($(printf \"%s\\n\" \"${reversed[@]}\"\
    \ | tac))\n    fi\n    for i in \"${reversed[@]}\"; do\n        res+=(\"\\\"$i\\\
    \"\")\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    # Write your code here\n    echo \"Not implemented yet\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp3geceel.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(${nums[$i-1]})\n    fi\n \
    \ done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgvrlpaod.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp3geceel.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ dict=(\n        [1]=\"One\"\n        [2]=\"Two\"\n        [3]=\"Three\"\n  \
    \      [4]=\"Four\"\n        [5]=\"Five\"\n        [6]=\"Six\"\n        [7]=\"\
    Seven\"\n        [8]=\"Eight\"\n        [9]=\"Nine\"\n    )\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${dict[$i]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpg_8ac361.sh: line 29: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a dict=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=($i)\n\
    \        fi\n    done\n    result=($(echo ${result[@]} | tr ' ' '\\n' | sort -n\
    \ | tr '\\n' ' '))\n    for i in ${result[@]}; do\n        echo -n '\"'${dict[$i-1]}'\"\
    '\n        echo -n ' '\n    done\n    echo\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a dict=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i =~ ^[1-9]$ ]]; then\n      res+=(${dict[$i-1]})\n    fi\n  done\n\
    \  echo $(printf '%s\\n' \"${res[@]}\" | sort -r)\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a sorted\n    local -a\
    \ reversed\n    local -a result\n    local -a names=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            sorted+=($i)\n\
    \        fi\n    done\n    if [[ ${#sorted[@]} -eq 0 ]]; then\n        echo \"\
    []\"\n        return\n    fi\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\"\
    \ | sort -n))\n    for ((i=${#sorted[@]}-1; i>=0; i--)); do\n        reversed+=(${sorted[i]})\n\
    \    done\n    for i in \"${reversed[@]}\"; do\n        result+=(\\\"${names[i-1]}\\\
    \"\\ )\n    done\n    echo \"[${result[@]}]\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5y8yjuq1.sh: line 21: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res=()\n    local -a dict=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    for i in ${arr[@]}; do\n    \
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=($i)\n        fi\n\
    \    done\n    res=($(printf \"%s\\n\" \"${res[@]}\" | sort -nr))\n    for i in\
    \ ${res[@]}; do\n        res[$i]=${dict[$i-1]}\n    done\n    echo ${res[@]}\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo $(echo ${res[@]} | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' ')\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk3hqk9fj.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\")\n\
    \    fi\n  done\n  echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwkie6g7s.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"; do\n\
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${numbers[$i-1]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\" | tac\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a numbers=($@)\n    local -a result=()\n    local\
    \ -a numbers_sorted=()\n    local -a numbers_reversed=()\n    local -a numbers_translated=()\n\
    \    local number\n    local number_translated\n    for number in \"${numbers[@]}\"\
    ; do\n        if [[ $number =~ ^[1-9]$ ]]; then\n            numbers_sorted+=($number)\n\
    \        fi\n    done\n    numbers_sorted=($(printf \"%s\\n\" \"${numbers_sorted[@]}\"\
    \ | sort -n))\n    for ((i=${#numbers_sorted[@]}-1; i>=0; i--)); do\n        numbers_reversed+=(${numbers_sorted[$i]})\n\
    \    done\n    for number in \"${numbers_reversed[@]}\"; do\n        case $number\
    \ in\n            1) number_translated=\"One\";;\n            2) number_translated=\"\
    Two\";;\n            3) number_translated=\"Three\";;\n            4) number_translated=\"\
    Four\";;\n            5) number_translated=\"Five\";;\n            6) number_translated=\"\
    Six\";;\n            7) number_translated=\"Seven\";;\n            8) number_translated=\"\
    Eight\";;\n            9) number_translated=\"Nine\";;\n        esac\n       \
    \ numbers_translated+=($number_translated)\n    done\n    for number_translated\
    \ in \"${numbers_translated[@]}\"; do\n        result+=(\\\"$number_translated\\\
    \")\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n  \
    \  if [[ $i -ge 1 && $i -le 9 ]]; then\n      res+=(\"${nums[$i-1]}\")\n    fi\n\
    \  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5psul29k.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr\n    local -a res\n    local -a nums\n   \
    \ local -a names\n    local -a sorted\n    local -a reversed\n    local -a result\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i\
    \ m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i ii\n    local -i jj\n    local -i kk\n  \
    \  local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n    local -i\
    \ pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local -i tt\n   \
    \ local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n    local -i\
    \ yy\n    local -i zz\n    local -i aa\n    local -i bb\n    local -i cc\n   \
    \ local -i dd\n    local -i ee\n    local -i ff\n    local -i gg\n    local -i\
    \ hh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local -i lll\n\
    \    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n    local\
    \ -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local -i uuu\n\
    \    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n    local\
    \ -i zzz\n    local -i aaa\n    local -i bbb\n   \n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a digits=(One Two Three Four Five Six Seven Eight Nine)\n    local -i i=0\n\
    \    local -i j=0\n    local -i k=0\n    local -i len=${#arr[@]}\n    local -i\
    \ tmp=0\n    for ((i=0; i<len; i++)); do\n        if [[ ${arr[i]} -ge 1 && ${arr[i]}\
    \ -le 9 ]]; then\n            result[j++]=${arr[i]}\n        fi\n    done\n  \
    \  len=${#result[@]}\n    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len;\
    \ j++)); do\n            if [[ ${result[i]} -gt ${result[j]} ]]; then\n      \
    \          tmp=${result[i]}\n                result[i]=${result[j]}\n        \
    \        result[j]=$tmp\n            fi\n        done\n    done\n    for ((i=0;\
    \ i<len; i++)); do\n        result[i]=${digits[${result[i]}-1]}\n    done\n  \
    \  for ((i=0; i<len/2; i++)); do\n        tmp=${result[i]}\n        result[i]=${result[len-i-1]}\n\
    \        result[len-i-1]=$tmp\n    done\n    echo -n \"[\"\n    for ((i=0; i<len;\
    \ i++)); do\n        echo -n \"\\\"${result[i]}\\\"\"\n        if [[ $i -lt $((len-1))\
    \ ]]; then\n            echo -n \", \"\n        fi\n    done\n    echo -n \"]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpapdj97yq.sh: line 24: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a sorted=()\n    local\
    \ -a result=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i in \"${array[@]}\"; do\n  \
    \      if [[ $i -ge 1 && $i -le 9 ]]; then\n            sorted+=($i)\n       \
    \ fi\n    done\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort -n))\n\
    \    for i in \"${sorted[@]}\"; do\n        result+=(${names[$((i-1))]})\n   \
    \ done\n    echo ${result[@]} | tr ' ' ','\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for (( i=0; i<${#array[@]}; i++\
    \ )); do\n    if [[ \"${array[$i]}\" =~ ^[1-9]$ ]]; then\n      result+=(${array[$i]})\n\
    \    fi\n  done\n  if [[ ${#result[@]} -gt 0 ]]; then\n    result=($(printf \"\
    %s\\n\" \"${result[@]}\" | sort -n))\n    for (( i=0; i<${#result[@]}; i++ ));\
    \ do\n      result[$i]=\"\\\"${numbers[${result[$i]}-1]}\\\"\"\n    done\n   \
    \ result=($(printf \"%s\\n\" \"${result[@]}\" | tac))\n  fi\n  echo \"[${result[*]}]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a result=()\n    local -a\
    \ names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${names[$i-1]})\n        fi\n    done\n   \
    \ echo $(sort -r <<< \"${result[*]}\")\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -a reversed=()\n    local -a final=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n      \
    \  if [[ ${arr[$i]} -ge 1 && ${arr[$i]} -le 9 ]]; then\n            result+=(${arr[$i]})\n\
    \        fi\n    done\n    sorted=($(printf \"%s\\n\" \"${result[@]}\" | sort\
    \ -n))\n    for ((j=${#sorted[@]}-1; j>=0; j--)); do\n        reversed+=(${sorted[$j]})\n\
    \    done\n    for ((k=0; k<${#reversed[@]}; k++)); do\n        for ((l=0; l<${#numbers[@]};\
    \ l++)); do\n            if [[ ${reversed[$k]} -eq $((l+1)) ]]; then\n       \
    \         final+=(${numbers[$l]})\n            fi\n        done\n    done\n  \
    \  printf '[\"%s\"]' \"${final[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzutt7qem.sh: line 26: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt3c_g4du.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in ${array[@]}; do\n    if\
    \ [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n    fi\n\
    \  done\n  echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res=()\n    local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    for i in ${arr[@]}; do\n    \
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n \
    \       fi\n    done\n    echo ${res[@]} | tr ' ' '\\n' | sort -r | tr '\\n' '\
    \ '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v38cuq7.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a sorted=()\n    local\
    \ -a result=()\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            sorted+=(\"$i\")\n        fi\n    done\n    sorted=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | sort -n))\n    for i in \"${sorted[@]}\"; do\n\
    \        case $i in\n            1) result+=('\"One\"') ;;\n            2) result+=('\"\
    Two\"') ;;\n            3) result+=('\"Three\"') ;;\n            4) result+=('\"\
    Four\"') ;;\n            5) result+=('\"Five\"') ;;\n            6) result+=('\"\
    Six\"') ;;\n            7) result+=('\"Seven\"') ;;\n            8) result+=('\"\
    Eight\"') ;;\n            9) result+=('\"Nine\"') ;;\n        esac\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")\n    for i in \"${array[@]}\"; do\n        if [ \"$i\" -ge 1\
    \ ] && [ \"$i\" -le 9 ]; then\n            result+=(\"${numbers[$i-1]}\")\n  \
    \      fi\n    done\n    echo \"${result[@]}\" | tac\n}\n\ncandidate() {\n   \
    \ by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'b''/tmp/tmpdnaugv_n.sh: line 19: [: 2 1 1 4 5 8 2 3: integer expression
    expected\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0pnngqoi.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v38cuq7.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[$i]} -ge 1 && ${arr[$i]} -le 9 ]]; then\n   \
    \         result+=(${arr[$i]})\n        fi\n    done\n    if [[ ${#result[@]}\
    \ -eq 0 ]]; then\n        echo \"[]\"\n    else\n        result=($(printf \"%s\\\
    n\" \"${result[@]}\" | sort -nr))\n        for ((i=0; i<${#result[@]}; i++));\
    \ do\n            result[$i]=\"\\\"${numbers[${result[$i]}-1]}\\\"\"\n       \
    \ done\n        echo \"[${result[@]}]\"\n    fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0dzl7g9l.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in ${array[@]}; do\n    if\
    \ [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n    fi\n\
    \  done\n  echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a new_arr=()\n    local\
    \ -a result=()\n    local -a dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\" [4]=\"\
    Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\")\n  \
    \  for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n \
    \           new_arr+=($i)\n        fi\n    done\n    if [[ ${#new_arr[@]} -eq\
    \ 0 ]]; then\n        echo \"[]\"\n    else\n        IFS=$'\\n' sorted=($(sort\
    \ <<<\"${new_arr[*]}\"))\n        unset IFS\n        for i in \"${sorted[@]}\"\
    ; do\n            result+=(${dict[$i]})\n        done\n        echo \"[\\\"${result[*]}\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmppncmuuu0.sh: line 20: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/;s/$/]/'\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res\n    local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpslbs150y.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8v38cuq7.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a sorted\n  local -a result\n\
    \  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local\
    \ -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n\
    \  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local\
    \ -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n\
    \  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i ii\n  local\
    \ -i jj\n  local -i kk\n  local -i ll\n  local -i mm\n  local -i nn\n  local -i\
    \ oo\n  local -i pp\n  local -i qq\n  local -i rr\n  local -i ss\n  local -i tt\n\
    \  local -i uu\n  local -i vv\n  local -i ww\n  local -i xx\n  local -i yy\n \
    \ local -i zz\n  local -i aa\n  local -i bb\n  local -i cc\n  local -i dd\n  local\
    \ -i ee\n  local -i ff\n  local -i gg\n  local -i hh\n  local -i iii\n  local\
    \ -i jjj\n  local -i kkk\n  local -i lll\n  local -i mmm\n  local -i nnn\n  local\
    \ -i ooo\n  local -i ppp\n  local -i qqq\n  local -i rrr\n  local -i sss\n  local\
    \ -i ttt\n  local -i uuu\n  local -i vvv\n  local -i www\n  local -i xxx\n  local\
    \ -i yyy\n  local -i zzz\n  local -i aaa\n  local -i bbb\n  local -i ccc\n  local\
    \ -i ddd\n  local -i eee\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local arr=(\"$@\")\n  local -A dict=([1]=\"One\" [2]=\"Two\"\
    \ [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\" [8]=\"Eight\"\
    \ [9]=\"Nine\")\n  local -a result=()\n  for i in \"${arr[@]}\"; do\n    if [[\
    \ $i -ge 1 && $i -le 9 ]]; then\n      result+=(\"${dict[$i]}\")\n    fi\n  done\n\
    \  echo \"$(printf '%s\\n' \"${result[@]}\" | sort -r | sed 's/^/\"/;s/$/\"/')\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgic_g0r0.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr\n    local -a res\n    local -a nums\n   \
    \ local -a words\n    local -a sorted\n    local -a reversed\n    local -a final\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    arr=($@)\n\
    \    res=()\n    nums=(1 2 3 4 5 6 7 8 9)\n    words=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    sorted=()\n   \
    \ reversed=()\n    final=()\n    for ((i=0; i<${#arr[@]}; i++)); do\n        for\
    \ ((j=0; j<${#nums[@]}; j++)); do\n            if [[ ${arr[$i]} -eq ${nums[$j]}\
    \ ]]; then\n                res+=(${arr[$i]})\n            fi\n        done\n\
    \    done\n    for ((k=0; k<${#res[@]}; k++)); do\n        for ((l=0; l<${#res[@]};\
    \ l++)); do\n            if [[ ${res[$k]} -lt ${res[$l]} ]]; then\n          \
    \      m=${res[$k]}\n                res[$k]=${res[$l]}\n                res[$l]=$m\n\
    \            fi\n        done\n    done\n    for ((n=0; n<${#res[@]}; n++)); do\n\
    \        sorted+=(${res[$n]})\n    done\n    for ((p=${#sorted[@]}-1; p>=0; p--));\
    \ do\n        reversed+=(${sorted[$p]})\n    done\n    for ((q=0; q<${#reversed[@]};\
    \ q++)); do\n        for ((r=0; r<${#nums[@]}; r++)); do\n            if [[ ${reversed[$q]}\
    \ -eq ${n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmpxn_f4zf1.sh: line 70: syntax error in conditional expression\n/tmp/tmpxn_f4zf1.sh:
    line 73: syntax error near `candidate(''\n/tmp/tmpxn_f4zf1.sh: line 73: `candidate()
    {''\n"'
  stdout: b''
  timestamp: 1660360178
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world!\"\n    echo \"Hello\
    \ world!\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo $(echo ${result[@]} | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' ')\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for i in \"${array[@]}\"; do\n\
    \    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${numbers[$i-1]})\n \
    \   fi\n  done\n  echo \"${result[@]}\" | rev | tr ' ' ','\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"\
    Eight\" \"Nine\")\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 &&\
    \ $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\")\n        fi\n\
    \    done\n    echo \"${result[@]}\" | tac | sed 's/^/\\\"/;s/$/\\\"/'\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkg708hhu.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a dict=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\"\
    \ \"Nine\")\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(\"${dict[$i-1]}\")\n        fi\n    done\n\
    \    echo \"${result[@]}\" | rev\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc12ue5bb.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a arr=(\"$@\")\n  local -a res=()\n  local -a dict=(\n\
    \    [1]=\"One\"\n    [2]=\"Two\"\n    [3]=\"Three\"\n    [4]=\"Four\"\n    [5]=\"\
    Five\"\n    [6]=\"Six\"\n    [7]=\"Seven\"\n    [8]=\"Eight\"\n    [9]=\"Nine\"\
    \n  )\n  for i in \"${arr[@]}\"; do\n    if [[ \"$i\" =~ ^[1-9]$ ]]; then\n  \
    \    res+=(\"${dict[$i]}\")\n    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\\
    n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360178
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  for ((i=0; i<${#array[@]};\
    \ i++)); do\n    if [[ ${array[$i]} -ge 1 && ${array[$i]} -le 9 ]]; then\n   \
    \   result+=(\"${numbers[${array[$i]}-1]}\")\n    fi\n  done\n  echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1e8q4qp9.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/,/\", \"/g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=($@)\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in ${array[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo ${result[@]} | tr ' ' ',' | sed 's/^/[/' | sed\
    \ 's/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0pnngqoi.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r |\
    \ tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2hkm902c.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=()\n    local -a result=()\n    local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n    local -a sorted=()\n\
    \    local -a reversed=()\n    local -a final=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphl89p0sd.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array\n    local -a result\n    local -a numbers\n\
    \    local -a names\n    local -a sorted\n    local -a reversed\n    local -a\
    \ final\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local\
    \ -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    array=($@)\n    result=()\n\
    \    numbers=(1 2 3 4 5 6 7 8 9)\n    names=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    sorted=()\n    reversed=()\n\
    \    final=()\n    i=0\n    j=0\n    k=0\n    l=0\n    m=0\n    n=0\n    o=0\n\
    \    p=0\n    q=0\n    r=0\n    s=0\n    t=0\n    u=0\n    v=0\n    w=0\n    x=0\n\
    \    y=0\n    z=0\n    if [ ${#array[@]} -eq 0 ]; then\n        echo \"[]\"\n\
    \    else\n        for ((i=0; i<${#array[@]}; i++)); do\n            for ((j=0;\
    \ j<${#numbers[@]}; j++)); do\n                if [ ${array[$i]} -eq ${numbers[$j]}\
    \ ]; then\n                    result[$k]=${array[$i]}\n                    k=$k+1\n\
    \                fi\n            done\n        done\n        for ((l=0; l<${#result[@]};\
    \ l++)); do\n            for ((m=0; m<${#result[@]}; m++)); do\n             \
    \   if [ ${result[$l]} -lt ${result[$m]} ]; then\n                    n=${result[$l]}\n\
    \                    result[$l]=${result[$m\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6hgdv_l7.sh: line 97: syntax error: unexpected end of file\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[$i]} -gt 0 && ${arr[$i]} -lt 10 ]]; then\n  \
    \          result+=(${arr[$i]})\n        fi\n    done\n    if [[ ${#result[@]}\
    \ -gt 0 ]]; then\n        result=($(printf \"%s\\n\" \"${result[@]}\" | sort -n\
    \ | tac))\n        for ((i=0; i<${#result[@]}; i++)); do\n            result[$i]=\"\
    \\\"${numbers[${result[$i]}-1]}\\\"\"\n        done\n    fi\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9fljd90.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360178
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a result=()\n    local\
    \ -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmphb50yw2r.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=(\"$@\")\n  local -a result=()\n  local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  for ((i=0; i<${#array[@]}; i++)); do\n    case ${array[$i]}\
    \ in\n      1) ((j++)) ;;\n      2) ((k++)) ;;\n      3) ((l++)) ;;\n      4)\
    \ ((m++)) ;;\n      5) ((n++)) ;;\n      6) ((o++)) ;;\n      7) ((p++)) ;;\n\
    \      8) ((q++)) ;;\n      9) ((r++)) ;;\n      *) ((s++)) ;;\n    esac\n  done\n\
    \  for ((i=0; i<j; i++)); do\n    result+=(\"${numbers[0]}\")\n  done\n  for ((i=0;\
    \ i<k; i++)); do\n    result+=(\"${numbers[1]}\")\n  done\n  for ((i=0; i<l; i++));\
    \ do\n    result+=(\"${numbers[2]}\")\n  done\n  for ((i=0; i<m; i++)); do\n \
    \   result+=(\"${numbers[3]}\")\n  done\n  for ((i=0; i<n; i++)); do\n    result+=(\"\
    ${numbers[4]}\")\n  done\n  for ((i=0; i<o; i++)); do\n    result+=(\"${numbers[5]}\"\
    )\n  done\n  for ((i=0; i<p; i++)); do\n    result\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b"/tmp/tmp5dxwe520.sh: line 70: syntax error near unexpected token `}''\n/tmp/tmp5dxwe520.sh:
    line 70: `}''\n"'
  stdout: b''
  timestamp: 1660360178
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a res=()\n    local -a dict=([1]=\"\
    One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\"\
    \ [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${arr[@]}\"; do\n        if [[ $i\
    \ -ge 1 && $i -le 9 ]]; then\n            res+=(${dict[$i]})\n        fi\n   \
    \ done\n    echo ${res[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ numbers=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${numbers[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzr0nu6u2.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  for i in \"\
    ${array[@]}\"; do\n    if [[ $i =~ ^[1-9]$ ]]; then\n      result+=($i)\n    fi\n\
    \  done\n  result=($(printf \"%s\\n\" \"${result[@]}\" | sort -rn))\n  for i in\
    \ \"${!result[@]}\"; do\n    case ${result[$i]} in\n      1) result[$i]='\"One\"\
    ';;\n      2) result[$i]='\"Two\"';;\n      3) result[$i]='\"Three\"';;\n    \
    \  4) result[$i]='\"Four\"';;\n      5) result[$i]='\"Five\"';;\n      6) result[$i]='\"\
    Six\"';;\n      7) result[$i]='\"Seven\"';;\n      8) result[$i]='\"Eight\"';;\n\
    \      9) result[$i]='\"Nine\"';;\n    esac\n  done\n  echo \"[${result[*]}]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360178
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array=(\"$@\")\n    local -a result\n    for i\
    \ in \"${array[@]}\"; do\n        if [[ $i =~ ^[1-9]$ ]]; then\n            result+=(\"\
    $i\")\n        fi\n    done\n    result=($(printf \"%s\\n\" \"${result[@]}\" |\
    \ sort -n))\n    result=($(printf \"%s\\n\" \"${result[@]}\" | tac))\n    for\
    \ i in \"${!result[@]}\"; do\n        case ${result[$i]} in\n            1) result[$i]='\"\
    One\"';;\n            2) result[$i]='\"Two\"';;\n            3) result[$i]='\"\
    Three\"';;\n            4) result[$i]='\"Four\"';;\n            5) result[$i]='\"\
    Five\"';;\n            6) result[$i]='\"Six\"';;\n            7) result[$i]='\"\
    Seven\"';;\n            8) result[$i]='\"Eight\"';;\n            9) result[$i]='\"\
    Nine\"';;\n        esac\n    done\n    echo \"[${result[*]}]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360178
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n  local -a array=($@)\n  local -a result=()\n  local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  local -a sorted=()\n  for i in\
    \ \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      sorted+=($i)\n\
    \    fi\n  done\n  sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort -n))\n \
    \ for i in \"${sorted[@]}\"; do\n    result+=(${numbers[$i-1]})\n  done\n  result=($(printf\
    \ \"%s\\n\" \"${result[@]}\" | tac))\n  echo \"[${result[*]}]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ nums=(One Two Three Four Five Six Seven Eight Nine)\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${nums[$i-1]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1f0zx2j6.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=($@)\n    local -a result\n    for i in ${arr[@]};\
    \ do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=($i)\n\
    \        fi\n    done\n    local -a sorted=($(printf \"%s\\n\" \"${result[@]}\"\
    \ | sort -n))\n    local -a reversed=($(printf \"%s\\n\" \"${sorted[@]}\" | tac))\n\
    \    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\"\
    \ \"Eight\" \"Nine\")\n    local -a final\n    for i in ${reversed[@]}; do\n \
    \       final+=(${names[$i-1]})\n    done\n    echo \"${final[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: OK
  stderr: b''
  stdout: b''
  timestamp: 1660360178
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a array\n    local -a result\n    local -a nums=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    array=($@)\n    for i in \"${array[@]}\"\
    ; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=(${nums[$i-1]})\n\
    \        fi\n    done\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: b''
  stdout: b''
  timestamp: 1660360177
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\nby_length() {\n    local -a arr=(\"$@\")\n    local -a res=()\n    local -a\
    \ dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\" [4]=\"Four\" [5]=\"Five\" [6]=\"\
    Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\")\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i -ge 1 && $i -le 9 ]]; then\n            res+=(\"${dict[$i]}\"\
    )\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr\
    \ '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaund_af_.sh: line 19: [[: 2 1 1 4 5 8 2 3: syntax error in expression
    (error token is "1 1 4 5 8 2 3")\n'''
  stdout: b''
  timestamp: 1660360177
