language: php
name: HumanEval_117_select_words
results:
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (preg_match_all('/[^aeiou]/i', $word, $matches) == $n)\
    \ {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\
    \n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpo6w9fjqo.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxzo_4gb.php:33\n\
    Stack trace:\n#0 /tmp/tmpbxzo_4gb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbxzo_4gb.php\
    \ on line 33\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string s and a natural number n, you have been tasked to implement \na function\
    \ that returns an array of all words from string s that contain exactly \nn consonants,\
    \ in order these words appear in the string s.\nIf the string s is empty then\
    \ the function should return an empty array.\nNote: you may assume the input string\
    \ contains only letters and spaces.\nExamples:\n>>> select_words(\"Mary had a\
    \ little lamb\", 4)\narray(\"little\")\n>>> select_words(\"Mary had a little lamb\"\
    , 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple white space\", 2)\n\
    array()\n>>> select_words(\"Hello world\", 4)\narray(\"world\")\n>>> select_words(\"\
    Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcv2vmncr.php:50\n\
    Stack trace:\n#0 /tmp/tmpcv2vmncr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcv2vmncr.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpx4cm89az.php:39\nStack trace:\n#0 /tmp/tmpx4cm89az.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx4cm89az.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpsfo1pvox.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $value) {\n        if (substr_count($value, \"a\") + substr_count($value,\
    \ \"e\") + substr_count($value, \"i\") + substr_count($value, \"o\") + substr_count($value,\
    \ \"u\") == $n) {\n            $result[] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"\
    <br>\";\nprint_r(select_words(\"Mary had a little lamb\", 3));\necho \"<br>\"\
    ;\nprint_r(select_words(\"simple white space\", 2));\necho \"<br>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"<br>\";\nprint_r(select_words(\"Uncle sam\", 3));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n    [0] => simple\n    [1]\
    \ => white\n    [2] => space\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpiphw60as.php:44\nStack trace:\n\
    #0 /tmp/tmpiphw60as.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpiphw60as.php\
    \ on line 44\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n/*\n *\
    \ Test code\n */\n$tests = [\n    [\n        'input' => ['Mary had a little lamb',\
    \ 4],\n        'expected' => ['little']\n    ],\n    [\n        'input' => ['Mary\
    \ had a little lamb', 3],\n        'expected' => ['Mary', 'lamb']\n    ],\n  \
    \  [\n        'input' => ['simple white space', 2],\n        'expected' => []\n\
    \    ],\n    [\n        'input' => ['Hello world', 4],\n        'expected' =>\
    \ ['world']\n    ],\n    [\n        'input' => ['Uncle sam', 3],\n        'expected'\
    \ => ['Uncle']\n    ],\n];\n\n$success = true;\nforeach ($tests as $test) {\n\
    \    $result = select_words($test['input'][0], $test['input'][1]);\n    if ($result\
    \ != $test['expected']) {\n        $success = false;\n        echo \"Test with\
    \ input {$test['input'][0]} and {$test['input'][1]} failed.\\n\";\n        echo\
    \ \"Got: \" . var_export($result, true) . \"\\n\";\n        echo \"Expected: \"\
    \ . var_export($test['expected'], true) . \"\\n\";\n    }\n}\nif ($success) {\n\
    \    echo \"Tests complete.\\n\";\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Test with input Mary had a little lamb and 4 failed.\nGot: array (\n)\n\
    Expected: array (\n  0 => 'little',\n)\nTest with input Mary had a little lamb\
    \ and 3 failed.\nGot: array (\n)\nExpected: array (\n  0 => 'Mary',\n  1 => 'lamb',\n\
    )\nTest with input simple white space and 2 failed.\nGot: array (\n  0 => 'simple',\n\
    \  1 => 'white',\n  2 => 'space',\n)\nExpected: array (\n)\nTest with input Hello\
    \ world and 4 failed.\nGot: array (\n)\nExpected: array (\n  0 => 'world',\n)\n\
    Test with input Uncle sam and 3 failed.\nGot: array (\n)\nExpected: array (\n\
    \  0 => 'Uncle',\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_nb97m4j.php:73\n\
    Stack trace:\n#0 /tmp/tmp_nb97m4j.php(82): test()\n#1 {main}\n  thrown in /tmp/tmp_nb97m4j.php\
    \ on line 73\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijig_tq7.php:34\n\
    Stack trace:\n#0 /tmp/tmpijig_tq7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpijig_tq7.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$res = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (consonants($word) == $n) {\n\t\t\t$res[] = $word;\n\t\t}\n\t}\n\t\
    return $res;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpxilg94it.php:22\nStack trace:\n#0 /tmp/tmpxilg94it.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpxilg94it.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpxilg94it.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpxilg94it.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    print_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"Hello\
    \ world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppjln9spy.php:39\nStack trace:\n#0 /tmp/tmppjln9spy.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppjln9spy.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4edzcem3.php:38\nStack trace:\n#0 /tmp/tmp4edzcem3.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4edzcem3.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = preg_replace('/[^a-zA-Z ]/', '', $s);\n    $s = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($s as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') + substr_count($word, 'y') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6gdzpnk.php:34\n\
    Stack trace:\n#0 /tmp/tmpl6gdzpnk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpl6gdzpnk.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzorupw75.php:38\nStack trace:\n#0 /tmp/tmpzorupw75.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzorupw75.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9mgakggz.php:38\nStack trace:\n#0 /tmp/tmp9mgakggz.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9mgakggz.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\necho '<pre>';\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 3));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"simple white\
    \ space\", 2));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"Hello world\"\
    , 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"Uncle sam\", 3));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0]\
    \ => simple\n    [1] => white\n    [2] => space\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n\
    (\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6vc50gd.php:49\n\
    Stack trace:\n#0 /tmp/tmpk6vc50gd.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpk6vc50gd.php\
    \ on line 49\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp22vse_71.php:39\nStack trace:\n#0 /tmp/tmp22vse_71.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp22vse_71.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (countConsonants($word) == $n) {\n\t\t\t$result[] = $word;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpfxcfrmmg.php:22\nStack trace:\n#0 /tmp/tmpfxcfrmmg.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpfxcfrmmg.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpfxcfrmmg.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpfxcfrmmg.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (consonants_count($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmp2cxtmqli.php:22\nStack trace:\n#0 /tmp/tmp2cxtmqli.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp2cxtmqli.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp2cxtmqli.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp2cxtmqli.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqsaf5kd.php:33\n\
    Stack trace:\n#0 /tmp/tmpyqsaf5kd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyqsaf5kd.php\
    \ on line 33\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4edzcem3.php:38\nStack trace:\n#0 /tmp/tmp4edzcem3.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4edzcem3.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfce5u5lf.php:38\nStack trace:\n#0 /tmp/tmpfce5u5lf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfce5u5lf.php on line 38\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n  $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n  $words = explode(\" \", $s);\n  $result = array();\n\
    \  foreach ($words as $word) {\n    $count = 0;\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (in_array(strtolower($word[$i]), $consonants)) {\n       \
    \ $count++;\n      }\n    }\n    if ($count == $n) {\n      array_push($result,\
    \ $word);\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjzwr3kd.php:38\nStack trace:\n#0 /tmp/tmpsjzwr3kd.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjzwr3kd.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = str_replace(' ', '', $s);\n\t$s = str_split($s);\n\t$vowels =\
    \ array('a', 'e', 'i', 'o', 'u');\n\t$consonants = array();\n\tforeach ($s as\
    \ $letter) {\n\t\tif (!in_array($letter, $vowels)) {\n\t\t\t$consonants[] = $letter;\n\
    \t\t}\n\t}\n\t$consonants = array_count_values($consonants);\n\t$consonants =\
    \ array_filter($consonants, function($v) use ($n) {\n\t\treturn $v == $n;\n\t\
    });\n\t$consonants = array_keys($consonants);\n\treturn $consonants;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n    [0] => l\n)\nArray\n(\n    [0] => s\n    [1]\
    \ => p\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6v1908h0.php:45\nStack trace:\n#0 /tmp/tmp6v1908h0.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6v1908h0.php on line 45\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgmva663.php:34\n\
    Stack trace:\n#0 /tmp/tmpdgmva663.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdgmva663.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given an array of integers, your task is to implement a function\
    \ that returns \nthe sum of all integers in the array that are divisible by 3.\n\
    Examples:\n>>> sum_of_three([1, 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_of_three([0,\
    \ -1, -2, -3, -4, -5, -6])\n0\n>>> sum_of_three([-1, 1, -2, 2, -3, 3, -4, 4])\n\
    0\n>>> sum_of_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n45\n\
    >>> sum_of_three([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14,\
    \ -15])\n0*/\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4emw8zp.php:47\n\
    Stack trace:\n#0 /tmp/tmpz4emw8zp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpz4emw8zp.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw_9da4u8.php:39\nStack trace:\n#0 /tmp/tmpw_9da4u8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw_9da4u8.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfce5u5lf.php:38\nStack trace:\n#0 /tmp/tmpfce5u5lf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfce5u5lf.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n$s = \"Mary had a little lamb\";\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw24herdo.php:37\n\
    Stack trace:\n#0 /tmp/tmpw24herdo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw24herdo.php\
    \ on line 37\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfce5u5lf.php:38\nStack trace:\n#0 /tmp/tmpfce5u5lf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfce5u5lf.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0wxihy9w.php:39\nStack trace:\n#0 /tmp/tmp0wxihy9w.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wxihy9w.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (strlen($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\t\
    return $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Mary\n    [1] => lamb\n)\nArray\n(\n    [0] => had\n\
    )\nArray\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => sam\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpuo53wgsy.php:38\nStack trace:\n#0 /tmp/tmpuo53wgsy.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuo53wgsy.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = array('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'z');\n    $result = array();\n    foreach ($words as $word) {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp9ph25v5p.php:47\nStack trace:\n\
    #0 /tmp/tmp9ph25v5p.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9ph25v5p.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpnnp1vwsr.php:22\nStack trace:\n#0 /tmp/tmpnnp1vwsr.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpnnp1vwsr.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpnnp1vwsr.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpnnp1vwsr.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($s as $word) {\n        $count = 0;\n       \
    \ for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5d0th6mm.php:47\nStack trace:\n\
    #0 /tmp/tmp5d0th6mm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5d0th6mm.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktubst67.php:50\n\
    Stack trace:\n#0 /tmp/tmpktubst67.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpktubst67.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (consonants_count($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpz20vcodl.php:22\nStack trace:\n#0 /tmp/tmpz20vcodl.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpz20vcodl.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpz20vcodl.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpz20vcodl.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5wsry7gb.php:47\nStack trace:\n\
    #0 /tmp/tmp5wsry7gb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5wsry7gb.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjzwr3kd.php:38\nStack trace:\n#0 /tmp/tmpsjzwr3kd.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjzwr3kd.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $words = explode('\
    \ ', $s);\n    $result = array();\n    foreach ($words as $word) {\n        $consonants\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0btwqdpm.php:50\nStack trace:\n#0 /tmp/tmp0btwqdpm.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0btwqdpm.php on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\n$s = 'Mary had a little lamb';\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpw_c72haa.php:45\nStack trace:\n#0 /tmp/tmpw_c72haa.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw_c72haa.php on line 45\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n/*\n *\
    \ \n */\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvic2toi1.php:38\n\
    Stack trace:\n#0 /tmp/tmpvic2toi1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvic2toi1.php\
    \ on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpvv0lxfwm.php:22\nStack trace:\n#0 /tmp/tmpvv0lxfwm.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpvv0lxfwm.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpvv0lxfwm.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpvv0lxfwm.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9mgakggz.php:38\nStack trace:\n#0 /tmp/tmp9mgakggz.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9mgakggz.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyiz_sn_o.php:34\n\
    Stack trace:\n#0 /tmp/tmpyiz_sn_o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyiz_sn_o.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0wxihy9w.php:39\nStack trace:\n#0 /tmp/tmp0wxihy9w.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wxihy9w.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     $letters = str_split($word);\n        foreach ($letters as $letter) {\n\
    \            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3i3b76er.php:48\nStack trace:\n\
    #0 /tmp/tmp3i3b76er.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp3i3b76er.php\
    \ on line 48\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $res = [];\n    foreach ($arr as\
    \ $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"e\"\
    ) + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $res[] = $word;\n        }\n    }\n    return $res;\n\
    }\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc23em8b7.php:39\nStack trace:\n#0 /tmp/tmpc23em8b7.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc23em8b7.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0wxihy9w.php:39\nStack trace:\n#0 /tmp/tmp0wxihy9w.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wxihy9w.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n  $arr = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word)\
    \ {\n    if (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\
    \      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_ideoqzk.php:39\nStack trace:\n#0 /tmp/tmp_ideoqzk.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_ideoqzk.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$res = [];\n\tforeach ($arr as $key =>\
    \ $value) {\n\t\tif (substr_count($value, \"a\") + substr_count($value, \"e\"\
    ) + substr_count($value, \"i\") + substr_count($value, \"o\") + substr_count($value,\
    \ \"u\") == $n) {\n\t\t\t$res[] = $value;\n\t\t}\n\t}\n\treturn $res;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc337rq5n.php:38\nStack trace:\n#0 /tmp/tmpc337rq5n.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc337rq5n.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $value)\
    \ {\n\t\tif (count_consonants($value) == $n) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpfl3ael76.php:22\nStack trace:\n#0 /tmp/tmpfl3ael76.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpfl3ael76.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpfl3ael76.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpfl3ael76.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $value) {\n        if (substr_count($value, \"a\") + substr_count($value,\
    \ \"e\") + substr_count($value, \"i\") + substr_count($value, \"o\") + substr_count($value,\
    \ \"u\") == $n) {\n            $result[] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpiihb0fi6.php:39\nStack trace:\n#0 /tmp/tmpiihb0fi6.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpiihb0fi6.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpylb1i_rx.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5wsry7gb.php:47\nStack trace:\n\
    #0 /tmp/tmp5wsry7gb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5wsry7gb.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string s and a natural number n, you have been tasked to implement \na function\
    \ that returns an array of all words from string s that contain exactly \nn consonants,\
    \ in order these words appear in the string s.\nIf the string s is empty then\
    \ the function should return an empty array.\nNote: you may assume the input string\
    \ contains only letters and spaces.\nExamples:\n>>> select_words(\"Mary had a\
    \ little lamb\", 4)\narray(\"little\")\n>>> select_words(\"Mary had a little lamb\"\
    , 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple white space\", 2)\n\
    array()\n>>> select_words(\"Hello world\", 4)\narray(\"world\")\n>>> select_words(\"\
    Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcv2vmncr.php:50\n\
    Stack trace:\n#0 /tmp/tmpcv2vmncr.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcv2vmncr.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string s, you have been tasked to implement a function that returns \nan array\
    \ of all words from string s that contain exactly n vowels, in order \nthese words\
    \ appear in the string s.\nIf the string s is empty then the function should return\
    \ an empty array.\nNote: you may assume the input string contains only letters\
    \ and spaces.\nExamples:\n>>> select_words(\"Mary had a little lamb\", 3)\narray(\"\
    Mary\", \"little\")\n>>> select_words(\"Mary had a little lamb\", 4)\narray(\"\
    little\")\n>>> select_words(\"simple white space\", 2)\narray()\n>>> select_words(\"\
    Hello world\", 4)\narray(\"world\")\n>>> select_words(\"Uncle sam\", 3)\narray(\"\
    Uncle\")*/\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmpzlb1n.php:50\n\
    Stack trace:\n#0 /tmp/tmpwmpzlb1n.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpwmpzlb1n.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = str_replace(\" \", \"\", $s);\n\t$s = str_split($s);\n\t$vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\t$consonants = array();\n\tforeach\
    \ ($s as $letter) {\n\t\tif (!in_array($letter, $vowels)) {\n\t\t\t$consonants[]\
    \ = $letter;\n\t\t}\n\t}\n\t$consonants = count($consonants);\n\tif ($consonants\
    \ == $n) {\n\t\treturn array($s);\n\t} else {\n\t\treturn array();\n\t}\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpca57b_2h.php:45\nStack trace:\n\
    #0 /tmp/tmpca57b_2h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpca57b_2h.php\
    \ on line 45\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4edzcem3.php:38\nStack trace:\n#0 /tmp/tmp4edzcem3.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4edzcem3.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjzwr3kd.php:38\nStack trace:\n#0 /tmp/tmpsjzwr3kd.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjzwr3kd.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $value)\
    \ {\n\t\tif (substr_count($value, \"a\") + substr_count($value, \"e\") + substr_count($value,\
    \ \"i\") + substr_count($value, \"o\") + substr_count($value, \"u\") + substr_count($value,\
    \ \"y\") == $n) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n\
    }\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbtjmi91u.php:38\nStack trace:\n#0 /tmp/tmpbtjmi91u.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbtjmi91u.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (count_consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\
    \t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpbqyapl1_.php:22\nStack trace:\n#0 /tmp/tmpbqyapl1_.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpbqyapl1_.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpbqyapl1_.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpbqyapl1_.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5y_7jc2z.php:34\n\
    Stack trace:\n#0 /tmp/tmp5y_7jc2z.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5y_7jc2z.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpuk45eo88.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $value)\
    \ {\n\t\tif (substr_count($value, \"a\") + substr_count($value, \"e\") + substr_count($value,\
    \ \"i\") + substr_count($value, \"o\") + substr_count($value, \"u\") == $n) {\n\
    \t\t\t$result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3w9au_l8.php:38\nStack trace:\n#0 /tmp/tmp3w9au_l8.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3w9au_l8.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw_9da4u8.php:39\nStack trace:\n#0 /tmp/tmpw_9da4u8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw_9da4u8.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjzwr3kd.php:38\nStack trace:\n#0 /tmp/tmpsjzwr3kd.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjzwr3kd.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpsfo1pvox.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjzwr3kd.php:38\nStack trace:\n#0 /tmp/tmpsjzwr3kd.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjzwr3kd.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpsfo1pvox.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpbeeprlor.php:22\nStack trace:\n#0 /tmp/tmpbeeprlor.php(29): select_words(Array,\
    \ 4)\n#1 /tmp/tmpbeeprlor.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpbeeprlor.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbeeprlor.php on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfce5u5lf.php:38\nStack trace:\n#0 /tmp/tmpfce5u5lf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfce5u5lf.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfce5u5lf.php:38\nStack trace:\n#0 /tmp/tmpfce5u5lf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfce5u5lf.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $value)\
    \ {\n\t\tif (substr_count($value, \"a\") + substr_count($value, \"e\") + substr_count($value,\
    \ \"i\") + substr_count($value, \"o\") + substr_count($value, \"u\") == $n) {\n\
    \t\t\t$result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"<br>\";\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 3));\necho \"<br>\";\nprint_r(select_words(\"simple white space\"\
    , 2));\necho \"<br>\";\nprint_r(select_words(\"Hello world\", 4));\necho \"<br>\"\
    ;\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n    [0] => simple\n    [1]\
    \ => white\n    [2] => space\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpi9harf9h.php:42\nStack trace:\n\
    #0 /tmp/tmpi9harf9h.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpi9harf9h.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (preg_match_all('/[^aeiou]/i', $word, $matches) == $n) {\n\t\t\t$result[]\
    \ = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpw3vr83h4.php:22\nStack trace:\n#0 /tmp/tmpw3vr83h4.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpw3vr83h4.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpw3vr83h4.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpw3vr83h4.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktubst67.php:50\n\
    Stack trace:\n#0 /tmp/tmpktubst67.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpktubst67.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n  $s = explode(' ', $s);\n  $consonants = ['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \  $result = [];\n  foreach ($s as $word) {\n    $count = 0;\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n      if (in_array(strtolower($word[$i]), $consonants))\
    \ {\n        $count++;\n      }\n    }\n    if ($count == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    print_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"Hello\
    \ world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxzo_4gb.php:33\n\
    Stack trace:\n#0 /tmp/tmpbxzo_4gb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbxzo_4gb.php\
    \ on line 33\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpubcuff8j.php:22\nStack trace:\n#0 /tmp/tmpubcuff8j.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpubcuff8j.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpubcuff8j.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpubcuff8j.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpsfo1pvox.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzorupw75.php:38\nStack trace:\n#0 /tmp/tmpzorupw75.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzorupw75.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5wsry7gb.php:47\nStack trace:\n\
    #0 /tmp/tmp5wsry7gb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5wsry7gb.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5c7o2oeh.php:34\n\
    Stack trace:\n#0 /tmp/tmp5c7o2oeh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5c7o2oeh.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0wxihy9w.php:39\nStack trace:\n#0 /tmp/tmp0wxihy9w.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wxihy9w.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $value) {\n        if (substr_count($value, \"a\") + substr_count($value,\
    \ \"e\") + substr_count($value, \"i\") + substr_count($value, \"o\") + substr_count($value,\
    \ \"u\") == $n) {\n            $result[] = $value;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6gt415tc.php:38\nStack trace:\n#0 /tmp/tmp6gt415tc.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6gt415tc.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n/*\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmp2wl1k4es.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn vowels, in order these words appear in the string s.\nIf\
    \ the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptie6b6v0.php:50\n\
    Stack trace:\n#0 /tmp/tmptie6b6v0.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptie6b6v0.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (count_consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpqy_8v84m.php:22\nStack trace:\n#0 /tmp/tmpqy_8v84m.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpqy_8v84m.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpqy_8v84m.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpqy_8v84m.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = array('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'z');\n    $result = array();\n    foreach ($words as $word) {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\n/* Given a string s and a natural number n, you have\
    \ been tasked to implement \na function that returns an array of all words from\
    \ string s that contain exactly \nn vowels, in order these words appear in the\
    \ string s.\nIf the string s is empty then the function should return an empty\
    \ array.\nNote: you may assume the input string contains only letters and spaces.\n\
    Examples:\n>>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n\
    >>> select_words(\"Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>>\
    \ select_words(\"simple white space\", 2)\narray()\n>>> select_words(\"Hello world\"\
    , 4)\narray(\"world\")\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdpyd0rr.php:58\n\
    Stack trace:\n#0 /tmp/tmpqdpyd0rr.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpqdpyd0rr.php\
    \ on line 58\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpubcuff8j.php:22\nStack trace:\n#0 /tmp/tmpubcuff8j.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpubcuff8j.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpubcuff8j.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpubcuff8j.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $value) {\n        if (substr_count($value, \"a\") + substr_count($value,\
    \ \"e\") + substr_count($value, \"i\") + substr_count($value, \"o\") + substr_count($value,\
    \ \"u\") == $n) {\n            $result[] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpiihb0fi6.php:39\nStack trace:\n#0 /tmp/tmpiihb0fi6.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpiihb0fi6.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$result = [];\n\t$words = explode(' ', $s);\n\tforeach ($words as $word)\
    \ {\n\t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsc7z714l.php:35\n\
    Stack trace:\n#0 /tmp/tmpsc7z714l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsc7z714l.php\
    \ on line 35\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpg3y0n_h5.php:22\nStack trace:\n#0 /tmp/tmpg3y0n_h5.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpg3y0n_h5.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpg3y0n_h5.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpg3y0n_h5.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijig_tq7.php:34\n\
    Stack trace:\n#0 /tmp/tmpijig_tq7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpijig_tq7.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpvv0lxfwm.php:22\nStack trace:\n#0 /tmp/tmpvv0lxfwm.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpvv0lxfwm.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpvv0lxfwm.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpvv0lxfwm.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw_9da4u8.php:39\nStack trace:\n#0 /tmp/tmpw_9da4u8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw_9da4u8.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $words = [];\n    foreach ($s as $word)\
    \ {\n        if (preg_match_all('/[^aeiou]/i', $word) == $n) {\n            $words[]\
    \ = $word;\n        }\n    }\n    return $words;\n}\nprint_r(select_words(\"Mary\
    \ had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (preg_match_all('/[^aeiou]/i', $word, $matches) == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = array('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'z');\n    $result = array();\n    foreach ($words as $word) {\n        $consonant_count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $consonant_count++;\n            }\n      \
    \  }\n        if ($consonant_count == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"Mary had a\
    \ little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    print_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"Hello\
    \ world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpvkqtpyxk.php:47\nStack trace:\n\
    #0 /tmp/tmpvkqtpyxk.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpvkqtpyxk.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * \n */\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwiktyfuv.php:38\n\
    Stack trace:\n#0 /tmp/tmpwiktyfuv.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpwiktyfuv.php\
    \ on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfce5u5lf.php:38\nStack trace:\n#0 /tmp/tmpfce5u5lf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfce5u5lf.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv8_p0fvm.php:34\n\
    Stack trace:\n#0 /tmp/tmpv8_p0fvm.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv8_p0fvm.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4pagf_g.php:50\n\
    Stack trace:\n#0 /tmp/tmps4pagf_g.php(59): test()\n#1 {main}\n  thrown in /tmp/tmps4pagf_g.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpsfo1pvox.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjzwr3kd.php:38\nStack trace:\n#0 /tmp/tmpsjzwr3kd.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjzwr3kd.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $value)\
    \ {\n\t\tif (substr_count($value, \"a\") + substr_count($value, \"e\") + substr_count($value,\
    \ \"i\") + substr_count($value, \"o\") + substr_count($value, \"u\") == $n) {\n\
    \t\t\t$result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3w9au_l8.php:38\nStack trace:\n#0 /tmp/tmp3w9au_l8.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3w9au_l8.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzorupw75.php:38\nStack trace:\n#0 /tmp/tmpzorupw75.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzorupw75.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5y_7jc2z.php:34\n\
    Stack trace:\n#0 /tmp/tmp5y_7jc2z.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5y_7jc2z.php\
    \ on line 34\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = str_replace(' ', '', $s);\n\t$arr = str_split($s);\n\t$consonants\
    \ = array('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'y', 'z');\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \t$result = array();\n\t$count = 0;\n\tforeach ($arr as $key => $value) {\n\t\t\
    if (in_array($value, $consonants)) {\n\t\t\t$count++;\n\t\t}\n\t\tif (in_array($value,\
    \ $vowels)) {\n\t\t\t$count = 0;\n\t\t}\n\t\tif ($count == $n) {\n\t\t\t$result[]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrk3d0xk.php:44\n\
    Stack trace:\n#0 /tmp/tmpkrk3d0xk.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpkrk3d0xk.php\
    \ on line 44\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0wxihy9w.php:39\nStack trace:\n#0 /tmp/tmp0wxihy9w.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wxihy9w.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (count_consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp80ku0z2u.php:22\nStack trace:\n#0 /tmp/tmp80ku0z2u.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp80ku0z2u.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp80ku0z2u.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp80ku0z2u.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpx4cm89az.php:39\nStack trace:\n#0 /tmp/tmpx4cm89az.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx4cm89az.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpbeeprlor.php:22\nStack trace:\n#0 /tmp/tmpbeeprlor.php(29): select_words(Array,\
    \ 4)\n#1 /tmp/tmpbeeprlor.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpbeeprlor.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpbeeprlor.php on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpx4cm89az.php:39\nStack trace:\n#0 /tmp/tmpx4cm89az.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx4cm89az.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfkgi3e1w.php:38\nStack trace:\n#0 /tmp/tmpfkgi3e1w.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfkgi3e1w.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * Test code\n */\n\n$tests = [\n    [\"Mary had a little\
    \ lamb\", 4, [\"little\"]],\n    [\"Mary had a little lamb\", 3, [\"Mary\", \"\
    lamb\"]],\n    [\"simple white space\", 2, []],\n    [\"Hello world\", 4, [\"\
    world\"]],\n    [\"Uncle sam\", 3, [\"Uncle\"]],\n];\n\nforeach ($tests as $test)\
    \ {\n    $result = select_words($test[0], $test[1]);\n    if ($result == $test[2])\
    \ {\n        echo \"Test passed!\\n\";\n    } else {\n        echo \"Test failed!\\\
    n\";\n        echo \"Input: \" . $test[0] . \", \" . $test[1] . \"\\n\";\n   \
    \     echo \"Expected: \" . implode(\", \", $test[2]) . \"\\n\";\n        echo\
    \ \"Got: \" . implode(\", \", $result) . \"\\n\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Test failed!\nInput: Mary had a little lamb, 4\nExpected: little\nGot:\
    \ \nTest failed!\nInput: Mary had a little lamb, 3\nExpected: Mary, lamb\nGot:\
    \ \nTest failed!\nInput: simple white space, 2\nExpected: \nGot: simple, white,\
    \ space\nTest failed!\nInput: Hello world, 4\nExpected: world\nGot: \nTest failed!\n\
    Input: Uncle sam, 3\nExpected: Uncle\nGot: \n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6q0awp_o.php:57\nStack trace:\n#0 /tmp/tmp6q0awp_o.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6q0awp_o.php on line 57\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4edzcem3.php:38\nStack trace:\n#0 /tmp/tmp4edzcem3.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4edzcem3.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $value) {\n\
    \t\tif (substr_count($value, 'a') + substr_count($value, 'e') + substr_count($value,\
    \ 'i') + substr_count($value, 'o') + substr_count($value, 'u') == $n) {\n\t\t\t\
    $result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpiz5awt8u.php:38\nStack trace:\n#0 /tmp/tmpiz5awt8u.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpiz5awt8u.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * CODEWARS\n * https://www.codewars.com/kata/5a523566b3bfa84c2e00010b/train/php\n\
    \ *\n * @description\n * You are given an array (which will have a length of at\
    \ least 3, but could be very large) containing integers.\n * The array is either\
    \ entirely comprised of odd integers or entirely comprised of even integers except\
    \ for a single integer N.\n * Write a method that takes the array as an argument\
    \ and returns this \"outlier\" N.\n *\n * Examples\n * [2, 4, 0, 100, 4, 11, 2602,\
    \ 36]\n * Should return: 11 (the only odd number)\n *\n * [160, 3, 1719, 19, 11,\
    \ 13, -21]\n * Should return: 160 (the only even number)\n *\n * @param array\
    \ $integers\n * @return int\n */\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqug91f8.php:53\n\
    Stack trace:\n#0 /tmp/tmpoqug91f8.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpoqug91f8.php\
    \ on line 53\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (preg_match_all('/[^aeiou]/i', $word, $matches) == $n)\
    \ {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\necho '<pre>';\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\necho '</pre>';\necho '<pre>';\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\necho '</pre>';\necho '<pre>';\n\
    print_r(select_words(\"simple white space\", 2));\necho '</pre>';\necho '<pre>';\n\
    print_r(select_words(\"Hello world\", 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0]\
    \ => simple\n    [1] => white\n    [2] => space\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n\
    (\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxljvz6f1.php:48\n\
    Stack trace:\n#0 /tmp/tmpxljvz6f1.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxljvz6f1.php\
    \ on line 48\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpvv0lxfwm.php:22\nStack trace:\n#0 /tmp/tmpvv0lxfwm.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpvv0lxfwm.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpvv0lxfwm.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpvv0lxfwm.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfkgi3e1w.php:38\nStack trace:\n#0 /tmp/tmpfkgi3e1w.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfkgi3e1w.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzorupw75.php:38\nStack trace:\n#0 /tmp/tmpzorupw75.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzorupw75.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpw3vr83h4.php:22\nStack trace:\n#0 /tmp/tmpw3vr83h4.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpw3vr83h4.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpw3vr83h4.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpw3vr83h4.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpubcuff8j.php:22\nStack trace:\n#0 /tmp/tmpubcuff8j.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpubcuff8j.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpubcuff8j.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpubcuff8j.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n$s = 'Mary had a little lamb';\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8olew2e.php:37\n\
    Stack trace:\n#0 /tmp/tmp_8olew2e.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_8olew2e.php\
    \ on line 37\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0wxihy9w.php:39\nStack trace:\n#0 /tmp/tmp0wxihy9w.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wxihy9w.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpunbpgbsr.php:22\nStack trace:\n#0 /tmp/tmpunbpgbsr.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpunbpgbsr.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpunbpgbsr.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpunbpgbsr.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpab763lc7.php:38\nStack trace:\n#0 /tmp/tmpab763lc7.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpab763lc7.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $value) {\n        if (consonants($value) == $n) {\n            $result[]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmp84k9mcw6.php:22\nStack trace:\n#0 /tmp/tmp84k9mcw6.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp84k9mcw6.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp84k9mcw6.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp84k9mcw6.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpw3vr83h4.php:22\nStack trace:\n#0 /tmp/tmpw3vr83h4.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpw3vr83h4.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpw3vr83h4.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpw3vr83h4.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (count_consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp3sktz81d.php:22\nStack trace:\n#0 /tmp/tmp3sktz81d.php(30): select_words(Array,\
    \ 4)\n#1 /tmp/tmp3sktz81d.php(34): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp3sktz81d.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3sktz81d.php on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpsfo1pvox.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \  $result = [];\n  foreach ($words as $word) {\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($word); $i++) {\n      if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n        $count++;\n      }\n    }\n    if ($count == $n) {\n\
    \      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpsfo1pvox.php on
    line 29

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mphdhwm.php:35\n\
    Stack trace:\n#0 /tmp/tmp_mphdhwm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_mphdhwm.php\
    \ on line 35\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpd7q_uxm9.php:38\nStack trace:\n#0 /tmp/tmpd7q_uxm9.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd7q_uxm9.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (substr_count($word, \"a\") + substr_count($word, \"\
    e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0wxihy9w.php:39\nStack trace:\n#0 /tmp/tmp0wxihy9w.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0wxihy9w.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpg3y0n_h5.php:22\nStack trace:\n#0 /tmp/tmpg3y0n_h5.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpg3y0n_h5.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpg3y0n_h5.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpg3y0n_h5.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp22vse_71.php:39\nStack trace:\n#0 /tmp/tmp22vse_71.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp22vse_71.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $key\
    \ => $value) {\n\t\tif (consonants($value) == $n) {\n\t\t\t$result[] = $value;\n\
    \t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'];\n    $result = [];\n    foreach ($words as $word) {\n        $count =\
    \ 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$words = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as\
    \ $word) {\n\t\tif (substr_count($word, \"a\") + substr_count($word, \"e\") +\
    \ substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsjzwr3kd.php:38\nStack trace:\n#0 /tmp/tmpsjzwr3kd.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjzwr3kd.php on line 38\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'];\n    $result = [];\n    foreach ($words as $word) {\n        $consonantCount\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $consonantCount++;\n            }\n       \
    \ }\n        if ($consonantCount == $n) {\n            $result[] = $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$arr = explode(\" \", $s);\n\t$result = [];\n\tforeach ($arr as $word)\
    \ {\n\t\tif (consonants($word) == $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\
    \treturn $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmphyudvtw0.php:22\nStack trace:\n#0 /tmp/tmphyudvtw0.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmphyudvtw0.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmphyudvtw0.php(42): test()\n#3 {main}\n  thrown in /tmp/tmphyudvtw0.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') + substr_count($word,\
    \ 'y') == $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplgsxx87l.php:38\nStack trace:\n#0 /tmp/tmplgsxx87l.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplgsxx87l.php on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n\t$s = explode(' ', $s);\n\t$result = [];\n\tforeach ($s as $word) {\n\
    \t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptaub0lnv.php:39\nStack trace:\n#0 /tmp/tmptaub0lnv.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptaub0lnv.php on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $consonants = array(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $result = array();\n\
    \    foreach ($arr as $word) {\n        $count = 0;\n        for ($i = 0; $i <\
    \ strlen($word); $i++) {\n            if (in_array($word[$i], $consonants)) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            array_push($result, $word);\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpy2jfg8ev.php:47\nStack trace:\n\
    #0 /tmp/tmpy2jfg8ev.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpy2jfg8ev.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpw3vr83h4.php:22\nStack trace:\n#0 /tmp/tmpw3vr83h4.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpw3vr83h4.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpw3vr83h4.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpw3vr83h4.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n/*\n  //\
    \ \u0420\u0435\u0448\u0435\u043D\u0438\u0435 \u0443\u0447\u0438\u0442\u0435\u043B\
    \u044F\n  function select_words($s, $n) {\n  $s = explode(' ', $s);\n  $result\
    \ = [];\n  foreach ($s as $word) {\n  if (substr_count($word, 'a') + substr_count($word,\
    \ 'e') + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n  $result[] = $word;\n  }\n  }\n  return $result;\n  }\n */\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv8tuqs7.php:47\n\
    Stack trace:\n#0 /tmp/tmpsv8tuqs7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsv8tuqs7.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        if (countConsonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpota4cf05.php:22\nStack trace:\n#0 /tmp/tmpota4cf05.php(30): select_words(Array,\
    \ 4)\n#1 /tmp/tmpota4cf05.php(34): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpota4cf05.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpota4cf05.php on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpunbpgbsr.php:22\nStack trace:\n#0 /tmp/tmpunbpgbsr.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpunbpgbsr.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpunbpgbsr.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpunbpgbsr.php\
    \ on line 22\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string s and a natural number n, you have been tasked\
    \ to implement \na function that returns an array of all words from string s that\
    \ contain exactly \nn consonants, in order these words appear in the string s.\n\
    If the string s is empty then the function should return an empty array.\nNote:\
    \ you may assume the input string contains only letters and spaces.\nExamples:\n\
    >>> select_words(\"Mary had a little lamb\", 4)\narray(\"little\")\n>>> select_words(\"\
    Mary had a little lamb\", 3)\narray(\"Mary\", \"lamb\")\n>>> select_words(\"simple\
    \ white space\", 2)\narray()\n>>> select_words(\"Hello world\", 4)\narray(\"world\"\
    )\n>>> select_words(\"Uncle sam\", 3)\narray(\"Uncle\")*/\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv2422yed.php:39\nStack trace:\n#0 /tmp/tmpv2422yed.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv2422yed.php on line 39\n"
  timestamp: 1660220657
