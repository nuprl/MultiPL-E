name: HumanEval_83_starts_one_ends
language: php
prompt: "<?php\n/* Given a positive integer n, return the count of the numbers of\
  \ n-digit\npositive integers that start or end with 1.*/\nfunction starts_one_ends($n)\
  \ {\n"
tests: "function candidate(...$args) {\n    return starts_one_ends(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(1) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2) !== 18) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(3) !== 180) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(4) !== 1800) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(5) !== 18000) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count\
    \ += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);",
  "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n\
    \  }\n  return $count;\n}\n\necho starts_one_ends(3);", "    if ($n == 1) {\n\
    \        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n    }\n    return\
    \ starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\n$n = 3;\necho starts_one_ends($n);",
  "\tif ($n == 1) {\n\t\treturn 2;\n\t}\n\tif ($n == 2) {\n\t\treturn 3;\n\t}\n\t\
    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if\
    \ ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho\
    \ starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n    return\
    \ starts_one_ends($n - 1) + pow(10, $n - 1);\n}\n\necho starts_one_ends(3);",
  "  $start_one = 9;\n  $end_one = 9;\n  $start_end_one = 9;\n  for ($i = 1; $i <\
    \ $n; $i++) {\n    $start_one = $start_one * (9 - $i);\n    $end_one = $end_one\
    \ * (9 - $i);\n    $start_end_one = $start_end_one * (9 - $i);\n  }\n  return\
    \ $start_one + $end_one - $start_end_one;\n}\n\necho starts_one_ends(2) . \"\\\
    n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\n\
    echo starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7)\
    \ . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\
    \\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\"\
    ;\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\n\
    echo starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho\
    \ starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18)\
    \ . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) .\
    \ \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22) . \"\
    \\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24) . \"\\n\"\
    ;\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) . \"\\n\";\n\
    echo starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\\n\";\necho\
    \ starts", "    $count = 0;\n    $start = pow(10, $n - 1);\n    $end = pow(10,\
    \ $n) - 1;\n    for ($i = $start; $i <= $end; $i++) {\n        if (strpos($i,\
    \ '1') === 0 || strpos($i, '1') === strlen($i) - 1) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\necho starts_one_ends(3);", "    $count = 0;\n \
    \   for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count * 2;\n}\n\necho starts_one_ends(4);", "    if ($n == 1) {\n\
    \        return 2;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n}\n\necho\
    \ starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3)\
    \ . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\n\
    echo starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8)\
    \ . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;",
  "    $start = 1;\n    $end = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $start\
    \ = $start * 10;\n        $end = $end * 10 + 1;\n    }\n    return $start + $end;\n\
    }\n\necho starts_one_ends(2);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n}\n\n\
    echo starts_one_ends(3);", "  if ($n == 1) {\n    return 2;\n  }\n  if ($n ==\
    \ 2) {\n    return 3;\n  }\n  return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    $dp = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i -\
    \ 2];\n    }\n    return $dp[$n];\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho\
    \ starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\n\
    echo starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;", "    if ($n == 1) {\n    \
    \    return 2;\n    }\n    if ($n == 2) {\n        return 3;\n    }\n    return\
    \ starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if\
    \ ($n == 1) {\n        return 2;\n    }\n    $count = 0;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count\
    \ * 2;\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;", "    if ($n == 1) {\n        return 2;\n    }\n    $dp = array_fill(0,\
    \ $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return $dp[$n];\n\
    }\n\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(4);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(4);", "    $count =\
    \ 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\necho starts_one_ends(1);", "    if ($n == 1) {\n\
    \        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n    }\n    return\
    \ starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(5);",
  "    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return\
    \ 3;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\
    \necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\necho starts_one_ends(3);",
  "    if ($n == 1) {\n        return 2;\n    }\n    $dp = array_fill(0, $n, 0);\n\
    \    $dp[0] = 1;\n    $dp[1] = 2;\n    for ($i = 2; $i < $n; $i++) {\n       \
    \ $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return $dp[$n - 1] * 2;\n}\n\
    \necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n \
    \   if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3);", "  if ($n ==\
    \ 1) {\n    return 2;\n  }\n  if ($n == 2) {\n    return 3;\n  }\n  return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3);", "  $count =\
    \ 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n\
    \  return $count;\n}\n\necho starts_one_ends(3);", "  $count = 0;\n  for ($i =\
    \ 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n  return $count;\n\
    }\n\necho starts_one_ends(2);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    $dp = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n \
    \   }\n    return $dp[$n];\n}\n\n$n = 4;\necho starts_one_ends($n);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if ($n == 1)\
    \ {\n        return 2;\n    }\n    $dp = array_fill(0, $n, 0);\n    $dp[0] = 1;\n\
    \    $dp[1] = 2;\n    for ($i = 2; $i < $n; $i++) {\n        $dp[$i] = $dp[$i\
    \ - 1] + $dp[$i - 2];\n    }\n    return $dp[$n - 1] * 2;\n}\n\n$n = 3;\necho\
    \ starts_one_ends($n);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(4);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if\
    \ ($n == 1) {\n        return 2;\n    } else {\n        return starts_one_ends($n\
    \ - 1) + pow(10, $n - 1);\n    }\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho\
    \ starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\n\
    echo starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho starts_one_ends(11) .\
    \ PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\n\
    echo starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) . PHP_EOL;\necho\
    \ starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18)\
    \ . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho starts_one_ends(20) .\
    \ PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\n\
    echo starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) . PHP_EOL;\necho\
    \ starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27)\
    \ . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho starts_one_ends(29) .\
    \ PHP_EOL;", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count\
    \ += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(2);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count * 2;\n}\n\necho starts_one_ends(1) . \"\\\
    n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\n\
    echo starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6)\
    \ . \"\\n\";\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\
    \\n\";\necho starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\"\
    ;\necho starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\n\
    echo starts_one_ends(13) . \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho\
    \ starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17)\
    \ . \"\\n\";\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) .\
    \ \"\\n\";\necho starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\
    \\n\";\necho starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\"\
    ;\necho starts_one_ends(24) . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\n\
    echo starts_one_ends(26) . \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho\
    \ starts_one_ends(28) . \"\\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30)\
    \ . \"\\n\";\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) .\
    \ \"\\n\";\necho starts_one_ends(33) .", "    $count = 0;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3);", "\tif ($n ==\
    \ 1) {\n\t\treturn 2;\n\t}\n\tif ($n == 2) {\n\t\treturn 3;\n\t}\n\t$count = 2;\n\
    \t$count += pow(5, $n - 1);\n\treturn $count;\n}\n\necho starts_one_ends(1) .\
    \ PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho\
    \ starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13)\
    \ . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) .\
    \ PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\n\
    echo starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho\
    \ starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22)\
    \ . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) .\
    \ PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\n\
    echo starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_E", "    $count\
    \ = 0;\n    $start = 1;\n    $end = 1;\n    for ($i = 1; $i <= $n; $i++) {\n \
    \       $start *= 10;\n        $end = $end * 10 + 1;\n    }\n    $start /= 10;\n\
    \    $end -= 1;\n    $count = $end - $start + 1;\n    return $count;\n}\n\necho\
    \ starts_one_ends(2);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(2);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count * 2;\n}\n", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) .\
    \ PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\n\
    echo starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho\
    \ starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19)\
    \ . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) .\
    \ PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\n\
    echo starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho\
    \ starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28)\
    \ . PHP_EOL;\necho starts_one_ends(29) . PHP_", "    $count = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return\
    \ 2;\n    }\n    if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(4);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(3);", "  if ($n == 1) {\n    return\
    \ 2;\n  }\n  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10,\
    \ $i - 1);\n  }\n  return $count * 2;\n}\n\necho starts_one_ends(2);\necho \"\\\
    n\";\necho starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\necho\
    \ \"\\n\";\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\n\
    echo \"\\n\";\necho starts_one_ends(7);\necho \"\\n\";\necho starts_one_ends(8);\n\
    echo \"\\n\";\necho starts_one_ends(9);\necho \"\\n\";\necho starts_one_ends(10);\n\
    echo \"\\n\";\necho starts_one_ends(11);\necho \"\\n\";\necho starts_one_ends(12);\n\
    echo \"\\n\";\necho starts_one_ends(13);\necho \"\\n\";\necho starts_one_ends(14);\n\
    echo \"\\n\";\necho starts_one_ends(15);\necho \"\\n\";\necho starts_one_ends(16);\n\
    echo \"\\n\";\necho starts_one_ends(17);\necho \"\\n\";\necho starts_one_ends(18);\n\
    echo \"\\n\";\necho starts_one_ends(19);\necho \"\\n\";\necho starts_one_ends(20);\n\
    echo \"\\n\";\necho starts_one_ends(21);\necho \"\\n\";\necho starts_one_ends(22);\n\
    echo \"\\n\";\necho starts_one_ends(23);\necho \"\\n\";\necho starts_one_ends(24);\n\
    echo \"\\n\";\necho starts_one_ends(25);\necho \"\\n\";\necho starts_one_ends(26);\n\
    echo \"\\n\";\necho starts_one_ends(27);\necho \"\\n\";\necho starts_one_ends(28);\n\
    echo \"\\n\";\necho starts_one_ends(29);\necho \"\\n\";\necho starts_one_ends(30);\n\
    echo \"\\n\";\necho starts_one_ends", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(2);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(2)\
    \ . \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\
    \\n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\"\
    ;\necho starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho\
    \ starts_one_ends(9) . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11)\
    \ . \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) .\
    \ \"\\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\
    \\n\";\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\"\
    ;\necho starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\n\
    echo starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho\
    \ starts_one_ends(22) . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24)\
    \ . \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) .\
    \ \"\\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\
    \\n\";\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\"\
    ;\necho starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\n\
    echo starts_one_ends(33) . \"\\n\";\necho starts_one_ends(34) . \"\\n", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(2);\necho \"\\n\";\necho\
    \ starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\necho \"\\n\";\n\
    echo starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\necho \"\\n\"\
    ;\necho starts_one_ends(7);\necho \"\\n\";\necho starts_one_ends(8);\necho \"\\\
    n\";\necho starts_one_ends(9);\necho \"\\n\";\necho starts_one_ends(10);\necho\
    \ \"\\n\";\necho starts_one_ends(11);\necho \"\\n\";\necho starts_one_ends(12);\n\
    echo \"\\n\";\necho starts_one_ends(13);\necho \"\\n\";\necho starts_one_ends(14);\n\
    echo \"\\n\";\necho starts_one_ends(15);\necho \"\\n\";\necho starts_one_ends(16);\n\
    echo \"\\n\";\necho starts_one_ends(17);\necho \"\\n\";\necho starts_one_ends(18);\n\
    echo \"\\n\";\necho starts_one_ends(19);\necho \"\\n\";\necho starts_one_ends(20);\n\
    echo \"\\n\";\necho starts_one_ends(21);\necho \"\\n\";\necho starts_one_ends(22);\n\
    echo \"\\n\";\necho starts_one_ends(23);\necho \"\\n\";\necho starts_one_ends(24);\n\
    echo \"\\n\";\necho starts_one_ends(25);\necho \"\\n\";\necho starts_one_ends(26);\n\
    echo \"\\n\";\necho starts_one_ends(27);\necho \"\\n\";\necho starts_one_ends(28);\n\
    echo \"\\n\";\necho starts_one_ends(29);\necho \"\\n\";\necho starts_one_ends(30);\n\
    echo \"\\n\";\necho starts_one_ends(31);\necho \"\\n\";\necho starts_one_ends(32);\n",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\necho starts_one_ends(3);", "    if ($n\
    \ == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n \
    \   }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho\
    \ starts_one_ends(4);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count * 2;\n}\n\necho starts_one_ends(3);", "\t\
    $count = 0;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$count += pow(10, $i - 1);\n\
    \t}\n\treturn $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) .\
    \ PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho\
    \ starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14)\
    \ . PHP_EOL;\necho starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) .\
    \ PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\n\
    echo starts_one_ends(19) . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho\
    \ starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23)\
    \ . PHP_EOL;\necho starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) .\
    \ PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\n\
    echo starts_one_ends(28) . PHP_EOL;\necho starts_one_ends(29) . PHP_", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(9, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(1);\necho starts_one_ends(2);\n\
    echo starts_one_ends(3);\necho starts_one_ends(4);\necho starts_one_ends(5);\n\
    echo starts_one_ends(6);\necho starts_one_ends(7);\necho starts_one_ends(8);\n\
    echo starts_one_ends(9);\necho starts_one_ends(10);\necho starts_one_ends(11);\n\
    echo starts_one_ends(12);\necho starts_one_ends(13);\necho starts_one_ends(14);\n\
    echo starts_one_ends(15);\necho starts_one_ends(16);\necho starts_one_ends(17);\n\
    echo starts_one_ends(18);\necho starts_one_ends(19);\necho starts_one_ends(20);\n\
    echo starts_one_ends(21);\necho starts_one_ends(22);\necho starts_one_ends(23);\n\
    echo starts_one_ends(24);\necho starts_one_ends(25);\necho starts_one_ends(26);\n\
    echo starts_one_ends(27);\necho starts_one_ends(28);\necho starts_one_ends(29);\n\
    echo starts_one_ends(30);\necho starts_one_ends(31);\necho starts_one_ends(32);\n\
    echo starts_one_ends(33);\necho starts_one_ends(34);\necho starts_one_ends(35);\n\
    echo starts_one_ends(36);\necho starts_one_ends(37);\necho starts_one_ends(38);\n\
    echo starts_one_ends(39);\necho starts_one_ends(40);\necho starts_one_ends(41);\n\
    echo starts_one_ends(42);\necho starts_one_ends(43);\necho starts_one_ends(44);\n\
    echo starts_one_ends(45);\necho starts_one_ends(46);\n", "    $count = 0;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count * 2;\n}\n\necho starts_one_ends(2);", "  $count = 0;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n  return $count;\n\
    }\n\necho starts_one_ends(2);", "  if ($n == 1) {\n    return 2;\n  }\n  $count\
    \ = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n\
    \  return $count * 2;\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(2);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n}\n\necho\
    \ starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n    $dp\
    \ = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n\
    \    return $dp[$n];\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count *\
    \ 2;\n}\n\necho starts_one_ends(2);", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    $dp = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n \
    \   }\n    return $dp[$n];\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(2);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho\
    \ starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13)\
    \ . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) .\
    \ PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\n\
    echo starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho\
    \ starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22)\
    \ . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) .\
    \ PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\n\
    echo starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho\
    \ starts_one_ends(29) . PHP_", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    $dp = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n \
    \   }\n    return $dp[$n];\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    $dp = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i -\
    \ 2];\n    }\n    return $dp[$n];\n}\n\necho starts_one_ends(2) . PHP_EOL;\necho\
    \ starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) .\
    \ PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\n\
    echo starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho\
    \ starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19)\
    \ . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) .\
    \ PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\n\
    echo starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho\
    \ starts_one_ends(26) . PHP_E", "    if ($n == 1) return 2;\n    if ($n == 2)\
    \ return 3;\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\
    \necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho\
    \ starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5)\
    \ . \"\\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\
    \\n\";\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\"\
    ;\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\n\
    echo starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho\
    \ starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16)\
    \ . \"\\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) .\
    \ \"\\n\";\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\
    \\n\";\necho starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22) . \"\\n\"\
    ;\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24) . \"\\n\";\n\
    echo starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) . \"\\n\";\necho\
    \ starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\\n\";\necho starts_one_ends(29)\
    \ . \"\\n\";\necho starts_one_ends(30) . \"\\n\";\necho starts_one_ends(31) .\
    \ \"\\n\";\necho starts_one_ends(32) . \"\\n\";\necho starts_one_ends(33) . \"\
    \\n\";\n", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count\
    \ += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(1)\
    \ . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\n\
    echo starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6)\
    \ . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\n\
    echo starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho\
    \ starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13)\
    \ . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) .\
    \ PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\n\
    echo starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho\
    \ starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22)\
    \ . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) .\
    \ PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\n\
    echo starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho\
    \ starts_one_ends(29) . PHP_", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho\
    \ starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\n\
    echo starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho starts_one_ends(11) .\
    \ PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\n\
    echo starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) . PHP_EOL;\necho\
    \ starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18)\
    \ . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho starts_one_ends(20) .\
    \ PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\n\
    echo starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) . PHP_EOL;\necho\
    \ starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27)\
    \ . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho starts", "    $count =\
    \ 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\n/* Given a positive integer n, return the count\
    \ of the numbers of n-digit\npositive integers that start or end with 1.*/", " \
    \   if ($n == 1) {\n        return 2;\n    }\n    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(9, $i - 1);\n    }\n    return $count\
    \ * 2;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count\
    \ * 2;\n}\n\necho starts_one_ends(3);", "  $count = 0;\n  for ($i = 1; $i <= $n;\
    \ $i++) {\n    $count += pow(10, $i - 1);\n  }\n  return $count;\n}\n\necho starts_one_ends(3);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(2);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(2);", "    $count = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n      \
    \  $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "\t$count\
    \ = 0;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$count += pow(10, $i - 1);\n\t}\n\
    \treturn $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\n/* Given a positive integer n, return the count of the numbers\
    \ of n-digit\npositive integers that start or end with 1.*/", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n", "    if ($n == 1) {\n        return 2;\n    }\n   \
    \ if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n - 1)\
    \ + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3);", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\n/* Given a positive integer n, return the count of the numbers\
    \ of n-digit\npositive integers that start or end with 1.*/", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(2);", "    $count = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) .\
    \ \"\\n\";\necho starts_one_ends(3) . \"\\n\";\necho starts_one_ends(4) . \"\\\
    n\";\necho starts_one_ends(5) . \"\\n\";\necho starts_one_ends(6) . \"\\n\";\n\
    echo starts_one_ends(7) . \"\\n\";\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9)\
    \ . \"\\n\";\necho starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) .\
    \ \"\\n\";\necho starts_one_ends(12) . \"\\n\";\necho starts_one_ends(13) . \"\
    \\n\";\necho starts_one_ends(14) . \"\\n\";\necho starts_one_ends(15) . \"\\n\"\
    ;\necho starts_one_ends(16) . \"\\n\";\necho starts_one_ends(17) . \"\\n\";\n\
    echo starts_one_ends(18) . \"\\n\";\necho starts_one_ends(19) . \"\\n\";\necho\
    \ starts_one_ends(20) . \"\\n\";\necho starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22)\
    \ . \"\\n\";\necho starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24) .\
    \ \"\\n\";\necho starts_one_ends(25) . \"\\n\";\necho starts_one_ends(26) . \"\
    \\n\";\necho starts_one_ends(27) . \"\\n\";\necho starts_one_ends(28) . \"\\n\"\
    ;\necho starts_one_ends(29) . \"\\n\";\necho starts_one_ends(30) . \"\\n\";\n\
    echo starts_one_ends(31) . \"\\n\";\necho starts_one_ends(32) . \"\\n\";\necho\
    \ starts_one_ends(33) . \"\\n", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n}\n\necho\
    \ starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n    if\
    \ ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n - 1) +\
    \ starts_one_ends($n - 2);\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho\
    \ starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14)\
    \ . PHP_EOL;\necho starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) .\
    \ PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\n\
    echo starts_one_ends(19) . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho\
    \ starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23)\
    \ . PHP_EOL;\necho starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) .\
    \ PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\n\
    echo starts_one_ends(28) . PHP_EOL;\necho starts", "    $count = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(1);\necho starts_one_ends(2);\necho starts_one_ends(3);\n\
    echo starts_one_ends(4);\necho starts_one_ends(5);", "    $count = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(2);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(3);", "    if ($n ==\
    \ 1) {\n        return 2;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n\
    }\n\n$n = 5;\necho starts_one_ends($n);", "  $count = 0;\n  for ($i = 1; $i <=\
    \ $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n  return $count;\n}\n\necho\
    \ starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3)\
    \ . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\
    \\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\\n\"\
    ;\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\";\necho\
    \ starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12)\
    \ . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho starts_one_ends(14) .\
    \ \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16) . \"\
    \\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) . \"\\n\"\
    ;\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\\n\";\n\
    echo starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22) . \"\\n\";\necho\
    \ starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24) . \"\\n\";\necho starts_one_ends(25)\
    \ . \"\\n\";\necho starts_one_ends(26) . \"\\n\";\necho starts_one_ends(27) .\
    \ \"\\n\";\necho starts_one_ends(28) . \"\\n\";\necho starts_one_ends(29) . \"\
    \\n\";\necho starts_one_ends(30) . \"\\n\";\necho starts_one_ends(31) . \"\\n\"\
    ;\necho starts_one_ends(32) . \"\\n\";\necho starts_one_ends(33) . \"\\n", " \
    \   $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count * 2;\n}\n\necho starts_one_ends(3);", " \
    \   $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(4);", "    if\
    \ ($n == 1) {\n        return 2;\n    }\n    $count = 1;\n    $count += pow(10,\
    \ $n - 1);\n    $count += (pow(10, $n - 1) - 1) * 9;\n    return $count;\n}\n\n\
    /* Given a positive integer n, return the count of the numbers of n-digit\npositive\
    \ integers that start or end with 1.*/", "    $count = 0;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(9,\
    \ $i - 1);\n    }\n    return $count * 2;\n}\n\n$n = 4;\necho starts_one_ends($n);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(9, $i\
    \ - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(2);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if ($n == 1)\
    \ {\n        return 2;\n    }\n    $dp = array_fill(0, $n, 0);\n    $dp[0] = 2;\n\
    \    $dp[1] = 3;\n    for ($i = 2; $i < $n; $i++) {\n        $dp[$i] = $dp[$i\
    \ - 1] + $dp[$i - 2];\n    }\n    return $dp[$n - 1];\n}\n\necho starts_one_ends(3);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\n$n = 3;\necho starts_one_ends($n);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\n$n = 3;\necho starts_one_ends($n);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if ($n == 1)\
    \ {\n        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n    }\n\
    \    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(4);",
  "    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return\
    \ 3;\n    }\n    $dp = array_fill(0, $n, 0);\n    $dp[0] = 2;\n    $dp[1] = 3;\n\
    \    for ($i = 2; $i < $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n\
    \    }\n    return $dp[$n - 1];\n}\necho starts_one_ends(3);", "    if ($n ==\
    \ 1) {\n        return 2;\n    }\n    $count = 0;\n    $count += 9 * pow(10, $n\
    \ - 1);\n    $count += starts_one_ends($n - 1);\n    return $count;\n}\n\necho\
    \ starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    } else if\
    \ ($n == 2) {\n        return 3;\n    } else {\n        return starts_one_ends($n\
    \ - 1) + starts_one_ends($n - 2);\n    }\n}\n\necho starts_one_ends(1) . PHP_EOL;\n\
    echo starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\n\
    echo starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho starts_one_ends(11) .\
    \ PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\n\
    echo starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) . PHP_EOL;\necho\
    \ starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18)\
    \ . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho starts_one_ends(20) .\
    \ PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\n\
    echo starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) . PHP_EOL;\necho\
    \ starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27)\
    \ . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL", "    $count = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count\
    \ * 2;\n}\n\necho starts_one_ends(2);", "    $count = 0;\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(2);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    return starts_one_ends($n - 1) + 9 * pow(10, $n - 2);\n}\n\necho starts_one_ends(2);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if\
    \ ($n == 1) {\n        return 2;\n    } else {\n        return $n * 9 + starts_one_ends($n\
    \ - 1);\n    }\n}\n\necho starts_one_ends(4);", "\t$count = 0;\n\tfor ($i = 1;\
    \ $i <= $n; $i++) {\n\t\t$count += pow(10, $i - 1);\n\t}\n\treturn $count;\n}\n\
    \necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n \
    \   if ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n -\
    \ 1) + starts_one_ends($n - 2);\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho\
    \ starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\n\
    echo starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\necho starts_one_ends(11) .\
    \ PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\n\
    echo starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15) . PHP_EOL;\necho\
    \ starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18)\
    \ . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\necho starts_one_ends(20) .\
    \ PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\n\
    echo starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24) . PHP_EOL;\necho\
    \ starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27)\
    \ . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\necho starts", "  $count = 0;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n  return\
    \ $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count\
    \ * 2;\n}\n\n/* Given a positive integer n, return the count of the numbers of\
    \ n-digit\npositive integers that start or end with 1 or 2.*/", "    $count =\
    \ 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);", "    if\
    \ ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho\
    \ starts_one_ends(4);", "  if ($n == 1) {\n    return 2;\n  }\n  if ($n == 2)\
    \ {\n    return 3;\n  }\n  return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) .\
    \ PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\n\
    echo starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho\
    \ starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19)\
    \ . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) .\
    \ PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\n\
    echo starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho\
    \ starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28)\
    \ . PHP_EOL;\necho starts", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n    if\
    \ ($n == 2) {\n        return 3;\n    }\n    return starts_one_ends($n - 1) +\
    \ starts_one_ends($n - 2);\n}\n\necho starts_one_ends(4);", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count * 2;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n}\n\necho\
    \ starts_one_ends(3);", "    $result = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $result += pow(10, $i - 1);\n    }\n    return $result;\n}", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count * 2;\n}\n\n/* Given a positive integer n, return the\
    \ count of the numbers of n-digit\npositive integers that start or end with 1.*/",
  "    if ($n == 1) {\n        return 2;\n    }\n    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count\
    \ * 2;\n}\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    $count = 0;\n    $count += 9 * pow(10, $n - 1);\n    $count += 9 *\
    \ pow(10, $n - 2);\n    return $count;\n}\n\n$n = 2;\necho starts_one_ends($n);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(4);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count * 2;\n}\n\necho starts_one_ends(3);", "    if ($n ==\
    \ 1) {\n        return 2;\n    }\n    return starts_one_ends($n - 1) + 9 * pow(10,\
    \ $n - 2);\n}\n\necho starts_one_ends(2);", "    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(1);\necho \"\\n\";\necho starts_one_ends(2);\necho \"\
    \\n\";\necho starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\necho\
    \ \"\\n\";\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\n\
    echo \"\\n\";\necho starts_one_ends(7);\necho \"\\n\";\necho starts_one_ends(8);\n\
    echo \"\\n\";\necho starts_one_ends(9);\necho \"\\n\";\necho starts_one_ends(10);\n\
    echo \"\\n\";\necho starts_one_ends(11);\necho \"\\n\";\necho starts_one_ends(12);\n\
    echo \"\\n\";\necho starts_one_ends(13);\necho \"\\n\";\necho starts_one_ends(14);\n\
    echo \"\\n\";\necho starts_one_ends(15);\necho \"\\n\";\necho starts_one_ends(16);\n\
    echo \"\\n\";\necho starts_one_ends(17);\necho \"\\n\";\necho starts_one_ends(18);\n\
    echo \"\\n\";\necho starts_one_ends(19);\necho \"\\n\";\necho starts_one_ends(20);\n\
    echo \"\\n\";\necho starts_one_ends(21);\necho \"\\n\";\necho starts_one_ends(22);\n\
    echo \"\\n\";\necho starts_one_ends(23);\necho \"\\n\";\necho starts_one_ends(24);\n\
    echo \"\\n\";\necho starts_one_ends(25);\necho \"\\n\";\necho starts_one_ends(26);\n\
    echo \"\\n\";\necho starts_one_ends(27);\necho \"\\n\";\necho starts_one_ends(28);\n\
    echo \"\\n\";\necho starts_one_ends(29);\necho \"\\n\";\necho starts_one_ends(30);\n\
    echo \"\\n\";\necho starts_one_ends(31);\n", "    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(2);", "    $count = 0;\n    $num = 1;\n    while ($num < pow(10,\
    \ $n)) {\n        if ($num % 10 == 1) {\n            $count++;\n        }\n  \
    \      $num++;\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", " \
    \ $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n\
    \  }\n  return $count;\n}\n\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3)\
    \ . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\n\
    echo starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8)\
    \ . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\n\
    echo starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho\
    \ starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15)\
    \ . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) .\
    \ PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\n\
    echo starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho\
    \ starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24)\
    \ . PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) .\
    \ PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\n\
    echo starts_one_ends(29) . PHP_EOL;\necho starts_one_ends(30) . PHP_", "    $start\
    \ = 1;\n    $end = 1;\n    $middle = 9;\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        $start = $start + $middle;\n        $end = $end + $middle;\n        $middle\
    \ = $middle * 9;\n    }\n    return $start + $end;\n}\n\necho starts_one_ends(3);",
  "    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return\
    \ 3;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\
    \necho starts_one_ends(3);", "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $count += pow(10, $i - 1);\n  }\n  return $count;\n}\n\necho starts_one_ends(2);\n\
    echo \"\\n\";\necho starts_one_ends(3);\necho \"\\n\";\necho starts_one_ends(4);\n\
    echo \"\\n\";\necho starts_one_ends(5);\necho \"\\n\";\necho starts_one_ends(6);\n\
    echo \"\\n\";\necho starts_one_ends(7);\necho \"\\n\";\necho starts_one_ends(8);\n\
    echo \"\\n\";\necho starts_one_ends(9);\necho \"\\n\";\necho starts_one_ends(10);\n\
    echo \"\\n\";\necho starts_one_ends(11);\necho \"\\n\";\necho starts_one_ends(12);\n\
    echo \"\\n\";\necho starts_one_ends(13);\necho \"\\n\";\necho starts_one_ends(14);\n\
    echo \"\\n\";\necho starts_one_ends(15);\necho \"\\n\";\necho starts_one_ends(16);\n\
    echo \"\\n\";\necho starts_one_ends(17);\necho \"\\n\";\necho starts_one_ends(18);\n\
    echo \"\\n\";\necho starts_one_ends(19);\necho \"\\n\";\necho starts_one_ends(20);\n\
    echo \"\\n\";\necho starts_one_ends(21);\necho \"\\n\";\necho starts_one_ends(22);\n\
    echo \"\\n\";\necho starts_one_ends(23);\necho \"\\n\";\necho starts_one_ends(24);\n\
    echo \"\\n\";\necho starts_one_ends(25);\necho \"\\n\";\necho starts_one_ends(26);\n\
    echo \"\\n\";\necho starts_one_ends(27);\necho \"\\n\";\necho starts_one_ends(28);\n\
    echo \"\\n\";\necho starts_one_ends(29);\necho \"\\n\";\necho starts_one_ends(30);\n\
    echo \"\\n\";\necho starts_one_ends(31);\necho \"\\n\";\necho starts_one_ends(32);\n",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3) . PHP_EOL;",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(1);\necho starts_one_ends(2);\n\
    echo starts_one_ends(3);\necho starts_one_ends(4);\necho starts_one_ends(5);\n\
    echo starts_one_ends(6);\necho starts_one_ends(7);\necho starts_one_ends(8);\n\
    echo starts_one_ends(9);\necho starts_one_ends(10);\necho starts_one_ends(11);\n\
    echo starts_one_ends(12);\necho starts_one_ends(13);\necho starts_one_ends(14);\n\
    echo starts_one_ends(15);\necho starts_one_ends(16);\necho starts_one_ends(17);\n\
    echo starts_one_ends(18);\necho starts_one_ends(19);\necho starts_one_ends(20);\n\
    echo starts_one_ends(21);\necho starts_one_ends(22);\necho starts_one_ends(23);\n\
    echo starts_one_ends(24);\necho starts_one_ends(25);\necho starts_one_ends(26);\n\
    echo starts_one_ends(27);\necho starts_one_ends(28);\necho starts_one_ends(29);\n\
    echo starts_one_ends(30);\necho starts_one_ends(31);\necho starts_one_ends(32);\n\
    echo starts_one_ends(33);\necho starts_one_ends(34);\necho starts_one_ends(35);\n\
    echo starts_one_ends(36);\necho starts_one_ends(37);\necho starts_one_ends(38);\n\
    echo starts_one_ends(39);\necho starts_one_ends(40);\necho starts_one_ends(41);\n\
    echo starts_one_ends(42);\necho starts_one_ends(43);\necho starts_one_ends(44);\n\
    echo starts_one_ends(45);\necho starts_one_ends(46);\n", "    if ($n == 1) {\n\
    \        return 2;\n    }\n    $count = 1;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        $count *= 9;\n    }\n    return $count * 2;\n}\n\necho starts_one_ends(2);\n\
    echo starts_one_ends(3);\necho starts_one_ends(4);\necho starts_one_ends(5);\n\
    echo starts_one_ends(6);\necho starts_one_ends(7);\necho starts_one_ends(8);\n\
    echo starts_one_ends(9);\necho starts_one_ends(10);\necho starts_one_ends(11);\n\
    echo starts_one_ends(12);\necho starts_one_ends(13);\necho starts_one_ends(14);\n\
    echo starts_one_ends(15);\necho starts_one_ends(16);\necho starts_one_ends(17);\n\
    echo starts_one_ends(18);\necho starts_one_ends(19);\necho starts_one_ends(20);\n\
    echo starts_one_ends(21);\necho starts_one_ends(22);\necho starts_one_ends(23);\n\
    echo starts_one_ends(24);\necho starts_one_ends(25);\necho starts_one_ends(26);\n\
    echo starts_one_ends(27);\necho starts_one_ends(28);\necho starts_one_ends(29);\n\
    echo starts_one_ends(30);\necho starts_one_ends(31);\necho starts_one_ends(32);\n\
    echo starts_one_ends(33);\necho starts_one_ends(34);\necho starts_one_ends(35);\n\
    echo starts_one_ends(36);\necho starts_one_ends(37);\necho starts_one_ends(38);\n\
    echo starts_one_ends(39);\necho starts_one_ends(40);\necho starts_one_ends(41);\n\
    echo starts_one_ends(42);\necho starts_one_ends(43);\necho starts_one_ends(44);\n\
    echo starts_one_ends(45);\necho starts_one_ends(", "  $count = 0;\n  for ($i =\
    \ 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n  }\n  return $count;\n\
    }\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n\
    \    $dp = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n \
    \   }\n    return $dp[$n];\n}\n\necho starts_one_ends(3);", "\t$count = 0;\n\t\
    for ($i = 1; $i <= $n; $i++) {\n\t\t$count += pow(10, $i - 1);\n\t}\n\treturn\
    \ $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count\
    \ * 2;\n}\n\necho starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n\
    \    }\n    $dp = array_fill(0, $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i -\
    \ 2];\n    }\n    return $dp[$n];\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho\
    \ starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4)\
    \ . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\n\
    echo starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9)\
    \ . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;", "    $count = 0;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count * 2;\n}\n\necho starts_one_ends(4);", "    $count = 0;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return\
    \ $count;\n}\n\necho starts_one_ends(2);", "  $result = 0;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $result += pow(10, $i-1);\n  }\n  return $result;\n}\n\n\
    echo starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\necho starts_one_ends(3)\
    \ . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5) . PHP_EOL;\n\
    echo starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\necho starts_one_ends(8)\
    \ . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10) . PHP_EOL;\n\
    echo starts_one_ends(11) . PHP_EOL;\necho starts_one_ends(12) . PHP_EOL;\necho\
    \ starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14) . PHP_EOL;\necho starts_one_ends(15)\
    \ . PHP_EOL;\necho starts_one_ends(16) . PHP_EOL;\necho starts_one_ends(17) .\
    \ PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\necho starts_one_ends(19) . PHP_EOL;\n\
    echo starts_one_ends(20) . PHP_EOL;\necho starts_one_ends(21) . PHP_EOL;\necho\
    \ starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23) . PHP_EOL;\necho starts_one_ends(24)\
    \ . PHP_EOL;\necho starts_one_ends(25) . PHP_EOL;\necho starts_one_ends(26) .\
    \ PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\necho starts_one_ends(28) . PHP_EOL;\n\
    echo starts_one_ends(29) . PHP_", "    $count = 0;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\n\
    echo starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n   \
    \ $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i\
    \ - 1);\n    }\n    return $count * 2;\n}\n\necho starts_one_ends(3);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\n$n = 5;\necho starts_one_ends($n);", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(3);", "    $start_one = 0;\n  \
    \  $end_one = 0;\n    $start_one = pow(10, $n - 1);\n    $end_one = pow(10, $n\
    \ - 2);\n    return $start_one + $end_one;\n}\n\n$n = 4;\n$result = starts_one_ends($n);\n\
    echo $result;", "    if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2)\
    \ {\n        return 3;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n\
    \ - 2);\n}\necho starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n\
    }\n\necho starts_one_ends(4);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho\
    \ starts_one_ends(1) . \"\\n\";\necho starts_one_ends(2) . \"\\n\";\necho starts_one_ends(3)\
    \ . \"\\n\";\necho starts_one_ends(4) . \"\\n\";\necho starts_one_ends(5) . \"\
    \\n\";\necho starts_one_ends(6) . \"\\n\";\necho starts_one_ends(7) . \"\\n\"\
    ;\necho starts_one_ends(8) . \"\\n\";\necho starts_one_ends(9) . \"\\n\";\necho\
    \ starts_one_ends(10) . \"\\n\";\necho starts_one_ends(11) . \"\\n\";\necho starts_one_ends(12)\
    \ . \"\\n\";\necho starts_one_ends(13) . \"\\n\";\necho starts_one_ends(14) .\
    \ \"\\n\";\necho starts_one_ends(15) . \"\\n\";\necho starts_one_ends(16) . \"\
    \\n\";\necho starts_one_ends(17) . \"\\n\";\necho starts_one_ends(18) . \"\\n\"\
    ;\necho starts_one_ends(19) . \"\\n\";\necho starts_one_ends(20) . \"\\n\";\n\
    echo starts_one_ends(21) . \"\\n\";\necho starts_one_ends(22) . \"\\n\";\necho\
    \ starts_one_ends(23) . \"\\n\";\necho starts_one_ends(24) . \"\\n\";\necho starts_one_ends(25)\
    \ . \"\\n\";\necho starts_one_ends(26) . \"\\n\";\necho starts_one_ends(27) .\
    \ \"\\n\";\necho starts_one_ends(28) . \"\\n\";\necho starts_one_ends(29) . \"\
    \\n\";\necho starts_one_ends(30) . \"\\n\";\necho starts_one_ends(31) . \"\\n\"\
    ;\necho starts_one_ends(32) . \"\\n\";\necho starts_one_ends(33) . \"\\n", " \
    \   if ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return\
    \ 3;\n    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\
    \necho starts_one_ends(3);", "    if ($n == 1) return 2;\n    $dp = array_fill(0,\
    \ $n + 1, 0);\n    $dp[1] = 2;\n    $dp[2] = 3;\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return $dp[$n];\n\
    }\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2) . PHP_EOL;\n\
    echo starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\necho starts_one_ends(5)\
    \ . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7) . PHP_EOL;\n\
    echo starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\necho starts_one_ends(10)\
    \ . PHP_EOL;", "\t$count = 0;\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$count +=\
    \ pow(10, $i - 1);\n\t}\n\treturn $count;\n}\necho starts_one_ends(3);", "   \
    \ $start = 1;\n    $end = 1;\n    for ($i = 1; $i < $n; $i++) {\n        $start\
    \ *= 10;\n        $end *= 9;\n    }\n    return $start + $end;\n}\n\necho starts_one_ends(2);",
  "  $count = 0;\n  for ($i = 1; $i <= $n; $i++) {\n    $count += pow(10, $i - 1);\n\
    \  }\n  return $count;\n}\n\necho starts_one_ends(3);", "    if ($n == 1) {\n\
    \        return 2;\n    }\n    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n}\n\necho\
    \ starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);",
  "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10,\
    \ $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);", "    if\
    \ ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\necho\
    \ starts_one_ends(4);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count * 2;\n}\n\necho\
    \ starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n\necho starts_one_ends(3);",
  "    if ($n == 1) {\n        return 2;\n    }\n    $dp = array_fill(0, $n + 1, 0);\n\
    \    $dp[1] = 2;\n    $dp[2] = 3;\n    for ($i = 3; $i <= $n; $i++) {\n      \
    \  $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return $dp[$n];\n}\n\necho\
    \ starts_one_ends(3);", "    if ($n == 1) {\n        return 2;\n    }\n    $dp\
    \ = array_fill(0, $n, 0);\n    $dp[0] = 1;\n    $dp[1] = 2;\n    for ($i = 2;\
    \ $i < $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return\
    \ $dp[$n - 1] * 2;\n}\n", "    if($n == 1) {\n        return 2;\n    }\n    $dp\
    \ = array_fill(0, $n, 0);\n    $dp[0] = 1;\n    $dp[1] = 2;\n    for($i = 2; $i\
    \ < $n; $i++) {\n        $dp[$i] = $dp[$i - 1] + $dp[$i - 2];\n    }\n    return\
    \ $dp[$n - 1] * 2;\n}\n\n$n = 4;\necho starts_one_ends($n);", "    $count = 0;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n    }\n\
    \    return $count;\n}\n\necho starts_one_ends(1) . PHP_EOL;\necho starts_one_ends(2)\
    \ . PHP_EOL;\necho starts_one_ends(3) . PHP_EOL;\necho starts_one_ends(4) . PHP_EOL;\n\
    echo starts_one_ends(5) . PHP_EOL;\necho starts_one_ends(6) . PHP_EOL;\necho starts_one_ends(7)\
    \ . PHP_EOL;\necho starts_one_ends(8) . PHP_EOL;\necho starts_one_ends(9) . PHP_EOL;\n\
    echo starts_one_ends(10) . PHP_EOL;\necho starts_one_ends(11) . PHP_EOL;\necho\
    \ starts_one_ends(12) . PHP_EOL;\necho starts_one_ends(13) . PHP_EOL;\necho starts_one_ends(14)\
    \ . PHP_EOL;\necho starts_one_ends(15) . PHP_EOL;\necho starts_one_ends(16) .\
    \ PHP_EOL;\necho starts_one_ends(17) . PHP_EOL;\necho starts_one_ends(18) . PHP_EOL;\n\
    echo starts_one_ends(19) . PHP_EOL;\necho starts_one_ends(20) . PHP_EOL;\necho\
    \ starts_one_ends(21) . PHP_EOL;\necho starts_one_ends(22) . PHP_EOL;\necho starts_one_ends(23)\
    \ . PHP_EOL;\necho starts_one_ends(24) . PHP_EOL;\necho starts_one_ends(25) .\
    \ PHP_EOL;\necho starts_one_ends(26) . PHP_EOL;\necho starts_one_ends(27) . PHP_EOL;\n\
    echo starts_one_ends(28) . PHP_EOL;\necho starts_one_ends(29) . PHP_", "    $count\
    \ = 0;\n    for ($i = 1; $i <= $n; $i++) {\n        $count += pow(10, $i - 1);\n\
    \    }\n    return $count;\n}\n\n$n = 2;\necho starts_one_ends($n);", "    if\
    \ ($n == 1) {\n        return 2;\n    }\n    if ($n == 2) {\n        return 3;\n\
    \    }\n    return starts_one_ends($n - 1) + starts_one_ends($n - 2);\n}\n\necho\
    \ starts_one_ends(3);", "    $count = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $count += pow(10, $i - 1);\n    }\n    return $count;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
